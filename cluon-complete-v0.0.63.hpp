





<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
  <link rel="dns-prefetch" href="https://assets-cdn.github.com">
  <link rel="dns-prefetch" href="https://avatars0.githubusercontent.com">
  <link rel="dns-prefetch" href="https://avatars1.githubusercontent.com">
  <link rel="dns-prefetch" href="https://avatars2.githubusercontent.com">
  <link rel="dns-prefetch" href="https://avatars3.githubusercontent.com">
  <link rel="dns-prefetch" href="https://github-cloud.s3.amazonaws.com">
  <link rel="dns-prefetch" href="https://user-images.githubusercontent.com/">



  <link crossorigin="anonymous" media="all" rel="stylesheet" href="https://assets-cdn.github.com/assets/frameworks-8f281eb0a8d2308ceb36e714ba3c3aec.css" />
  <link crossorigin="anonymous" media="all" rel="stylesheet" href="https://assets-cdn.github.com/assets/github-a698da0d53574b056d3c79ac732d4a70.css" />
  
  
  <link crossorigin="anonymous" media="all" rel="stylesheet" href="https://assets-cdn.github.com/assets/site-83dc1f7ebc9c7461fe1eab799b56c4c4.css" />
  

  <meta name="viewport" content="width=device-width">
  
  <title>libcluon/cluon-complete-v0.0.63.hpp at gh-pages · chrberger/libcluon · GitHub</title>
    <meta name="description" content="GitHub is where people build software. More than 27 million people use GitHub to discover, fork, and contribute to over 80 million projects.">
  <link rel="search" type="application/opensearchdescription+xml" href="/opensearch.xml" title="GitHub">
  <link rel="fluid-icon" href="https://github.com/fluidicon.png" title="GitHub">
  <meta property="fb:app_id" content="1401488693436528">

    
    <meta property="og:image" content="https://avatars2.githubusercontent.com/u/2297162?s=400&amp;v=4" /><meta property="og:site_name" content="GitHub" /><meta property="og:type" content="object" /><meta property="og:title" content="chrberger/libcluon" /><meta property="og:url" content="https://github.com/chrberger/libcluon" /><meta property="og:description" content="libcluon is a small and efficient library written in modern C++ to glue distributed software components - in a clever way - simply: cluon." />

  <link rel="assets" href="https://assets-cdn.github.com/">
  
  <meta name="pjax-timeout" content="1000">
  
  <meta name="request-id" content="A1A2:426D:287C9E:45BF51:5AC5B4C6" data-pjax-transient>


  

  <meta name="selected-link" value="repo_source" data-pjax-transient>

    <meta name="google-site-verification" content="KT5gs8h0wvaagLKAVWq8bbeNwnZZK1r1XQysX3xurLU">
  <meta name="google-site-verification" content="ZzhVyEFwb7w3e0-uOTltm8Jsck2F5StVihD0exw2fsA">
  <meta name="google-site-verification" content="GXs5KoUUkNCoaAZn7wPN-t01Pywp9M3sEjnt_3_ZWPc">
    <meta name="google-analytics" content="UA-3769691-2">

<meta name="octolytics-host" content="collector.githubapp.com" /><meta name="octolytics-app-id" content="github" /><meta name="octolytics-event-url" content="https://collector.githubapp.com/github-external/browser_event" /><meta name="octolytics-dimension-request_id" content="A1A2:426D:287C9E:45BF51:5AC5B4C6" /><meta name="octolytics-dimension-region_edge" content="iad" /><meta name="octolytics-dimension-region_render" content="iad" />
<meta name="hydro-events-url" content="https://github.com/hydro_browser_events" />
<meta name="analytics-location" content="/&lt;user-name&gt;/&lt;repo-name&gt;/blob/show" data-pjax-transient="true" />




  <meta class="js-ga-set" name="dimension1" content="Logged Out">


  

      <meta name="hostname" content="github.com">
    <meta name="user-login" content="">

      <meta name="expected-hostname" content="github.com">
    <meta name="js-proxy-site-detection-payload" content="MjU1ZDcxMjJkZDMyNTA2MmY4MDMyOTQwMjk0YjI5ODE1MDkwMzcwZmRhZTVmOWQ2NmViMDYyYWJjNzA4N2VjNHx7InJlbW90ZV9hZGRyZXNzIjoiODMuMjA5LjkwLjU5IiwicmVxdWVzdF9pZCI6IkExQTI6NDI2RDoyODdDOUU6NDVCRjUxOjVBQzVCNEM2IiwidGltZXN0YW1wIjoxNTIyOTA2MzExLCJob3N0IjoiZ2l0aHViLmNvbSJ9">

    <meta name="enabled-features" content="UNIVERSE_BANNER,FREE_TRIALS,MARKETPLACE_INSIGHTS,MARKETPLACE_SELF_SERVE,MARKETPLACE_INSIGHTS_CONVERSION_PERCENTAGES">

  <meta name="html-safe-nonce" content="d06946af9c1a4da22deb95e7cf0653392cbed0dd">

  <meta http-equiv="x-pjax-version" content="7f58ae9fa4c3acffa835d259d3347584">
  

      <link href="https://github.com/chrberger/libcluon/commits/gh-pages.atom" rel="alternate" title="Recent Commits to libcluon:gh-pages" type="application/atom+xml">

  <meta name="description" content="libcluon is a small and efficient library written in modern C++ to glue distributed software components - in a clever way - simply: cluon.">
  <meta name="go-import" content="github.com/chrberger/libcluon git https://github.com/chrberger/libcluon.git">

  <meta name="octolytics-dimension-user_id" content="2297162" /><meta name="octolytics-dimension-user_login" content="chrberger" /><meta name="octolytics-dimension-repository_id" content="114693072" /><meta name="octolytics-dimension-repository_nwo" content="chrberger/libcluon" /><meta name="octolytics-dimension-repository_public" content="true" /><meta name="octolytics-dimension-repository_is_fork" content="false" /><meta name="octolytics-dimension-repository_network_root_id" content="114693072" /><meta name="octolytics-dimension-repository_network_root_nwo" content="chrberger/libcluon" /><meta name="octolytics-dimension-repository_explore_github_marketplace_ci_cta_shown" content="false" />


    <link rel="canonical" href="https://github.com/chrberger/libcluon/blob/gh-pages/headeronly/cluon-complete-v0.0.63.hpp" data-pjax-transient>


  <meta name="browser-stats-url" content="https://api.github.com/_private/browser/stats">

  <meta name="browser-errors-url" content="https://api.github.com/_private/browser/errors">

  <link rel="mask-icon" href="https://assets-cdn.github.com/pinned-octocat.svg" color="#000000">
  <link rel="icon" type="image/x-icon" class="js-site-favicon" href="https://assets-cdn.github.com/favicon.ico">

<meta name="theme-color" content="#1e2327">



<link rel="manifest" href="/manifest.json" crossOrigin="use-credentials">

  </head>

  <body class="logged-out env-production page-blob">
    

  <div class="position-relative js-header-wrapper ">
    <a href="#start-of-content" tabindex="1" class="px-2 py-4bg-blue text-white show-on-focus js-skip-to-content">Skip to content</a>
    <div id="js-pjax-loader-bar" class="pjax-loader-bar"><div class="progress"></div></div>

    
    
    



        <header class="Header header-logged-out  position-relative f4 py-3" role="banner">
  <div class="container-lg d-flex px-3">
    <div class="d-flex flex-justify-between flex-items-center">
      <a class="header-logo-invertocat my-0" href="https://github.com/" aria-label="Homepage" data-ga-click="(Logged out) Header, go to homepage, icon:logo-wordmark">
        <svg height="32" class="octicon octicon-mark-github" viewBox="0 0 16 16" version="1.1" width="32" aria-hidden="true"><path fill-rule="evenodd" d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0 0 16 8c0-4.42-3.58-8-8-8z"/></svg>
      </a>

    </div>

    <div class="HeaderMenu HeaderMenu--bright d-flex flex-justify-between flex-auto">
        <nav class="mt-0">
          <ul class="d-flex list-style-none">
              <li class="ml-2">
                <a class="js-selected-navigation-item HeaderNavlink px-0 py-2 m-0" data-ga-click="Header, click, Nav menu - item:features" data-selected-links="/features /features/project-management /features/code-review /features/project-management /features/integrations /features" href="/features">
                  Features
</a>              </li>
              <li class="ml-4">
                <a class="js-selected-navigation-item HeaderNavlink px-0 py-2 m-0" data-ga-click="Header, click, Nav menu - item:business" data-selected-links="/business /business/security /business/customers /business" href="/business">
                  Business
</a>              </li>

              <li class="ml-4">
                <a class="js-selected-navigation-item HeaderNavlink px-0 py-2 m-0" data-ga-click="Header, click, Nav menu - item:explore" data-selected-links="/explore /trending /trending/developers /integrations /integrations/feature/code /integrations/feature/collaborate /integrations/feature/ship showcases showcases_search showcases_landing /explore" href="/explore">
                  Explore
</a>              </li>

              <li class="ml-4">
                    <a class="js-selected-navigation-item HeaderNavlink px-0 py-2 m-0" data-ga-click="Header, click, Nav menu - item:marketplace" data-selected-links=" /marketplace" href="/marketplace">
                      Marketplace
</a>              </li>
              <li class="ml-4">
                <a class="js-selected-navigation-item HeaderNavlink px-0 py-2 m-0" data-ga-click="Header, click, Nav menu - item:pricing" data-selected-links="/pricing /pricing/developer /pricing/team /pricing/business-hosted /pricing/business-enterprise /pricing" href="/pricing">
                  Pricing
</a>              </li>
          </ul>
        </nav>

      <div class="d-flex">
          <div class="d-lg-flex flex-items-center mr-3">
            <div class="header-search scoped-search site-scoped-search js-site-search" role="search">
  <!-- '"` --><!-- </textarea></xmp> --></option></form><form class="js-site-search-form" data-scoped-search-url="/chrberger/libcluon/search" data-unscoped-search-url="/search" action="/chrberger/libcluon/search" accept-charset="UTF-8" method="get"><input name="utf8" type="hidden" value="&#x2713;" />
    <label class="form-control header-search-wrapper  js-chromeless-input-container">
        <a class="header-search-scope no-underline" href="/chrberger/libcluon/blob/gh-pages/headeronly/cluon-complete-v0.0.63.hpp">This repository</a>
      <input type="text"
        class="form-control header-search-input  js-site-search-focus js-site-search-field is-clearable"
        data-hotkey="s,/"
        name="q"
        value=""
        placeholder="Search"
        aria-label="Search this repository"
        data-unscoped-placeholder="Search GitHub"
        data-scoped-placeholder="Search"
        autocapitalize="off"
        >
        <input type="hidden" class="js-site-search-type-field" name="type" >
    </label>
</form></div>

          </div>

        <span class="d-inline-block">
            <div class="HeaderNavlink px-0 py-2 m-0">
              <a class="text-bold text-white no-underline" href="/login?return_to=%2Fchrberger%2Flibcluon%2Fblob%2Fgh-pages%2Fheaderonly%2Fcluon-complete-v0.0.63.hpp" data-ga-click="(Logged out) Header, clicked Sign in, text:sign-in">Sign in</a>
                <span class="text-gray">or</span>
                <a class="text-bold text-white no-underline" href="/join?source=header-repo" data-ga-click="(Logged out) Header, clicked Sign up, text:sign-up">Sign up</a>
            </div>
        </span>
      </div>
    </div>
  </div>
</header>

  </div>

  <div id="start-of-content" class="show-on-focus"></div>

    <div id="js-flash-container">
</div>



  <div role="main" class="application-main ">
        <div itemscope itemtype="http://schema.org/SoftwareSourceCode" class="">
    <div id="js-repo-pjax-container" data-pjax-container >
      







  <div class="pagehead repohead instapaper_ignore readability-menu experiment-repo-nav  ">
    <div class="repohead-details-container clearfix container">

      <ul class="pagehead-actions">
  <li>
      <a href="/login?return_to=%2Fchrberger%2Flibcluon"
    class="btn btn-sm btn-with-count tooltipped tooltipped-n"
    aria-label="You must be signed in to watch a repository" rel="nofollow">
    <svg class="octicon octicon-eye" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M8.06 2C3 2 0 8 0 8s3 6 8.06 6C13 14 16 8 16 8s-3-6-7.94-6zM8 12c-2.2 0-4-1.78-4-4 0-2.2 1.8-4 4-4 2.22 0 4 1.8 4 4 0 2.22-1.78 4-4 4zm2-4c0 1.11-.89 2-2 2-1.11 0-2-.89-2-2 0-1.11.89-2 2-2 1.11 0 2 .89 2 2z"/></svg>
    Watch
  </a>
  <a class="social-count" href="/chrberger/libcluon/watchers"
     aria-label="1 user is watching this repository">
    1
  </a>

  </li>

  <li>
      <a href="/login?return_to=%2Fchrberger%2Flibcluon"
    class="btn btn-sm btn-with-count tooltipped tooltipped-n"
    aria-label="You must be signed in to star a repository" rel="nofollow">
    <svg class="octicon octicon-star" viewBox="0 0 14 16" version="1.1" width="14" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M14 6l-4.9-.64L7 1 4.9 5.36 0 6l3.6 3.26L2.67 14 7 11.67 11.33 14l-.93-4.74z"/></svg>
    Star
  </a>

    <a class="social-count js-social-count" href="/chrberger/libcluon/stargazers"
      aria-label="3 users starred this repository">
      3
    </a>

  </li>

  <li>
      <a href="/login?return_to=%2Fchrberger%2Flibcluon"
        class="btn btn-sm btn-with-count tooltipped tooltipped-n"
        aria-label="You must be signed in to fork a repository" rel="nofollow">
        <svg class="octicon octicon-repo-forked" viewBox="0 0 10 16" version="1.1" width="10" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M8 1a1.993 1.993 0 0 0-1 3.72V6L5 8 3 6V4.72A1.993 1.993 0 0 0 2 1a1.993 1.993 0 0 0-1 3.72V6.5l3 3v1.78A1.993 1.993 0 0 0 5 15a1.993 1.993 0 0 0 1-3.72V9.5l3-3V4.72A1.993 1.993 0 0 0 8 1zM2 4.2C1.34 4.2.8 3.65.8 3c0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2zm3 10c-.66 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2zm3-10c-.66 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2z"/></svg>
        Fork
      </a>

    <a href="/chrberger/libcluon/network" class="social-count"
       aria-label="1 user forked this repository">
      1
    </a>
  </li>
</ul>

      <h1 class="public ">
  <svg class="octicon octicon-repo" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9H3V8h1v1zm0-3H3v1h1V6zm0-2H3v1h1V4zm0-2H3v1h1V2zm8-1v12c0 .55-.45 1-1 1H6v2l-1.5-1.5L3 16v-2H1c-.55 0-1-.45-1-1V1c0-.55.45-1 1-1h10c.55 0 1 .45 1 1zm-1 10H1v2h2v-1h3v1h5v-2zm0-10H2v9h9V1z"/></svg>
  <span class="author" itemprop="author"><a class="url fn" rel="author" href="/chrberger">chrberger</a></span><!--
--><span class="path-divider">/</span><!--
--><strong itemprop="name"><a data-pjax="#js-repo-pjax-container" href="/chrberger/libcluon">libcluon</a></strong>

</h1>

    </div>
    
<nav class="reponav js-repo-nav js-sidenav-container-pjax container"
     itemscope
     itemtype="http://schema.org/BreadcrumbList"
     role="navigation"
     data-pjax="#js-repo-pjax-container">

  <span itemscope itemtype="http://schema.org/ListItem" itemprop="itemListElement">
    <a class="js-selected-navigation-item selected reponav-item" itemprop="url" data-hotkey="g c" data-selected-links="repo_source repo_downloads repo_commits repo_releases repo_tags repo_branches repo_packages /chrberger/libcluon/tree/gh-pages" href="/chrberger/libcluon/tree/gh-pages">
      <svg class="octicon octicon-code" viewBox="0 0 14 16" version="1.1" width="14" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M9.5 3L8 4.5 11.5 8 8 11.5 9.5 13 14 8 9.5 3zm-5 0L0 8l4.5 5L6 11.5 2.5 8 6 4.5 4.5 3z"/></svg>
      <span itemprop="name">Code</span>
      <meta itemprop="position" content="1">
</a>  </span>

    <span itemscope itemtype="http://schema.org/ListItem" itemprop="itemListElement">
      <a itemprop="url" data-hotkey="g i" class="js-selected-navigation-item reponav-item" data-selected-links="repo_issues repo_labels repo_milestones /chrberger/libcluon/issues" href="/chrberger/libcluon/issues">
        <svg class="octicon octicon-issue-opened" viewBox="0 0 14 16" version="1.1" width="14" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"/></svg>
        <span itemprop="name">Issues</span>
        <span class="Counter">0</span>
        <meta itemprop="position" content="2">
</a>    </span>

  <span itemscope itemtype="http://schema.org/ListItem" itemprop="itemListElement">
    <a data-hotkey="g p" itemprop="url" class="js-selected-navigation-item reponav-item" data-selected-links="repo_pulls checks /chrberger/libcluon/pulls" href="/chrberger/libcluon/pulls">
      <svg class="octicon octicon-git-pull-request" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M11 11.28V5c-.03-.78-.34-1.47-.94-2.06C9.46 2.35 8.78 2.03 8 2H7V0L4 3l3 3V4h1c.27.02.48.11.69.31.21.2.3.42.31.69v6.28A1.993 1.993 0 0 0 10 15a1.993 1.993 0 0 0 1-3.72zm-1 2.92c-.66 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2zM4 3c0-1.11-.89-2-2-2a1.993 1.993 0 0 0-1 3.72v6.56A1.993 1.993 0 0 0 2 15a1.993 1.993 0 0 0 1-3.72V4.72c.59-.34 1-.98 1-1.72zm-.8 10c0 .66-.55 1.2-1.2 1.2-.65 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2zM2 4.2C1.34 4.2.8 3.65.8 3c0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2z"/></svg>
      <span itemprop="name">Pull requests</span>
      <span class="Counter">0</span>
      <meta itemprop="position" content="3">
</a>  </span>

    <a data-hotkey="g b" class="js-selected-navigation-item reponav-item" data-selected-links="repo_projects new_repo_project repo_project /chrberger/libcluon/projects" href="/chrberger/libcluon/projects">
      <svg class="octicon octicon-project" viewBox="0 0 15 16" version="1.1" width="15" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M10 12h3V2h-3v10zm-4-2h3V2H6v8zm-4 4h3V2H2v12zm-1 1h13V1H1v14zM14 0H1a1 1 0 0 0-1 1v14a1 1 0 0 0 1 1h13a1 1 0 0 0 1-1V1a1 1 0 0 0-1-1z"/></svg>
      Projects
      <span class="Counter" >0</span>
</a>


  <a class="js-selected-navigation-item reponav-item" data-selected-links="repo_graphs repo_contributors dependency_graph pulse /chrberger/libcluon/pulse" href="/chrberger/libcluon/pulse">
    <svg class="octicon octicon-graph" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M16 14v1H0V0h1v14h15zM5 13H3V8h2v5zm4 0H7V3h2v10zm4 0h-2V6h2v7z"/></svg>
    Insights
</a>

</nav>


  </div>

<div class="container new-discussion-timeline experiment-repo-nav  ">
  <div class="repository-content ">

    
  <a class="d-none js-permalink-shortcut" data-hotkey="y" href="/chrberger/libcluon/blob/c84d2d1792cd5c22499bd76abd5b68c061bd14a8/headeronly/cluon-complete-v0.0.63.hpp">Permalink</a>

  <!-- blob contrib key: blob_contributors:v21:5a700a9106ba3a532d10f835cf37e2be -->

  <div class="file-navigation">
    
<div class="select-menu branch-select-menu js-menu-container js-select-menu float-left">
  <button class=" btn btn-sm select-menu-button js-menu-target css-truncate" data-hotkey="w"
    
    type="button" aria-label="Switch branches or tags" aria-expanded="false" aria-haspopup="true">
      <i>Branch:</i>
      <span class="js-select-button css-truncate-target">gh-pages</span>
  </button>

  <div class="select-menu-modal-holder js-menu-content js-navigation-container" data-pjax>

    <div class="select-menu-modal">
      <div class="select-menu-header">
        <svg class="octicon octicon-x js-menu-close" role="img" aria-label="Close" viewBox="0 0 12 16" version="1.1" width="12" height="16"><path fill-rule="evenodd" d="M7.48 8l3.75 3.75-1.48 1.48L6 9.48l-3.75 3.75-1.48-1.48L4.52 8 .77 4.25l1.48-1.48L6 6.52l3.75-3.75 1.48 1.48z"/></svg>
        <span class="select-menu-title">Switch branches/tags</span>
      </div>

      <div class="select-menu-filters">
        <div class="select-menu-text-filter">
          <input type="text" aria-label="Filter branches/tags" id="context-commitish-filter-field" class="form-control js-filterable-field js-navigation-enable" placeholder="Filter branches/tags">
        </div>
        <div class="select-menu-tabs">
          <ul>
            <li class="select-menu-tab">
              <a href="#" data-tab-filter="branches" data-filter-placeholder="Filter branches/tags" class="js-select-menu-tab" role="tab">Branches</a>
            </li>
            <li class="select-menu-tab">
              <a href="#" data-tab-filter="tags" data-filter-placeholder="Find a tag…" class="js-select-menu-tab" role="tab">Tags</a>
            </li>
          </ul>
        </div>
      </div>

      <div class="select-menu-list select-menu-tab-bucket js-select-menu-tab-bucket" data-tab-filter="branches" role="menu">

        <div data-filterable-for="context-commitish-filter-field" data-filterable-type="substring">


            <a class="select-menu-item js-navigation-item js-navigation-open "
               href="/chrberger/libcluon/blob/2018Q1.feature.tcp/headeronly/cluon-complete-v0.0.63.hpp"
               data-name="2018Q1.feature.tcp"
               data-skip-pjax="true"
               rel="nofollow">
              <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target js-select-menu-filter-text">
                2018Q1.feature.tcp
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
               href="/chrberger/libcluon/blob/2018Q1.refactoring.cluon-msc/headeronly/cluon-complete-v0.0.63.hpp"
               data-name="2018Q1.refactoring.cluon-msc"
               data-skip-pjax="true"
               rel="nofollow">
              <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target js-select-menu-filter-text">
                2018Q1.refactoring.cluon-msc
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
               href="/chrberger/libcluon/blob/2018Q2.feature.od4session/headeronly/cluon-complete-v0.0.63.hpp"
               data-name="2018Q2.feature.od4session"
               data-skip-pjax="true"
               rel="nofollow">
              <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target js-select-menu-filter-text">
                2018Q2.feature.od4session
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
               href="/chrberger/libcluon/blob/coverity_scan/headeronly/cluon-complete-v0.0.63.hpp"
               data-name="coverity_scan"
               data-skip-pjax="true"
               rel="nofollow">
              <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target js-select-menu-filter-text">
                coverity_scan
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open selected"
               href="/chrberger/libcluon/blob/gh-pages/headeronly/cluon-complete-v0.0.63.hpp"
               data-name="gh-pages"
               data-skip-pjax="true"
               rel="nofollow">
              <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target js-select-menu-filter-text">
                gh-pages
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
               href="/chrberger/libcluon/blob/master/headeronly/cluon-complete-v0.0.63.hpp"
               data-name="master"
               data-skip-pjax="true"
               rel="nofollow">
              <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target js-select-menu-filter-text">
                master
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
               href="/chrberger/libcluon/blob/pre-release/headeronly/cluon-complete-v0.0.63.hpp"
               data-name="pre-release"
               data-skip-pjax="true"
               rel="nofollow">
              <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target js-select-menu-filter-text">
                pre-release
              </span>
            </a>
        </div>

          <div class="select-menu-no-results">Nothing to show</div>
      </div>

      <div class="select-menu-list select-menu-tab-bucket js-select-menu-tab-bucket" data-tab-filter="tags">
        <div data-filterable-for="context-commitish-filter-field" data-filterable-type="substring">


            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/chrberger/libcluon/tree/v0.0.63/headeronly/cluon-complete-v0.0.63.hpp"
              data-name="v0.0.63"
              data-skip-pjax="true"
              rel="nofollow">
              <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="v0.0.63">
                v0.0.63
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/chrberger/libcluon/tree/v0.0.62/headeronly/cluon-complete-v0.0.63.hpp"
              data-name="v0.0.62"
              data-skip-pjax="true"
              rel="nofollow">
              <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="v0.0.62">
                v0.0.62
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/chrberger/libcluon/tree/v0.0.61/headeronly/cluon-complete-v0.0.63.hpp"
              data-name="v0.0.61"
              data-skip-pjax="true"
              rel="nofollow">
              <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="v0.0.61">
                v0.0.61
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/chrberger/libcluon/tree/v0.0.60/headeronly/cluon-complete-v0.0.63.hpp"
              data-name="v0.0.60"
              data-skip-pjax="true"
              rel="nofollow">
              <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="v0.0.60">
                v0.0.60
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/chrberger/libcluon/tree/v0.0.59/headeronly/cluon-complete-v0.0.63.hpp"
              data-name="v0.0.59"
              data-skip-pjax="true"
              rel="nofollow">
              <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="v0.0.59">
                v0.0.59
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/chrberger/libcluon/tree/v0.0.58/headeronly/cluon-complete-v0.0.63.hpp"
              data-name="v0.0.58"
              data-skip-pjax="true"
              rel="nofollow">
              <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="v0.0.58">
                v0.0.58
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/chrberger/libcluon/tree/v0.0.57/headeronly/cluon-complete-v0.0.63.hpp"
              data-name="v0.0.57"
              data-skip-pjax="true"
              rel="nofollow">
              <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="v0.0.57">
                v0.0.57
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/chrberger/libcluon/tree/v0.0.56/headeronly/cluon-complete-v0.0.63.hpp"
              data-name="v0.0.56"
              data-skip-pjax="true"
              rel="nofollow">
              <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="v0.0.56">
                v0.0.56
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/chrberger/libcluon/tree/v0.0.55/headeronly/cluon-complete-v0.0.63.hpp"
              data-name="v0.0.55"
              data-skip-pjax="true"
              rel="nofollow">
              <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="v0.0.55">
                v0.0.55
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/chrberger/libcluon/tree/v0.0.54/headeronly/cluon-complete-v0.0.63.hpp"
              data-name="v0.0.54"
              data-skip-pjax="true"
              rel="nofollow">
              <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="v0.0.54">
                v0.0.54
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/chrberger/libcluon/tree/v0.0.53/headeronly/cluon-complete-v0.0.63.hpp"
              data-name="v0.0.53"
              data-skip-pjax="true"
              rel="nofollow">
              <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="v0.0.53">
                v0.0.53
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/chrberger/libcluon/tree/v0.0.52/headeronly/cluon-complete-v0.0.63.hpp"
              data-name="v0.0.52"
              data-skip-pjax="true"
              rel="nofollow">
              <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="v0.0.52">
                v0.0.52
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/chrberger/libcluon/tree/v0.0.51/headeronly/cluon-complete-v0.0.63.hpp"
              data-name="v0.0.51"
              data-skip-pjax="true"
              rel="nofollow">
              <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="v0.0.51">
                v0.0.51
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/chrberger/libcluon/tree/v0.0.50/headeronly/cluon-complete-v0.0.63.hpp"
              data-name="v0.0.50"
              data-skip-pjax="true"
              rel="nofollow">
              <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="v0.0.50">
                v0.0.50
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/chrberger/libcluon/tree/v0.0.49/headeronly/cluon-complete-v0.0.63.hpp"
              data-name="v0.0.49"
              data-skip-pjax="true"
              rel="nofollow">
              <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="v0.0.49">
                v0.0.49
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/chrberger/libcluon/tree/v0.0.48/headeronly/cluon-complete-v0.0.63.hpp"
              data-name="v0.0.48"
              data-skip-pjax="true"
              rel="nofollow">
              <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="v0.0.48">
                v0.0.48
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/chrberger/libcluon/tree/v0.0.47/headeronly/cluon-complete-v0.0.63.hpp"
              data-name="v0.0.47"
              data-skip-pjax="true"
              rel="nofollow">
              <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="v0.0.47">
                v0.0.47
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/chrberger/libcluon/tree/v0.0.46/headeronly/cluon-complete-v0.0.63.hpp"
              data-name="v0.0.46"
              data-skip-pjax="true"
              rel="nofollow">
              <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="v0.0.46">
                v0.0.46
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/chrberger/libcluon/tree/v0.0.45/headeronly/cluon-complete-v0.0.63.hpp"
              data-name="v0.0.45"
              data-skip-pjax="true"
              rel="nofollow">
              <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="v0.0.45">
                v0.0.45
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/chrberger/libcluon/tree/v0.0.44/headeronly/cluon-complete-v0.0.63.hpp"
              data-name="v0.0.44"
              data-skip-pjax="true"
              rel="nofollow">
              <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="v0.0.44">
                v0.0.44
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/chrberger/libcluon/tree/v0.0.43/headeronly/cluon-complete-v0.0.63.hpp"
              data-name="v0.0.43"
              data-skip-pjax="true"
              rel="nofollow">
              <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="v0.0.43">
                v0.0.43
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/chrberger/libcluon/tree/v0.0.42/headeronly/cluon-complete-v0.0.63.hpp"
              data-name="v0.0.42"
              data-skip-pjax="true"
              rel="nofollow">
              <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="v0.0.42">
                v0.0.42
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/chrberger/libcluon/tree/v0.0.41/headeronly/cluon-complete-v0.0.63.hpp"
              data-name="v0.0.41"
              data-skip-pjax="true"
              rel="nofollow">
              <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="v0.0.41">
                v0.0.41
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/chrberger/libcluon/tree/v0.0.40/headeronly/cluon-complete-v0.0.63.hpp"
              data-name="v0.0.40"
              data-skip-pjax="true"
              rel="nofollow">
              <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="v0.0.40">
                v0.0.40
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/chrberger/libcluon/tree/v0.0.39/headeronly/cluon-complete-v0.0.63.hpp"
              data-name="v0.0.39"
              data-skip-pjax="true"
              rel="nofollow">
              <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="v0.0.39">
                v0.0.39
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/chrberger/libcluon/tree/v0.0.38/headeronly/cluon-complete-v0.0.63.hpp"
              data-name="v0.0.38"
              data-skip-pjax="true"
              rel="nofollow">
              <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="v0.0.38">
                v0.0.38
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/chrberger/libcluon/tree/v0.0.37/headeronly/cluon-complete-v0.0.63.hpp"
              data-name="v0.0.37"
              data-skip-pjax="true"
              rel="nofollow">
              <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="v0.0.37">
                v0.0.37
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/chrberger/libcluon/tree/v0.0.36/headeronly/cluon-complete-v0.0.63.hpp"
              data-name="v0.0.36"
              data-skip-pjax="true"
              rel="nofollow">
              <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="v0.0.36">
                v0.0.36
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/chrberger/libcluon/tree/v0.0.35/headeronly/cluon-complete-v0.0.63.hpp"
              data-name="v0.0.35"
              data-skip-pjax="true"
              rel="nofollow">
              <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="v0.0.35">
                v0.0.35
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/chrberger/libcluon/tree/v0.0.34/headeronly/cluon-complete-v0.0.63.hpp"
              data-name="v0.0.34"
              data-skip-pjax="true"
              rel="nofollow">
              <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="v0.0.34">
                v0.0.34
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/chrberger/libcluon/tree/v0.0.33/headeronly/cluon-complete-v0.0.63.hpp"
              data-name="v0.0.33"
              data-skip-pjax="true"
              rel="nofollow">
              <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="v0.0.33">
                v0.0.33
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/chrberger/libcluon/tree/v0.0.32/headeronly/cluon-complete-v0.0.63.hpp"
              data-name="v0.0.32"
              data-skip-pjax="true"
              rel="nofollow">
              <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="v0.0.32">
                v0.0.32
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/chrberger/libcluon/tree/v0.0.31/headeronly/cluon-complete-v0.0.63.hpp"
              data-name="v0.0.31"
              data-skip-pjax="true"
              rel="nofollow">
              <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="v0.0.31">
                v0.0.31
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/chrberger/libcluon/tree/v0.0.30/headeronly/cluon-complete-v0.0.63.hpp"
              data-name="v0.0.30"
              data-skip-pjax="true"
              rel="nofollow">
              <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="v0.0.30">
                v0.0.30
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/chrberger/libcluon/tree/v0.0.29/headeronly/cluon-complete-v0.0.63.hpp"
              data-name="v0.0.29"
              data-skip-pjax="true"
              rel="nofollow">
              <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="v0.0.29">
                v0.0.29
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/chrberger/libcluon/tree/v0.0.28/headeronly/cluon-complete-v0.0.63.hpp"
              data-name="v0.0.28"
              data-skip-pjax="true"
              rel="nofollow">
              <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="v0.0.28">
                v0.0.28
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/chrberger/libcluon/tree/v0.0.27/headeronly/cluon-complete-v0.0.63.hpp"
              data-name="v0.0.27"
              data-skip-pjax="true"
              rel="nofollow">
              <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="v0.0.27">
                v0.0.27
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/chrberger/libcluon/tree/v0.0.26/headeronly/cluon-complete-v0.0.63.hpp"
              data-name="v0.0.26"
              data-skip-pjax="true"
              rel="nofollow">
              <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="v0.0.26">
                v0.0.26
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/chrberger/libcluon/tree/v0.0.25/headeronly/cluon-complete-v0.0.63.hpp"
              data-name="v0.0.25"
              data-skip-pjax="true"
              rel="nofollow">
              <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="v0.0.25">
                v0.0.25
              </span>
            </a>
            <a class="select-menu-item js-navigation-item js-navigation-open "
              href="/chrberger/libcluon/tree/v0.0.24/headeronly/cluon-complete-v0.0.63.hpp"
              data-name="v0.0.24"
              data-skip-pjax="true"
              rel="nofollow">
              <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5z"/></svg>
              <span class="select-menu-item-text css-truncate-target" title="v0.0.24">
                v0.0.24
              </span>
            </a>
        </div>

        <div class="select-menu-no-results">Nothing to show</div>
      </div>

    </div>
  </div>
</div>

    <div class="BtnGroup float-right">
      <a href="/chrberger/libcluon/find/gh-pages"
            class="js-pjax-capture-input btn btn-sm BtnGroup-item"
            data-pjax
            data-hotkey="t">
        Find file
      </a>
      <clipboard-copy
            for="blob-path"
            aria-label="Copy file path to clipboard"
            class="btn btn-sm BtnGroup-item tooltipped tooltipped-s"
            copied-label="Copied!">
        Copy path
      </clipboard-copy>
    </div>
    <div id="blob-path" class="breadcrumb">
      <span class="repo-root js-repo-root"><span class="js-path-segment"><a data-pjax="true" href="/chrberger/libcluon/tree/gh-pages"><span>libcluon</span></a></span></span><span class="separator">/</span><span class="js-path-segment"><a data-pjax="true" href="/chrberger/libcluon/tree/gh-pages/headeronly"><span>headeronly</span></a></span><span class="separator">/</span><strong class="final-path">cluon-complete-v0.0.63.hpp</strong>
    </div>
  </div>


  <include-fragment src="/chrberger/libcluon/contributors/gh-pages/headeronly/cluon-complete-v0.0.63.hpp" class="commit-tease">
    <div>
      Fetching contributors&hellip;
    </div>

    <div class="commit-tease-contributors">
      <img alt="" class="loader-loading float-left" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32-EAF2F5.gif" width="16" height="16" />
      <span class="loader-error">Cannot retrieve contributors at this time</span>
    </div>
</include-fragment>

  <div class="file">
    <div class="file-header">
  <div class="file-actions">

    <div class="BtnGroup">
      <a id="raw-url" class="btn btn-sm BtnGroup-item" href="/chrberger/libcluon/raw/gh-pages/headeronly/cluon-complete-v0.0.63.hpp">Raw</a>
        <a class="btn btn-sm js-update-url-with-hash BtnGroup-item" data-hotkey="b" href="/chrberger/libcluon/blame/gh-pages/headeronly/cluon-complete-v0.0.63.hpp">Blame</a>
      <a rel="nofollow" class="btn btn-sm BtnGroup-item" href="/chrberger/libcluon/commits/gh-pages/headeronly/cluon-complete-v0.0.63.hpp">History</a>
    </div>


        <button type="button" class="btn-octicon disabled tooltipped tooltipped-nw"
          aria-label="You must be signed in to make or propose changes">
          <svg class="octicon octicon-pencil" viewBox="0 0 14 16" version="1.1" width="14" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M0 12v3h3l8-8-3-3-8 8zm3 2H1v-2h1v1h1v1zm10.3-9.3L12 6 9 3l1.3-1.3a.996.996 0 0 1 1.41 0l1.59 1.59c.39.39.39 1.02 0 1.41z"/></svg>
        </button>
        <button type="button" class="btn-octicon btn-octicon-danger disabled tooltipped tooltipped-nw"
          aria-label="You must be signed in to make or propose changes">
          <svg class="octicon octicon-trashcan" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M11 2H9c0-.55-.45-1-1-1H5c-.55 0-1 .45-1 1H2c-.55 0-1 .45-1 1v1c0 .55.45 1 1 1v9c0 .55.45 1 1 1h7c.55 0 1-.45 1-1V5c.55 0 1-.45 1-1V3c0-.55-.45-1-1-1zm-1 12H3V5h1v8h1V5h1v8h1V5h1v8h1V5h1v9zm1-10H2V3h9v1z"/></svg>
        </button>
  </div>

  <div class="file-info">
      13943 lines (12032 sloc)
      <span class="file-info-divider"></span>
    495 KB
  </div>
</div>

    

  <div itemprop="text" class="blob-wrapper data type-c">
      <table class="highlight tab-size js-file-line-container" data-tab-size="8">
      <tr>
        <td id="L1" class="blob-num js-line-number" data-line-number="1"></td>
        <td id="LC1" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> This is an auto-generated header-only single-file distribution of libcluon.</span></td>
      </tr>
      <tr>
        <td id="L2" class="blob-num js-line-number" data-line-number="2"></td>
        <td id="LC2" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Date: Wed, 04 Apr 2018 22:16:26 +0200</span></td>
      </tr>
      <tr>
        <td id="L3" class="blob-num js-line-number" data-line-number="3"></td>
        <td id="LC3" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Version: 0.0.63</span></td>
      </tr>
      <tr>
        <td id="L4" class="blob-num js-line-number" data-line-number="4"></td>
        <td id="LC4" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span></span></td>
      </tr>
      <tr>
        <td id="L5" class="blob-num js-line-number" data-line-number="5"></td>
        <td id="LC5" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span></span></td>
      </tr>
      <tr>
        <td id="L6" class="blob-num js-line-number" data-line-number="6"></td>
        <td id="LC6" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Implementation of N4562 std::experimental::any (merged into C++17) for C++11 compilers.</span></td>
      </tr>
      <tr>
        <td id="L7" class="blob-num js-line-number" data-line-number="7"></td>
        <td id="LC7" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span></span></td>
      </tr>
      <tr>
        <td id="L8" class="blob-num js-line-number" data-line-number="8"></td>
        <td id="LC8" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> See also:</span></td>
      </tr>
      <tr>
        <td id="L9" class="blob-num js-line-number" data-line-number="9"></td>
        <td id="LC9" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>   + http://en.cppreference.com/w/cpp/any</span></td>
      </tr>
      <tr>
        <td id="L10" class="blob-num js-line-number" data-line-number="10"></td>
        <td id="LC10" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>   + http://en.cppreference.com/w/cpp/experimental/any</span></td>
      </tr>
      <tr>
        <td id="L11" class="blob-num js-line-number" data-line-number="11"></td>
        <td id="LC11" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>   + http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4562.html#any</span></td>
      </tr>
      <tr>
        <td id="L12" class="blob-num js-line-number" data-line-number="12"></td>
        <td id="LC12" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>   + https://cplusplus.github.io/LWG/lwg-active.html#2509</span></td>
      </tr>
      <tr>
        <td id="L13" class="blob-num js-line-number" data-line-number="13"></td>
        <td id="LC13" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span></span></td>
      </tr>
      <tr>
        <td id="L14" class="blob-num js-line-number" data-line-number="14"></td>
        <td id="LC14" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span></span></td>
      </tr>
      <tr>
        <td id="L15" class="blob-num js-line-number" data-line-number="15"></td>
        <td id="LC15" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Copyright (c) 2016 Denilson das Mercês Amorim</span></td>
      </tr>
      <tr>
        <td id="L16" class="blob-num js-line-number" data-line-number="16"></td>
        <td id="LC16" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span></span></td>
      </tr>
      <tr>
        <td id="L17" class="blob-num js-line-number" data-line-number="17"></td>
        <td id="LC17" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Distributed under the Boost Software License, Version 1.0. (See accompanying</span></td>
      </tr>
      <tr>
        <td id="L18" class="blob-num js-line-number" data-line-number="18"></td>
        <td id="LC18" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)</span></td>
      </tr>
      <tr>
        <td id="L19" class="blob-num js-line-number" data-line-number="19"></td>
        <td id="LC19" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span></span></td>
      </tr>
      <tr>
        <td id="L20" class="blob-num js-line-number" data-line-number="20"></td>
        <td id="LC20" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifndef</span> LINB_ANY_HPP</td>
      </tr>
      <tr>
        <td id="L21" class="blob-num js-line-number" data-line-number="21"></td>
        <td id="LC21" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">define</span> <span class="pl-en">LINB_ANY_HPP</span></td>
      </tr>
      <tr>
        <td id="L22" class="blob-num js-line-number" data-line-number="22"></td>
        <td id="LC22" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#pragma once</span></td>
      </tr>
      <tr>
        <td id="L23" class="blob-num js-line-number" data-line-number="23"></td>
        <td id="LC23" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>typeinfo<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L24" class="blob-num js-line-number" data-line-number="24"></td>
        <td id="LC24" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>type_traits<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L25" class="blob-num js-line-number" data-line-number="25"></td>
        <td id="LC25" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>stdexcept<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L26" class="blob-num js-line-number" data-line-number="26"></td>
        <td id="LC26" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L27" class="blob-num js-line-number" data-line-number="27"></td>
        <td id="LC27" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">linb</span></td>
      </tr>
      <tr>
        <td id="L28" class="blob-num js-line-number" data-line-number="28"></td>
        <td id="LC28" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="L29" class="blob-num js-line-number" data-line-number="29"></td>
        <td id="LC29" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L30" class="blob-num js-line-number" data-line-number="30"></td>
        <td id="LC30" class="blob-code blob-code-inner js-file-line"><span class="pl-k">class</span> <span class="pl-en">bad_any_cast</span> : <span class="pl-k">public</span> <span class="pl-en">std</span>::bad_cast</td>
      </tr>
      <tr>
        <td id="L31" class="blob-num js-line-number" data-line-number="31"></td>
        <td id="LC31" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="L32" class="blob-num js-line-number" data-line-number="32"></td>
        <td id="LC32" class="blob-code blob-code-inner js-file-line"><span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L33" class="blob-num js-line-number" data-line-number="33"></td>
        <td id="LC33" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> <span class="pl-k">char</span>* <span class="pl-en">what</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span> <span class="pl-k">override</span></td>
      </tr>
      <tr>
        <td id="L34" class="blob-num js-line-number" data-line-number="34"></td>
        <td id="LC34" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="L35" class="blob-num js-line-number" data-line-number="35"></td>
        <td id="LC35" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-s"><span class="pl-pds">&quot;</span>bad any cast<span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L36" class="blob-num js-line-number" data-line-number="36"></td>
        <td id="LC36" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L37" class="blob-num js-line-number" data-line-number="37"></td>
        <td id="LC37" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L38" class="blob-num js-line-number" data-line-number="38"></td>
        <td id="LC38" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L39" class="blob-num js-line-number" data-line-number="39"></td>
        <td id="LC39" class="blob-code blob-code-inner js-file-line"><span class="pl-k">class</span> <span class="pl-en">any</span> final</td>
      </tr>
      <tr>
        <td id="L40" class="blob-num js-line-number" data-line-number="40"></td>
        <td id="LC40" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="L41" class="blob-num js-line-number" data-line-number="41"></td>
        <td id="LC41" class="blob-code blob-code-inner js-file-line"><span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L42" class="blob-num js-line-number" data-line-number="42"></td>
        <td id="LC42" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span>/ Constructs an object of type any with an empty state.</span></td>
      </tr>
      <tr>
        <td id="L43" class="blob-num js-line-number" data-line-number="43"></td>
        <td id="LC43" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">any</span>() :</td>
      </tr>
      <tr>
        <td id="L44" class="blob-num js-line-number" data-line-number="44"></td>
        <td id="LC44" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">vtable</span>(<span class="pl-c1">nullptr</span>)</td>
      </tr>
      <tr>
        <td id="L45" class="blob-num js-line-number" data-line-number="45"></td>
        <td id="LC45" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="L46" class="blob-num js-line-number" data-line-number="46"></td>
        <td id="LC46" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L47" class="blob-num js-line-number" data-line-number="47"></td>
        <td id="LC47" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L48" class="blob-num js-line-number" data-line-number="48"></td>
        <td id="LC48" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span>/ Constructs an object of type any with an equivalent state as other.</span></td>
      </tr>
      <tr>
        <td id="L49" class="blob-num js-line-number" data-line-number="49"></td>
        <td id="LC49" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">any</span>(<span class="pl-k">const</span> any&amp; rhs) :</td>
      </tr>
      <tr>
        <td id="L50" class="blob-num js-line-number" data-line-number="50"></td>
        <td id="LC50" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">vtable</span>(rhs.vtable)</td>
      </tr>
      <tr>
        <td id="L51" class="blob-num js-line-number" data-line-number="51"></td>
        <td id="LC51" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="L52" class="blob-num js-line-number" data-line-number="52"></td>
        <td id="LC52" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span>(!rhs.<span class="pl-c1">empty</span>())</td>
      </tr>
      <tr>
        <td id="L53" class="blob-num js-line-number" data-line-number="53"></td>
        <td id="LC53" class="blob-code blob-code-inner js-file-line">        {</td>
      </tr>
      <tr>
        <td id="L54" class="blob-num js-line-number" data-line-number="54"></td>
        <td id="LC54" class="blob-code blob-code-inner js-file-line">            rhs.<span class="pl-smi">vtable</span>-&gt;<span class="pl-c1">copy</span>(rhs.<span class="pl-smi">storage</span>, <span class="pl-c1">this</span>-&gt;storage);</td>
      </tr>
      <tr>
        <td id="L55" class="blob-num js-line-number" data-line-number="55"></td>
        <td id="LC55" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L56" class="blob-num js-line-number" data-line-number="56"></td>
        <td id="LC56" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L57" class="blob-num js-line-number" data-line-number="57"></td>
        <td id="LC57" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L58" class="blob-num js-line-number" data-line-number="58"></td>
        <td id="LC58" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span>/ Constructs an object of type any with a state equivalent to the original state of other.</span></td>
      </tr>
      <tr>
        <td id="L59" class="blob-num js-line-number" data-line-number="59"></td>
        <td id="LC59" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span>/ rhs is left in a valid but otherwise unspecified state.</span></td>
      </tr>
      <tr>
        <td id="L60" class="blob-num js-line-number" data-line-number="60"></td>
        <td id="LC60" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">any</span>(any&amp;&amp; rhs) noexcept :</td>
      </tr>
      <tr>
        <td id="L61" class="blob-num js-line-number" data-line-number="61"></td>
        <td id="LC61" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">vtable</span>(rhs.vtable)</td>
      </tr>
      <tr>
        <td id="L62" class="blob-num js-line-number" data-line-number="62"></td>
        <td id="LC62" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="L63" class="blob-num js-line-number" data-line-number="63"></td>
        <td id="LC63" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span>(!rhs.<span class="pl-c1">empty</span>())</td>
      </tr>
      <tr>
        <td id="L64" class="blob-num js-line-number" data-line-number="64"></td>
        <td id="LC64" class="blob-code blob-code-inner js-file-line">        {</td>
      </tr>
      <tr>
        <td id="L65" class="blob-num js-line-number" data-line-number="65"></td>
        <td id="LC65" class="blob-code blob-code-inner js-file-line">            rhs.<span class="pl-smi">vtable</span>-&gt;<span class="pl-c1">move</span>(rhs.<span class="pl-smi">storage</span>, <span class="pl-c1">this</span>-&gt;storage);</td>
      </tr>
      <tr>
        <td id="L66" class="blob-num js-line-number" data-line-number="66"></td>
        <td id="LC66" class="blob-code blob-code-inner js-file-line">            rhs.<span class="pl-smi">vtable</span> = <span class="pl-c1">nullptr</span>;</td>
      </tr>
      <tr>
        <td id="L67" class="blob-num js-line-number" data-line-number="67"></td>
        <td id="LC67" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L68" class="blob-num js-line-number" data-line-number="68"></td>
        <td id="LC68" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L69" class="blob-num js-line-number" data-line-number="69"></td>
        <td id="LC69" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L70" class="blob-num js-line-number" data-line-number="70"></td>
        <td id="LC70" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span>/ Same effect as this-&gt;clear().</span></td>
      </tr>
      <tr>
        <td id="L71" class="blob-num js-line-number" data-line-number="71"></td>
        <td id="LC71" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">~any</span>()</td>
      </tr>
      <tr>
        <td id="L72" class="blob-num js-line-number" data-line-number="72"></td>
        <td id="LC72" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="L73" class="blob-num js-line-number" data-line-number="73"></td>
        <td id="LC73" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">this</span>-&gt;<span class="pl-c1">clear</span>();</td>
      </tr>
      <tr>
        <td id="L74" class="blob-num js-line-number" data-line-number="74"></td>
        <td id="LC74" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L75" class="blob-num js-line-number" data-line-number="75"></td>
        <td id="LC75" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L76" class="blob-num js-line-number" data-line-number="76"></td>
        <td id="LC76" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span>/ Constructs an object of type any that contains an object of type T direct-initialized with std::forward&lt;ValueType&gt;(value).</span></td>
      </tr>
      <tr>
        <td id="L77" class="blob-num js-line-number" data-line-number="77"></td>
        <td id="LC77" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span>/</span></td>
      </tr>
      <tr>
        <td id="L78" class="blob-num js-line-number" data-line-number="78"></td>
        <td id="LC78" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span>/ T shall satisfy the CopyConstructible requirements, otherwise the program is ill-formed.</span></td>
      </tr>
      <tr>
        <td id="L79" class="blob-num js-line-number" data-line-number="79"></td>
        <td id="LC79" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span>/ This is because an `any` may be copy constructed into another `any` at any time, so a copy should always be allowed.</span></td>
      </tr>
      <tr>
        <td id="L80" class="blob-num js-line-number" data-line-number="80"></td>
        <td id="LC80" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template</span>&lt;<span class="pl-k">typename</span> ValueType, <span class="pl-k">typename</span> = <span class="pl-k">typename</span> std::enable_if&lt;!std::is_same&lt;<span class="pl-k">typename</span> std::decay&lt;ValueType&gt;::type, any&gt;::value&gt;::type&gt;</td>
      </tr>
      <tr>
        <td id="L81" class="blob-num js-line-number" data-line-number="81"></td>
        <td id="LC81" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">any</span>(ValueType&amp;&amp; value)</td>
      </tr>
      <tr>
        <td id="L82" class="blob-num js-line-number" data-line-number="82"></td>
        <td id="LC82" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="L83" class="blob-num js-line-number" data-line-number="83"></td>
        <td id="LC83" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">static_assert</span>(std::is_copy_constructible&lt;<span class="pl-k">typename</span> std::decay&lt;ValueType&gt;::type&gt;::value,</td>
      </tr>
      <tr>
        <td id="L84" class="blob-num js-line-number" data-line-number="84"></td>
        <td id="LC84" class="blob-code blob-code-inner js-file-line">            <span class="pl-s"><span class="pl-pds">&quot;</span>T shall satisfy the CopyConstructible requirements.<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L85" class="blob-num js-line-number" data-line-number="85"></td>
        <td id="LC85" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">this</span>-&gt;<span class="pl-c1">construct</span>(std::forward&lt;ValueType&gt;(value));</td>
      </tr>
      <tr>
        <td id="L86" class="blob-num js-line-number" data-line-number="86"></td>
        <td id="LC86" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L87" class="blob-num js-line-number" data-line-number="87"></td>
        <td id="LC87" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L88" class="blob-num js-line-number" data-line-number="88"></td>
        <td id="LC88" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span>/ Has the same effect as any(rhs).swap(*this). No effects if an exception is thrown.</span></td>
      </tr>
      <tr>
        <td id="L89" class="blob-num js-line-number" data-line-number="89"></td>
        <td id="LC89" class="blob-code blob-code-inner js-file-line">    any&amp; <span class="pl-k">operator</span>=(<span class="pl-k">const</span> any&amp; rhs)</td>
      </tr>
      <tr>
        <td id="L90" class="blob-num js-line-number" data-line-number="90"></td>
        <td id="LC90" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="L91" class="blob-num js-line-number" data-line-number="91"></td>
        <td id="LC91" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">any</span>(rhs).<span class="pl-c1">swap</span>(*<span class="pl-c1">this</span>);</td>
      </tr>
      <tr>
        <td id="L92" class="blob-num js-line-number" data-line-number="92"></td>
        <td id="LC92" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> *<span class="pl-c1">this</span>;</td>
      </tr>
      <tr>
        <td id="L93" class="blob-num js-line-number" data-line-number="93"></td>
        <td id="LC93" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L94" class="blob-num js-line-number" data-line-number="94"></td>
        <td id="LC94" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L95" class="blob-num js-line-number" data-line-number="95"></td>
        <td id="LC95" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span>/ Has the same effect as any(std::move(rhs)).swap(*this).</span></td>
      </tr>
      <tr>
        <td id="L96" class="blob-num js-line-number" data-line-number="96"></td>
        <td id="LC96" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span>/</span></td>
      </tr>
      <tr>
        <td id="L97" class="blob-num js-line-number" data-line-number="97"></td>
        <td id="LC97" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span>/ The state of *this is equivalent to the original state of rhs and rhs is left in a valid</span></td>
      </tr>
      <tr>
        <td id="L98" class="blob-num js-line-number" data-line-number="98"></td>
        <td id="LC98" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span>/ but otherwise unspecified state.</span></td>
      </tr>
      <tr>
        <td id="L99" class="blob-num js-line-number" data-line-number="99"></td>
        <td id="LC99" class="blob-code blob-code-inner js-file-line">    any&amp; <span class="pl-k">operator</span>=(any&amp;&amp; rhs) noexcept</td>
      </tr>
      <tr>
        <td id="L100" class="blob-num js-line-number" data-line-number="100"></td>
        <td id="LC100" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="L101" class="blob-num js-line-number" data-line-number="101"></td>
        <td id="LC101" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">any</span>(<span class="pl-c1">std::move</span>(rhs)).<span class="pl-c1">swap</span>(*<span class="pl-c1">this</span>);</td>
      </tr>
      <tr>
        <td id="L102" class="blob-num js-line-number" data-line-number="102"></td>
        <td id="LC102" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> *<span class="pl-c1">this</span>;</td>
      </tr>
      <tr>
        <td id="L103" class="blob-num js-line-number" data-line-number="103"></td>
        <td id="LC103" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L104" class="blob-num js-line-number" data-line-number="104"></td>
        <td id="LC104" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L105" class="blob-num js-line-number" data-line-number="105"></td>
        <td id="LC105" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span>/ Has the same effect as any(std::forward&lt;ValueType&gt;(value)).swap(*this). No effect if a exception is thrown.</span></td>
      </tr>
      <tr>
        <td id="L106" class="blob-num js-line-number" data-line-number="106"></td>
        <td id="LC106" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span>/</span></td>
      </tr>
      <tr>
        <td id="L107" class="blob-num js-line-number" data-line-number="107"></td>
        <td id="LC107" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span>/ T shall satisfy the CopyConstructible requirements, otherwise the program is ill-formed.</span></td>
      </tr>
      <tr>
        <td id="L108" class="blob-num js-line-number" data-line-number="108"></td>
        <td id="LC108" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span>/ This is because an `any` may be copy constructed into another `any` at any time, so a copy should always be allowed.</span></td>
      </tr>
      <tr>
        <td id="L109" class="blob-num js-line-number" data-line-number="109"></td>
        <td id="LC109" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template</span>&lt;<span class="pl-k">typename</span> ValueType, <span class="pl-k">typename</span> = <span class="pl-k">typename</span> std::enable_if&lt;!std::is_same&lt;<span class="pl-k">typename</span> std::decay&lt;ValueType&gt;::type, any&gt;::value&gt;::type&gt;</td>
      </tr>
      <tr>
        <td id="L110" class="blob-num js-line-number" data-line-number="110"></td>
        <td id="LC110" class="blob-code blob-code-inner js-file-line">    any&amp; <span class="pl-k">operator</span>=(ValueType&amp;&amp; value)</td>
      </tr>
      <tr>
        <td id="L111" class="blob-num js-line-number" data-line-number="111"></td>
        <td id="LC111" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="L112" class="blob-num js-line-number" data-line-number="112"></td>
        <td id="LC112" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">static_assert</span>(std::is_copy_constructible&lt;<span class="pl-k">typename</span> std::decay&lt;ValueType&gt;::type&gt;::value,</td>
      </tr>
      <tr>
        <td id="L113" class="blob-num js-line-number" data-line-number="113"></td>
        <td id="LC113" class="blob-code blob-code-inner js-file-line">            <span class="pl-s"><span class="pl-pds">&quot;</span>T shall satisfy the CopyConstructible requirements.<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L114" class="blob-num js-line-number" data-line-number="114"></td>
        <td id="LC114" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">any</span>(std::forward&lt;ValueType&gt;(value)).<span class="pl-c1">swap</span>(*<span class="pl-c1">this</span>);</td>
      </tr>
      <tr>
        <td id="L115" class="blob-num js-line-number" data-line-number="115"></td>
        <td id="LC115" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> *<span class="pl-c1">this</span>;</td>
      </tr>
      <tr>
        <td id="L116" class="blob-num js-line-number" data-line-number="116"></td>
        <td id="LC116" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L117" class="blob-num js-line-number" data-line-number="117"></td>
        <td id="LC117" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L118" class="blob-num js-line-number" data-line-number="118"></td>
        <td id="LC118" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span>/ If not empty, destroys the contained object.</span></td>
      </tr>
      <tr>
        <td id="L119" class="blob-num js-line-number" data-line-number="119"></td>
        <td id="LC119" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">clear</span>() <span class="pl-k">noexcept</span></td>
      </tr>
      <tr>
        <td id="L120" class="blob-num js-line-number" data-line-number="120"></td>
        <td id="LC120" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="L121" class="blob-num js-line-number" data-line-number="121"></td>
        <td id="LC121" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span>(!<span class="pl-c1">empty</span>())</td>
      </tr>
      <tr>
        <td id="L122" class="blob-num js-line-number" data-line-number="122"></td>
        <td id="LC122" class="blob-code blob-code-inner js-file-line">        {</td>
      </tr>
      <tr>
        <td id="L123" class="blob-num js-line-number" data-line-number="123"></td>
        <td id="LC123" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">this</span>-&gt;vtable-&gt;<span class="pl-c1">destroy</span>(storage);</td>
      </tr>
      <tr>
        <td id="L124" class="blob-num js-line-number" data-line-number="124"></td>
        <td id="LC124" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">this</span>-&gt;vtable = <span class="pl-c1">nullptr</span>;</td>
      </tr>
      <tr>
        <td id="L125" class="blob-num js-line-number" data-line-number="125"></td>
        <td id="LC125" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L126" class="blob-num js-line-number" data-line-number="126"></td>
        <td id="LC126" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L127" class="blob-num js-line-number" data-line-number="127"></td>
        <td id="LC127" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L128" class="blob-num js-line-number" data-line-number="128"></td>
        <td id="LC128" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span>/ Returns true if *this has no contained object, otherwise false.</span></td>
      </tr>
      <tr>
        <td id="L129" class="blob-num js-line-number" data-line-number="129"></td>
        <td id="LC129" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">bool</span> <span class="pl-en">empty</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span></td>
      </tr>
      <tr>
        <td id="L130" class="blob-num js-line-number" data-line-number="130"></td>
        <td id="LC130" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="L131" class="blob-num js-line-number" data-line-number="131"></td>
        <td id="LC131" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">this</span>-&gt;vtable == <span class="pl-c1">nullptr</span>;</td>
      </tr>
      <tr>
        <td id="L132" class="blob-num js-line-number" data-line-number="132"></td>
        <td id="LC132" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L133" class="blob-num js-line-number" data-line-number="133"></td>
        <td id="LC133" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L134" class="blob-num js-line-number" data-line-number="134"></td>
        <td id="LC134" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span>/ If *this has a contained object of type T, typeid(T); otherwise typeid(void).</span></td>
      </tr>
      <tr>
        <td id="L135" class="blob-num js-line-number" data-line-number="135"></td>
        <td id="LC135" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> std::type_info&amp; <span class="pl-en">type</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span></td>
      </tr>
      <tr>
        <td id="L136" class="blob-num js-line-number" data-line-number="136"></td>
        <td id="LC136" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="L137" class="blob-num js-line-number" data-line-number="137"></td>
        <td id="LC137" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">empty</span>()? <span class="pl-c1">typeid</span>(<span class="pl-k">void</span>) : <span class="pl-c1">this</span>-&gt;vtable-&gt;<span class="pl-c1">type</span>();</td>
      </tr>
      <tr>
        <td id="L138" class="blob-num js-line-number" data-line-number="138"></td>
        <td id="LC138" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L139" class="blob-num js-line-number" data-line-number="139"></td>
        <td id="LC139" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L140" class="blob-num js-line-number" data-line-number="140"></td>
        <td id="LC140" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span>/ Exchange the states of *this and rhs.</span></td>
      </tr>
      <tr>
        <td id="L141" class="blob-num js-line-number" data-line-number="141"></td>
        <td id="LC141" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">swap</span>(any&amp; rhs) <span class="pl-k">noexcept</span></td>
      </tr>
      <tr>
        <td id="L142" class="blob-num js-line-number" data-line-number="142"></td>
        <td id="LC142" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="L143" class="blob-num js-line-number" data-line-number="143"></td>
        <td id="LC143" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span>(<span class="pl-c1">this</span>-&gt;vtable != rhs.<span class="pl-smi">vtable</span>)</td>
      </tr>
      <tr>
        <td id="L144" class="blob-num js-line-number" data-line-number="144"></td>
        <td id="LC144" class="blob-code blob-code-inner js-file-line">        {</td>
      </tr>
      <tr>
        <td id="L145" class="blob-num js-line-number" data-line-number="145"></td>
        <td id="LC145" class="blob-code blob-code-inner js-file-line">            any <span class="pl-smi">tmp</span>(<span class="pl-c1">std::move</span>(rhs));</td>
      </tr>
      <tr>
        <td id="L146" class="blob-num js-line-number" data-line-number="146"></td>
        <td id="LC146" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L147" class="blob-num js-line-number" data-line-number="147"></td>
        <td id="LC147" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> move from *this to rhs.</span></td>
      </tr>
      <tr>
        <td id="L148" class="blob-num js-line-number" data-line-number="148"></td>
        <td id="LC148" class="blob-code blob-code-inner js-file-line">            rhs.<span class="pl-smi">vtable</span> = <span class="pl-c1">this</span>-&gt;vtable;</td>
      </tr>
      <tr>
        <td id="L149" class="blob-num js-line-number" data-line-number="149"></td>
        <td id="LC149" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span>(<span class="pl-c1">this</span>-&gt;vtable != <span class="pl-c1">nullptr</span>)</td>
      </tr>
      <tr>
        <td id="L150" class="blob-num js-line-number" data-line-number="150"></td>
        <td id="LC150" class="blob-code blob-code-inner js-file-line">            {</td>
      </tr>
      <tr>
        <td id="L151" class="blob-num js-line-number" data-line-number="151"></td>
        <td id="LC151" class="blob-code blob-code-inner js-file-line">                <span class="pl-c1">this</span>-&gt;vtable-&gt;<span class="pl-c1">move</span>(<span class="pl-c1">this</span>-&gt;storage, rhs.<span class="pl-smi">storage</span>);</td>
      </tr>
      <tr>
        <td id="L152" class="blob-num js-line-number" data-line-number="152"></td>
        <td id="LC152" class="blob-code blob-code-inner js-file-line">                <span class="pl-c"><span class="pl-c">//</span>this-&gt;vtable = nullptr; -- uneeded, see below</span></td>
      </tr>
      <tr>
        <td id="L153" class="blob-num js-line-number" data-line-number="153"></td>
        <td id="LC153" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L154" class="blob-num js-line-number" data-line-number="154"></td>
        <td id="LC154" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L155" class="blob-num js-line-number" data-line-number="155"></td>
        <td id="LC155" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> move from tmp (previously rhs) to *this.</span></td>
      </tr>
      <tr>
        <td id="L156" class="blob-num js-line-number" data-line-number="156"></td>
        <td id="LC156" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">this</span>-&gt;vtable = tmp.<span class="pl-smi">vtable</span>;</td>
      </tr>
      <tr>
        <td id="L157" class="blob-num js-line-number" data-line-number="157"></td>
        <td id="LC157" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span>(tmp.<span class="pl-smi">vtable</span> != <span class="pl-c1">nullptr</span>)</td>
      </tr>
      <tr>
        <td id="L158" class="blob-num js-line-number" data-line-number="158"></td>
        <td id="LC158" class="blob-code blob-code-inner js-file-line">            {</td>
      </tr>
      <tr>
        <td id="L159" class="blob-num js-line-number" data-line-number="159"></td>
        <td id="LC159" class="blob-code blob-code-inner js-file-line">                tmp.<span class="pl-smi">vtable</span>-&gt;<span class="pl-c1">move</span>(tmp.<span class="pl-smi">storage</span>, <span class="pl-c1">this</span>-&gt;storage);</td>
      </tr>
      <tr>
        <td id="L160" class="blob-num js-line-number" data-line-number="160"></td>
        <td id="LC160" class="blob-code blob-code-inner js-file-line">                tmp.<span class="pl-smi">vtable</span> = <span class="pl-c1">nullptr</span>;</td>
      </tr>
      <tr>
        <td id="L161" class="blob-num js-line-number" data-line-number="161"></td>
        <td id="LC161" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L162" class="blob-num js-line-number" data-line-number="162"></td>
        <td id="LC162" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L163" class="blob-num js-line-number" data-line-number="163"></td>
        <td id="LC163" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">else</span> <span class="pl-c"><span class="pl-c">//</span> same types</span></td>
      </tr>
      <tr>
        <td id="L164" class="blob-num js-line-number" data-line-number="164"></td>
        <td id="LC164" class="blob-code blob-code-inner js-file-line">        {</td>
      </tr>
      <tr>
        <td id="L165" class="blob-num js-line-number" data-line-number="165"></td>
        <td id="LC165" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span>(<span class="pl-c1">this</span>-&gt;vtable != <span class="pl-c1">nullptr</span>)</td>
      </tr>
      <tr>
        <td id="L166" class="blob-num js-line-number" data-line-number="166"></td>
        <td id="LC166" class="blob-code blob-code-inner js-file-line">                <span class="pl-c1">this</span>-&gt;vtable-&gt;<span class="pl-c1">swap</span>(<span class="pl-c1">this</span>-&gt;storage, rhs.<span class="pl-smi">storage</span>);</td>
      </tr>
      <tr>
        <td id="L167" class="blob-num js-line-number" data-line-number="167"></td>
        <td id="LC167" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L168" class="blob-num js-line-number" data-line-number="168"></td>
        <td id="LC168" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L169" class="blob-num js-line-number" data-line-number="169"></td>
        <td id="LC169" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L170" class="blob-num js-line-number" data-line-number="170"></td>
        <td id="LC170" class="blob-code blob-code-inner js-file-line"><span class="pl-k">private:</span> <span class="pl-c"><span class="pl-c">//</span> Storage and Virtual Method Table</span></td>
      </tr>
      <tr>
        <td id="L171" class="blob-num js-line-number" data-line-number="171"></td>
        <td id="LC171" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L172" class="blob-num js-line-number" data-line-number="172"></td>
        <td id="LC172" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">union</span> storage_union</td>
      </tr>
      <tr>
        <td id="L173" class="blob-num js-line-number" data-line-number="173"></td>
        <td id="LC173" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="L174" class="blob-num js-line-number" data-line-number="174"></td>
        <td id="LC174" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">using</span> <span class="pl-c1">stack_storage_t</span> = <span class="pl-k">typename</span> std::aligned_storage&lt;<span class="pl-c1">2</span> * <span class="pl-k">sizeof</span>(<span class="pl-k">void</span>*), std::alignment_of&lt;<span class="pl-k">void</span>*&gt;::value&gt;::type;</td>
      </tr>
      <tr>
        <td id="L175" class="blob-num js-line-number" data-line-number="175"></td>
        <td id="LC175" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L176" class="blob-num js-line-number" data-line-number="176"></td>
        <td id="LC176" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">void</span>*               dynamic;</td>
      </tr>
      <tr>
        <td id="L177" class="blob-num js-line-number" data-line-number="177"></td>
        <td id="LC177" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">stack_storage_t</span>     stack;      <span class="pl-c"><span class="pl-c">//</span> 2 words for e.g. shared_ptr</span></td>
      </tr>
      <tr>
        <td id="L178" class="blob-num js-line-number" data-line-number="178"></td>
        <td id="LC178" class="blob-code blob-code-inner js-file-line">    };</td>
      </tr>
      <tr>
        <td id="L179" class="blob-num js-line-number" data-line-number="179"></td>
        <td id="LC179" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L180" class="blob-num js-line-number" data-line-number="180"></td>
        <td id="LC180" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span>/ Base VTable specification.</span></td>
      </tr>
      <tr>
        <td id="L181" class="blob-num js-line-number" data-line-number="181"></td>
        <td id="LC181" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">struct</span> <span class="pl-en">vtable_type</span></td>
      </tr>
      <tr>
        <td id="L182" class="blob-num js-line-number" data-line-number="182"></td>
        <td id="LC182" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="L183" class="blob-num js-line-number" data-line-number="183"></td>
        <td id="LC183" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> Note: The caller is responssible for doing .vtable = nullptr after destructful operations</span></td>
      </tr>
      <tr>
        <td id="L184" class="blob-num js-line-number" data-line-number="184"></td>
        <td id="LC184" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> such as destroy() and/or move().</span></td>
      </tr>
      <tr>
        <td id="L185" class="blob-num js-line-number" data-line-number="185"></td>
        <td id="LC185" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L186" class="blob-num js-line-number" data-line-number="186"></td>
        <td id="LC186" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span>/ The type of the object this vtable is for.</span></td>
      </tr>
      <tr>
        <td id="L187" class="blob-num js-line-number" data-line-number="187"></td>
        <td id="LC187" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> std::type_info&amp; (*type)() noexcept;</td>
      </tr>
      <tr>
        <td id="L188" class="blob-num js-line-number" data-line-number="188"></td>
        <td id="LC188" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L189" class="blob-num js-line-number" data-line-number="189"></td>
        <td id="LC189" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span>/ Destroys the object in the union.</span></td>
      </tr>
      <tr>
        <td id="L190" class="blob-num js-line-number" data-line-number="190"></td>
        <td id="LC190" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span>/ The state of the union after this call is unspecified, caller must ensure not to use src anymore.</span></td>
      </tr>
      <tr>
        <td id="L191" class="blob-num js-line-number" data-line-number="191"></td>
        <td id="LC191" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">void</span>(*destroy)(storage_union&amp;) noexcept;</td>
      </tr>
      <tr>
        <td id="L192" class="blob-num js-line-number" data-line-number="192"></td>
        <td id="LC192" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L193" class="blob-num js-line-number" data-line-number="193"></td>
        <td id="LC193" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span>/ Copies the **inner** content of the src union into the yet unitialized dest union.</span></td>
      </tr>
      <tr>
        <td id="L194" class="blob-num js-line-number" data-line-number="194"></td>
        <td id="LC194" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span>/ As such, both inner objects will have the same state, but on separate memory locations.</span></td>
      </tr>
      <tr>
        <td id="L195" class="blob-num js-line-number" data-line-number="195"></td>
        <td id="LC195" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">void</span>(*copy)(<span class="pl-k">const</span> storage_union&amp; src, storage_union&amp; dest);</td>
      </tr>
      <tr>
        <td id="L196" class="blob-num js-line-number" data-line-number="196"></td>
        <td id="LC196" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L197" class="blob-num js-line-number" data-line-number="197"></td>
        <td id="LC197" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span>/ Moves the storage from src to the yet unitialized dest union.</span></td>
      </tr>
      <tr>
        <td id="L198" class="blob-num js-line-number" data-line-number="198"></td>
        <td id="LC198" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span>/ The state of src after this call is unspecified, caller must ensure not to use src anymore.</span></td>
      </tr>
      <tr>
        <td id="L199" class="blob-num js-line-number" data-line-number="199"></td>
        <td id="LC199" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">void</span>(*move)(storage_union&amp; src, storage_union&amp; dest) noexcept;</td>
      </tr>
      <tr>
        <td id="L200" class="blob-num js-line-number" data-line-number="200"></td>
        <td id="LC200" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L201" class="blob-num js-line-number" data-line-number="201"></td>
        <td id="LC201" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span>/ Exchanges the storage between lhs and rhs.</span></td>
      </tr>
      <tr>
        <td id="L202" class="blob-num js-line-number" data-line-number="202"></td>
        <td id="LC202" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">void</span>(*swap)(storage_union&amp; lhs, storage_union&amp; rhs) noexcept;</td>
      </tr>
      <tr>
        <td id="L203" class="blob-num js-line-number" data-line-number="203"></td>
        <td id="LC203" class="blob-code blob-code-inner js-file-line">    };</td>
      </tr>
      <tr>
        <td id="L204" class="blob-num js-line-number" data-line-number="204"></td>
        <td id="LC204" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L205" class="blob-num js-line-number" data-line-number="205"></td>
        <td id="LC205" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span>/ VTable for dynamically allocated storage.</span></td>
      </tr>
      <tr>
        <td id="L206" class="blob-num js-line-number" data-line-number="206"></td>
        <td id="LC206" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template</span>&lt;<span class="pl-k">typename</span> T&gt;</td>
      </tr>
      <tr>
        <td id="L207" class="blob-num js-line-number" data-line-number="207"></td>
        <td id="LC207" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">struct</span> <span class="pl-en">vtable_dynamic</span></td>
      </tr>
      <tr>
        <td id="L208" class="blob-num js-line-number" data-line-number="208"></td>
        <td id="LC208" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="L209" class="blob-num js-line-number" data-line-number="209"></td>
        <td id="LC209" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">static</span> <span class="pl-k">const</span> std::type_info&amp; <span class="pl-en">type</span>() <span class="pl-k">noexcept</span></td>
      </tr>
      <tr>
        <td id="L210" class="blob-num js-line-number" data-line-number="210"></td>
        <td id="LC210" class="blob-code blob-code-inner js-file-line">        {</td>
      </tr>
      <tr>
        <td id="L211" class="blob-num js-line-number" data-line-number="211"></td>
        <td id="LC211" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> <span class="pl-c1">typeid</span>(T);</td>
      </tr>
      <tr>
        <td id="L212" class="blob-num js-line-number" data-line-number="212"></td>
        <td id="LC212" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L213" class="blob-num js-line-number" data-line-number="213"></td>
        <td id="LC213" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L214" class="blob-num js-line-number" data-line-number="214"></td>
        <td id="LC214" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">static</span> <span class="pl-k">void</span> <span class="pl-en">destroy</span>(storage_union&amp; storage) <span class="pl-k">noexcept</span></td>
      </tr>
      <tr>
        <td id="L215" class="blob-num js-line-number" data-line-number="215"></td>
        <td id="LC215" class="blob-code blob-code-inner js-file-line">        {</td>
      </tr>
      <tr>
        <td id="L216" class="blob-num js-line-number" data-line-number="216"></td>
        <td id="LC216" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span>assert(reinterpret_cast&lt;T*&gt;(storage.dynamic));</span></td>
      </tr>
      <tr>
        <td id="L217" class="blob-num js-line-number" data-line-number="217"></td>
        <td id="LC217" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">delete</span> <span class="pl-k">reinterpret_cast</span>&lt;T*&gt;(storage.<span class="pl-smi">dynamic</span>);</td>
      </tr>
      <tr>
        <td id="L218" class="blob-num js-line-number" data-line-number="218"></td>
        <td id="LC218" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L219" class="blob-num js-line-number" data-line-number="219"></td>
        <td id="LC219" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L220" class="blob-num js-line-number" data-line-number="220"></td>
        <td id="LC220" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">static</span> <span class="pl-k">void</span> <span class="pl-en">copy</span>(<span class="pl-k">const</span> storage_union&amp; src, storage_union&amp; dest)</td>
      </tr>
      <tr>
        <td id="L221" class="blob-num js-line-number" data-line-number="221"></td>
        <td id="LC221" class="blob-code blob-code-inner js-file-line">        {</td>
      </tr>
      <tr>
        <td id="L222" class="blob-num js-line-number" data-line-number="222"></td>
        <td id="LC222" class="blob-code blob-code-inner js-file-line">            dest.<span class="pl-smi">dynamic</span> = <span class="pl-k">new</span> <span class="pl-c1">T</span>(*<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">const</span> T*&gt;(src.<span class="pl-smi">dynamic</span>));</td>
      </tr>
      <tr>
        <td id="L223" class="blob-num js-line-number" data-line-number="223"></td>
        <td id="LC223" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L224" class="blob-num js-line-number" data-line-number="224"></td>
        <td id="LC224" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L225" class="blob-num js-line-number" data-line-number="225"></td>
        <td id="LC225" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">static</span> <span class="pl-k">void</span> <span class="pl-en">move</span>(storage_union&amp; src, storage_union&amp; dest) <span class="pl-k">noexcept</span></td>
      </tr>
      <tr>
        <td id="L226" class="blob-num js-line-number" data-line-number="226"></td>
        <td id="LC226" class="blob-code blob-code-inner js-file-line">        {</td>
      </tr>
      <tr>
        <td id="L227" class="blob-num js-line-number" data-line-number="227"></td>
        <td id="LC227" class="blob-code blob-code-inner js-file-line">            dest.<span class="pl-smi">dynamic</span> = src.<span class="pl-smi">dynamic</span>;</td>
      </tr>
      <tr>
        <td id="L228" class="blob-num js-line-number" data-line-number="228"></td>
        <td id="LC228" class="blob-code blob-code-inner js-file-line">            src.<span class="pl-smi">dynamic</span> = <span class="pl-c1">nullptr</span>;</td>
      </tr>
      <tr>
        <td id="L229" class="blob-num js-line-number" data-line-number="229"></td>
        <td id="LC229" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L230" class="blob-num js-line-number" data-line-number="230"></td>
        <td id="LC230" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L231" class="blob-num js-line-number" data-line-number="231"></td>
        <td id="LC231" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">static</span> <span class="pl-k">void</span> <span class="pl-en">swap</span>(storage_union&amp; lhs, storage_union&amp; rhs) <span class="pl-k">noexcept</span></td>
      </tr>
      <tr>
        <td id="L232" class="blob-num js-line-number" data-line-number="232"></td>
        <td id="LC232" class="blob-code blob-code-inner js-file-line">        {</td>
      </tr>
      <tr>
        <td id="L233" class="blob-num js-line-number" data-line-number="233"></td>
        <td id="LC233" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> just exchage the storage pointers.</span></td>
      </tr>
      <tr>
        <td id="L234" class="blob-num js-line-number" data-line-number="234"></td>
        <td id="LC234" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">std::swap</span>(lhs.<span class="pl-smi">dynamic</span>, rhs.<span class="pl-smi">dynamic</span>);</td>
      </tr>
      <tr>
        <td id="L235" class="blob-num js-line-number" data-line-number="235"></td>
        <td id="LC235" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L236" class="blob-num js-line-number" data-line-number="236"></td>
        <td id="LC236" class="blob-code blob-code-inner js-file-line">    };</td>
      </tr>
      <tr>
        <td id="L237" class="blob-num js-line-number" data-line-number="237"></td>
        <td id="LC237" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L238" class="blob-num js-line-number" data-line-number="238"></td>
        <td id="LC238" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span>/ VTable for stack allocated storage.</span></td>
      </tr>
      <tr>
        <td id="L239" class="blob-num js-line-number" data-line-number="239"></td>
        <td id="LC239" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template</span>&lt;<span class="pl-k">typename</span> T&gt;</td>
      </tr>
      <tr>
        <td id="L240" class="blob-num js-line-number" data-line-number="240"></td>
        <td id="LC240" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">struct</span> <span class="pl-en">vtable_stack</span></td>
      </tr>
      <tr>
        <td id="L241" class="blob-num js-line-number" data-line-number="241"></td>
        <td id="LC241" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="L242" class="blob-num js-line-number" data-line-number="242"></td>
        <td id="LC242" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">static</span> <span class="pl-k">const</span> std::type_info&amp; <span class="pl-en">type</span>() <span class="pl-k">noexcept</span></td>
      </tr>
      <tr>
        <td id="L243" class="blob-num js-line-number" data-line-number="243"></td>
        <td id="LC243" class="blob-code blob-code-inner js-file-line">        {</td>
      </tr>
      <tr>
        <td id="L244" class="blob-num js-line-number" data-line-number="244"></td>
        <td id="LC244" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> <span class="pl-c1">typeid</span>(T);</td>
      </tr>
      <tr>
        <td id="L245" class="blob-num js-line-number" data-line-number="245"></td>
        <td id="LC245" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L246" class="blob-num js-line-number" data-line-number="246"></td>
        <td id="LC246" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L247" class="blob-num js-line-number" data-line-number="247"></td>
        <td id="LC247" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">static</span> <span class="pl-k">void</span> <span class="pl-en">destroy</span>(storage_union&amp; storage) <span class="pl-k">noexcept</span></td>
      </tr>
      <tr>
        <td id="L248" class="blob-num js-line-number" data-line-number="248"></td>
        <td id="LC248" class="blob-code blob-code-inner js-file-line">        {</td>
      </tr>
      <tr>
        <td id="L249" class="blob-num js-line-number" data-line-number="249"></td>
        <td id="LC249" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">reinterpret_cast</span>&lt;T*&gt;(&amp;storage.<span class="pl-smi">stack</span>)-&gt;<span class="pl-en">~T</span>();</td>
      </tr>
      <tr>
        <td id="L250" class="blob-num js-line-number" data-line-number="250"></td>
        <td id="LC250" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L251" class="blob-num js-line-number" data-line-number="251"></td>
        <td id="LC251" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L252" class="blob-num js-line-number" data-line-number="252"></td>
        <td id="LC252" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">static</span> <span class="pl-k">void</span> <span class="pl-en">copy</span>(<span class="pl-k">const</span> storage_union&amp; src, storage_union&amp; dest)</td>
      </tr>
      <tr>
        <td id="L253" class="blob-num js-line-number" data-line-number="253"></td>
        <td id="LC253" class="blob-code blob-code-inner js-file-line">        {</td>
      </tr>
      <tr>
        <td id="L254" class="blob-num js-line-number" data-line-number="254"></td>
        <td id="LC254" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">new</span> (&amp;dest.<span class="pl-smi">stack</span>) <span class="pl-c1">T</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">const</span> T&amp;&gt;(src.<span class="pl-smi">stack</span>));</td>
      </tr>
      <tr>
        <td id="L255" class="blob-num js-line-number" data-line-number="255"></td>
        <td id="LC255" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L256" class="blob-num js-line-number" data-line-number="256"></td>
        <td id="LC256" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L257" class="blob-num js-line-number" data-line-number="257"></td>
        <td id="LC257" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">static</span> <span class="pl-k">void</span> <span class="pl-en">move</span>(storage_union&amp; src, storage_union&amp; dest) <span class="pl-k">noexcept</span></td>
      </tr>
      <tr>
        <td id="L258" class="blob-num js-line-number" data-line-number="258"></td>
        <td id="LC258" class="blob-code blob-code-inner js-file-line">        {</td>
      </tr>
      <tr>
        <td id="L259" class="blob-num js-line-number" data-line-number="259"></td>
        <td id="LC259" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> one of the conditions for using vtable_stack is a nothrow move constructor,</span></td>
      </tr>
      <tr>
        <td id="L260" class="blob-num js-line-number" data-line-number="260"></td>
        <td id="LC260" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> so this move constructor will never throw a exception.</span></td>
      </tr>
      <tr>
        <td id="L261" class="blob-num js-line-number" data-line-number="261"></td>
        <td id="LC261" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">new</span> (&amp;dest.<span class="pl-smi">stack</span>) <span class="pl-c1">T</span>(<span class="pl-c1">std::move</span>(<span class="pl-k">reinterpret_cast</span>&lt;T&amp;&gt;(src.<span class="pl-smi">stack</span>)));</td>
      </tr>
      <tr>
        <td id="L262" class="blob-num js-line-number" data-line-number="262"></td>
        <td id="LC262" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">destroy</span>(src);</td>
      </tr>
      <tr>
        <td id="L263" class="blob-num js-line-number" data-line-number="263"></td>
        <td id="LC263" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L264" class="blob-num js-line-number" data-line-number="264"></td>
        <td id="LC264" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L265" class="blob-num js-line-number" data-line-number="265"></td>
        <td id="LC265" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">static</span> <span class="pl-k">void</span> <span class="pl-en">swap</span>(storage_union&amp; lhs, storage_union&amp; rhs) <span class="pl-k">noexcept</span></td>
      </tr>
      <tr>
        <td id="L266" class="blob-num js-line-number" data-line-number="266"></td>
        <td id="LC266" class="blob-code blob-code-inner js-file-line">        {</td>
      </tr>
      <tr>
        <td id="L267" class="blob-num js-line-number" data-line-number="267"></td>
        <td id="LC267" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">std::swap</span>(<span class="pl-k">reinterpret_cast</span>&lt;T&amp;&gt;(lhs.<span class="pl-smi">stack</span>), <span class="pl-k">reinterpret_cast</span>&lt;T&amp;&gt;(rhs.<span class="pl-smi">stack</span>));</td>
      </tr>
      <tr>
        <td id="L268" class="blob-num js-line-number" data-line-number="268"></td>
        <td id="LC268" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L269" class="blob-num js-line-number" data-line-number="269"></td>
        <td id="LC269" class="blob-code blob-code-inner js-file-line">    };</td>
      </tr>
      <tr>
        <td id="L270" class="blob-num js-line-number" data-line-number="270"></td>
        <td id="LC270" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L271" class="blob-num js-line-number" data-line-number="271"></td>
        <td id="LC271" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span>/ Whether the type T must be dynamically allocated or can be stored on the stack.</span></td>
      </tr>
      <tr>
        <td id="L272" class="blob-num js-line-number" data-line-number="272"></td>
        <td id="LC272" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template</span>&lt;<span class="pl-k">typename</span> T&gt;</td>
      </tr>
      <tr>
        <td id="L273" class="blob-num js-line-number" data-line-number="273"></td>
        <td id="LC273" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">struct</span> <span class="pl-en">requires_allocation</span> :</td>
      </tr>
      <tr>
        <td id="L274" class="blob-num js-line-number" data-line-number="274"></td>
        <td id="LC274" class="blob-code blob-code-inner js-file-line">        std::integral_constant&lt;<span class="pl-k">bool</span>,</td>
      </tr>
      <tr>
        <td id="L275" class="blob-num js-line-number" data-line-number="275"></td>
        <td id="LC275" class="blob-code blob-code-inner js-file-line">                !(std::is_nothrow_move_constructible&lt;T&gt;::value      <span class="pl-c"><span class="pl-c">//</span> N4562 �6.3/3 [any.class]</span></td>
      </tr>
      <tr>
        <td id="L276" class="blob-num js-line-number" data-line-number="276"></td>
        <td id="LC276" class="blob-code blob-code-inner js-file-line">                  &amp;&amp; <span class="pl-k">sizeof</span>(T) &lt;= <span class="pl-k">sizeof</span>(storage_union::stack)</td>
      </tr>
      <tr>
        <td id="L277" class="blob-num js-line-number" data-line-number="277"></td>
        <td id="LC277" class="blob-code blob-code-inner js-file-line">                  &amp;&amp; std::alignment_of&lt;T&gt;::value &lt;= std::alignment_of&lt;storage_union::<span class="pl-c1">stack_storage_t</span>&gt;::value)&gt;</td>
      </tr>
      <tr>
        <td id="L278" class="blob-num js-line-number" data-line-number="278"></td>
        <td id="LC278" class="blob-code blob-code-inner js-file-line">    {};</td>
      </tr>
      <tr>
        <td id="L279" class="blob-num js-line-number" data-line-number="279"></td>
        <td id="LC279" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L280" class="blob-num js-line-number" data-line-number="280"></td>
        <td id="LC280" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span>/ Returns the pointer to the vtable of the type T.</span></td>
      </tr>
      <tr>
        <td id="L281" class="blob-num js-line-number" data-line-number="281"></td>
        <td id="LC281" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template</span>&lt;<span class="pl-k">typename</span> T&gt;</td>
      </tr>
      <tr>
        <td id="L282" class="blob-num js-line-number" data-line-number="282"></td>
        <td id="LC282" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">static</span> vtable_type* <span class="pl-en">vtable_for_type</span>()</td>
      </tr>
      <tr>
        <td id="L283" class="blob-num js-line-number" data-line-number="283"></td>
        <td id="LC283" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="L284" class="blob-num js-line-number" data-line-number="284"></td>
        <td id="LC284" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">using</span> VTableType = <span class="pl-k">typename</span> std::conditional&lt;requires_allocation&lt;T&gt;::value, vtable_dynamic&lt;T&gt;, vtable_stack&lt;T&gt;&gt;::type;</td>
      </tr>
      <tr>
        <td id="L285" class="blob-num js-line-number" data-line-number="285"></td>
        <td id="LC285" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">static</span> vtable_type table = {</td>
      </tr>
      <tr>
        <td id="L286" class="blob-num js-line-number" data-line-number="286"></td>
        <td id="LC286" class="blob-code blob-code-inner js-file-line">            VTableType::type, VTableType::destroy,</td>
      </tr>
      <tr>
        <td id="L287" class="blob-num js-line-number" data-line-number="287"></td>
        <td id="LC287" class="blob-code blob-code-inner js-file-line">            VTableType::copy, VTableType::move,</td>
      </tr>
      <tr>
        <td id="L288" class="blob-num js-line-number" data-line-number="288"></td>
        <td id="LC288" class="blob-code blob-code-inner js-file-line">            VTableType::swap,</td>
      </tr>
      <tr>
        <td id="L289" class="blob-num js-line-number" data-line-number="289"></td>
        <td id="LC289" class="blob-code blob-code-inner js-file-line">        };</td>
      </tr>
      <tr>
        <td id="L290" class="blob-num js-line-number" data-line-number="290"></td>
        <td id="LC290" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> &amp;table;</td>
      </tr>
      <tr>
        <td id="L291" class="blob-num js-line-number" data-line-number="291"></td>
        <td id="LC291" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L292" class="blob-num js-line-number" data-line-number="292"></td>
        <td id="LC292" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L293" class="blob-num js-line-number" data-line-number="293"></td>
        <td id="LC293" class="blob-code blob-code-inner js-file-line"><span class="pl-k">protected:</span></td>
      </tr>
      <tr>
        <td id="L294" class="blob-num js-line-number" data-line-number="294"></td>
        <td id="LC294" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template</span>&lt;<span class="pl-k">typename</span> T&gt;</td>
      </tr>
      <tr>
        <td id="L295" class="blob-num js-line-number" data-line-number="295"></td>
        <td id="LC295" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">friend</span> <span class="pl-k">const</span> T* <span class="pl-en">any_cast</span>(<span class="pl-k">const</span> any* operand) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L296" class="blob-num js-line-number" data-line-number="296"></td>
        <td id="LC296" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template</span>&lt;<span class="pl-k">typename</span> T&gt;</td>
      </tr>
      <tr>
        <td id="L297" class="blob-num js-line-number" data-line-number="297"></td>
        <td id="LC297" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">friend</span> T* <span class="pl-en">any_cast</span>(any* operand) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L298" class="blob-num js-line-number" data-line-number="298"></td>
        <td id="LC298" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L299" class="blob-num js-line-number" data-line-number="299"></td>
        <td id="LC299" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span>/ Same effect as is_same(this-&gt;type(), t);</span></td>
      </tr>
      <tr>
        <td id="L300" class="blob-num js-line-number" data-line-number="300"></td>
        <td id="LC300" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">bool</span> <span class="pl-en">is_typed</span>(<span class="pl-k">const</span> std::type_info&amp; t) <span class="pl-k">const</span></td>
      </tr>
      <tr>
        <td id="L301" class="blob-num js-line-number" data-line-number="301"></td>
        <td id="LC301" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="L302" class="blob-num js-line-number" data-line-number="302"></td>
        <td id="LC302" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">is_same</span>(<span class="pl-c1">this</span>-&gt;<span class="pl-c1">type</span>(), t);</td>
      </tr>
      <tr>
        <td id="L303" class="blob-num js-line-number" data-line-number="303"></td>
        <td id="LC303" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L304" class="blob-num js-line-number" data-line-number="304"></td>
        <td id="LC304" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L305" class="blob-num js-line-number" data-line-number="305"></td>
        <td id="LC305" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span>/ Checks if two type infos are the same.</span></td>
      </tr>
      <tr>
        <td id="L306" class="blob-num js-line-number" data-line-number="306"></td>
        <td id="LC306" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span>/</span></td>
      </tr>
      <tr>
        <td id="L307" class="blob-num js-line-number" data-line-number="307"></td>
        <td id="LC307" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span>/ If ANY_IMPL_FAST_TYPE_INFO_COMPARE is defined, checks only the address of the</span></td>
      </tr>
      <tr>
        <td id="L308" class="blob-num js-line-number" data-line-number="308"></td>
        <td id="LC308" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span>/ type infos, otherwise does an actual comparision. Checking addresses is</span></td>
      </tr>
      <tr>
        <td id="L309" class="blob-num js-line-number" data-line-number="309"></td>
        <td id="LC309" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span>/ only a valid approach when there&#39;s no interaction with outside sources</span></td>
      </tr>
      <tr>
        <td id="L310" class="blob-num js-line-number" data-line-number="310"></td>
        <td id="LC310" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span>/ (other shared libraries and such).</span></td>
      </tr>
      <tr>
        <td id="L311" class="blob-num js-line-number" data-line-number="311"></td>
        <td id="LC311" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">static</span> <span class="pl-k">bool</span> <span class="pl-en">is_same</span>(<span class="pl-k">const</span> std::type_info&amp; a, <span class="pl-k">const</span> std::type_info&amp; b)</td>
      </tr>
      <tr>
        <td id="L312" class="blob-num js-line-number" data-line-number="312"></td>
        <td id="LC312" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="L313" class="blob-num js-line-number" data-line-number="313"></td>
        <td id="LC313" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifdef</span> ANY_IMPL_FAST_TYPE_INFO_COMPARE</td>
      </tr>
      <tr>
        <td id="L314" class="blob-num js-line-number" data-line-number="314"></td>
        <td id="LC314" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> &amp;a == &amp;b;</td>
      </tr>
      <tr>
        <td id="L315" class="blob-num js-line-number" data-line-number="315"></td>
        <td id="LC315" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">else</span></td>
      </tr>
      <tr>
        <td id="L316" class="blob-num js-line-number" data-line-number="316"></td>
        <td id="LC316" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> a == b;</td>
      </tr>
      <tr>
        <td id="L317" class="blob-num js-line-number" data-line-number="317"></td>
        <td id="LC317" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L318" class="blob-num js-line-number" data-line-number="318"></td>
        <td id="LC318" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L319" class="blob-num js-line-number" data-line-number="319"></td>
        <td id="LC319" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L320" class="blob-num js-line-number" data-line-number="320"></td>
        <td id="LC320" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span>/ Casts (with no type_info checks) the storage pointer as const T*.</span></td>
      </tr>
      <tr>
        <td id="L321" class="blob-num js-line-number" data-line-number="321"></td>
        <td id="LC321" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template</span>&lt;<span class="pl-k">typename</span> T&gt;</td>
      </tr>
      <tr>
        <td id="L322" class="blob-num js-line-number" data-line-number="322"></td>
        <td id="LC322" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> T* <span class="pl-en">cast</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span></td>
      </tr>
      <tr>
        <td id="L323" class="blob-num js-line-number" data-line-number="323"></td>
        <td id="LC323" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="L324" class="blob-num js-line-number" data-line-number="324"></td>
        <td id="LC324" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> requires_allocation&lt;<span class="pl-k">typename</span> std::decay&lt;T&gt;::type&gt;::value?</td>
      </tr>
      <tr>
        <td id="L325" class="blob-num js-line-number" data-line-number="325"></td>
        <td id="LC325" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">const</span> T*&gt;(storage.<span class="pl-smi">dynamic</span>) :</td>
      </tr>
      <tr>
        <td id="L326" class="blob-num js-line-number" data-line-number="326"></td>
        <td id="LC326" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">const</span> T*&gt;(&amp;storage.<span class="pl-smi">stack</span>);</td>
      </tr>
      <tr>
        <td id="L327" class="blob-num js-line-number" data-line-number="327"></td>
        <td id="LC327" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L328" class="blob-num js-line-number" data-line-number="328"></td>
        <td id="LC328" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L329" class="blob-num js-line-number" data-line-number="329"></td>
        <td id="LC329" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span>/ Casts (with no type_info checks) the storage pointer as T*.</span></td>
      </tr>
      <tr>
        <td id="L330" class="blob-num js-line-number" data-line-number="330"></td>
        <td id="LC330" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template</span>&lt;<span class="pl-k">typename</span> T&gt;</td>
      </tr>
      <tr>
        <td id="L331" class="blob-num js-line-number" data-line-number="331"></td>
        <td id="LC331" class="blob-code blob-code-inner js-file-line">    T* <span class="pl-en">cast</span>() <span class="pl-k">noexcept</span></td>
      </tr>
      <tr>
        <td id="L332" class="blob-num js-line-number" data-line-number="332"></td>
        <td id="LC332" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="L333" class="blob-num js-line-number" data-line-number="333"></td>
        <td id="LC333" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> requires_allocation&lt;<span class="pl-k">typename</span> std::decay&lt;T&gt;::type&gt;::value?</td>
      </tr>
      <tr>
        <td id="L334" class="blob-num js-line-number" data-line-number="334"></td>
        <td id="LC334" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">reinterpret_cast</span>&lt;T*&gt;(storage.<span class="pl-smi">dynamic</span>) :</td>
      </tr>
      <tr>
        <td id="L335" class="blob-num js-line-number" data-line-number="335"></td>
        <td id="LC335" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">reinterpret_cast</span>&lt;T*&gt;(&amp;storage.<span class="pl-smi">stack</span>);</td>
      </tr>
      <tr>
        <td id="L336" class="blob-num js-line-number" data-line-number="336"></td>
        <td id="LC336" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L337" class="blob-num js-line-number" data-line-number="337"></td>
        <td id="LC337" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L338" class="blob-num js-line-number" data-line-number="338"></td>
        <td id="LC338" class="blob-code blob-code-inner js-file-line"><span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L339" class="blob-num js-line-number" data-line-number="339"></td>
        <td id="LC339" class="blob-code blob-code-inner js-file-line">    storage_union storage; <span class="pl-c"><span class="pl-c">//</span> on offset(0) so no padding for align</span></td>
      </tr>
      <tr>
        <td id="L340" class="blob-num js-line-number" data-line-number="340"></td>
        <td id="LC340" class="blob-code blob-code-inner js-file-line">    vtable_type*  vtable;</td>
      </tr>
      <tr>
        <td id="L341" class="blob-num js-line-number" data-line-number="341"></td>
        <td id="LC341" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L342" class="blob-num js-line-number" data-line-number="342"></td>
        <td id="LC342" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template</span>&lt;<span class="pl-k">typename</span> ValueType, <span class="pl-k">typename</span> T&gt;</td>
      </tr>
      <tr>
        <td id="L343" class="blob-num js-line-number" data-line-number="343"></td>
        <td id="LC343" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">typename</span> std::enable_if&lt;requires_allocation&lt;T&gt;::value&gt;::type</td>
      </tr>
      <tr>
        <td id="L344" class="blob-num js-line-number" data-line-number="344"></td>
        <td id="LC344" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">do_construct</span>(ValueType&amp;&amp; value)</td>
      </tr>
      <tr>
        <td id="L345" class="blob-num js-line-number" data-line-number="345"></td>
        <td id="LC345" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="L346" class="blob-num js-line-number" data-line-number="346"></td>
        <td id="LC346" class="blob-code blob-code-inner js-file-line">        storage.<span class="pl-smi">dynamic</span> = <span class="pl-k">new</span> <span class="pl-c1">T</span>(std::forward&lt;ValueType&gt;(value));</td>
      </tr>
      <tr>
        <td id="L347" class="blob-num js-line-number" data-line-number="347"></td>
        <td id="LC347" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L348" class="blob-num js-line-number" data-line-number="348"></td>
        <td id="LC348" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L349" class="blob-num js-line-number" data-line-number="349"></td>
        <td id="LC349" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template</span>&lt;<span class="pl-k">typename</span> ValueType, <span class="pl-k">typename</span> T&gt;</td>
      </tr>
      <tr>
        <td id="L350" class="blob-num js-line-number" data-line-number="350"></td>
        <td id="LC350" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">typename</span> std::enable_if&lt;!requires_allocation&lt;T&gt;::value&gt;::type</td>
      </tr>
      <tr>
        <td id="L351" class="blob-num js-line-number" data-line-number="351"></td>
        <td id="LC351" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">do_construct</span>(ValueType&amp;&amp; value)</td>
      </tr>
      <tr>
        <td id="L352" class="blob-num js-line-number" data-line-number="352"></td>
        <td id="LC352" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="L353" class="blob-num js-line-number" data-line-number="353"></td>
        <td id="LC353" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">new</span> (&amp;storage.<span class="pl-smi">stack</span>) <span class="pl-c1">T</span>(std::forward&lt;ValueType&gt;(value));</td>
      </tr>
      <tr>
        <td id="L354" class="blob-num js-line-number" data-line-number="354"></td>
        <td id="LC354" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L355" class="blob-num js-line-number" data-line-number="355"></td>
        <td id="LC355" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L356" class="blob-num js-line-number" data-line-number="356"></td>
        <td id="LC356" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span>/ Chooses between stack and dynamic allocation for the type decay_t&lt;ValueType&gt;,</span></td>
      </tr>
      <tr>
        <td id="L357" class="blob-num js-line-number" data-line-number="357"></td>
        <td id="LC357" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span>/ assigns the correct vtable, and constructs the object on our storage.</span></td>
      </tr>
      <tr>
        <td id="L358" class="blob-num js-line-number" data-line-number="358"></td>
        <td id="LC358" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template</span>&lt;<span class="pl-k">typename</span> ValueType&gt;</td>
      </tr>
      <tr>
        <td id="L359" class="blob-num js-line-number" data-line-number="359"></td>
        <td id="LC359" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">construct</span>(ValueType&amp;&amp; value)</td>
      </tr>
      <tr>
        <td id="L360" class="blob-num js-line-number" data-line-number="360"></td>
        <td id="LC360" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="L361" class="blob-num js-line-number" data-line-number="361"></td>
        <td id="LC361" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">using</span> T = <span class="pl-k">typename</span> std::decay&lt;ValueType&gt;::type;</td>
      </tr>
      <tr>
        <td id="L362" class="blob-num js-line-number" data-line-number="362"></td>
        <td id="LC362" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L363" class="blob-num js-line-number" data-line-number="363"></td>
        <td id="LC363" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">this</span>-&gt;vtable = vtable_for_type&lt;T&gt;();</td>
      </tr>
      <tr>
        <td id="L364" class="blob-num js-line-number" data-line-number="364"></td>
        <td id="LC364" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L365" class="blob-num js-line-number" data-line-number="365"></td>
        <td id="LC365" class="blob-code blob-code-inner js-file-line">        do_construct&lt;ValueType,T&gt;(std::forward&lt;ValueType&gt;(value));</td>
      </tr>
      <tr>
        <td id="L366" class="blob-num js-line-number" data-line-number="366"></td>
        <td id="LC366" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L367" class="blob-num js-line-number" data-line-number="367"></td>
        <td id="LC367" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L368" class="blob-num js-line-number" data-line-number="368"></td>
        <td id="LC368" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L369" class="blob-num js-line-number" data-line-number="369"></td>
        <td id="LC369" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L370" class="blob-num js-line-number" data-line-number="370"></td>
        <td id="LC370" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L371" class="blob-num js-line-number" data-line-number="371"></td>
        <td id="LC371" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">detail</span></td>
      </tr>
      <tr>
        <td id="L372" class="blob-num js-line-number" data-line-number="372"></td>
        <td id="LC372" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="L373" class="blob-num js-line-number" data-line-number="373"></td>
        <td id="LC373" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template</span>&lt;<span class="pl-k">typename</span> ValueType&gt;</td>
      </tr>
      <tr>
        <td id="L374" class="blob-num js-line-number" data-line-number="374"></td>
        <td id="LC374" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">inline</span> ValueType <span class="pl-en">any_cast_move_if_true</span>(<span class="pl-k">typename</span> std::remove_reference&lt;ValueType&gt;::type* p, std::true_type)</td>
      </tr>
      <tr>
        <td id="L375" class="blob-num js-line-number" data-line-number="375"></td>
        <td id="LC375" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="L376" class="blob-num js-line-number" data-line-number="376"></td>
        <td id="LC376" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">std::move</span>(*p);</td>
      </tr>
      <tr>
        <td id="L377" class="blob-num js-line-number" data-line-number="377"></td>
        <td id="LC377" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L378" class="blob-num js-line-number" data-line-number="378"></td>
        <td id="LC378" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L379" class="blob-num js-line-number" data-line-number="379"></td>
        <td id="LC379" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template</span>&lt;<span class="pl-k">typename</span> ValueType&gt;</td>
      </tr>
      <tr>
        <td id="L380" class="blob-num js-line-number" data-line-number="380"></td>
        <td id="LC380" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">inline</span> ValueType <span class="pl-en">any_cast_move_if_true</span>(<span class="pl-k">typename</span> std::remove_reference&lt;ValueType&gt;::type* p, std::false_type)</td>
      </tr>
      <tr>
        <td id="L381" class="blob-num js-line-number" data-line-number="381"></td>
        <td id="LC381" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="L382" class="blob-num js-line-number" data-line-number="382"></td>
        <td id="LC382" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> *p;</td>
      </tr>
      <tr>
        <td id="L383" class="blob-num js-line-number" data-line-number="383"></td>
        <td id="LC383" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L384" class="blob-num js-line-number" data-line-number="384"></td>
        <td id="LC384" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L385" class="blob-num js-line-number" data-line-number="385"></td>
        <td id="LC385" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L386" class="blob-num js-line-number" data-line-number="386"></td>
        <td id="LC386" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>/ Performs *any_cast&lt;add_const_t&lt;remove_reference_t&lt;ValueType&gt;&gt;&gt;(&amp;operand), or throws bad_any_cast on failure.</span></td>
      </tr>
      <tr>
        <td id="L387" class="blob-num js-line-number" data-line-number="387"></td>
        <td id="LC387" class="blob-code blob-code-inner js-file-line"><span class="pl-k">template</span>&lt;<span class="pl-k">typename</span> ValueType&gt;</td>
      </tr>
      <tr>
        <td id="L388" class="blob-num js-line-number" data-line-number="388"></td>
        <td id="LC388" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> ValueType <span class="pl-en">any_cast</span>(<span class="pl-k">const</span> any&amp; operand)</td>
      </tr>
      <tr>
        <td id="L389" class="blob-num js-line-number" data-line-number="389"></td>
        <td id="LC389" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="L390" class="blob-num js-line-number" data-line-number="390"></td>
        <td id="LC390" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">auto</span> p = any_cast&lt;<span class="pl-k">typename</span> std::add_const&lt;<span class="pl-k">typename</span> std::remove_reference&lt;ValueType&gt;::type&gt;::type&gt;(&amp;operand);</td>
      </tr>
      <tr>
        <td id="L391" class="blob-num js-line-number" data-line-number="391"></td>
        <td id="LC391" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span>(p == <span class="pl-c1">nullptr</span>) <span class="pl-k">throw</span> <span class="pl-smi">bad_any_cast</span>();</td>
      </tr>
      <tr>
        <td id="L392" class="blob-num js-line-number" data-line-number="392"></td>
        <td id="LC392" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> *p;</td>
      </tr>
      <tr>
        <td id="L393" class="blob-num js-line-number" data-line-number="393"></td>
        <td id="LC393" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L394" class="blob-num js-line-number" data-line-number="394"></td>
        <td id="LC394" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L395" class="blob-num js-line-number" data-line-number="395"></td>
        <td id="LC395" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>/ Performs *any_cast&lt;remove_reference_t&lt;ValueType&gt;&gt;(&amp;operand), or throws bad_any_cast on failure.</span></td>
      </tr>
      <tr>
        <td id="L396" class="blob-num js-line-number" data-line-number="396"></td>
        <td id="LC396" class="blob-code blob-code-inner js-file-line"><span class="pl-k">template</span>&lt;<span class="pl-k">typename</span> ValueType&gt;</td>
      </tr>
      <tr>
        <td id="L397" class="blob-num js-line-number" data-line-number="397"></td>
        <td id="LC397" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> ValueType <span class="pl-en">any_cast</span>(any&amp; operand)</td>
      </tr>
      <tr>
        <td id="L398" class="blob-num js-line-number" data-line-number="398"></td>
        <td id="LC398" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="L399" class="blob-num js-line-number" data-line-number="399"></td>
        <td id="LC399" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">auto</span> p = any_cast&lt;<span class="pl-k">typename</span> std::remove_reference&lt;ValueType&gt;::type&gt;(&amp;operand);</td>
      </tr>
      <tr>
        <td id="L400" class="blob-num js-line-number" data-line-number="400"></td>
        <td id="LC400" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span>(p == <span class="pl-c1">nullptr</span>) <span class="pl-k">throw</span> <span class="pl-smi">bad_any_cast</span>();</td>
      </tr>
      <tr>
        <td id="L401" class="blob-num js-line-number" data-line-number="401"></td>
        <td id="LC401" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> *p;</td>
      </tr>
      <tr>
        <td id="L402" class="blob-num js-line-number" data-line-number="402"></td>
        <td id="LC402" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L403" class="blob-num js-line-number" data-line-number="403"></td>
        <td id="LC403" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L404" class="blob-num js-line-number" data-line-number="404"></td>
        <td id="LC404" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>/</span></td>
      </tr>
      <tr>
        <td id="L405" class="blob-num js-line-number" data-line-number="405"></td>
        <td id="LC405" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>/ If ANY_IMPL_ANYCAST_MOVEABLE is not defined, does as N4562 specifies:</span></td>
      </tr>
      <tr>
        <td id="L406" class="blob-num js-line-number" data-line-number="406"></td>
        <td id="LC406" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>/     Performs *any_cast&lt;remove_reference_t&lt;ValueType&gt;&gt;(&amp;operand), or throws bad_any_cast on failure.</span></td>
      </tr>
      <tr>
        <td id="L407" class="blob-num js-line-number" data-line-number="407"></td>
        <td id="LC407" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>/</span></td>
      </tr>
      <tr>
        <td id="L408" class="blob-num js-line-number" data-line-number="408"></td>
        <td id="LC408" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>/ If ANY_IMPL_ANYCAST_MOVEABLE is defined, does as LWG Defect 2509 specifies:</span></td>
      </tr>
      <tr>
        <td id="L409" class="blob-num js-line-number" data-line-number="409"></td>
        <td id="LC409" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>/     If ValueType is MoveConstructible and isn&#39;t a lvalue reference, performs</span></td>
      </tr>
      <tr>
        <td id="L410" class="blob-num js-line-number" data-line-number="410"></td>
        <td id="LC410" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>/     std::move(*any_cast&lt;remove_reference_t&lt;ValueType&gt;&gt;(&amp;operand)), otherwise</span></td>
      </tr>
      <tr>
        <td id="L411" class="blob-num js-line-number" data-line-number="411"></td>
        <td id="LC411" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>/     *any_cast&lt;remove_reference_t&lt;ValueType&gt;&gt;(&amp;operand). Throws bad_any_cast on failure.</span></td>
      </tr>
      <tr>
        <td id="L412" class="blob-num js-line-number" data-line-number="412"></td>
        <td id="LC412" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>/</span></td>
      </tr>
      <tr>
        <td id="L413" class="blob-num js-line-number" data-line-number="413"></td>
        <td id="LC413" class="blob-code blob-code-inner js-file-line"><span class="pl-k">template</span>&lt;<span class="pl-k">typename</span> ValueType&gt;</td>
      </tr>
      <tr>
        <td id="L414" class="blob-num js-line-number" data-line-number="414"></td>
        <td id="LC414" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> ValueType <span class="pl-en">any_cast</span>(any&amp;&amp; operand)</td>
      </tr>
      <tr>
        <td id="L415" class="blob-num js-line-number" data-line-number="415"></td>
        <td id="LC415" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="L416" class="blob-num js-line-number" data-line-number="416"></td>
        <td id="LC416" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifdef</span> ANY_IMPL_ANY_CAST_MOVEABLE</td>
      </tr>
      <tr>
        <td id="L417" class="blob-num js-line-number" data-line-number="417"></td>
        <td id="LC417" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> https://cplusplus.github.io/LWG/lwg-active.html#2509</span></td>
      </tr>
      <tr>
        <td id="L418" class="blob-num js-line-number" data-line-number="418"></td>
        <td id="LC418" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">using</span> can_move = std::integral_constant&lt;<span class="pl-k">bool</span>,</td>
      </tr>
      <tr>
        <td id="L419" class="blob-num js-line-number" data-line-number="419"></td>
        <td id="LC419" class="blob-code blob-code-inner js-file-line">        std::is_move_constructible&lt;ValueType&gt;::value</td>
      </tr>
      <tr>
        <td id="L420" class="blob-num js-line-number" data-line-number="420"></td>
        <td id="LC420" class="blob-code blob-code-inner js-file-line">        &amp;&amp; !std::is_lvalue_reference&lt;ValueType&gt;::value&gt;;</td>
      </tr>
      <tr>
        <td id="L421" class="blob-num js-line-number" data-line-number="421"></td>
        <td id="LC421" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">else</span></td>
      </tr>
      <tr>
        <td id="L422" class="blob-num js-line-number" data-line-number="422"></td>
        <td id="LC422" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">using</span> can_move = std::false_type;</td>
      </tr>
      <tr>
        <td id="L423" class="blob-num js-line-number" data-line-number="423"></td>
        <td id="LC423" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L424" class="blob-num js-line-number" data-line-number="424"></td>
        <td id="LC424" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L425" class="blob-num js-line-number" data-line-number="425"></td>
        <td id="LC425" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">auto</span> p = any_cast&lt;<span class="pl-k">typename</span> std::remove_reference&lt;ValueType&gt;::type&gt;(&amp;operand);</td>
      </tr>
      <tr>
        <td id="L426" class="blob-num js-line-number" data-line-number="426"></td>
        <td id="LC426" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span>(p == <span class="pl-c1">nullptr</span>) <span class="pl-k">throw</span> <span class="pl-smi">bad_any_cast</span>();</td>
      </tr>
      <tr>
        <td id="L427" class="blob-num js-line-number" data-line-number="427"></td>
        <td id="LC427" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> detail::any_cast_move_if_true&lt;ValueType&gt;(p, <span class="pl-c1">can_move</span>());</td>
      </tr>
      <tr>
        <td id="L428" class="blob-num js-line-number" data-line-number="428"></td>
        <td id="LC428" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L429" class="blob-num js-line-number" data-line-number="429"></td>
        <td id="LC429" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L430" class="blob-num js-line-number" data-line-number="430"></td>
        <td id="LC430" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>/ If operand != nullptr &amp;&amp; operand-&gt;type() == typeid(ValueType), a pointer to the object</span></td>
      </tr>
      <tr>
        <td id="L431" class="blob-num js-line-number" data-line-number="431"></td>
        <td id="LC431" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>/ contained by operand, otherwise nullptr.</span></td>
      </tr>
      <tr>
        <td id="L432" class="blob-num js-line-number" data-line-number="432"></td>
        <td id="LC432" class="blob-code blob-code-inner js-file-line"><span class="pl-k">template</span>&lt;<span class="pl-k">typename</span> T&gt;</td>
      </tr>
      <tr>
        <td id="L433" class="blob-num js-line-number" data-line-number="433"></td>
        <td id="LC433" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">const</span> T* <span class="pl-en">any_cast</span>(<span class="pl-k">const</span> any* operand) <span class="pl-k">noexcept</span></td>
      </tr>
      <tr>
        <td id="L434" class="blob-num js-line-number" data-line-number="434"></td>
        <td id="LC434" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="L435" class="blob-num js-line-number" data-line-number="435"></td>
        <td id="LC435" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span>(operand == <span class="pl-c1">nullptr</span> || !operand-&gt;<span class="pl-c1">is_typed</span>(<span class="pl-c1">typeid</span>(T)))</td>
      </tr>
      <tr>
        <td id="L436" class="blob-num js-line-number" data-line-number="436"></td>
        <td id="LC436" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">nullptr</span>;</td>
      </tr>
      <tr>
        <td id="L437" class="blob-num js-line-number" data-line-number="437"></td>
        <td id="LC437" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">else</span></td>
      </tr>
      <tr>
        <td id="L438" class="blob-num js-line-number" data-line-number="438"></td>
        <td id="LC438" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> operand-&gt;cast&lt;T&gt;();</td>
      </tr>
      <tr>
        <td id="L439" class="blob-num js-line-number" data-line-number="439"></td>
        <td id="LC439" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L440" class="blob-num js-line-number" data-line-number="440"></td>
        <td id="LC440" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L441" class="blob-num js-line-number" data-line-number="441"></td>
        <td id="LC441" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>/ If operand != nullptr &amp;&amp; operand-&gt;type() == typeid(ValueType), a pointer to the object</span></td>
      </tr>
      <tr>
        <td id="L442" class="blob-num js-line-number" data-line-number="442"></td>
        <td id="LC442" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>/ contained by operand, otherwise nullptr.</span></td>
      </tr>
      <tr>
        <td id="L443" class="blob-num js-line-number" data-line-number="443"></td>
        <td id="LC443" class="blob-code blob-code-inner js-file-line"><span class="pl-k">template</span>&lt;<span class="pl-k">typename</span> T&gt;</td>
      </tr>
      <tr>
        <td id="L444" class="blob-num js-line-number" data-line-number="444"></td>
        <td id="LC444" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> T* <span class="pl-en">any_cast</span>(any* operand) <span class="pl-k">noexcept</span></td>
      </tr>
      <tr>
        <td id="L445" class="blob-num js-line-number" data-line-number="445"></td>
        <td id="LC445" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="L446" class="blob-num js-line-number" data-line-number="446"></td>
        <td id="LC446" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span>(operand == <span class="pl-c1">nullptr</span> || !operand-&gt;<span class="pl-c1">is_typed</span>(<span class="pl-c1">typeid</span>(T)))</td>
      </tr>
      <tr>
        <td id="L447" class="blob-num js-line-number" data-line-number="447"></td>
        <td id="LC447" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">nullptr</span>;</td>
      </tr>
      <tr>
        <td id="L448" class="blob-num js-line-number" data-line-number="448"></td>
        <td id="LC448" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">else</span></td>
      </tr>
      <tr>
        <td id="L449" class="blob-num js-line-number" data-line-number="449"></td>
        <td id="LC449" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> operand-&gt;cast&lt;T&gt;();</td>
      </tr>
      <tr>
        <td id="L450" class="blob-num js-line-number" data-line-number="450"></td>
        <td id="LC450" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L451" class="blob-num js-line-number" data-line-number="451"></td>
        <td id="LC451" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L452" class="blob-num js-line-number" data-line-number="452"></td>
        <td id="LC452" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L453" class="blob-num js-line-number" data-line-number="453"></td>
        <td id="LC453" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L454" class="blob-num js-line-number" data-line-number="454"></td>
        <td id="LC454" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">std</span></td>
      </tr>
      <tr>
        <td id="L455" class="blob-num js-line-number" data-line-number="455"></td>
        <td id="LC455" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="L456" class="blob-num js-line-number" data-line-number="456"></td>
        <td id="LC456" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">swap</span>(linb::any&amp; lhs, linb::any&amp; rhs) <span class="pl-k">noexcept</span></td>
      </tr>
      <tr>
        <td id="L457" class="blob-num js-line-number" data-line-number="457"></td>
        <td id="LC457" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="L458" class="blob-num js-line-number" data-line-number="458"></td>
        <td id="LC458" class="blob-code blob-code-inner js-file-line">        lhs.<span class="pl-c1">swap</span>(rhs);</td>
      </tr>
      <tr>
        <td id="L459" class="blob-num js-line-number" data-line-number="459"></td>
        <td id="LC459" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L460" class="blob-num js-line-number" data-line-number="460"></td>
        <td id="LC460" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L461" class="blob-num js-line-number" data-line-number="461"></td>
        <td id="LC461" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L462" class="blob-num js-line-number" data-line-number="462"></td>
        <td id="LC462" class="blob-code blob-code-inner js-file-line">#endif</td>
      </tr>
      <tr>
        <td id="L463" class="blob-num js-line-number" data-line-number="463"></td>
        <td id="LC463" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span></span></td>
      </tr>
      <tr>
        <td id="L464" class="blob-num js-line-number" data-line-number="464"></td>
        <td id="LC464" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>  peglib.h</span></td>
      </tr>
      <tr>
        <td id="L465" class="blob-num js-line-number" data-line-number="465"></td>
        <td id="LC465" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span></span></td>
      </tr>
      <tr>
        <td id="L466" class="blob-num js-line-number" data-line-number="466"></td>
        <td id="LC466" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>  Copyright (c) 2015-17 Yuji Hirose. All rights reserved.</span></td>
      </tr>
      <tr>
        <td id="L467" class="blob-num js-line-number" data-line-number="467"></td>
        <td id="LC467" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>  MIT License</span></td>
      </tr>
      <tr>
        <td id="L468" class="blob-num js-line-number" data-line-number="468"></td>
        <td id="LC468" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span></span></td>
      </tr>
      <tr>
        <td id="L469" class="blob-num js-line-number" data-line-number="469"></td>
        <td id="LC469" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L470" class="blob-num js-line-number" data-line-number="470"></td>
        <td id="LC470" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifndef</span> CPPPEGLIB_PEGLIB_H</td>
      </tr>
      <tr>
        <td id="L471" class="blob-num js-line-number" data-line-number="471"></td>
        <td id="LC471" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">define</span> <span class="pl-en">CPPPEGLIB_PEGLIB_H</span></td>
      </tr>
      <tr>
        <td id="L472" class="blob-num js-line-number" data-line-number="472"></td>
        <td id="LC472" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L473" class="blob-num js-line-number" data-line-number="473"></td>
        <td id="LC473" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>algorithm<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L474" class="blob-num js-line-number" data-line-number="474"></td>
        <td id="LC474" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>cassert<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L475" class="blob-num js-line-number" data-line-number="475"></td>
        <td id="LC475" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>cstring<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L476" class="blob-num js-line-number" data-line-number="476"></td>
        <td id="LC476" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>functional<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L477" class="blob-num js-line-number" data-line-number="477"></td>
        <td id="LC477" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>initializer_list<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L478" class="blob-num js-line-number" data-line-number="478"></td>
        <td id="LC478" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>iostream<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L479" class="blob-num js-line-number" data-line-number="479"></td>
        <td id="LC479" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>limits<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L480" class="blob-num js-line-number" data-line-number="480"></td>
        <td id="LC480" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>map<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L481" class="blob-num js-line-number" data-line-number="481"></td>
        <td id="LC481" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>memory<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L482" class="blob-num js-line-number" data-line-number="482"></td>
        <td id="LC482" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>mutex<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L483" class="blob-num js-line-number" data-line-number="483"></td>
        <td id="LC483" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>set<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L484" class="blob-num js-line-number" data-line-number="484"></td>
        <td id="LC484" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>string<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L485" class="blob-num js-line-number" data-line-number="485"></td>
        <td id="LC485" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>unordered_map<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L486" class="blob-num js-line-number" data-line-number="486"></td>
        <td id="LC486" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>vector<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L487" class="blob-num js-line-number" data-line-number="487"></td>
        <td id="LC487" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L488" class="blob-num js-line-number" data-line-number="488"></td>
        <td id="LC488" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> guard for older versions of VC++</span></td>
      </tr>
      <tr>
        <td id="L489" class="blob-num js-line-number" data-line-number="489"></td>
        <td id="LC489" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifdef</span> _MSC_VER</td>
      </tr>
      <tr>
        <td id="L490" class="blob-num js-line-number" data-line-number="490"></td>
        <td id="LC490" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> VS2013 has no constexpr</span></td>
      </tr>
      <tr>
        <td id="L491" class="blob-num js-line-number" data-line-number="491"></td>
        <td id="LC491" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">if</span> (_MSC_VER == 1800)</td>
      </tr>
      <tr>
        <td id="L492" class="blob-num js-line-number" data-line-number="492"></td>
        <td id="LC492" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">define</span> <span class="pl-en">PEGLIB_NO_CONSTEXPR_SUPPORT</span></td>
      </tr>
      <tr>
        <td id="L493" class="blob-num js-line-number" data-line-number="493"></td>
        <td id="LC493" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">elif</span> (_MSC_VER &gt;= 1800)</td>
      </tr>
      <tr>
        <td id="L494" class="blob-num js-line-number" data-line-number="494"></td>
        <td id="LC494" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> good to go</span></td>
      </tr>
      <tr>
        <td id="L495" class="blob-num js-line-number" data-line-number="495"></td>
        <td id="LC495" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">else</span> (_MSC_VER &lt; 1800)</td>
      </tr>
      <tr>
        <td id="L496" class="blob-num js-line-number" data-line-number="496"></td>
        <td id="LC496" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">error</span> &quot;Requires C+11 support&quot;</td>
      </tr>
      <tr>
        <td id="L497" class="blob-num js-line-number" data-line-number="497"></td>
        <td id="LC497" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L498" class="blob-num js-line-number" data-line-number="498"></td>
        <td id="LC498" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L499" class="blob-num js-line-number" data-line-number="499"></td>
        <td id="LC499" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L500" class="blob-num js-line-number" data-line-number="500"></td>
        <td id="LC500" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> define if the compiler doesn&#39;t support unicode characters reliably in the</span></td>
      </tr>
      <tr>
        <td id="L501" class="blob-num js-line-number" data-line-number="501"></td>
        <td id="LC501" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> source code</span></td>
      </tr>
      <tr>
        <td id="L502" class="blob-num js-line-number" data-line-number="502"></td>
        <td id="LC502" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#define PEGLIB_NO_UNICODE_CHARS</span></td>
      </tr>
      <tr>
        <td id="L503" class="blob-num js-line-number" data-line-number="503"></td>
        <td id="LC503" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L504" class="blob-num js-line-number" data-line-number="504"></td>
        <td id="LC504" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">peg</span> {</td>
      </tr>
      <tr>
        <td id="L505" class="blob-num js-line-number" data-line-number="505"></td>
        <td id="LC505" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L506" class="blob-num js-line-number" data-line-number="506"></td>
        <td id="LC506" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">if</span> __clang__ == 1 &amp;&amp; __clang_major__ == 5 &amp;&amp; __clang_minor__ == 0 &amp;&amp; __clang_patchlevel__ == 0</td>
      </tr>
      <tr>
        <td id="L507" class="blob-num js-line-number" data-line-number="507"></td>
        <td id="LC507" class="blob-code blob-code-inner js-file-line"><span class="pl-k">static</span> <span class="pl-k">void</span>* enabler = <span class="pl-c1">nullptr</span>; <span class="pl-c"><span class="pl-c">//</span> workaround for Clang 5.0.0</span></td>
      </tr>
      <tr>
        <td id="L508" class="blob-num js-line-number" data-line-number="508"></td>
        <td id="LC508" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">else</span></td>
      </tr>
      <tr>
        <td id="L509" class="blob-num js-line-number" data-line-number="509"></td>
        <td id="LC509" class="blob-code blob-code-inner js-file-line"><span class="pl-k">extern</span> <span class="pl-k">void</span>* enabler;</td>
      </tr>
      <tr>
        <td id="L510" class="blob-num js-line-number" data-line-number="510"></td>
        <td id="LC510" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L511" class="blob-num js-line-number" data-line-number="511"></td>
        <td id="LC511" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L512" class="blob-num js-line-number" data-line-number="512"></td>
        <td id="LC512" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span>-----------------------------------------------------------------------------</span></td>
      </tr>
      <tr>
        <td id="L513" class="blob-num js-line-number" data-line-number="513"></td>
        <td id="LC513" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *  any</span></td>
      </tr>
      <tr>
        <td id="L514" class="blob-num js-line-number" data-line-number="514"></td>
        <td id="LC514" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *---------------------------------------------------------------------------<span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L515" class="blob-num js-line-number" data-line-number="515"></td>
        <td id="LC515" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L516" class="blob-num js-line-number" data-line-number="516"></td>
        <td id="LC516" class="blob-code blob-code-inner js-file-line"><span class="pl-k">class</span> <span class="pl-en">any</span></td>
      </tr>
      <tr>
        <td id="L517" class="blob-num js-line-number" data-line-number="517"></td>
        <td id="LC517" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="L518" class="blob-num js-line-number" data-line-number="518"></td>
        <td id="LC518" class="blob-code blob-code-inner js-file-line"><span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L519" class="blob-num js-line-number" data-line-number="519"></td>
        <td id="LC519" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">any</span>() : content_(<span class="pl-c1">nullptr</span>) {}</td>
      </tr>
      <tr>
        <td id="L520" class="blob-num js-line-number" data-line-number="520"></td>
        <td id="LC520" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L521" class="blob-num js-line-number" data-line-number="521"></td>
        <td id="LC521" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">any</span>(<span class="pl-k">const</span> any&amp; rhs) : content_(rhs.clone()) {}</td>
      </tr>
      <tr>
        <td id="L522" class="blob-num js-line-number" data-line-number="522"></td>
        <td id="LC522" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L523" class="blob-num js-line-number" data-line-number="523"></td>
        <td id="LC523" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">any</span>(any&amp;&amp; rhs) : content_(rhs.content_) {</td>
      </tr>
      <tr>
        <td id="L524" class="blob-num js-line-number" data-line-number="524"></td>
        <td id="LC524" class="blob-code blob-code-inner js-file-line">        rhs.<span class="pl-smi">content_</span> = <span class="pl-c1">nullptr</span>;</td>
      </tr>
      <tr>
        <td id="L525" class="blob-num js-line-number" data-line-number="525"></td>
        <td id="LC525" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L526" class="blob-num js-line-number" data-line-number="526"></td>
        <td id="LC526" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L527" class="blob-num js-line-number" data-line-number="527"></td>
        <td id="LC527" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> T&gt;</td>
      </tr>
      <tr>
        <td id="L528" class="blob-num js-line-number" data-line-number="528"></td>
        <td id="LC528" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">any</span>(<span class="pl-k">const</span> T&amp; value) : content_(<span class="pl-k">new</span> holder&lt;T&gt;(value)) {}</td>
      </tr>
      <tr>
        <td id="L529" class="blob-num js-line-number" data-line-number="529"></td>
        <td id="LC529" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L530" class="blob-num js-line-number" data-line-number="530"></td>
        <td id="LC530" class="blob-code blob-code-inner js-file-line">    any&amp; <span class="pl-k">operator</span>=(<span class="pl-k">const</span> any&amp; rhs) {</td>
      </tr>
      <tr>
        <td id="L531" class="blob-num js-line-number" data-line-number="531"></td>
        <td id="LC531" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-c1">this</span> != &amp;rhs) {</td>
      </tr>
      <tr>
        <td id="L532" class="blob-num js-line-number" data-line-number="532"></td>
        <td id="LC532" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (content_) {</td>
      </tr>
      <tr>
        <td id="L533" class="blob-num js-line-number" data-line-number="533"></td>
        <td id="LC533" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">delete</span> content_;</td>
      </tr>
      <tr>
        <td id="L534" class="blob-num js-line-number" data-line-number="534"></td>
        <td id="LC534" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L535" class="blob-num js-line-number" data-line-number="535"></td>
        <td id="LC535" class="blob-code blob-code-inner js-file-line">            content_ = rhs.<span class="pl-c1">clone</span>();</td>
      </tr>
      <tr>
        <td id="L536" class="blob-num js-line-number" data-line-number="536"></td>
        <td id="LC536" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L537" class="blob-num js-line-number" data-line-number="537"></td>
        <td id="LC537" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> *<span class="pl-c1">this</span>;</td>
      </tr>
      <tr>
        <td id="L538" class="blob-num js-line-number" data-line-number="538"></td>
        <td id="LC538" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L539" class="blob-num js-line-number" data-line-number="539"></td>
        <td id="LC539" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L540" class="blob-num js-line-number" data-line-number="540"></td>
        <td id="LC540" class="blob-code blob-code-inner js-file-line">    any&amp; <span class="pl-k">operator</span>=(any&amp;&amp; rhs) {</td>
      </tr>
      <tr>
        <td id="L541" class="blob-num js-line-number" data-line-number="541"></td>
        <td id="LC541" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-c1">this</span> != &amp;rhs) {</td>
      </tr>
      <tr>
        <td id="L542" class="blob-num js-line-number" data-line-number="542"></td>
        <td id="LC542" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (content_) {</td>
      </tr>
      <tr>
        <td id="L543" class="blob-num js-line-number" data-line-number="543"></td>
        <td id="LC543" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">delete</span> content_;</td>
      </tr>
      <tr>
        <td id="L544" class="blob-num js-line-number" data-line-number="544"></td>
        <td id="LC544" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L545" class="blob-num js-line-number" data-line-number="545"></td>
        <td id="LC545" class="blob-code blob-code-inner js-file-line">            content_ = rhs.<span class="pl-smi">content_</span>;</td>
      </tr>
      <tr>
        <td id="L546" class="blob-num js-line-number" data-line-number="546"></td>
        <td id="LC546" class="blob-code blob-code-inner js-file-line">            rhs.<span class="pl-smi">content_</span> = <span class="pl-c1">nullptr</span>;</td>
      </tr>
      <tr>
        <td id="L547" class="blob-num js-line-number" data-line-number="547"></td>
        <td id="LC547" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L548" class="blob-num js-line-number" data-line-number="548"></td>
        <td id="LC548" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> *<span class="pl-c1">this</span>;</td>
      </tr>
      <tr>
        <td id="L549" class="blob-num js-line-number" data-line-number="549"></td>
        <td id="LC549" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L550" class="blob-num js-line-number" data-line-number="550"></td>
        <td id="LC550" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L551" class="blob-num js-line-number" data-line-number="551"></td>
        <td id="LC551" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">~any</span>() {</td>
      </tr>
      <tr>
        <td id="L552" class="blob-num js-line-number" data-line-number="552"></td>
        <td id="LC552" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">delete</span> content_;</td>
      </tr>
      <tr>
        <td id="L553" class="blob-num js-line-number" data-line-number="553"></td>
        <td id="LC553" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L554" class="blob-num js-line-number" data-line-number="554"></td>
        <td id="LC554" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L555" class="blob-num js-line-number" data-line-number="555"></td>
        <td id="LC555" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">bool</span> <span class="pl-en">is_undefined</span>() <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L556" class="blob-num js-line-number" data-line-number="556"></td>
        <td id="LC556" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> content_ == <span class="pl-c1">nullptr</span>;</td>
      </tr>
      <tr>
        <td id="L557" class="blob-num js-line-number" data-line-number="557"></td>
        <td id="LC557" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L558" class="blob-num js-line-number" data-line-number="558"></td>
        <td id="LC558" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L559" class="blob-num js-line-number" data-line-number="559"></td>
        <td id="LC559" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template </span>&lt;</td>
      </tr>
      <tr>
        <td id="L560" class="blob-num js-line-number" data-line-number="560"></td>
        <td id="LC560" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">typename</span> T,</td>
      </tr>
      <tr>
        <td id="L561" class="blob-num js-line-number" data-line-number="561"></td>
        <td id="LC561" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">typename</span> std::enable_if&lt;!std::is_same&lt;T, any&gt;::value&gt;::type*&amp; = enabler</td>
      </tr>
      <tr>
        <td id="L562" class="blob-num js-line-number" data-line-number="562"></td>
        <td id="LC562" class="blob-code blob-code-inner js-file-line">    &gt;</td>
      </tr>
      <tr>
        <td id="L563" class="blob-num js-line-number" data-line-number="563"></td>
        <td id="LC563" class="blob-code blob-code-inner js-file-line">    T&amp; <span class="pl-en">get</span>() {</td>
      </tr>
      <tr>
        <td id="L564" class="blob-num js-line-number" data-line-number="564"></td>
        <td id="LC564" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (!content_) {</td>
      </tr>
      <tr>
        <td id="L565" class="blob-num js-line-number" data-line-number="565"></td>
        <td id="LC565" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">throw</span> <span class="pl-smi">std::bad_cast</span>();</td>
      </tr>
      <tr>
        <td id="L566" class="blob-num js-line-number" data-line-number="566"></td>
        <td id="LC566" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L567" class="blob-num js-line-number" data-line-number="567"></td>
        <td id="LC567" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">auto</span> p = <span class="pl-k">dynamic_cast</span>&lt;holder&lt;T&gt;*&gt;(content_);</td>
      </tr>
      <tr>
        <td id="L568" class="blob-num js-line-number" data-line-number="568"></td>
        <td id="LC568" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">assert</span>(p);</td>
      </tr>
      <tr>
        <td id="L569" class="blob-num js-line-number" data-line-number="569"></td>
        <td id="LC569" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (!p) {</td>
      </tr>
      <tr>
        <td id="L570" class="blob-num js-line-number" data-line-number="570"></td>
        <td id="LC570" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">throw</span> <span class="pl-smi">std::bad_cast</span>();</td>
      </tr>
      <tr>
        <td id="L571" class="blob-num js-line-number" data-line-number="571"></td>
        <td id="LC571" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L572" class="blob-num js-line-number" data-line-number="572"></td>
        <td id="LC572" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> p-&gt;value_;</td>
      </tr>
      <tr>
        <td id="L573" class="blob-num js-line-number" data-line-number="573"></td>
        <td id="LC573" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L574" class="blob-num js-line-number" data-line-number="574"></td>
        <td id="LC574" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L575" class="blob-num js-line-number" data-line-number="575"></td>
        <td id="LC575" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template </span>&lt;</td>
      </tr>
      <tr>
        <td id="L576" class="blob-num js-line-number" data-line-number="576"></td>
        <td id="LC576" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">typename</span> T,</td>
      </tr>
      <tr>
        <td id="L577" class="blob-num js-line-number" data-line-number="577"></td>
        <td id="LC577" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">typename</span> std::enable_if&lt;std::is_same&lt;T, any&gt;::value&gt;::type*&amp; = enabler</td>
      </tr>
      <tr>
        <td id="L578" class="blob-num js-line-number" data-line-number="578"></td>
        <td id="LC578" class="blob-code blob-code-inner js-file-line">    &gt;</td>
      </tr>
      <tr>
        <td id="L579" class="blob-num js-line-number" data-line-number="579"></td>
        <td id="LC579" class="blob-code blob-code-inner js-file-line">    T&amp; <span class="pl-en">get</span>() {</td>
      </tr>
      <tr>
        <td id="L580" class="blob-num js-line-number" data-line-number="580"></td>
        <td id="LC580" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> *<span class="pl-c1">this</span>;</td>
      </tr>
      <tr>
        <td id="L581" class="blob-num js-line-number" data-line-number="581"></td>
        <td id="LC581" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L582" class="blob-num js-line-number" data-line-number="582"></td>
        <td id="LC582" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L583" class="blob-num js-line-number" data-line-number="583"></td>
        <td id="LC583" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template </span>&lt;</td>
      </tr>
      <tr>
        <td id="L584" class="blob-num js-line-number" data-line-number="584"></td>
        <td id="LC584" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">typename</span> T,</td>
      </tr>
      <tr>
        <td id="L585" class="blob-num js-line-number" data-line-number="585"></td>
        <td id="LC585" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">typename</span> std::enable_if&lt;!std::is_same&lt;T, any&gt;::value&gt;::type*&amp; = enabler</td>
      </tr>
      <tr>
        <td id="L586" class="blob-num js-line-number" data-line-number="586"></td>
        <td id="LC586" class="blob-code blob-code-inner js-file-line">    &gt;</td>
      </tr>
      <tr>
        <td id="L587" class="blob-num js-line-number" data-line-number="587"></td>
        <td id="LC587" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> T&amp; <span class="pl-en">get</span>() <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L588" class="blob-num js-line-number" data-line-number="588"></td>
        <td id="LC588" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">assert</span>(content_);</td>
      </tr>
      <tr>
        <td id="L589" class="blob-num js-line-number" data-line-number="589"></td>
        <td id="LC589" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">auto</span> p = <span class="pl-k">dynamic_cast</span>&lt;holder&lt;T&gt;*&gt;(content_);</td>
      </tr>
      <tr>
        <td id="L590" class="blob-num js-line-number" data-line-number="590"></td>
        <td id="LC590" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">assert</span>(p);</td>
      </tr>
      <tr>
        <td id="L591" class="blob-num js-line-number" data-line-number="591"></td>
        <td id="LC591" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (!p) {</td>
      </tr>
      <tr>
        <td id="L592" class="blob-num js-line-number" data-line-number="592"></td>
        <td id="LC592" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">throw</span> <span class="pl-smi">std::bad_cast</span>();</td>
      </tr>
      <tr>
        <td id="L593" class="blob-num js-line-number" data-line-number="593"></td>
        <td id="LC593" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L594" class="blob-num js-line-number" data-line-number="594"></td>
        <td id="LC594" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> p-&gt;value_;</td>
      </tr>
      <tr>
        <td id="L595" class="blob-num js-line-number" data-line-number="595"></td>
        <td id="LC595" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L596" class="blob-num js-line-number" data-line-number="596"></td>
        <td id="LC596" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L597" class="blob-num js-line-number" data-line-number="597"></td>
        <td id="LC597" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template </span>&lt;</td>
      </tr>
      <tr>
        <td id="L598" class="blob-num js-line-number" data-line-number="598"></td>
        <td id="LC598" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">typename</span> T,</td>
      </tr>
      <tr>
        <td id="L599" class="blob-num js-line-number" data-line-number="599"></td>
        <td id="LC599" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">typename</span> std::enable_if&lt;std::is_same&lt;T, any&gt;::value&gt;::type*&amp; = enabler</td>
      </tr>
      <tr>
        <td id="L600" class="blob-num js-line-number" data-line-number="600"></td>
        <td id="LC600" class="blob-code blob-code-inner js-file-line">    &gt;</td>
      </tr>
      <tr>
        <td id="L601" class="blob-num js-line-number" data-line-number="601"></td>
        <td id="LC601" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> any&amp; <span class="pl-en">get</span>() <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L602" class="blob-num js-line-number" data-line-number="602"></td>
        <td id="LC602" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> *<span class="pl-c1">this</span>;</td>
      </tr>
      <tr>
        <td id="L603" class="blob-num js-line-number" data-line-number="603"></td>
        <td id="LC603" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L604" class="blob-num js-line-number" data-line-number="604"></td>
        <td id="LC604" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L605" class="blob-num js-line-number" data-line-number="605"></td>
        <td id="LC605" class="blob-code blob-code-inner js-file-line"><span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L606" class="blob-num js-line-number" data-line-number="606"></td>
        <td id="LC606" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">struct</span> <span class="pl-en">placeholder</span> {</td>
      </tr>
      <tr>
        <td id="L607" class="blob-num js-line-number" data-line-number="607"></td>
        <td id="LC607" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">virtual</span> <span class="pl-en">~placeholder</span>() {}</td>
      </tr>
      <tr>
        <td id="L608" class="blob-num js-line-number" data-line-number="608"></td>
        <td id="LC608" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">virtual</span> placeholder* <span class="pl-en">clone</span>() <span class="pl-k">const</span> = 0;</td>
      </tr>
      <tr>
        <td id="L609" class="blob-num js-line-number" data-line-number="609"></td>
        <td id="LC609" class="blob-code blob-code-inner js-file-line">    };</td>
      </tr>
      <tr>
        <td id="L610" class="blob-num js-line-number" data-line-number="610"></td>
        <td id="LC610" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L611" class="blob-num js-line-number" data-line-number="611"></td>
        <td id="LC611" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> T&gt;</td>
      </tr>
      <tr>
        <td id="L612" class="blob-num js-line-number" data-line-number="612"></td>
        <td id="LC612" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">struct</span> <span class="pl-en">holder</span> : placeholder {</td>
      </tr>
      <tr>
        <td id="L613" class="blob-num js-line-number" data-line-number="613"></td>
        <td id="LC613" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">holder</span>(<span class="pl-k">const</span> T&amp; value) : value_(value) {}</td>
      </tr>
      <tr>
        <td id="L614" class="blob-num js-line-number" data-line-number="614"></td>
        <td id="LC614" class="blob-code blob-code-inner js-file-line">        placeholder* <span class="pl-en">clone</span>() <span class="pl-k">const</span> <span class="pl-k">override</span> {</td>
      </tr>
      <tr>
        <td id="L615" class="blob-num js-line-number" data-line-number="615"></td>
        <td id="LC615" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> <span class="pl-k">new</span> <span class="pl-c1">holder</span>(value_);</td>
      </tr>
      <tr>
        <td id="L616" class="blob-num js-line-number" data-line-number="616"></td>
        <td id="LC616" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L617" class="blob-num js-line-number" data-line-number="617"></td>
        <td id="LC617" class="blob-code blob-code-inner js-file-line">        T value_;</td>
      </tr>
      <tr>
        <td id="L618" class="blob-num js-line-number" data-line-number="618"></td>
        <td id="LC618" class="blob-code blob-code-inner js-file-line">    };</td>
      </tr>
      <tr>
        <td id="L619" class="blob-num js-line-number" data-line-number="619"></td>
        <td id="LC619" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L620" class="blob-num js-line-number" data-line-number="620"></td>
        <td id="LC620" class="blob-code blob-code-inner js-file-line">    placeholder* <span class="pl-en">clone</span>() <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L621" class="blob-num js-line-number" data-line-number="621"></td>
        <td id="LC621" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> content_ ? content_-&gt;<span class="pl-c1">clone</span>() : <span class="pl-c1">nullptr</span>;</td>
      </tr>
      <tr>
        <td id="L622" class="blob-num js-line-number" data-line-number="622"></td>
        <td id="LC622" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L623" class="blob-num js-line-number" data-line-number="623"></td>
        <td id="LC623" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L624" class="blob-num js-line-number" data-line-number="624"></td>
        <td id="LC624" class="blob-code blob-code-inner js-file-line">    placeholder* content_;</td>
      </tr>
      <tr>
        <td id="L625" class="blob-num js-line-number" data-line-number="625"></td>
        <td id="LC625" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L626" class="blob-num js-line-number" data-line-number="626"></td>
        <td id="LC626" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L627" class="blob-num js-line-number" data-line-number="627"></td>
        <td id="LC627" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span>-----------------------------------------------------------------------------</span></td>
      </tr>
      <tr>
        <td id="L628" class="blob-num js-line-number" data-line-number="628"></td>
        <td id="LC628" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *  scope_exit</span></td>
      </tr>
      <tr>
        <td id="L629" class="blob-num js-line-number" data-line-number="629"></td>
        <td id="LC629" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *---------------------------------------------------------------------------<span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L630" class="blob-num js-line-number" data-line-number="630"></td>
        <td id="LC630" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L631" class="blob-num js-line-number" data-line-number="631"></td>
        <td id="LC631" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> This is based on &quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4189&quot;.</span></td>
      </tr>
      <tr>
        <td id="L632" class="blob-num js-line-number" data-line-number="632"></td>
        <td id="LC632" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L633" class="blob-num js-line-number" data-line-number="633"></td>
        <td id="LC633" class="blob-code blob-code-inner js-file-line"><span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> EF&gt;</td>
      </tr>
      <tr>
        <td id="L634" class="blob-num js-line-number" data-line-number="634"></td>
        <td id="LC634" class="blob-code blob-code-inner js-file-line"><span class="pl-k">struct</span> <span class="pl-en">scope_exit</span></td>
      </tr>
      <tr>
        <td id="L635" class="blob-num js-line-number" data-line-number="635"></td>
        <td id="LC635" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="L636" class="blob-num js-line-number" data-line-number="636"></td>
        <td id="LC636" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">explicit</span> <span class="pl-en">scope_exit</span>(EF&amp;&amp; f)</td>
      </tr>
      <tr>
        <td id="L637" class="blob-num js-line-number" data-line-number="637"></td>
        <td id="LC637" class="blob-code blob-code-inner js-file-line">        : exit_function(std::move(f))</td>
      </tr>
      <tr>
        <td id="L638" class="blob-num js-line-number" data-line-number="638"></td>
        <td id="LC638" class="blob-code blob-code-inner js-file-line">        , execute_on_destruction{<span class="pl-c1">true</span>} {}</td>
      </tr>
      <tr>
        <td id="L639" class="blob-num js-line-number" data-line-number="639"></td>
        <td id="LC639" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L640" class="blob-num js-line-number" data-line-number="640"></td>
        <td id="LC640" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">scope_exit</span>(scope_exit&amp;&amp; rhs)</td>
      </tr>
      <tr>
        <td id="L641" class="blob-num js-line-number" data-line-number="641"></td>
        <td id="LC641" class="blob-code blob-code-inner js-file-line">        : exit_function(std::move(rhs.exit_function))</td>
      </tr>
      <tr>
        <td id="L642" class="blob-num js-line-number" data-line-number="642"></td>
        <td id="LC642" class="blob-code blob-code-inner js-file-line">        , execute_on_destruction{rhs.<span class="pl-smi">execute_on_destruction</span>} {</td>
      </tr>
      <tr>
        <td id="L643" class="blob-num js-line-number" data-line-number="643"></td>
        <td id="LC643" class="blob-code blob-code-inner js-file-line">            rhs.<span class="pl-c1">release</span>();</td>
      </tr>
      <tr>
        <td id="L644" class="blob-num js-line-number" data-line-number="644"></td>
        <td id="LC644" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L645" class="blob-num js-line-number" data-line-number="645"></td>
        <td id="LC645" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L646" class="blob-num js-line-number" data-line-number="646"></td>
        <td id="LC646" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">~scope_exit</span>() {</td>
      </tr>
      <tr>
        <td id="L647" class="blob-num js-line-number" data-line-number="647"></td>
        <td id="LC647" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (execute_on_destruction) {</td>
      </tr>
      <tr>
        <td id="L648" class="blob-num js-line-number" data-line-number="648"></td>
        <td id="LC648" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">this</span>-&gt;<span class="pl-c1">exit_function</span>();</td>
      </tr>
      <tr>
        <td id="L649" class="blob-num js-line-number" data-line-number="649"></td>
        <td id="LC649" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L650" class="blob-num js-line-number" data-line-number="650"></td>
        <td id="LC650" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L651" class="blob-num js-line-number" data-line-number="651"></td>
        <td id="LC651" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L652" class="blob-num js-line-number" data-line-number="652"></td>
        <td id="LC652" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">release</span>() {</td>
      </tr>
      <tr>
        <td id="L653" class="blob-num js-line-number" data-line-number="653"></td>
        <td id="LC653" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">this</span>-&gt;execute_on_destruction = <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L654" class="blob-num js-line-number" data-line-number="654"></td>
        <td id="LC654" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L655" class="blob-num js-line-number" data-line-number="655"></td>
        <td id="LC655" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L656" class="blob-num js-line-number" data-line-number="656"></td>
        <td id="LC656" class="blob-code blob-code-inner js-file-line"><span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L657" class="blob-num js-line-number" data-line-number="657"></td>
        <td id="LC657" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">scope_exit</span>(<span class="pl-k">const</span> scope_exit&amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L658" class="blob-num js-line-number" data-line-number="658"></td>
        <td id="LC658" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-k">operator</span>=(<span class="pl-k">const</span> scope_exit&amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L659" class="blob-num js-line-number" data-line-number="659"></td>
        <td id="LC659" class="blob-code blob-code-inner js-file-line">    scope_exit&amp; <span class="pl-k">operator</span>=(scope_exit&amp;&amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L660" class="blob-num js-line-number" data-line-number="660"></td>
        <td id="LC660" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L661" class="blob-num js-line-number" data-line-number="661"></td>
        <td id="LC661" class="blob-code blob-code-inner js-file-line">    EF   exit_function;</td>
      </tr>
      <tr>
        <td id="L662" class="blob-num js-line-number" data-line-number="662"></td>
        <td id="LC662" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">bool</span> execute_on_destruction;</td>
      </tr>
      <tr>
        <td id="L663" class="blob-num js-line-number" data-line-number="663"></td>
        <td id="LC663" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L664" class="blob-num js-line-number" data-line-number="664"></td>
        <td id="LC664" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L665" class="blob-num js-line-number" data-line-number="665"></td>
        <td id="LC665" class="blob-code blob-code-inner js-file-line"><span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> EF&gt;</td>
      </tr>
      <tr>
        <td id="L666" class="blob-num js-line-number" data-line-number="666"></td>
        <td id="LC666" class="blob-code blob-code-inner js-file-line"><span class="pl-k">auto</span> <span class="pl-en">make_scope_exit</span>(EF&amp;&amp; exit_function) -&gt; scope_exit&lt;EF&gt; {</td>
      </tr>
      <tr>
        <td id="L667" class="blob-num js-line-number" data-line-number="667"></td>
        <td id="LC667" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> scope_exit&lt;<span class="pl-k">typename</span> std::remove_reference&lt;EF&gt;::type&gt;(std::forward&lt;EF&gt;(exit_function));</td>
      </tr>
      <tr>
        <td id="L668" class="blob-num js-line-number" data-line-number="668"></td>
        <td id="LC668" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L669" class="blob-num js-line-number" data-line-number="669"></td>
        <td id="LC669" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L670" class="blob-num js-line-number" data-line-number="670"></td>
        <td id="LC670" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span>-----------------------------------------------------------------------------</span></td>
      </tr>
      <tr>
        <td id="L671" class="blob-num js-line-number" data-line-number="671"></td>
        <td id="LC671" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *  PEG</span></td>
      </tr>
      <tr>
        <td id="L672" class="blob-num js-line-number" data-line-number="672"></td>
        <td id="LC672" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *---------------------------------------------------------------------------<span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L673" class="blob-num js-line-number" data-line-number="673"></td>
        <td id="LC673" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L674" class="blob-num js-line-number" data-line-number="674"></td>
        <td id="LC674" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L675" class="blob-num js-line-number" data-line-number="675"></td>
        <td id="LC675" class="blob-code blob-code-inner js-file-line"><span class="pl-c">* Line information utility function</span></td>
      </tr>
      <tr>
        <td id="L676" class="blob-num js-line-number" data-line-number="676"></td>
        <td id="LC676" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L677" class="blob-num js-line-number" data-line-number="677"></td>
        <td id="LC677" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::pair&lt;<span class="pl-c1">size_t</span>, <span class="pl-c1">size_t</span>&gt; <span class="pl-en">line_info</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* start, <span class="pl-k">const</span> <span class="pl-k">char</span>* cur) {</td>
      </tr>
      <tr>
        <td id="L678" class="blob-num js-line-number" data-line-number="678"></td>
        <td id="LC678" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">auto</span> p = start;</td>
      </tr>
      <tr>
        <td id="L679" class="blob-num js-line-number" data-line-number="679"></td>
        <td id="LC679" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">auto</span> col_ptr = p;</td>
      </tr>
      <tr>
        <td id="L680" class="blob-num js-line-number" data-line-number="680"></td>
        <td id="LC680" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">auto</span> no = <span class="pl-c1">1</span>;</td>
      </tr>
      <tr>
        <td id="L681" class="blob-num js-line-number" data-line-number="681"></td>
        <td id="LC681" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L682" class="blob-num js-line-number" data-line-number="682"></td>
        <td id="LC682" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">while</span> (p &lt; cur) {</td>
      </tr>
      <tr>
        <td id="L683" class="blob-num js-line-number" data-line-number="683"></td>
        <td id="LC683" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (*p == <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\n</span><span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L684" class="blob-num js-line-number" data-line-number="684"></td>
        <td id="LC684" class="blob-code blob-code-inner js-file-line">            no++;</td>
      </tr>
      <tr>
        <td id="L685" class="blob-num js-line-number" data-line-number="685"></td>
        <td id="LC685" class="blob-code blob-code-inner js-file-line">            col_ptr = p + <span class="pl-c1">1</span>;</td>
      </tr>
      <tr>
        <td id="L686" class="blob-num js-line-number" data-line-number="686"></td>
        <td id="LC686" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L687" class="blob-num js-line-number" data-line-number="687"></td>
        <td id="LC687" class="blob-code blob-code-inner js-file-line">        p++;</td>
      </tr>
      <tr>
        <td id="L688" class="blob-num js-line-number" data-line-number="688"></td>
        <td id="LC688" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L689" class="blob-num js-line-number" data-line-number="689"></td>
        <td id="LC689" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L690" class="blob-num js-line-number" data-line-number="690"></td>
        <td id="LC690" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">auto</span> col = p - col_ptr + <span class="pl-c1">1</span>;</td>
      </tr>
      <tr>
        <td id="L691" class="blob-num js-line-number" data-line-number="691"></td>
        <td id="LC691" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L692" class="blob-num js-line-number" data-line-number="692"></td>
        <td id="LC692" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-c1">std::make_pair</span>(no, col);</td>
      </tr>
      <tr>
        <td id="L693" class="blob-num js-line-number" data-line-number="693"></td>
        <td id="LC693" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L694" class="blob-num js-line-number" data-line-number="694"></td>
        <td id="LC694" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L695" class="blob-num js-line-number" data-line-number="695"></td>
        <td id="LC695" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L696" class="blob-num js-line-number" data-line-number="696"></td>
        <td id="LC696" class="blob-code blob-code-inner js-file-line"><span class="pl-c">* Semantic values</span></td>
      </tr>
      <tr>
        <td id="L697" class="blob-num js-line-number" data-line-number="697"></td>
        <td id="LC697" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L698" class="blob-num js-line-number" data-line-number="698"></td>
        <td id="LC698" class="blob-code blob-code-inner js-file-line"><span class="pl-k">struct</span> <span class="pl-en">SemanticValues</span> : <span class="pl-k">protected</span> <span class="pl-en">std</span>::vector&lt;any&gt;</td>
      </tr>
      <tr>
        <td id="L699" class="blob-num js-line-number" data-line-number="699"></td>
        <td id="LC699" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="L700" class="blob-num js-line-number" data-line-number="700"></td>
        <td id="LC700" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Input text</span></td>
      </tr>
      <tr>
        <td id="L701" class="blob-num js-line-number" data-line-number="701"></td>
        <td id="LC701" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> <span class="pl-k">char</span>* path;</td>
      </tr>
      <tr>
        <td id="L702" class="blob-num js-line-number" data-line-number="702"></td>
        <td id="LC702" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> <span class="pl-k">char</span>* ss;</td>
      </tr>
      <tr>
        <td id="L703" class="blob-num js-line-number" data-line-number="703"></td>
        <td id="LC703" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L704" class="blob-num js-line-number" data-line-number="704"></td>
        <td id="LC704" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Matched string</span></td>
      </tr>
      <tr>
        <td id="L705" class="blob-num js-line-number" data-line-number="705"></td>
        <td id="LC705" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> <span class="pl-k">char</span>* <span class="pl-en">c_str</span>() <span class="pl-k">const</span> { <span class="pl-k">return</span> s_; }</td>
      </tr>
      <tr>
        <td id="L706" class="blob-num js-line-number" data-line-number="706"></td>
        <td id="LC706" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">size_t</span>      <span class="pl-en">length</span>() <span class="pl-k">const</span> { <span class="pl-k">return</span> n_; }</td>
      </tr>
      <tr>
        <td id="L707" class="blob-num js-line-number" data-line-number="707"></td>
        <td id="LC707" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L708" class="blob-num js-line-number" data-line-number="708"></td>
        <td id="LC708" class="blob-code blob-code-inner js-file-line">    std::string <span class="pl-en">str</span>() <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L709" class="blob-num js-line-number" data-line-number="709"></td>
        <td id="LC709" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">std::string</span>(s_, n_);</td>
      </tr>
      <tr>
        <td id="L710" class="blob-num js-line-number" data-line-number="710"></td>
        <td id="LC710" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L711" class="blob-num js-line-number" data-line-number="711"></td>
        <td id="LC711" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L712" class="blob-num js-line-number" data-line-number="712"></td>
        <td id="LC712" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Line number and column at which the matched string is</span></td>
      </tr>
      <tr>
        <td id="L713" class="blob-num js-line-number" data-line-number="713"></td>
        <td id="LC713" class="blob-code blob-code-inner js-file-line">    std::pair&lt;<span class="pl-c1">size_t</span>, <span class="pl-c1">size_t</span>&gt; <span class="pl-en">line_info</span>() <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L714" class="blob-num js-line-number" data-line-number="714"></td>
        <td id="LC714" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">peg::line_info</span>(ss, s_);</td>
      </tr>
      <tr>
        <td id="L715" class="blob-num js-line-number" data-line-number="715"></td>
        <td id="LC715" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L716" class="blob-num js-line-number" data-line-number="716"></td>
        <td id="LC716" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L717" class="blob-num js-line-number" data-line-number="717"></td>
        <td id="LC717" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Choice number (0 based index)</span></td>
      </tr>
      <tr>
        <td id="L718" class="blob-num js-line-number" data-line-number="718"></td>
        <td id="LC718" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">size_t</span>      <span class="pl-en">choice</span>() <span class="pl-k">const</span> { <span class="pl-k">return</span> choice_; }</td>
      </tr>
      <tr>
        <td id="L719" class="blob-num js-line-number" data-line-number="719"></td>
        <td id="LC719" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L720" class="blob-num js-line-number" data-line-number="720"></td>
        <td id="LC720" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Tokens</span></td>
      </tr>
      <tr>
        <td id="L721" class="blob-num js-line-number" data-line-number="721"></td>
        <td id="LC721" class="blob-code blob-code-inner js-file-line">    std::vector&lt;std::pair&lt;<span class="pl-k">const</span> <span class="pl-k">char</span>*, <span class="pl-c1">size_t</span>&gt;&gt; tokens;</td>
      </tr>
      <tr>
        <td id="L722" class="blob-num js-line-number" data-line-number="722"></td>
        <td id="LC722" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L723" class="blob-num js-line-number" data-line-number="723"></td>
        <td id="LC723" class="blob-code blob-code-inner js-file-line">    std::string <span class="pl-en">token</span>(<span class="pl-c1">size_t</span> id = <span class="pl-c1">0</span>) <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L724" class="blob-num js-line-number" data-line-number="724"></td>
        <td id="LC724" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (!tokens.<span class="pl-c1">empty</span>()) {</td>
      </tr>
      <tr>
        <td id="L725" class="blob-num js-line-number" data-line-number="725"></td>
        <td id="LC725" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">assert</span>(id &lt; tokens.<span class="pl-c1">size</span>());</td>
      </tr>
      <tr>
        <td id="L726" class="blob-num js-line-number" data-line-number="726"></td>
        <td id="LC726" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">const</span> <span class="pl-k">auto</span>&amp; tok = tokens[id];</td>
      </tr>
      <tr>
        <td id="L727" class="blob-num js-line-number" data-line-number="727"></td>
        <td id="LC727" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> <span class="pl-c1">std::string</span>(tok.<span class="pl-smi">first</span>, tok.<span class="pl-smi">second</span>);</td>
      </tr>
      <tr>
        <td id="L728" class="blob-num js-line-number" data-line-number="728"></td>
        <td id="LC728" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L729" class="blob-num js-line-number" data-line-number="729"></td>
        <td id="LC729" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">std::string</span>(s_, n_);</td>
      </tr>
      <tr>
        <td id="L730" class="blob-num js-line-number" data-line-number="730"></td>
        <td id="LC730" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L731" class="blob-num js-line-number" data-line-number="731"></td>
        <td id="LC731" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L732" class="blob-num js-line-number" data-line-number="732"></td>
        <td id="LC732" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Transform the semantic value vector to another vector</span></td>
      </tr>
      <tr>
        <td id="L733" class="blob-num js-line-number" data-line-number="733"></td>
        <td id="LC733" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> T&gt;</td>
      </tr>
      <tr>
        <td id="L734" class="blob-num js-line-number" data-line-number="734"></td>
        <td id="LC734" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">auto</span> <span class="pl-en">transform</span>(<span class="pl-c1">size_t</span> beg = <span class="pl-c1">0</span>, <span class="pl-c1">size_t</span> end = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">size_t</span>&gt;(-<span class="pl-c1">1</span>)) <span class="pl-k">const</span> -&gt; vector&lt;T&gt; {</td>
      </tr>
      <tr>
        <td id="L735" class="blob-num js-line-number" data-line-number="735"></td>
        <td id="LC735" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">this</span>-&gt;<span class="pl-c1">transform</span>(beg, end, [](<span class="pl-k">const</span> any&amp; v) { <span class="pl-k">return</span> v.<span class="pl-smi">get</span>&lt;T&gt;(); });</td>
      </tr>
      <tr>
        <td id="L736" class="blob-num js-line-number" data-line-number="736"></td>
        <td id="LC736" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L737" class="blob-num js-line-number" data-line-number="737"></td>
        <td id="LC737" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L738" class="blob-num js-line-number" data-line-number="738"></td>
        <td id="LC738" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">SemanticValues</span>() : s_(<span class="pl-c1">nullptr</span>), n_(<span class="pl-c1">0</span>), choice_(<span class="pl-c1">0</span>) {}</td>
      </tr>
      <tr>
        <td id="L739" class="blob-num js-line-number" data-line-number="739"></td>
        <td id="LC739" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L740" class="blob-num js-line-number" data-line-number="740"></td>
        <td id="LC740" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">using</span> std::vector&lt;any&gt;::iterator;</td>
      </tr>
      <tr>
        <td id="L741" class="blob-num js-line-number" data-line-number="741"></td>
        <td id="LC741" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">using</span> std::vector&lt;any&gt;::const_iterator;</td>
      </tr>
      <tr>
        <td id="L742" class="blob-num js-line-number" data-line-number="742"></td>
        <td id="LC742" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">using</span> std::vector&lt;any&gt;::size;</td>
      </tr>
      <tr>
        <td id="L743" class="blob-num js-line-number" data-line-number="743"></td>
        <td id="LC743" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">using</span> std::vector&lt;any&gt;::empty;</td>
      </tr>
      <tr>
        <td id="L744" class="blob-num js-line-number" data-line-number="744"></td>
        <td id="LC744" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">using</span> std::vector&lt;any&gt;::assign;</td>
      </tr>
      <tr>
        <td id="L745" class="blob-num js-line-number" data-line-number="745"></td>
        <td id="LC745" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">using</span> std::vector&lt;any&gt;::begin;</td>
      </tr>
      <tr>
        <td id="L746" class="blob-num js-line-number" data-line-number="746"></td>
        <td id="LC746" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">using</span> std::vector&lt;any&gt;::end;</td>
      </tr>
      <tr>
        <td id="L747" class="blob-num js-line-number" data-line-number="747"></td>
        <td id="LC747" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">using</span> std::vector&lt;any&gt;::rbegin;</td>
      </tr>
      <tr>
        <td id="L748" class="blob-num js-line-number" data-line-number="748"></td>
        <td id="LC748" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">using</span> std::vector&lt;any&gt;::rend;</td>
      </tr>
      <tr>
        <td id="L749" class="blob-num js-line-number" data-line-number="749"></td>
        <td id="LC749" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">using</span> std::vector&lt;any&gt;::<span class="pl-k">operator</span>[];</td>
      </tr>
      <tr>
        <td id="L750" class="blob-num js-line-number" data-line-number="750"></td>
        <td id="LC750" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">using</span> std::vector&lt;any&gt;::at;</td>
      </tr>
      <tr>
        <td id="L751" class="blob-num js-line-number" data-line-number="751"></td>
        <td id="LC751" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">using</span> std::vector&lt;any&gt;::resize;</td>
      </tr>
      <tr>
        <td id="L752" class="blob-num js-line-number" data-line-number="752"></td>
        <td id="LC752" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">using</span> std::vector&lt;any&gt;::front;</td>
      </tr>
      <tr>
        <td id="L753" class="blob-num js-line-number" data-line-number="753"></td>
        <td id="LC753" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">using</span> std::vector&lt;any&gt;::back;</td>
      </tr>
      <tr>
        <td id="L754" class="blob-num js-line-number" data-line-number="754"></td>
        <td id="LC754" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">using</span> std::vector&lt;any&gt;::push_back;</td>
      </tr>
      <tr>
        <td id="L755" class="blob-num js-line-number" data-line-number="755"></td>
        <td id="LC755" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">using</span> std::vector&lt;any&gt;::pop_back;</td>
      </tr>
      <tr>
        <td id="L756" class="blob-num js-line-number" data-line-number="756"></td>
        <td id="LC756" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">using</span> std::vector&lt;any&gt;::insert;</td>
      </tr>
      <tr>
        <td id="L757" class="blob-num js-line-number" data-line-number="757"></td>
        <td id="LC757" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">using</span> std::vector&lt;any&gt;::erase;</td>
      </tr>
      <tr>
        <td id="L758" class="blob-num js-line-number" data-line-number="758"></td>
        <td id="LC758" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">using</span> std::vector&lt;any&gt;::clear;</td>
      </tr>
      <tr>
        <td id="L759" class="blob-num js-line-number" data-line-number="759"></td>
        <td id="LC759" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">using</span> std::vector&lt;any&gt;::swap;</td>
      </tr>
      <tr>
        <td id="L760" class="blob-num js-line-number" data-line-number="760"></td>
        <td id="LC760" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">using</span> std::vector&lt;any&gt;::emplace;</td>
      </tr>
      <tr>
        <td id="L761" class="blob-num js-line-number" data-line-number="761"></td>
        <td id="LC761" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">using</span> std::vector&lt;any&gt;::emplace_back;</td>
      </tr>
      <tr>
        <td id="L762" class="blob-num js-line-number" data-line-number="762"></td>
        <td id="LC762" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L763" class="blob-num js-line-number" data-line-number="763"></td>
        <td id="LC763" class="blob-code blob-code-inner js-file-line"><span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L764" class="blob-num js-line-number" data-line-number="764"></td>
        <td id="LC764" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">friend</span> <span class="pl-k">class</span> <span class="pl-en">Context</span>;</td>
      </tr>
      <tr>
        <td id="L765" class="blob-num js-line-number" data-line-number="765"></td>
        <td id="LC765" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">friend</span> <span class="pl-k">class</span> <span class="pl-en">PrioritizedChoice</span>;</td>
      </tr>
      <tr>
        <td id="L766" class="blob-num js-line-number" data-line-number="766"></td>
        <td id="LC766" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">friend</span> <span class="pl-k">class</span> <span class="pl-en">Holder</span>;</td>
      </tr>
      <tr>
        <td id="L767" class="blob-num js-line-number" data-line-number="767"></td>
        <td id="LC767" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L768" class="blob-num js-line-number" data-line-number="768"></td>
        <td id="LC768" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> <span class="pl-k">char</span>* s_;</td>
      </tr>
      <tr>
        <td id="L769" class="blob-num js-line-number" data-line-number="769"></td>
        <td id="LC769" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">size_t</span>      n_;</td>
      </tr>
      <tr>
        <td id="L770" class="blob-num js-line-number" data-line-number="770"></td>
        <td id="LC770" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">size_t</span>      choice_;</td>
      </tr>
      <tr>
        <td id="L771" class="blob-num js-line-number" data-line-number="771"></td>
        <td id="LC771" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L772" class="blob-num js-line-number" data-line-number="772"></td>
        <td id="LC772" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> F&gt;</td>
      </tr>
      <tr>
        <td id="L773" class="blob-num js-line-number" data-line-number="773"></td>
        <td id="LC773" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">auto</span> <span class="pl-en">transform</span>(F f) <span class="pl-k">const</span> -&gt; vector&lt;typename std::remove_const&lt;decltype(f(any()))&gt;::type&gt; {</td>
      </tr>
      <tr>
        <td id="L774" class="blob-num js-line-number" data-line-number="774"></td>
        <td id="LC774" class="blob-code blob-code-inner js-file-line">        vector&lt;<span class="pl-k">typename</span> std::remove_const&lt;<span class="pl-c1">decltype</span>(<span class="pl-c1">f</span>(<span class="pl-c1">any</span>()))&gt;::type&gt; r;</td>
      </tr>
      <tr>
        <td id="L775" class="blob-num js-line-number" data-line-number="775"></td>
        <td id="LC775" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">for</span> (<span class="pl-k">const</span> <span class="pl-k">auto</span>&amp; v: *<span class="pl-c1">this</span>) {</td>
      </tr>
      <tr>
        <td id="L776" class="blob-num js-line-number" data-line-number="776"></td>
        <td id="LC776" class="blob-code blob-code-inner js-file-line">            r.<span class="pl-c1">emplace_back</span>(<span class="pl-c1">f</span>(v));</td>
      </tr>
      <tr>
        <td id="L777" class="blob-num js-line-number" data-line-number="777"></td>
        <td id="LC777" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L778" class="blob-num js-line-number" data-line-number="778"></td>
        <td id="LC778" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> r;</td>
      </tr>
      <tr>
        <td id="L779" class="blob-num js-line-number" data-line-number="779"></td>
        <td id="LC779" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L780" class="blob-num js-line-number" data-line-number="780"></td>
        <td id="LC780" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L781" class="blob-num js-line-number" data-line-number="781"></td>
        <td id="LC781" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> F&gt;</td>
      </tr>
      <tr>
        <td id="L782" class="blob-num js-line-number" data-line-number="782"></td>
        <td id="LC782" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">auto</span> <span class="pl-en">transform</span>(<span class="pl-c1">size_t</span> beg, <span class="pl-c1">size_t</span> end, F f) <span class="pl-k">const</span> -&gt; vector&lt;typename std::remove_const&lt;decltype(f(any()))&gt;::type&gt; {</td>
      </tr>
      <tr>
        <td id="L783" class="blob-num js-line-number" data-line-number="783"></td>
        <td id="LC783" class="blob-code blob-code-inner js-file-line">        vector&lt;<span class="pl-k">typename</span> std::remove_const&lt;<span class="pl-c1">decltype</span>(<span class="pl-c1">f</span>(<span class="pl-c1">any</span>()))&gt;::type&gt; r;</td>
      </tr>
      <tr>
        <td id="L784" class="blob-num js-line-number" data-line-number="784"></td>
        <td id="LC784" class="blob-code blob-code-inner js-file-line">        end = (std::min)(end, <span class="pl-c1">size</span>());</td>
      </tr>
      <tr>
        <td id="L785" class="blob-num js-line-number" data-line-number="785"></td>
        <td id="LC785" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">for</span> (<span class="pl-c1">size_t</span> i = beg; i &lt; end; i++) {</td>
      </tr>
      <tr>
        <td id="L786" class="blob-num js-line-number" data-line-number="786"></td>
        <td id="LC786" class="blob-code blob-code-inner js-file-line">            r.<span class="pl-c1">emplace_back</span>(<span class="pl-c1">f</span>((*<span class="pl-c1">this</span>)[i]));</td>
      </tr>
      <tr>
        <td id="L787" class="blob-num js-line-number" data-line-number="787"></td>
        <td id="LC787" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L788" class="blob-num js-line-number" data-line-number="788"></td>
        <td id="LC788" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> r;</td>
      </tr>
      <tr>
        <td id="L789" class="blob-num js-line-number" data-line-number="789"></td>
        <td id="LC789" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L790" class="blob-num js-line-number" data-line-number="790"></td>
        <td id="LC790" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L791" class="blob-num js-line-number" data-line-number="791"></td>
        <td id="LC791" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L792" class="blob-num js-line-number" data-line-number="792"></td>
        <td id="LC792" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L793" class="blob-num js-line-number" data-line-number="793"></td>
        <td id="LC793" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Semantic action</span></td>
      </tr>
      <tr>
        <td id="L794" class="blob-num js-line-number" data-line-number="794"></td>
        <td id="LC794" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L795" class="blob-num js-line-number" data-line-number="795"></td>
        <td id="LC795" class="blob-code blob-code-inner js-file-line"><span class="pl-k">template </span>&lt;</td>
      </tr>
      <tr>
        <td id="L796" class="blob-num js-line-number" data-line-number="796"></td>
        <td id="LC796" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">typename</span> R, <span class="pl-k">typename</span> F,</td>
      </tr>
      <tr>
        <td id="L797" class="blob-num js-line-number" data-line-number="797"></td>
        <td id="LC797" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">typename</span> std::enable_if&lt;std::is_void&lt;R&gt;::value&gt;::type*&amp; = enabler,</td>
      </tr>
      <tr>
        <td id="L798" class="blob-num js-line-number" data-line-number="798"></td>
        <td id="LC798" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">typename</span>... Args&gt;</td>
      </tr>
      <tr>
        <td id="L799" class="blob-num js-line-number" data-line-number="799"></td>
        <td id="LC799" class="blob-code blob-code-inner js-file-line">any <span class="pl-en">call</span>(F fn, Args&amp;&amp;... args) {</td>
      </tr>
      <tr>
        <td id="L800" class="blob-num js-line-number" data-line-number="800"></td>
        <td id="LC800" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">fn</span>(std::forward&lt;Args&gt;(args)...);</td>
      </tr>
      <tr>
        <td id="L801" class="blob-num js-line-number" data-line-number="801"></td>
        <td id="LC801" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-c1">any</span>();</td>
      </tr>
      <tr>
        <td id="L802" class="blob-num js-line-number" data-line-number="802"></td>
        <td id="LC802" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L803" class="blob-num js-line-number" data-line-number="803"></td>
        <td id="LC803" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L804" class="blob-num js-line-number" data-line-number="804"></td>
        <td id="LC804" class="blob-code blob-code-inner js-file-line"><span class="pl-k">template </span>&lt;</td>
      </tr>
      <tr>
        <td id="L805" class="blob-num js-line-number" data-line-number="805"></td>
        <td id="LC805" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">typename</span> R, <span class="pl-k">typename</span> F,</td>
      </tr>
      <tr>
        <td id="L806" class="blob-num js-line-number" data-line-number="806"></td>
        <td id="LC806" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">typename</span> std::enable_if&lt;std::is_same&lt;<span class="pl-k">typename</span> std::remove_cv&lt;R&gt;::type, any&gt;::value&gt;::type*&amp; = enabler,</td>
      </tr>
      <tr>
        <td id="L807" class="blob-num js-line-number" data-line-number="807"></td>
        <td id="LC807" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">typename</span>... Args&gt;</td>
      </tr>
      <tr>
        <td id="L808" class="blob-num js-line-number" data-line-number="808"></td>
        <td id="LC808" class="blob-code blob-code-inner js-file-line">any <span class="pl-en">call</span>(F fn, Args&amp;&amp;... args) {</td>
      </tr>
      <tr>
        <td id="L809" class="blob-num js-line-number" data-line-number="809"></td>
        <td id="LC809" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-c1">fn</span>(std::forward&lt;Args&gt;(args)...);</td>
      </tr>
      <tr>
        <td id="L810" class="blob-num js-line-number" data-line-number="810"></td>
        <td id="LC810" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L811" class="blob-num js-line-number" data-line-number="811"></td>
        <td id="LC811" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L812" class="blob-num js-line-number" data-line-number="812"></td>
        <td id="LC812" class="blob-code blob-code-inner js-file-line"><span class="pl-k">template </span>&lt;</td>
      </tr>
      <tr>
        <td id="L813" class="blob-num js-line-number" data-line-number="813"></td>
        <td id="LC813" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">typename</span> R, <span class="pl-k">typename</span> F,</td>
      </tr>
      <tr>
        <td id="L814" class="blob-num js-line-number" data-line-number="814"></td>
        <td id="LC814" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">typename</span> std::enable_if&lt;</td>
      </tr>
      <tr>
        <td id="L815" class="blob-num js-line-number" data-line-number="815"></td>
        <td id="LC815" class="blob-code blob-code-inner js-file-line">        !std::is_void&lt;R&gt;::value &amp;&amp;</td>
      </tr>
      <tr>
        <td id="L816" class="blob-num js-line-number" data-line-number="816"></td>
        <td id="LC816" class="blob-code blob-code-inner js-file-line">        !std::is_same&lt;<span class="pl-k">typename</span> std::remove_cv&lt;R&gt;::type, any&gt;::value&gt;::type*&amp; = enabler,</td>
      </tr>
      <tr>
        <td id="L817" class="blob-num js-line-number" data-line-number="817"></td>
        <td id="LC817" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">typename</span>... Args&gt;</td>
      </tr>
      <tr>
        <td id="L818" class="blob-num js-line-number" data-line-number="818"></td>
        <td id="LC818" class="blob-code blob-code-inner js-file-line">any <span class="pl-en">call</span>(F fn, Args&amp;&amp;... args) {</td>
      </tr>
      <tr>
        <td id="L819" class="blob-num js-line-number" data-line-number="819"></td>
        <td id="LC819" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-c1">any</span>(<span class="pl-c1">fn</span>(std::forward&lt;Args&gt;(args)...));</td>
      </tr>
      <tr>
        <td id="L820" class="blob-num js-line-number" data-line-number="820"></td>
        <td id="LC820" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L821" class="blob-num js-line-number" data-line-number="821"></td>
        <td id="LC821" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L822" class="blob-num js-line-number" data-line-number="822"></td>
        <td id="LC822" class="blob-code blob-code-inner js-file-line"><span class="pl-k">class</span> <span class="pl-en">Action</span></td>
      </tr>
      <tr>
        <td id="L823" class="blob-num js-line-number" data-line-number="823"></td>
        <td id="LC823" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="L824" class="blob-num js-line-number" data-line-number="824"></td>
        <td id="LC824" class="blob-code blob-code-inner js-file-line"><span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L825" class="blob-num js-line-number" data-line-number="825"></td>
        <td id="LC825" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">Action</span>() = <span class="pl-k">default</span>;</td>
      </tr>
      <tr>
        <td id="L826" class="blob-num js-line-number" data-line-number="826"></td>
        <td id="LC826" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L827" class="blob-num js-line-number" data-line-number="827"></td>
        <td id="LC827" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">Action</span>(<span class="pl-k">const</span> Action&amp; rhs) : fn_(rhs.fn_) {}</td>
      </tr>
      <tr>
        <td id="L828" class="blob-num js-line-number" data-line-number="828"></td>
        <td id="LC828" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L829" class="blob-num js-line-number" data-line-number="829"></td>
        <td id="LC829" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> F, <span class="pl-k">typename</span> std::enable_if&lt;!std::is_pointer&lt;F&gt;::value &amp;&amp; !std::is_same&lt;F, std::<span class="pl-c1">nullptr_t</span>&gt;::value&gt;::type*&amp; = enabler&gt;</td>
      </tr>
      <tr>
        <td id="L830" class="blob-num js-line-number" data-line-number="830"></td>
        <td id="LC830" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">Action</span>(F fn) : fn_(make_adaptor(fn, &amp;<span class="pl-en">F::operator</span>())) {}</td>
      </tr>
      <tr>
        <td id="L831" class="blob-num js-line-number" data-line-number="831"></td>
        <td id="LC831" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L832" class="blob-num js-line-number" data-line-number="832"></td>
        <td id="LC832" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> F, <span class="pl-k">typename</span> std::enable_if&lt;std::is_pointer&lt;F&gt;::value&gt;::type*&amp; = enabler&gt;</td>
      </tr>
      <tr>
        <td id="L833" class="blob-num js-line-number" data-line-number="833"></td>
        <td id="LC833" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">Action</span>(F fn) : fn_(make_adaptor(fn, fn)) {}</td>
      </tr>
      <tr>
        <td id="L834" class="blob-num js-line-number" data-line-number="834"></td>
        <td id="LC834" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L835" class="blob-num js-line-number" data-line-number="835"></td>
        <td id="LC835" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> F, <span class="pl-k">typename</span> std::enable_if&lt;std::is_same&lt;F, std::<span class="pl-c1">nullptr_t</span>&gt;::value&gt;::type*&amp; = enabler&gt;</td>
      </tr>
      <tr>
        <td id="L836" class="blob-num js-line-number" data-line-number="836"></td>
        <td id="LC836" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">Action</span>(F <span class="pl-c"><span class="pl-c">/*</span>fn<span class="pl-c">*/</span></span>) {}</td>
      </tr>
      <tr>
        <td id="L837" class="blob-num js-line-number" data-line-number="837"></td>
        <td id="LC837" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L838" class="blob-num js-line-number" data-line-number="838"></td>
        <td id="LC838" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> F, <span class="pl-k">typename</span> std::enable_if&lt;!std::is_pointer&lt;F&gt;::value &amp;&amp; !std::is_same&lt;F, std::<span class="pl-c1">nullptr_t</span>&gt;::value&gt;::type*&amp; = enabler&gt;</td>
      </tr>
      <tr>
        <td id="L839" class="blob-num js-line-number" data-line-number="839"></td>
        <td id="LC839" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-k">operator</span>=(F fn) {</td>
      </tr>
      <tr>
        <td id="L840" class="blob-num js-line-number" data-line-number="840"></td>
        <td id="LC840" class="blob-code blob-code-inner js-file-line">        fn_ = <span class="pl-c1">make_adaptor</span>(fn, &amp;<span class="pl-c1">F::operator</span>());</td>
      </tr>
      <tr>
        <td id="L841" class="blob-num js-line-number" data-line-number="841"></td>
        <td id="LC841" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L842" class="blob-num js-line-number" data-line-number="842"></td>
        <td id="LC842" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L843" class="blob-num js-line-number" data-line-number="843"></td>
        <td id="LC843" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> F, <span class="pl-k">typename</span> std::enable_if&lt;std::is_pointer&lt;F&gt;::value&gt;::type*&amp; = enabler&gt;</td>
      </tr>
      <tr>
        <td id="L844" class="blob-num js-line-number" data-line-number="844"></td>
        <td id="LC844" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-k">operator</span>=(F fn) {</td>
      </tr>
      <tr>
        <td id="L845" class="blob-num js-line-number" data-line-number="845"></td>
        <td id="LC845" class="blob-code blob-code-inner js-file-line">        fn_ = <span class="pl-c1">make_adaptor</span>(fn, fn);</td>
      </tr>
      <tr>
        <td id="L846" class="blob-num js-line-number" data-line-number="846"></td>
        <td id="LC846" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L847" class="blob-num js-line-number" data-line-number="847"></td>
        <td id="LC847" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L848" class="blob-num js-line-number" data-line-number="848"></td>
        <td id="LC848" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> F, <span class="pl-k">typename</span> std::enable_if&lt;std::is_same&lt;F, std::<span class="pl-c1">nullptr_t</span>&gt;::value&gt;::type*&amp; = enabler&gt;</td>
      </tr>
      <tr>
        <td id="L849" class="blob-num js-line-number" data-line-number="849"></td>
        <td id="LC849" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-k">operator</span>=(F <span class="pl-c"><span class="pl-c">/*</span>fn<span class="pl-c">*/</span></span>) {}</td>
      </tr>
      <tr>
        <td id="L850" class="blob-num js-line-number" data-line-number="850"></td>
        <td id="LC850" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L851" class="blob-num js-line-number" data-line-number="851"></td>
        <td id="LC851" class="blob-code blob-code-inner js-file-line">    Action&amp; <span class="pl-k">operator</span>=(<span class="pl-k">const</span> Action&amp; rhs) = <span class="pl-k">default</span>;</td>
      </tr>
      <tr>
        <td id="L852" class="blob-num js-line-number" data-line-number="852"></td>
        <td id="LC852" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L853" class="blob-num js-line-number" data-line-number="853"></td>
        <td id="LC853" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">operator</span> <span class="pl-en">bool</span>() <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L854" class="blob-num js-line-number" data-line-number="854"></td>
        <td id="LC854" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">bool</span>(fn_);</td>
      </tr>
      <tr>
        <td id="L855" class="blob-num js-line-number" data-line-number="855"></td>
        <td id="LC855" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L856" class="blob-num js-line-number" data-line-number="856"></td>
        <td id="LC856" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L857" class="blob-num js-line-number" data-line-number="857"></td>
        <td id="LC857" class="blob-code blob-code-inner js-file-line">    any <span class="pl-en">operator</span>()(<span class="pl-k">const</span> SemanticValues&amp; sv, any&amp; dt) <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L858" class="blob-num js-line-number" data-line-number="858"></td>
        <td id="LC858" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">fn_</span>(sv, dt);</td>
      </tr>
      <tr>
        <td id="L859" class="blob-num js-line-number" data-line-number="859"></td>
        <td id="LC859" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L860" class="blob-num js-line-number" data-line-number="860"></td>
        <td id="LC860" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L861" class="blob-num js-line-number" data-line-number="861"></td>
        <td id="LC861" class="blob-code blob-code-inner js-file-line"><span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L862" class="blob-num js-line-number" data-line-number="862"></td>
        <td id="LC862" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> R&gt;</td>
      </tr>
      <tr>
        <td id="L863" class="blob-num js-line-number" data-line-number="863"></td>
        <td id="LC863" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">struct</span> <span class="pl-en">TypeAdaptor</span> {</td>
      </tr>
      <tr>
        <td id="L864" class="blob-num js-line-number" data-line-number="864"></td>
        <td id="LC864" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">TypeAdaptor</span>(std::function&lt;R (<span class="pl-k">const</span> SemanticValues&amp; sv)&gt; fn)</td>
      </tr>
      <tr>
        <td id="L865" class="blob-num js-line-number" data-line-number="865"></td>
        <td id="LC865" class="blob-code blob-code-inner js-file-line">            : fn_(fn) {}</td>
      </tr>
      <tr>
        <td id="L866" class="blob-num js-line-number" data-line-number="866"></td>
        <td id="LC866" class="blob-code blob-code-inner js-file-line">        any <span class="pl-en">operator</span>()(<span class="pl-k">const</span> SemanticValues&amp; sv, any&amp; <span class="pl-c"><span class="pl-c">/*</span>dt<span class="pl-c">*/</span></span>) {</td>
      </tr>
      <tr>
        <td id="L867" class="blob-num js-line-number" data-line-number="867"></td>
        <td id="LC867" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> call&lt;R&gt;(fn_, sv);</td>
      </tr>
      <tr>
        <td id="L868" class="blob-num js-line-number" data-line-number="868"></td>
        <td id="LC868" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L869" class="blob-num js-line-number" data-line-number="869"></td>
        <td id="LC869" class="blob-code blob-code-inner js-file-line">        std::function&lt;R (<span class="pl-k">const</span> SemanticValues&amp; sv)&gt; fn_;</td>
      </tr>
      <tr>
        <td id="L870" class="blob-num js-line-number" data-line-number="870"></td>
        <td id="LC870" class="blob-code blob-code-inner js-file-line">    };</td>
      </tr>
      <tr>
        <td id="L871" class="blob-num js-line-number" data-line-number="871"></td>
        <td id="LC871" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L872" class="blob-num js-line-number" data-line-number="872"></td>
        <td id="LC872" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> R&gt;</td>
      </tr>
      <tr>
        <td id="L873" class="blob-num js-line-number" data-line-number="873"></td>
        <td id="LC873" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">struct</span> <span class="pl-en">TypeAdaptor_c</span> {</td>
      </tr>
      <tr>
        <td id="L874" class="blob-num js-line-number" data-line-number="874"></td>
        <td id="LC874" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">TypeAdaptor_c</span>(std::function&lt;R (<span class="pl-k">const</span> SemanticValues&amp; sv, any&amp; dt)&gt; fn)</td>
      </tr>
      <tr>
        <td id="L875" class="blob-num js-line-number" data-line-number="875"></td>
        <td id="LC875" class="blob-code blob-code-inner js-file-line">            : fn_(fn) {}</td>
      </tr>
      <tr>
        <td id="L876" class="blob-num js-line-number" data-line-number="876"></td>
        <td id="LC876" class="blob-code blob-code-inner js-file-line">        any <span class="pl-en">operator</span>()(<span class="pl-k">const</span> SemanticValues&amp; sv, any&amp; dt) {</td>
      </tr>
      <tr>
        <td id="L877" class="blob-num js-line-number" data-line-number="877"></td>
        <td id="LC877" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> call&lt;R&gt;(fn_, sv, dt);</td>
      </tr>
      <tr>
        <td id="L878" class="blob-num js-line-number" data-line-number="878"></td>
        <td id="LC878" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L879" class="blob-num js-line-number" data-line-number="879"></td>
        <td id="LC879" class="blob-code blob-code-inner js-file-line">        std::function&lt;R (<span class="pl-k">const</span> SemanticValues&amp; sv, any&amp; dt)&gt; fn_;</td>
      </tr>
      <tr>
        <td id="L880" class="blob-num js-line-number" data-line-number="880"></td>
        <td id="LC880" class="blob-code blob-code-inner js-file-line">    };</td>
      </tr>
      <tr>
        <td id="L881" class="blob-num js-line-number" data-line-number="881"></td>
        <td id="LC881" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L882" class="blob-num js-line-number" data-line-number="882"></td>
        <td id="LC882" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">typedef</span> std::function&lt;any (<span class="pl-k">const</span> SemanticValues&amp; sv, any&amp; dt)&gt; Fty;</td>
      </tr>
      <tr>
        <td id="L883" class="blob-num js-line-number" data-line-number="883"></td>
        <td id="LC883" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L884" class="blob-num js-line-number" data-line-number="884"></td>
        <td id="LC884" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template</span>&lt;<span class="pl-k">typename</span> F, <span class="pl-k">typename</span> R&gt;</td>
      </tr>
      <tr>
        <td id="L885" class="blob-num js-line-number" data-line-number="885"></td>
        <td id="LC885" class="blob-code blob-code-inner js-file-line">    Fty <span class="pl-en">make_adaptor</span>(F fn, R (F::* <span class="pl-c"><span class="pl-c">/*</span>mf<span class="pl-c">*/</span></span>)(<span class="pl-k">const</span> SemanticValues&amp; sv) <span class="pl-k">const</span>) {</td>
      </tr>
      <tr>
        <td id="L886" class="blob-num js-line-number" data-line-number="886"></td>
        <td id="LC886" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> TypeAdaptor&lt;R&gt;(fn);</td>
      </tr>
      <tr>
        <td id="L887" class="blob-num js-line-number" data-line-number="887"></td>
        <td id="LC887" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L888" class="blob-num js-line-number" data-line-number="888"></td>
        <td id="LC888" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L889" class="blob-num js-line-number" data-line-number="889"></td>
        <td id="LC889" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template</span>&lt;<span class="pl-k">typename</span> F, <span class="pl-k">typename</span> R&gt;</td>
      </tr>
      <tr>
        <td id="L890" class="blob-num js-line-number" data-line-number="890"></td>
        <td id="LC890" class="blob-code blob-code-inner js-file-line">    Fty <span class="pl-en">make_adaptor</span>(F fn, R (F::* <span class="pl-c"><span class="pl-c">/*</span>mf<span class="pl-c">*/</span></span>)(<span class="pl-k">const</span> SemanticValues&amp; sv)) {</td>
      </tr>
      <tr>
        <td id="L891" class="blob-num js-line-number" data-line-number="891"></td>
        <td id="LC891" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> TypeAdaptor&lt;R&gt;(fn);</td>
      </tr>
      <tr>
        <td id="L892" class="blob-num js-line-number" data-line-number="892"></td>
        <td id="LC892" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L893" class="blob-num js-line-number" data-line-number="893"></td>
        <td id="LC893" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L894" class="blob-num js-line-number" data-line-number="894"></td>
        <td id="LC894" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template</span>&lt;<span class="pl-k">typename</span> F, <span class="pl-k">typename</span> R&gt;</td>
      </tr>
      <tr>
        <td id="L895" class="blob-num js-line-number" data-line-number="895"></td>
        <td id="LC895" class="blob-code blob-code-inner js-file-line">    Fty <span class="pl-en">make_adaptor</span>(F fn, R (* <span class="pl-c"><span class="pl-c">/*</span>mf<span class="pl-c">*/</span></span>)(<span class="pl-k">const</span> SemanticValues&amp; sv)) {</td>
      </tr>
      <tr>
        <td id="L896" class="blob-num js-line-number" data-line-number="896"></td>
        <td id="LC896" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> TypeAdaptor&lt;R&gt;(fn);</td>
      </tr>
      <tr>
        <td id="L897" class="blob-num js-line-number" data-line-number="897"></td>
        <td id="LC897" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L898" class="blob-num js-line-number" data-line-number="898"></td>
        <td id="LC898" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L899" class="blob-num js-line-number" data-line-number="899"></td>
        <td id="LC899" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template</span>&lt;<span class="pl-k">typename</span> F, <span class="pl-k">typename</span> R&gt;</td>
      </tr>
      <tr>
        <td id="L900" class="blob-num js-line-number" data-line-number="900"></td>
        <td id="LC900" class="blob-code blob-code-inner js-file-line">    Fty <span class="pl-en">make_adaptor</span>(F fn, R (F::* <span class="pl-c"><span class="pl-c">/*</span>mf<span class="pl-c">*/</span></span>)(<span class="pl-k">const</span> SemanticValues&amp; sv, any&amp; dt) <span class="pl-k">const</span>) {</td>
      </tr>
      <tr>
        <td id="L901" class="blob-num js-line-number" data-line-number="901"></td>
        <td id="LC901" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> TypeAdaptor_c&lt;R&gt;(fn);</td>
      </tr>
      <tr>
        <td id="L902" class="blob-num js-line-number" data-line-number="902"></td>
        <td id="LC902" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L903" class="blob-num js-line-number" data-line-number="903"></td>
        <td id="LC903" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L904" class="blob-num js-line-number" data-line-number="904"></td>
        <td id="LC904" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template</span>&lt;<span class="pl-k">typename</span> F, <span class="pl-k">typename</span> R&gt;</td>
      </tr>
      <tr>
        <td id="L905" class="blob-num js-line-number" data-line-number="905"></td>
        <td id="LC905" class="blob-code blob-code-inner js-file-line">    Fty <span class="pl-en">make_adaptor</span>(F fn, R (F::* <span class="pl-c"><span class="pl-c">/*</span>mf<span class="pl-c">*/</span></span>)(<span class="pl-k">const</span> SemanticValues&amp; sv, any&amp; dt)) {</td>
      </tr>
      <tr>
        <td id="L906" class="blob-num js-line-number" data-line-number="906"></td>
        <td id="LC906" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> TypeAdaptor_c&lt;R&gt;(fn);</td>
      </tr>
      <tr>
        <td id="L907" class="blob-num js-line-number" data-line-number="907"></td>
        <td id="LC907" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L908" class="blob-num js-line-number" data-line-number="908"></td>
        <td id="LC908" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L909" class="blob-num js-line-number" data-line-number="909"></td>
        <td id="LC909" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template</span>&lt;<span class="pl-k">typename</span> F, <span class="pl-k">typename</span> R&gt;</td>
      </tr>
      <tr>
        <td id="L910" class="blob-num js-line-number" data-line-number="910"></td>
        <td id="LC910" class="blob-code blob-code-inner js-file-line">    Fty <span class="pl-en">make_adaptor</span>(F fn, R(* <span class="pl-c"><span class="pl-c">/*</span>mf<span class="pl-c">*/</span></span>)(<span class="pl-k">const</span> SemanticValues&amp; sv, any&amp; dt)) {</td>
      </tr>
      <tr>
        <td id="L911" class="blob-num js-line-number" data-line-number="911"></td>
        <td id="LC911" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> TypeAdaptor_c&lt;R&gt;(fn);</td>
      </tr>
      <tr>
        <td id="L912" class="blob-num js-line-number" data-line-number="912"></td>
        <td id="LC912" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L913" class="blob-num js-line-number" data-line-number="913"></td>
        <td id="LC913" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L914" class="blob-num js-line-number" data-line-number="914"></td>
        <td id="LC914" class="blob-code blob-code-inner js-file-line">    Fty fn_;</td>
      </tr>
      <tr>
        <td id="L915" class="blob-num js-line-number" data-line-number="915"></td>
        <td id="LC915" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L916" class="blob-num js-line-number" data-line-number="916"></td>
        <td id="LC916" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L917" class="blob-num js-line-number" data-line-number="917"></td>
        <td id="LC917" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L918" class="blob-num js-line-number" data-line-number="918"></td>
        <td id="LC918" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Semantic predicate</span></td>
      </tr>
      <tr>
        <td id="L919" class="blob-num js-line-number" data-line-number="919"></td>
        <td id="LC919" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L920" class="blob-num js-line-number" data-line-number="920"></td>
        <td id="LC920" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Note: &#39;parse_error&#39; exception class should be be used in sematic action handlers to reject the rule.</span></td>
      </tr>
      <tr>
        <td id="L921" class="blob-num js-line-number" data-line-number="921"></td>
        <td id="LC921" class="blob-code blob-code-inner js-file-line"><span class="pl-k">struct</span> <span class="pl-en">parse_error</span> {</td>
      </tr>
      <tr>
        <td id="L922" class="blob-num js-line-number" data-line-number="922"></td>
        <td id="LC922" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">parse_error</span>() = <span class="pl-k">default</span>;</td>
      </tr>
      <tr>
        <td id="L923" class="blob-num js-line-number" data-line-number="923"></td>
        <td id="LC923" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">parse_error</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* s) : s_(s) {}</td>
      </tr>
      <tr>
        <td id="L924" class="blob-num js-line-number" data-line-number="924"></td>
        <td id="LC924" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> <span class="pl-k">char</span>* <span class="pl-en">what</span>() <span class="pl-k">const</span> { <span class="pl-k">return</span> s_.<span class="pl-c1">empty</span>() ? <span class="pl-c1">nullptr</span> : s_.<span class="pl-c1">c_str</span>(); }</td>
      </tr>
      <tr>
        <td id="L925" class="blob-num js-line-number" data-line-number="925"></td>
        <td id="LC925" class="blob-code blob-code-inner js-file-line"><span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L926" class="blob-num js-line-number" data-line-number="926"></td>
        <td id="LC926" class="blob-code blob-code-inner js-file-line">    std::string s_;</td>
      </tr>
      <tr>
        <td id="L927" class="blob-num js-line-number" data-line-number="927"></td>
        <td id="LC927" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L928" class="blob-num js-line-number" data-line-number="928"></td>
        <td id="LC928" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L929" class="blob-num js-line-number" data-line-number="929"></td>
        <td id="LC929" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L930" class="blob-num js-line-number" data-line-number="930"></td>
        <td id="LC930" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Match action</span></td>
      </tr>
      <tr>
        <td id="L931" class="blob-num js-line-number" data-line-number="931"></td>
        <td id="LC931" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L932" class="blob-num js-line-number" data-line-number="932"></td>
        <td id="LC932" class="blob-code blob-code-inner js-file-line"><span class="pl-k">typedef</span> std::function&lt;<span class="pl-k">void</span> (<span class="pl-k">const</span> <span class="pl-k">char</span>* s, <span class="pl-c1">size_t</span> n, <span class="pl-c1">size_t</span> id, <span class="pl-k">const</span> std::string&amp; name)&gt; MatchAction;</td>
      </tr>
      <tr>
        <td id="L933" class="blob-num js-line-number" data-line-number="933"></td>
        <td id="LC933" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L934" class="blob-num js-line-number" data-line-number="934"></td>
        <td id="LC934" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L935" class="blob-num js-line-number" data-line-number="935"></td>
        <td id="LC935" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Result</span></td>
      </tr>
      <tr>
        <td id="L936" class="blob-num js-line-number" data-line-number="936"></td>
        <td id="LC936" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L937" class="blob-num js-line-number" data-line-number="937"></td>
        <td id="LC937" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">bool</span> <span class="pl-en">success</span>(<span class="pl-c1">size_t</span> len) {</td>
      </tr>
      <tr>
        <td id="L938" class="blob-num js-line-number" data-line-number="938"></td>
        <td id="LC938" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> len != <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">size_t</span>&gt;(-<span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L939" class="blob-num js-line-number" data-line-number="939"></td>
        <td id="LC939" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L940" class="blob-num js-line-number" data-line-number="940"></td>
        <td id="LC940" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L941" class="blob-num js-line-number" data-line-number="941"></td>
        <td id="LC941" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">bool</span> <span class="pl-en">fail</span>(<span class="pl-c1">size_t</span> len) {</td>
      </tr>
      <tr>
        <td id="L942" class="blob-num js-line-number" data-line-number="942"></td>
        <td id="LC942" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> len == <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">size_t</span>&gt;(-<span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L943" class="blob-num js-line-number" data-line-number="943"></td>
        <td id="LC943" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L944" class="blob-num js-line-number" data-line-number="944"></td>
        <td id="LC944" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L945" class="blob-num js-line-number" data-line-number="945"></td>
        <td id="LC945" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L946" class="blob-num js-line-number" data-line-number="946"></td>
        <td id="LC946" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Context</span></td>
      </tr>
      <tr>
        <td id="L947" class="blob-num js-line-number" data-line-number="947"></td>
        <td id="LC947" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L948" class="blob-num js-line-number" data-line-number="948"></td>
        <td id="LC948" class="blob-code blob-code-inner js-file-line"><span class="pl-k">class</span> <span class="pl-en">Ope</span>;</td>
      </tr>
      <tr>
        <td id="L949" class="blob-num js-line-number" data-line-number="949"></td>
        <td id="LC949" class="blob-code blob-code-inner js-file-line"><span class="pl-k">class</span> <span class="pl-en">Context</span>;</td>
      </tr>
      <tr>
        <td id="L950" class="blob-num js-line-number" data-line-number="950"></td>
        <td id="LC950" class="blob-code blob-code-inner js-file-line"><span class="pl-k">class</span> <span class="pl-en">Definition</span>;</td>
      </tr>
      <tr>
        <td id="L951" class="blob-num js-line-number" data-line-number="951"></td>
        <td id="LC951" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L952" class="blob-num js-line-number" data-line-number="952"></td>
        <td id="LC952" class="blob-code blob-code-inner js-file-line"><span class="pl-k">typedef</span> std::function&lt;<span class="pl-k">void</span> (<span class="pl-k">const</span> <span class="pl-k">char</span>* name, <span class="pl-k">const</span> <span class="pl-k">char</span>* s, <span class="pl-c1">size_t</span> n, <span class="pl-k">const</span> SemanticValues&amp; sv, <span class="pl-k">const</span> Context&amp; c, <span class="pl-k">const</span> any&amp; dt)&gt; Tracer;</td>
      </tr>
      <tr>
        <td id="L953" class="blob-num js-line-number" data-line-number="953"></td>
        <td id="LC953" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L954" class="blob-num js-line-number" data-line-number="954"></td>
        <td id="LC954" class="blob-code blob-code-inner js-file-line"><span class="pl-k">class</span> <span class="pl-en">Context</span></td>
      </tr>
      <tr>
        <td id="L955" class="blob-num js-line-number" data-line-number="955"></td>
        <td id="LC955" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="L956" class="blob-num js-line-number" data-line-number="956"></td>
        <td id="LC956" class="blob-code blob-code-inner js-file-line"><span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L957" class="blob-num js-line-number" data-line-number="957"></td>
        <td id="LC957" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> <span class="pl-k">char</span>*                                  path;</td>
      </tr>
      <tr>
        <td id="L958" class="blob-num js-line-number" data-line-number="958"></td>
        <td id="LC958" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> <span class="pl-k">char</span>*                                  s;</td>
      </tr>
      <tr>
        <td id="L959" class="blob-num js-line-number" data-line-number="959"></td>
        <td id="LC959" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> <span class="pl-c1">size_t</span>                                 l;</td>
      </tr>
      <tr>
        <td id="L960" class="blob-num js-line-number" data-line-number="960"></td>
        <td id="LC960" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L961" class="blob-num js-line-number" data-line-number="961"></td>
        <td id="LC961" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> <span class="pl-k">char</span>*                                  error_pos;</td>
      </tr>
      <tr>
        <td id="L962" class="blob-num js-line-number" data-line-number="962"></td>
        <td id="LC962" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> <span class="pl-k">char</span>*                                  message_pos;</td>
      </tr>
      <tr>
        <td id="L963" class="blob-num js-line-number" data-line-number="963"></td>
        <td id="LC963" class="blob-code blob-code-inner js-file-line">    std::string                                  message; <span class="pl-c"><span class="pl-c">//</span> TODO: should be `int`.</span></td>
      </tr>
      <tr>
        <td id="L964" class="blob-num js-line-number" data-line-number="964"></td>
        <td id="LC964" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L965" class="blob-num js-line-number" data-line-number="965"></td>
        <td id="LC965" class="blob-code blob-code-inner js-file-line">    std::vector&lt;std::shared_ptr&lt;SemanticValues&gt;&gt; value_stack;</td>
      </tr>
      <tr>
        <td id="L966" class="blob-num js-line-number" data-line-number="966"></td>
        <td id="LC966" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">size_t</span>                                       value_stack_size;</td>
      </tr>
      <tr>
        <td id="L967" class="blob-num js-line-number" data-line-number="967"></td>
        <td id="LC967" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L968" class="blob-num js-line-number" data-line-number="968"></td>
        <td id="LC968" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">size_t</span>                                       nest_level;</td>
      </tr>
      <tr>
        <td id="L969" class="blob-num js-line-number" data-line-number="969"></td>
        <td id="LC969" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L970" class="blob-num js-line-number" data-line-number="970"></td>
        <td id="LC970" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">bool</span>                                         in_token;</td>
      </tr>
      <tr>
        <td id="L971" class="blob-num js-line-number" data-line-number="971"></td>
        <td id="LC971" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L972" class="blob-num js-line-number" data-line-number="972"></td>
        <td id="LC972" class="blob-code blob-code-inner js-file-line">    std::shared_ptr&lt;Ope&gt;                         whitespaceOpe;</td>
      </tr>
      <tr>
        <td id="L973" class="blob-num js-line-number" data-line-number="973"></td>
        <td id="LC973" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">bool</span>                                         in_whitespace;</td>
      </tr>
      <tr>
        <td id="L974" class="blob-num js-line-number" data-line-number="974"></td>
        <td id="LC974" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L975" class="blob-num js-line-number" data-line-number="975"></td>
        <td id="LC975" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> <span class="pl-c1">size_t</span>                                 def_count;</td>
      </tr>
      <tr>
        <td id="L976" class="blob-num js-line-number" data-line-number="976"></td>
        <td id="LC976" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> <span class="pl-k">bool</span>                                   enablePackratParsing;</td>
      </tr>
      <tr>
        <td id="L977" class="blob-num js-line-number" data-line-number="977"></td>
        <td id="LC977" class="blob-code blob-code-inner js-file-line">    std::vector&lt;<span class="pl-k">bool</span>&gt;                            cache_registered;</td>
      </tr>
      <tr>
        <td id="L978" class="blob-num js-line-number" data-line-number="978"></td>
        <td id="LC978" class="blob-code blob-code-inner js-file-line">    std::vector&lt;<span class="pl-k">bool</span>&gt;                            cache_success;</td>
      </tr>
      <tr>
        <td id="L979" class="blob-num js-line-number" data-line-number="979"></td>
        <td id="LC979" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L980" class="blob-num js-line-number" data-line-number="980"></td>
        <td id="LC980" class="blob-code blob-code-inner js-file-line">    std::map&lt;std::pair&lt;<span class="pl-c1">size_t</span>, <span class="pl-c1">size_t</span>&gt;, std::tuple&lt;<span class="pl-c1">size_t</span>, any&gt;&gt; cache_values;</td>
      </tr>
      <tr>
        <td id="L981" class="blob-num js-line-number" data-line-number="981"></td>
        <td id="LC981" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L982" class="blob-num js-line-number" data-line-number="982"></td>
        <td id="LC982" class="blob-code blob-code-inner js-file-line">    std::function&lt;<span class="pl-k">void</span> (<span class="pl-k">const</span> <span class="pl-k">char</span>*, <span class="pl-k">const</span> <span class="pl-k">char</span>*, <span class="pl-c1">size_t</span>, <span class="pl-k">const</span> SemanticValues&amp;, <span class="pl-k">const</span> Context&amp;, <span class="pl-k">const</span> any&amp;)&gt; tracer;</td>
      </tr>
      <tr>
        <td id="L983" class="blob-num js-line-number" data-line-number="983"></td>
        <td id="LC983" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L984" class="blob-num js-line-number" data-line-number="984"></td>
        <td id="LC984" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">Context</span>(</td>
      </tr>
      <tr>
        <td id="L985" class="blob-num js-line-number" data-line-number="985"></td>
        <td id="LC985" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> <span class="pl-k">char</span>*          a_path,</td>
      </tr>
      <tr>
        <td id="L986" class="blob-num js-line-number" data-line-number="986"></td>
        <td id="LC986" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> <span class="pl-k">char</span>*          a_s,</td>
      </tr>
      <tr>
        <td id="L987" class="blob-num js-line-number" data-line-number="987"></td>
        <td id="LC987" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">size_t</span>               a_l,</td>
      </tr>
      <tr>
        <td id="L988" class="blob-num js-line-number" data-line-number="988"></td>
        <td id="LC988" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">size_t</span>               a_def_count,</td>
      </tr>
      <tr>
        <td id="L989" class="blob-num js-line-number" data-line-number="989"></td>
        <td id="LC989" class="blob-code blob-code-inner js-file-line">        std::shared_ptr&lt;Ope&gt; a_whitespaceOpe,</td>
      </tr>
      <tr>
        <td id="L990" class="blob-num js-line-number" data-line-number="990"></td>
        <td id="LC990" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">bool</span>                 a_enablePackratParsing,</td>
      </tr>
      <tr>
        <td id="L991" class="blob-num js-line-number" data-line-number="991"></td>
        <td id="LC991" class="blob-code blob-code-inner js-file-line">        Tracer               a_tracer)</td>
      </tr>
      <tr>
        <td id="L992" class="blob-num js-line-number" data-line-number="992"></td>
        <td id="LC992" class="blob-code blob-code-inner js-file-line">        : path(a_path)</td>
      </tr>
      <tr>
        <td id="L993" class="blob-num js-line-number" data-line-number="993"></td>
        <td id="LC993" class="blob-code blob-code-inner js-file-line">        , s(a_s)</td>
      </tr>
      <tr>
        <td id="L994" class="blob-num js-line-number" data-line-number="994"></td>
        <td id="LC994" class="blob-code blob-code-inner js-file-line">        , l(a_l)</td>
      </tr>
      <tr>
        <td id="L995" class="blob-num js-line-number" data-line-number="995"></td>
        <td id="LC995" class="blob-code blob-code-inner js-file-line">        , error_pos(<span class="pl-c1">nullptr</span>)</td>
      </tr>
      <tr>
        <td id="L996" class="blob-num js-line-number" data-line-number="996"></td>
        <td id="LC996" class="blob-code blob-code-inner js-file-line">        , message_pos(<span class="pl-c1">nullptr</span>)</td>
      </tr>
      <tr>
        <td id="L997" class="blob-num js-line-number" data-line-number="997"></td>
        <td id="LC997" class="blob-code blob-code-inner js-file-line">        , value_stack_size(<span class="pl-c1">0</span>)</td>
      </tr>
      <tr>
        <td id="L998" class="blob-num js-line-number" data-line-number="998"></td>
        <td id="LC998" class="blob-code blob-code-inner js-file-line">        , nest_level(<span class="pl-c1">0</span>)</td>
      </tr>
      <tr>
        <td id="L999" class="blob-num js-line-number" data-line-number="999"></td>
        <td id="LC999" class="blob-code blob-code-inner js-file-line">        , in_token(<span class="pl-c1">false</span>)</td>
      </tr>
      <tr>
        <td id="L1000" class="blob-num js-line-number" data-line-number="1000"></td>
        <td id="LC1000" class="blob-code blob-code-inner js-file-line">        , whitespaceOpe(a_whitespaceOpe)</td>
      </tr>
      <tr>
        <td id="L1001" class="blob-num js-line-number" data-line-number="1001"></td>
        <td id="LC1001" class="blob-code blob-code-inner js-file-line">        , in_whitespace(<span class="pl-c1">false</span>)</td>
      </tr>
      <tr>
        <td id="L1002" class="blob-num js-line-number" data-line-number="1002"></td>
        <td id="LC1002" class="blob-code blob-code-inner js-file-line">        , def_count(a_def_count)</td>
      </tr>
      <tr>
        <td id="L1003" class="blob-num js-line-number" data-line-number="1003"></td>
        <td id="LC1003" class="blob-code blob-code-inner js-file-line">        , enablePackratParsing(a_enablePackratParsing)</td>
      </tr>
      <tr>
        <td id="L1004" class="blob-num js-line-number" data-line-number="1004"></td>
        <td id="LC1004" class="blob-code blob-code-inner js-file-line">        , cache_registered(enablePackratParsing ? def_count * (l + <span class="pl-c1">1</span>) : <span class="pl-c1">0</span>)</td>
      </tr>
      <tr>
        <td id="L1005" class="blob-num js-line-number" data-line-number="1005"></td>
        <td id="LC1005" class="blob-code blob-code-inner js-file-line">        , cache_success(enablePackratParsing ? def_count * (l + <span class="pl-c1">1</span>) : <span class="pl-c1">0</span>)</td>
      </tr>
      <tr>
        <td id="L1006" class="blob-num js-line-number" data-line-number="1006"></td>
        <td id="LC1006" class="blob-code blob-code-inner js-file-line">        , tracer(a_tracer)</td>
      </tr>
      <tr>
        <td id="L1007" class="blob-num js-line-number" data-line-number="1007"></td>
        <td id="LC1007" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="L1008" class="blob-num js-line-number" data-line-number="1008"></td>
        <td id="LC1008" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1009" class="blob-num js-line-number" data-line-number="1009"></td>
        <td id="LC1009" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1010" class="blob-num js-line-number" data-line-number="1010"></td>
        <td id="LC1010" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> T&gt;</td>
      </tr>
      <tr>
        <td id="L1011" class="blob-num js-line-number" data-line-number="1011"></td>
        <td id="LC1011" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">packrat</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* a_s, <span class="pl-c1">size_t</span> def_id, <span class="pl-c1">size_t</span>&amp; len, any&amp; val, T fn) {</td>
      </tr>
      <tr>
        <td id="L1012" class="blob-num js-line-number" data-line-number="1012"></td>
        <td id="LC1012" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (!enablePackratParsing) {</td>
      </tr>
      <tr>
        <td id="L1013" class="blob-num js-line-number" data-line-number="1013"></td>
        <td id="LC1013" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">fn</span>(val);</td>
      </tr>
      <tr>
        <td id="L1014" class="blob-num js-line-number" data-line-number="1014"></td>
        <td id="LC1014" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span>;</td>
      </tr>
      <tr>
        <td id="L1015" class="blob-num js-line-number" data-line-number="1015"></td>
        <td id="LC1015" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L1016" class="blob-num js-line-number" data-line-number="1016"></td>
        <td id="LC1016" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1017" class="blob-num js-line-number" data-line-number="1017"></td>
        <td id="LC1017" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">auto</span> col = a_s - s;</td>
      </tr>
      <tr>
        <td id="L1018" class="blob-num js-line-number" data-line-number="1018"></td>
        <td id="LC1018" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">auto</span> idx = def_count * <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">size_t</span>&gt;(col) + def_id;</td>
      </tr>
      <tr>
        <td id="L1019" class="blob-num js-line-number" data-line-number="1019"></td>
        <td id="LC1019" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1020" class="blob-num js-line-number" data-line-number="1020"></td>
        <td id="LC1020" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (cache_registered[idx]) {</td>
      </tr>
      <tr>
        <td id="L1021" class="blob-num js-line-number" data-line-number="1021"></td>
        <td id="LC1021" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (cache_success[idx]) {</td>
      </tr>
      <tr>
        <td id="L1022" class="blob-num js-line-number" data-line-number="1022"></td>
        <td id="LC1022" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">auto</span> key = <span class="pl-c1">std::make_pair</span>(col, def_id);</td>
      </tr>
      <tr>
        <td id="L1023" class="blob-num js-line-number" data-line-number="1023"></td>
        <td id="LC1023" class="blob-code blob-code-inner js-file-line">                <span class="pl-c1">std::tie</span>(len, val) = cache_values[key];</td>
      </tr>
      <tr>
        <td id="L1024" class="blob-num js-line-number" data-line-number="1024"></td>
        <td id="LC1024" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">return</span>;</td>
      </tr>
      <tr>
        <td id="L1025" class="blob-num js-line-number" data-line-number="1025"></td>
        <td id="LC1025" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L1026" class="blob-num js-line-number" data-line-number="1026"></td>
        <td id="LC1026" class="blob-code blob-code-inner js-file-line">                len = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">size_t</span>&gt;(-<span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L1027" class="blob-num js-line-number" data-line-number="1027"></td>
        <td id="LC1027" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">return</span>;</td>
      </tr>
      <tr>
        <td id="L1028" class="blob-num js-line-number" data-line-number="1028"></td>
        <td id="LC1028" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L1029" class="blob-num js-line-number" data-line-number="1029"></td>
        <td id="LC1029" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L1030" class="blob-num js-line-number" data-line-number="1030"></td>
        <td id="LC1030" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">fn</span>(val);</td>
      </tr>
      <tr>
        <td id="L1031" class="blob-num js-line-number" data-line-number="1031"></td>
        <td id="LC1031" class="blob-code blob-code-inner js-file-line">            cache_registered[idx] = <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L1032" class="blob-num js-line-number" data-line-number="1032"></td>
        <td id="LC1032" class="blob-code blob-code-inner js-file-line">            cache_success[idx] = <span class="pl-c1">success</span>(len);</td>
      </tr>
      <tr>
        <td id="L1033" class="blob-num js-line-number" data-line-number="1033"></td>
        <td id="LC1033" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-c1">success</span>(len)) {</td>
      </tr>
      <tr>
        <td id="L1034" class="blob-num js-line-number" data-line-number="1034"></td>
        <td id="LC1034" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">auto</span> key = <span class="pl-c1">std::make_pair</span>(col, def_id);</td>
      </tr>
      <tr>
        <td id="L1035" class="blob-num js-line-number" data-line-number="1035"></td>
        <td id="LC1035" class="blob-code blob-code-inner js-file-line">                cache_values[key] = <span class="pl-c1">std::make_pair</span>(len, val);</td>
      </tr>
      <tr>
        <td id="L1036" class="blob-num js-line-number" data-line-number="1036"></td>
        <td id="LC1036" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L1037" class="blob-num js-line-number" data-line-number="1037"></td>
        <td id="LC1037" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span>;</td>
      </tr>
      <tr>
        <td id="L1038" class="blob-num js-line-number" data-line-number="1038"></td>
        <td id="LC1038" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L1039" class="blob-num js-line-number" data-line-number="1039"></td>
        <td id="LC1039" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1040" class="blob-num js-line-number" data-line-number="1040"></td>
        <td id="LC1040" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1041" class="blob-num js-line-number" data-line-number="1041"></td>
        <td id="LC1041" class="blob-code blob-code-inner js-file-line">    SemanticValues&amp; <span class="pl-en">push</span>() {</td>
      </tr>
      <tr>
        <td id="L1042" class="blob-num js-line-number" data-line-number="1042"></td>
        <td id="LC1042" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">assert</span>(value_stack_size &lt;= value_stack.<span class="pl-c1">size</span>());</td>
      </tr>
      <tr>
        <td id="L1043" class="blob-num js-line-number" data-line-number="1043"></td>
        <td id="LC1043" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (value_stack_size == value_stack.<span class="pl-c1">size</span>()) {</td>
      </tr>
      <tr>
        <td id="L1044" class="blob-num js-line-number" data-line-number="1044"></td>
        <td id="LC1044" class="blob-code blob-code-inner js-file-line">            value_stack.<span class="pl-c1">emplace_back</span>(std::make_shared&lt;SemanticValues&gt;());</td>
      </tr>
      <tr>
        <td id="L1045" class="blob-num js-line-number" data-line-number="1045"></td>
        <td id="LC1045" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L1046" class="blob-num js-line-number" data-line-number="1046"></td>
        <td id="LC1046" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">auto</span>&amp; sv = *value_stack[value_stack_size++];</td>
      </tr>
      <tr>
        <td id="L1047" class="blob-num js-line-number" data-line-number="1047"></td>
        <td id="LC1047" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (!sv.<span class="pl-c1">empty</span>()) {</td>
      </tr>
      <tr>
        <td id="L1048" class="blob-num js-line-number" data-line-number="1048"></td>
        <td id="LC1048" class="blob-code blob-code-inner js-file-line">            sv.<span class="pl-c1">clear</span>();</td>
      </tr>
      <tr>
        <td id="L1049" class="blob-num js-line-number" data-line-number="1049"></td>
        <td id="LC1049" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L1050" class="blob-num js-line-number" data-line-number="1050"></td>
        <td id="LC1050" class="blob-code blob-code-inner js-file-line">        sv.<span class="pl-smi">path</span> = path;</td>
      </tr>
      <tr>
        <td id="L1051" class="blob-num js-line-number" data-line-number="1051"></td>
        <td id="LC1051" class="blob-code blob-code-inner js-file-line">        sv.<span class="pl-smi">ss</span> = s;</td>
      </tr>
      <tr>
        <td id="L1052" class="blob-num js-line-number" data-line-number="1052"></td>
        <td id="LC1052" class="blob-code blob-code-inner js-file-line">        sv.<span class="pl-smi">s_</span> = <span class="pl-c1">nullptr</span>;</td>
      </tr>
      <tr>
        <td id="L1053" class="blob-num js-line-number" data-line-number="1053"></td>
        <td id="LC1053" class="blob-code blob-code-inner js-file-line">        sv.<span class="pl-smi">n_</span> = <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L1054" class="blob-num js-line-number" data-line-number="1054"></td>
        <td id="LC1054" class="blob-code blob-code-inner js-file-line">        sv.<span class="pl-smi">tokens</span>.<span class="pl-c1">clear</span>();</td>
      </tr>
      <tr>
        <td id="L1055" class="blob-num js-line-number" data-line-number="1055"></td>
        <td id="LC1055" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> sv;</td>
      </tr>
      <tr>
        <td id="L1056" class="blob-num js-line-number" data-line-number="1056"></td>
        <td id="LC1056" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1057" class="blob-num js-line-number" data-line-number="1057"></td>
        <td id="LC1057" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1058" class="blob-num js-line-number" data-line-number="1058"></td>
        <td id="LC1058" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">pop</span>() {</td>
      </tr>
      <tr>
        <td id="L1059" class="blob-num js-line-number" data-line-number="1059"></td>
        <td id="LC1059" class="blob-code blob-code-inner js-file-line">        value_stack_size--;</td>
      </tr>
      <tr>
        <td id="L1060" class="blob-num js-line-number" data-line-number="1060"></td>
        <td id="LC1060" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1061" class="blob-num js-line-number" data-line-number="1061"></td>
        <td id="LC1061" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1062" class="blob-num js-line-number" data-line-number="1062"></td>
        <td id="LC1062" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">set_error_pos</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* a_s) {</td>
      </tr>
      <tr>
        <td id="L1063" class="blob-num js-line-number" data-line-number="1063"></td>
        <td id="LC1063" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (error_pos &lt; a_s) error_pos = a_s;</td>
      </tr>
      <tr>
        <td id="L1064" class="blob-num js-line-number" data-line-number="1064"></td>
        <td id="LC1064" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1065" class="blob-num js-line-number" data-line-number="1065"></td>
        <td id="LC1065" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1066" class="blob-num js-line-number" data-line-number="1066"></td>
        <td id="LC1066" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">trace</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* name, <span class="pl-k">const</span> <span class="pl-k">char</span>* a_s, <span class="pl-c1">size_t</span> n, SemanticValues&amp; sv, any&amp; dt) <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L1067" class="blob-num js-line-number" data-line-number="1067"></td>
        <td id="LC1067" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (tracer) <span class="pl-c1">tracer</span>(name, a_s, n, sv, *<span class="pl-c1">this</span>, dt);</td>
      </tr>
      <tr>
        <td id="L1068" class="blob-num js-line-number" data-line-number="1068"></td>
        <td id="LC1068" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1069" class="blob-num js-line-number" data-line-number="1069"></td>
        <td id="LC1069" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L1070" class="blob-num js-line-number" data-line-number="1070"></td>
        <td id="LC1070" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1071" class="blob-num js-line-number" data-line-number="1071"></td>
        <td id="LC1071" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L1072" class="blob-num js-line-number" data-line-number="1072"></td>
        <td id="LC1072" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Parser operators</span></td>
      </tr>
      <tr>
        <td id="L1073" class="blob-num js-line-number" data-line-number="1073"></td>
        <td id="LC1073" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L1074" class="blob-num js-line-number" data-line-number="1074"></td>
        <td id="LC1074" class="blob-code blob-code-inner js-file-line"><span class="pl-k">class</span> <span class="pl-en">Ope</span></td>
      </tr>
      <tr>
        <td id="L1075" class="blob-num js-line-number" data-line-number="1075"></td>
        <td id="LC1075" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="L1076" class="blob-num js-line-number" data-line-number="1076"></td>
        <td id="LC1076" class="blob-code blob-code-inner js-file-line"><span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L1077" class="blob-num js-line-number" data-line-number="1077"></td>
        <td id="LC1077" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">struct</span> <span class="pl-en">Visitor</span>;</td>
      </tr>
      <tr>
        <td id="L1078" class="blob-num js-line-number" data-line-number="1078"></td>
        <td id="LC1078" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1079" class="blob-num js-line-number" data-line-number="1079"></td>
        <td id="LC1079" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">virtual</span> <span class="pl-en">~Ope</span>() {}</td>
      </tr>
      <tr>
        <td id="L1080" class="blob-num js-line-number" data-line-number="1080"></td>
        <td id="LC1080" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">virtual</span> <span class="pl-c1">size_t</span> <span class="pl-en">parse</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* s, <span class="pl-c1">size_t</span> n, SemanticValues&amp; sv, Context&amp; c, any&amp; dt) <span class="pl-k">const</span> = 0;</td>
      </tr>
      <tr>
        <td id="L1081" class="blob-num js-line-number" data-line-number="1081"></td>
        <td id="LC1081" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">virtual</span> <span class="pl-k">void</span> <span class="pl-en">accept</span>(Visitor&amp; v) = 0;</td>
      </tr>
      <tr>
        <td id="L1082" class="blob-num js-line-number" data-line-number="1082"></td>
        <td id="LC1082" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L1083" class="blob-num js-line-number" data-line-number="1083"></td>
        <td id="LC1083" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1084" class="blob-num js-line-number" data-line-number="1084"></td>
        <td id="LC1084" class="blob-code blob-code-inner js-file-line"><span class="pl-k">class</span> <span class="pl-en">Sequence</span> : <span class="pl-k">public</span> <span class="pl-en">Ope</span></td>
      </tr>
      <tr>
        <td id="L1085" class="blob-num js-line-number" data-line-number="1085"></td>
        <td id="LC1085" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="L1086" class="blob-num js-line-number" data-line-number="1086"></td>
        <td id="LC1086" class="blob-code blob-code-inner js-file-line"><span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L1087" class="blob-num js-line-number" data-line-number="1087"></td>
        <td id="LC1087" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">Sequence</span>(<span class="pl-k">const</span> Sequence&amp; rhs) : opes_(rhs.opes_) {}</td>
      </tr>
      <tr>
        <td id="L1088" class="blob-num js-line-number" data-line-number="1088"></td>
        <td id="LC1088" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1089" class="blob-num js-line-number" data-line-number="1089"></td>
        <td id="LC1089" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">if</span> defined(_MSC_VER) &amp;&amp; _MSC_VER &lt; 1900 <span class="pl-c"><span class="pl-c">//</span> Less than Visual Studio 2015</span></td>
      </tr>
      <tr>
        <td id="L1090" class="blob-num js-line-number" data-line-number="1090"></td>
        <td id="LC1090" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> NOTE: Compiler Error C2797 on Visual Studio 2013</span></td>
      </tr>
      <tr>
        <td id="L1091" class="blob-num js-line-number" data-line-number="1091"></td>
        <td id="LC1091" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> &quot;The C++ compiler in Visual Studio does not implement list</span></td>
      </tr>
      <tr>
        <td id="L1092" class="blob-num js-line-number" data-line-number="1092"></td>
        <td id="LC1092" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> initialization inside either a member initializer list or a non-static</span></td>
      </tr>
      <tr>
        <td id="L1093" class="blob-num js-line-number" data-line-number="1093"></td>
        <td id="LC1093" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> data member initializer. Before Visual Studio 2013 Update 3, this was</span></td>
      </tr>
      <tr>
        <td id="L1094" class="blob-num js-line-number" data-line-number="1094"></td>
        <td id="LC1094" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> silently converted to a function call, which could lead to bad code</span></td>
      </tr>
      <tr>
        <td id="L1095" class="blob-num js-line-number" data-line-number="1095"></td>
        <td id="LC1095" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> generation. Visual Studio 2013 Update 3 reports this as an error.&quot;</span></td>
      </tr>
      <tr>
        <td id="L1096" class="blob-num js-line-number" data-line-number="1096"></td>
        <td id="LC1096" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template </span>&lt;<span class="pl-k">typename</span>... Args&gt;</td>
      </tr>
      <tr>
        <td id="L1097" class="blob-num js-line-number" data-line-number="1097"></td>
        <td id="LC1097" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">Sequence</span>(<span class="pl-k">const</span> Args&amp; ...args) {</td>
      </tr>
      <tr>
        <td id="L1098" class="blob-num js-line-number" data-line-number="1098"></td>
        <td id="LC1098" class="blob-code blob-code-inner js-file-line">        opes_ = std::vector&lt;std::shared_ptr&lt;Ope&gt;&gt;{ <span class="pl-k">static_cast</span>&lt;std::shared_ptr&lt;Ope&gt;&gt;(args)... };</td>
      </tr>
      <tr>
        <td id="L1099" class="blob-num js-line-number" data-line-number="1099"></td>
        <td id="LC1099" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1100" class="blob-num js-line-number" data-line-number="1100"></td>
        <td id="LC1100" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">else</span></td>
      </tr>
      <tr>
        <td id="L1101" class="blob-num js-line-number" data-line-number="1101"></td>
        <td id="LC1101" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template </span>&lt;<span class="pl-k">typename</span>... Args&gt;</td>
      </tr>
      <tr>
        <td id="L1102" class="blob-num js-line-number" data-line-number="1102"></td>
        <td id="LC1102" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">Sequence</span>(<span class="pl-k">const</span> Args&amp; ...args) : opes_{ <span class="pl-k">static_cast</span>&lt;std::shared_ptr&lt;Ope&gt;&gt;(args)... } {}</td>
      </tr>
      <tr>
        <td id="L1103" class="blob-num js-line-number" data-line-number="1103"></td>
        <td id="LC1103" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L1104" class="blob-num js-line-number" data-line-number="1104"></td>
        <td id="LC1104" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1105" class="blob-num js-line-number" data-line-number="1105"></td>
        <td id="LC1105" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">Sequence</span>(<span class="pl-k">const</span> std::vector&lt;std::shared_ptr&lt;Ope&gt;&gt;&amp; opes) : opes_(opes) {}</td>
      </tr>
      <tr>
        <td id="L1106" class="blob-num js-line-number" data-line-number="1106"></td>
        <td id="LC1106" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">Sequence</span>(std::vector&lt;std::shared_ptr&lt;Ope&gt;&gt;&amp;&amp; opes) : opes_(opes) {}</td>
      </tr>
      <tr>
        <td id="L1107" class="blob-num js-line-number" data-line-number="1107"></td>
        <td id="LC1107" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1108" class="blob-num js-line-number" data-line-number="1108"></td>
        <td id="LC1108" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">size_t</span> <span class="pl-en">parse</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* s, <span class="pl-c1">size_t</span> n, SemanticValues&amp; sv, Context&amp; c, any&amp; dt) <span class="pl-k">const</span> <span class="pl-k">override</span> {</td>
      </tr>
      <tr>
        <td id="L1109" class="blob-num js-line-number" data-line-number="1109"></td>
        <td id="LC1109" class="blob-code blob-code-inner js-file-line">        c.<span class="pl-c1">trace</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>Sequence<span class="pl-pds">&quot;</span></span>, s, n, sv, dt);</td>
      </tr>
      <tr>
        <td id="L1110" class="blob-num js-line-number" data-line-number="1110"></td>
        <td id="LC1110" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">size_t</span> i = <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L1111" class="blob-num js-line-number" data-line-number="1111"></td>
        <td id="LC1111" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">for</span> (<span class="pl-k">const</span> <span class="pl-k">auto</span>&amp; ope : opes_) {</td>
      </tr>
      <tr>
        <td id="L1112" class="blob-num js-line-number" data-line-number="1112"></td>
        <td id="LC1112" class="blob-code blob-code-inner js-file-line">            c.<span class="pl-smi">nest_level</span>++;</td>
      </tr>
      <tr>
        <td id="L1113" class="blob-num js-line-number" data-line-number="1113"></td>
        <td id="LC1113" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">auto</span> se = <span class="pl-c1">make_scope_exit</span>([&amp;]() { c.<span class="pl-smi">nest_level</span>--; });</td>
      </tr>
      <tr>
        <td id="L1114" class="blob-num js-line-number" data-line-number="1114"></td>
        <td id="LC1114" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">const</span> <span class="pl-k">auto</span>&amp; rule = *ope;</td>
      </tr>
      <tr>
        <td id="L1115" class="blob-num js-line-number" data-line-number="1115"></td>
        <td id="LC1115" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">auto</span> len = rule.<span class="pl-c1">parse</span>(s + i, n - i, sv, c, dt);</td>
      </tr>
      <tr>
        <td id="L1116" class="blob-num js-line-number" data-line-number="1116"></td>
        <td id="LC1116" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-c1">fail</span>(len)) {</td>
      </tr>
      <tr>
        <td id="L1117" class="blob-num js-line-number" data-line-number="1117"></td>
        <td id="LC1117" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">return</span> <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">size_t</span>&gt;(-<span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L1118" class="blob-num js-line-number" data-line-number="1118"></td>
        <td id="LC1118" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L1119" class="blob-num js-line-number" data-line-number="1119"></td>
        <td id="LC1119" class="blob-code blob-code-inner js-file-line">            i += len;</td>
      </tr>
      <tr>
        <td id="L1120" class="blob-num js-line-number" data-line-number="1120"></td>
        <td id="LC1120" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L1121" class="blob-num js-line-number" data-line-number="1121"></td>
        <td id="LC1121" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> i;</td>
      </tr>
      <tr>
        <td id="L1122" class="blob-num js-line-number" data-line-number="1122"></td>
        <td id="LC1122" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1123" class="blob-num js-line-number" data-line-number="1123"></td>
        <td id="LC1123" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1124" class="blob-num js-line-number" data-line-number="1124"></td>
        <td id="LC1124" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">accept</span>(Visitor&amp; v) <span class="pl-k">override</span>;</td>
      </tr>
      <tr>
        <td id="L1125" class="blob-num js-line-number" data-line-number="1125"></td>
        <td id="LC1125" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1126" class="blob-num js-line-number" data-line-number="1126"></td>
        <td id="LC1126" class="blob-code blob-code-inner js-file-line">    std::vector&lt;std::shared_ptr&lt;Ope&gt;&gt; opes_;</td>
      </tr>
      <tr>
        <td id="L1127" class="blob-num js-line-number" data-line-number="1127"></td>
        <td id="LC1127" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L1128" class="blob-num js-line-number" data-line-number="1128"></td>
        <td id="LC1128" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1129" class="blob-num js-line-number" data-line-number="1129"></td>
        <td id="LC1129" class="blob-code blob-code-inner js-file-line"><span class="pl-k">class</span> <span class="pl-en">PrioritizedChoice</span> : <span class="pl-k">public</span> <span class="pl-en">Ope</span></td>
      </tr>
      <tr>
        <td id="L1130" class="blob-num js-line-number" data-line-number="1130"></td>
        <td id="LC1130" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="L1131" class="blob-num js-line-number" data-line-number="1131"></td>
        <td id="LC1131" class="blob-code blob-code-inner js-file-line"><span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L1132" class="blob-num js-line-number" data-line-number="1132"></td>
        <td id="LC1132" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">if</span> defined(_MSC_VER) &amp;&amp; _MSC_VER &lt; 1900 <span class="pl-c"><span class="pl-c">//</span> Less than Visual Studio 2015</span></td>
      </tr>
      <tr>
        <td id="L1133" class="blob-num js-line-number" data-line-number="1133"></td>
        <td id="LC1133" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> NOTE: Compiler Error C2797 on Visual Studio 2013</span></td>
      </tr>
      <tr>
        <td id="L1134" class="blob-num js-line-number" data-line-number="1134"></td>
        <td id="LC1134" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> &quot;The C++ compiler in Visual Studio does not implement list</span></td>
      </tr>
      <tr>
        <td id="L1135" class="blob-num js-line-number" data-line-number="1135"></td>
        <td id="LC1135" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> initialization inside either a member initializer list or a non-static</span></td>
      </tr>
      <tr>
        <td id="L1136" class="blob-num js-line-number" data-line-number="1136"></td>
        <td id="LC1136" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> data member initializer. Before Visual Studio 2013 Update 3, this was</span></td>
      </tr>
      <tr>
        <td id="L1137" class="blob-num js-line-number" data-line-number="1137"></td>
        <td id="LC1137" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> silently converted to a function call, which could lead to bad code</span></td>
      </tr>
      <tr>
        <td id="L1138" class="blob-num js-line-number" data-line-number="1138"></td>
        <td id="LC1138" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> generation. Visual Studio 2013 Update 3 reports this as an error.&quot;</span></td>
      </tr>
      <tr>
        <td id="L1139" class="blob-num js-line-number" data-line-number="1139"></td>
        <td id="LC1139" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template </span>&lt;<span class="pl-k">typename</span>... Args&gt;</td>
      </tr>
      <tr>
        <td id="L1140" class="blob-num js-line-number" data-line-number="1140"></td>
        <td id="LC1140" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">PrioritizedChoice</span>(<span class="pl-k">const</span> Args&amp; ...args) {</td>
      </tr>
      <tr>
        <td id="L1141" class="blob-num js-line-number" data-line-number="1141"></td>
        <td id="LC1141" class="blob-code blob-code-inner js-file-line">        opes_ = std::vector&lt;std::shared_ptr&lt;Ope&gt;&gt;{ <span class="pl-k">static_cast</span>&lt;std::shared_ptr&lt;Ope&gt;&gt;(args)... };</td>
      </tr>
      <tr>
        <td id="L1142" class="blob-num js-line-number" data-line-number="1142"></td>
        <td id="LC1142" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1143" class="blob-num js-line-number" data-line-number="1143"></td>
        <td id="LC1143" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">else</span></td>
      </tr>
      <tr>
        <td id="L1144" class="blob-num js-line-number" data-line-number="1144"></td>
        <td id="LC1144" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template </span>&lt;<span class="pl-k">typename</span>... Args&gt;</td>
      </tr>
      <tr>
        <td id="L1145" class="blob-num js-line-number" data-line-number="1145"></td>
        <td id="LC1145" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">PrioritizedChoice</span>(<span class="pl-k">const</span> Args&amp; ...args) : opes_{ <span class="pl-k">static_cast</span>&lt;std::shared_ptr&lt;Ope&gt;&gt;(args)... } {}</td>
      </tr>
      <tr>
        <td id="L1146" class="blob-num js-line-number" data-line-number="1146"></td>
        <td id="LC1146" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L1147" class="blob-num js-line-number" data-line-number="1147"></td>
        <td id="LC1147" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1148" class="blob-num js-line-number" data-line-number="1148"></td>
        <td id="LC1148" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">PrioritizedChoice</span>(<span class="pl-k">const</span> std::vector&lt;std::shared_ptr&lt;Ope&gt;&gt;&amp; opes) : opes_(opes) {}</td>
      </tr>
      <tr>
        <td id="L1149" class="blob-num js-line-number" data-line-number="1149"></td>
        <td id="LC1149" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">PrioritizedChoice</span>(std::vector&lt;std::shared_ptr&lt;Ope&gt;&gt;&amp;&amp; opes) : opes_(opes) {}</td>
      </tr>
      <tr>
        <td id="L1150" class="blob-num js-line-number" data-line-number="1150"></td>
        <td id="LC1150" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1151" class="blob-num js-line-number" data-line-number="1151"></td>
        <td id="LC1151" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">size_t</span> <span class="pl-en">parse</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* s, <span class="pl-c1">size_t</span> n, SemanticValues&amp; sv, Context&amp; c, any&amp; dt) <span class="pl-k">const</span> <span class="pl-k">override</span> {</td>
      </tr>
      <tr>
        <td id="L1152" class="blob-num js-line-number" data-line-number="1152"></td>
        <td id="LC1152" class="blob-code blob-code-inner js-file-line">        c.<span class="pl-c1">trace</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>PrioritizedChoice<span class="pl-pds">&quot;</span></span>, s, n, sv, dt);</td>
      </tr>
      <tr>
        <td id="L1153" class="blob-num js-line-number" data-line-number="1153"></td>
        <td id="LC1153" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">size_t</span> id = <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L1154" class="blob-num js-line-number" data-line-number="1154"></td>
        <td id="LC1154" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">for</span> (<span class="pl-k">const</span> <span class="pl-k">auto</span>&amp; ope : opes_) {</td>
      </tr>
      <tr>
        <td id="L1155" class="blob-num js-line-number" data-line-number="1155"></td>
        <td id="LC1155" class="blob-code blob-code-inner js-file-line">            c.<span class="pl-smi">nest_level</span>++;</td>
      </tr>
      <tr>
        <td id="L1156" class="blob-num js-line-number" data-line-number="1156"></td>
        <td id="LC1156" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">auto</span>&amp; chldsv = c.<span class="pl-c1">push</span>();</td>
      </tr>
      <tr>
        <td id="L1157" class="blob-num js-line-number" data-line-number="1157"></td>
        <td id="LC1157" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">auto</span> se = <span class="pl-c1">make_scope_exit</span>([&amp;]() {</td>
      </tr>
      <tr>
        <td id="L1158" class="blob-num js-line-number" data-line-number="1158"></td>
        <td id="LC1158" class="blob-code blob-code-inner js-file-line">                c.<span class="pl-smi">nest_level</span>--;</td>
      </tr>
      <tr>
        <td id="L1159" class="blob-num js-line-number" data-line-number="1159"></td>
        <td id="LC1159" class="blob-code blob-code-inner js-file-line">                c.<span class="pl-c1">pop</span>();</td>
      </tr>
      <tr>
        <td id="L1160" class="blob-num js-line-number" data-line-number="1160"></td>
        <td id="LC1160" class="blob-code blob-code-inner js-file-line">            });</td>
      </tr>
      <tr>
        <td id="L1161" class="blob-num js-line-number" data-line-number="1161"></td>
        <td id="LC1161" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">const</span> <span class="pl-k">auto</span>&amp; rule = *ope;</td>
      </tr>
      <tr>
        <td id="L1162" class="blob-num js-line-number" data-line-number="1162"></td>
        <td id="LC1162" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">auto</span> len = rule.<span class="pl-c1">parse</span>(s, n, chldsv, c, dt);</td>
      </tr>
      <tr>
        <td id="L1163" class="blob-num js-line-number" data-line-number="1163"></td>
        <td id="LC1163" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-c1">success</span>(len)) {</td>
      </tr>
      <tr>
        <td id="L1164" class="blob-num js-line-number" data-line-number="1164"></td>
        <td id="LC1164" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">if</span> (!chldsv.<span class="pl-c1">empty</span>()) {</td>
      </tr>
      <tr>
        <td id="L1165" class="blob-num js-line-number" data-line-number="1165"></td>
        <td id="LC1165" class="blob-code blob-code-inner js-file-line">                    sv.<span class="pl-c1">insert</span>(sv.<span class="pl-c1">end</span>(), chldsv.<span class="pl-c1">begin</span>(), chldsv.<span class="pl-c1">end</span>());</td>
      </tr>
      <tr>
        <td id="L1166" class="blob-num js-line-number" data-line-number="1166"></td>
        <td id="LC1166" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L1167" class="blob-num js-line-number" data-line-number="1167"></td>
        <td id="LC1167" class="blob-code blob-code-inner js-file-line">                sv.<span class="pl-smi">s_</span> = chldsv.<span class="pl-c1">c_str</span>();</td>
      </tr>
      <tr>
        <td id="L1168" class="blob-num js-line-number" data-line-number="1168"></td>
        <td id="LC1168" class="blob-code blob-code-inner js-file-line">                sv.<span class="pl-smi">n_</span> = chldsv.<span class="pl-c1">length</span>();</td>
      </tr>
      <tr>
        <td id="L1169" class="blob-num js-line-number" data-line-number="1169"></td>
        <td id="LC1169" class="blob-code blob-code-inner js-file-line">                sv.<span class="pl-smi">choice_</span> = id;</td>
      </tr>
      <tr>
        <td id="L1170" class="blob-num js-line-number" data-line-number="1170"></td>
        <td id="LC1170" class="blob-code blob-code-inner js-file-line">                sv.<span class="pl-smi">tokens</span>.<span class="pl-c1">insert</span>(sv.<span class="pl-smi">tokens</span>.<span class="pl-c1">end</span>(), chldsv.<span class="pl-smi">tokens</span>.<span class="pl-c1">begin</span>(), chldsv.<span class="pl-smi">tokens</span>.<span class="pl-c1">end</span>());</td>
      </tr>
      <tr>
        <td id="L1171" class="blob-num js-line-number" data-line-number="1171"></td>
        <td id="LC1171" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">return</span> len;</td>
      </tr>
      <tr>
        <td id="L1172" class="blob-num js-line-number" data-line-number="1172"></td>
        <td id="LC1172" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L1173" class="blob-num js-line-number" data-line-number="1173"></td>
        <td id="LC1173" class="blob-code blob-code-inner js-file-line">            id++;</td>
      </tr>
      <tr>
        <td id="L1174" class="blob-num js-line-number" data-line-number="1174"></td>
        <td id="LC1174" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L1175" class="blob-num js-line-number" data-line-number="1175"></td>
        <td id="LC1175" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">size_t</span>&gt;(-<span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L1176" class="blob-num js-line-number" data-line-number="1176"></td>
        <td id="LC1176" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1177" class="blob-num js-line-number" data-line-number="1177"></td>
        <td id="LC1177" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1178" class="blob-num js-line-number" data-line-number="1178"></td>
        <td id="LC1178" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">accept</span>(Visitor&amp; v) <span class="pl-k">override</span>;</td>
      </tr>
      <tr>
        <td id="L1179" class="blob-num js-line-number" data-line-number="1179"></td>
        <td id="LC1179" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1180" class="blob-num js-line-number" data-line-number="1180"></td>
        <td id="LC1180" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">size_t</span> <span class="pl-en">size</span>() <span class="pl-k">const</span> { <span class="pl-k">return</span> opes_.<span class="pl-c1">size</span>();  }</td>
      </tr>
      <tr>
        <td id="L1181" class="blob-num js-line-number" data-line-number="1181"></td>
        <td id="LC1181" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1182" class="blob-num js-line-number" data-line-number="1182"></td>
        <td id="LC1182" class="blob-code blob-code-inner js-file-line">    std::vector&lt;std::shared_ptr&lt;Ope&gt;&gt; opes_;</td>
      </tr>
      <tr>
        <td id="L1183" class="blob-num js-line-number" data-line-number="1183"></td>
        <td id="LC1183" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L1184" class="blob-num js-line-number" data-line-number="1184"></td>
        <td id="LC1184" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1185" class="blob-num js-line-number" data-line-number="1185"></td>
        <td id="LC1185" class="blob-code blob-code-inner js-file-line"><span class="pl-k">class</span> <span class="pl-en">ZeroOrMore</span> : <span class="pl-k">public</span> <span class="pl-en">Ope</span></td>
      </tr>
      <tr>
        <td id="L1186" class="blob-num js-line-number" data-line-number="1186"></td>
        <td id="LC1186" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="L1187" class="blob-num js-line-number" data-line-number="1187"></td>
        <td id="LC1187" class="blob-code blob-code-inner js-file-line"><span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L1188" class="blob-num js-line-number" data-line-number="1188"></td>
        <td id="LC1188" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">ZeroOrMore</span>(<span class="pl-k">const</span> std::shared_ptr&lt;Ope&gt;&amp; ope) : ope_(ope) {}</td>
      </tr>
      <tr>
        <td id="L1189" class="blob-num js-line-number" data-line-number="1189"></td>
        <td id="LC1189" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1190" class="blob-num js-line-number" data-line-number="1190"></td>
        <td id="LC1190" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">size_t</span> <span class="pl-en">parse</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* s, <span class="pl-c1">size_t</span> n, SemanticValues&amp; sv, Context&amp; c, any&amp; dt) <span class="pl-k">const</span> <span class="pl-k">override</span> {</td>
      </tr>
      <tr>
        <td id="L1191" class="blob-num js-line-number" data-line-number="1191"></td>
        <td id="LC1191" class="blob-code blob-code-inner js-file-line">        c.<span class="pl-c1">trace</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>ZeroOrMore<span class="pl-pds">&quot;</span></span>, s, n, sv, dt);</td>
      </tr>
      <tr>
        <td id="L1192" class="blob-num js-line-number" data-line-number="1192"></td>
        <td id="LC1192" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">auto</span> save_error_pos = c.<span class="pl-smi">error_pos</span>;</td>
      </tr>
      <tr>
        <td id="L1193" class="blob-num js-line-number" data-line-number="1193"></td>
        <td id="LC1193" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">size_t</span> i = <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L1194" class="blob-num js-line-number" data-line-number="1194"></td>
        <td id="LC1194" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">while</span> (n - i &gt; <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L1195" class="blob-num js-line-number" data-line-number="1195"></td>
        <td id="LC1195" class="blob-code blob-code-inner js-file-line">            c.<span class="pl-smi">nest_level</span>++;</td>
      </tr>
      <tr>
        <td id="L1196" class="blob-num js-line-number" data-line-number="1196"></td>
        <td id="LC1196" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">auto</span> se = <span class="pl-c1">make_scope_exit</span>([&amp;]() { c.<span class="pl-smi">nest_level</span>--; });</td>
      </tr>
      <tr>
        <td id="L1197" class="blob-num js-line-number" data-line-number="1197"></td>
        <td id="LC1197" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">auto</span> save_sv_size = sv.<span class="pl-c1">size</span>();</td>
      </tr>
      <tr>
        <td id="L1198" class="blob-num js-line-number" data-line-number="1198"></td>
        <td id="LC1198" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">auto</span> save_tok_size = sv.<span class="pl-smi">tokens</span>.<span class="pl-c1">size</span>();</td>
      </tr>
      <tr>
        <td id="L1199" class="blob-num js-line-number" data-line-number="1199"></td>
        <td id="LC1199" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">const</span> <span class="pl-k">auto</span>&amp; rule = *ope_;</td>
      </tr>
      <tr>
        <td id="L1200" class="blob-num js-line-number" data-line-number="1200"></td>
        <td id="LC1200" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">auto</span> len = rule.<span class="pl-c1">parse</span>(s + i, n - i, sv, c, dt);</td>
      </tr>
      <tr>
        <td id="L1201" class="blob-num js-line-number" data-line-number="1201"></td>
        <td id="LC1201" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-c1">fail</span>(len)) {</td>
      </tr>
      <tr>
        <td id="L1202" class="blob-num js-line-number" data-line-number="1202"></td>
        <td id="LC1202" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">if</span> (sv.<span class="pl-c1">size</span>() != save_sv_size) {</td>
      </tr>
      <tr>
        <td id="L1203" class="blob-num js-line-number" data-line-number="1203"></td>
        <td id="LC1203" class="blob-code blob-code-inner js-file-line">                    sv.<span class="pl-c1">erase</span>(sv.<span class="pl-c1">begin</span>() + <span class="pl-k">static_cast</span>&lt;std::<span class="pl-c1">ptrdiff_t</span>&gt;(save_sv_size));</td>
      </tr>
      <tr>
        <td id="L1204" class="blob-num js-line-number" data-line-number="1204"></td>
        <td id="LC1204" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L1205" class="blob-num js-line-number" data-line-number="1205"></td>
        <td id="LC1205" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">if</span> (sv.<span class="pl-smi">tokens</span>.<span class="pl-c1">size</span>() != save_tok_size) {</td>
      </tr>
      <tr>
        <td id="L1206" class="blob-num js-line-number" data-line-number="1206"></td>
        <td id="LC1206" class="blob-code blob-code-inner js-file-line">                    sv.<span class="pl-smi">tokens</span>.<span class="pl-c1">erase</span>(sv.<span class="pl-smi">tokens</span>.<span class="pl-c1">begin</span>() + <span class="pl-k">static_cast</span>&lt;std::<span class="pl-c1">ptrdiff_t</span>&gt;(save_tok_size));</td>
      </tr>
      <tr>
        <td id="L1207" class="blob-num js-line-number" data-line-number="1207"></td>
        <td id="LC1207" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L1208" class="blob-num js-line-number" data-line-number="1208"></td>
        <td id="LC1208" class="blob-code blob-code-inner js-file-line">                c.<span class="pl-smi">error_pos</span> = save_error_pos;</td>
      </tr>
      <tr>
        <td id="L1209" class="blob-num js-line-number" data-line-number="1209"></td>
        <td id="LC1209" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L1210" class="blob-num js-line-number" data-line-number="1210"></td>
        <td id="LC1210" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L1211" class="blob-num js-line-number" data-line-number="1211"></td>
        <td id="LC1211" class="blob-code blob-code-inner js-file-line">            i += len;</td>
      </tr>
      <tr>
        <td id="L1212" class="blob-num js-line-number" data-line-number="1212"></td>
        <td id="LC1212" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L1213" class="blob-num js-line-number" data-line-number="1213"></td>
        <td id="LC1213" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> i;</td>
      </tr>
      <tr>
        <td id="L1214" class="blob-num js-line-number" data-line-number="1214"></td>
        <td id="LC1214" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1215" class="blob-num js-line-number" data-line-number="1215"></td>
        <td id="LC1215" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1216" class="blob-num js-line-number" data-line-number="1216"></td>
        <td id="LC1216" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">accept</span>(Visitor&amp; v) <span class="pl-k">override</span>;</td>
      </tr>
      <tr>
        <td id="L1217" class="blob-num js-line-number" data-line-number="1217"></td>
        <td id="LC1217" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1218" class="blob-num js-line-number" data-line-number="1218"></td>
        <td id="LC1218" class="blob-code blob-code-inner js-file-line">    std::shared_ptr&lt;Ope&gt; ope_;</td>
      </tr>
      <tr>
        <td id="L1219" class="blob-num js-line-number" data-line-number="1219"></td>
        <td id="LC1219" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L1220" class="blob-num js-line-number" data-line-number="1220"></td>
        <td id="LC1220" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1221" class="blob-num js-line-number" data-line-number="1221"></td>
        <td id="LC1221" class="blob-code blob-code-inner js-file-line"><span class="pl-k">class</span> <span class="pl-en">OneOrMore</span> : <span class="pl-k">public</span> <span class="pl-en">Ope</span></td>
      </tr>
      <tr>
        <td id="L1222" class="blob-num js-line-number" data-line-number="1222"></td>
        <td id="LC1222" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="L1223" class="blob-num js-line-number" data-line-number="1223"></td>
        <td id="LC1223" class="blob-code blob-code-inner js-file-line"><span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L1224" class="blob-num js-line-number" data-line-number="1224"></td>
        <td id="LC1224" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">OneOrMore</span>(<span class="pl-k">const</span> std::shared_ptr&lt;Ope&gt;&amp; ope) : ope_(ope) {}</td>
      </tr>
      <tr>
        <td id="L1225" class="blob-num js-line-number" data-line-number="1225"></td>
        <td id="LC1225" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1226" class="blob-num js-line-number" data-line-number="1226"></td>
        <td id="LC1226" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">size_t</span> <span class="pl-en">parse</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* s, <span class="pl-c1">size_t</span> n, SemanticValues&amp; sv, Context&amp; c, any&amp; dt) <span class="pl-k">const</span> <span class="pl-k">override</span> {</td>
      </tr>
      <tr>
        <td id="L1227" class="blob-num js-line-number" data-line-number="1227"></td>
        <td id="LC1227" class="blob-code blob-code-inner js-file-line">        c.<span class="pl-c1">trace</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>OneOrMore<span class="pl-pds">&quot;</span></span>, s, n, sv, dt);</td>
      </tr>
      <tr>
        <td id="L1228" class="blob-num js-line-number" data-line-number="1228"></td>
        <td id="LC1228" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">size_t</span> len = <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L1229" class="blob-num js-line-number" data-line-number="1229"></td>
        <td id="LC1229" class="blob-code blob-code-inner js-file-line">        {</td>
      </tr>
      <tr>
        <td id="L1230" class="blob-num js-line-number" data-line-number="1230"></td>
        <td id="LC1230" class="blob-code blob-code-inner js-file-line">            c.<span class="pl-smi">nest_level</span>++;</td>
      </tr>
      <tr>
        <td id="L1231" class="blob-num js-line-number" data-line-number="1231"></td>
        <td id="LC1231" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">auto</span> se = <span class="pl-c1">make_scope_exit</span>([&amp;]() { c.<span class="pl-smi">nest_level</span>--; });</td>
      </tr>
      <tr>
        <td id="L1232" class="blob-num js-line-number" data-line-number="1232"></td>
        <td id="LC1232" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">const</span> <span class="pl-k">auto</span>&amp; rule = *ope_;</td>
      </tr>
      <tr>
        <td id="L1233" class="blob-num js-line-number" data-line-number="1233"></td>
        <td id="LC1233" class="blob-code blob-code-inner js-file-line">            len = rule.<span class="pl-c1">parse</span>(s, n, sv, c, dt);</td>
      </tr>
      <tr>
        <td id="L1234" class="blob-num js-line-number" data-line-number="1234"></td>
        <td id="LC1234" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-c1">fail</span>(len)) {</td>
      </tr>
      <tr>
        <td id="L1235" class="blob-num js-line-number" data-line-number="1235"></td>
        <td id="LC1235" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">return</span> <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">size_t</span>&gt;(-<span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L1236" class="blob-num js-line-number" data-line-number="1236"></td>
        <td id="LC1236" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L1237" class="blob-num js-line-number" data-line-number="1237"></td>
        <td id="LC1237" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L1238" class="blob-num js-line-number" data-line-number="1238"></td>
        <td id="LC1238" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">auto</span> save_error_pos = c.<span class="pl-smi">error_pos</span>;</td>
      </tr>
      <tr>
        <td id="L1239" class="blob-num js-line-number" data-line-number="1239"></td>
        <td id="LC1239" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">auto</span> i = len;</td>
      </tr>
      <tr>
        <td id="L1240" class="blob-num js-line-number" data-line-number="1240"></td>
        <td id="LC1240" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">while</span> (n - i &gt; <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L1241" class="blob-num js-line-number" data-line-number="1241"></td>
        <td id="LC1241" class="blob-code blob-code-inner js-file-line">            c.<span class="pl-smi">nest_level</span>++;</td>
      </tr>
      <tr>
        <td id="L1242" class="blob-num js-line-number" data-line-number="1242"></td>
        <td id="LC1242" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">auto</span> se = <span class="pl-c1">make_scope_exit</span>([&amp;]() { c.<span class="pl-smi">nest_level</span>--; });</td>
      </tr>
      <tr>
        <td id="L1243" class="blob-num js-line-number" data-line-number="1243"></td>
        <td id="LC1243" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">auto</span> save_sv_size = sv.<span class="pl-c1">size</span>();</td>
      </tr>
      <tr>
        <td id="L1244" class="blob-num js-line-number" data-line-number="1244"></td>
        <td id="LC1244" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">auto</span> save_tok_size = sv.<span class="pl-smi">tokens</span>.<span class="pl-c1">size</span>();</td>
      </tr>
      <tr>
        <td id="L1245" class="blob-num js-line-number" data-line-number="1245"></td>
        <td id="LC1245" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">const</span> <span class="pl-k">auto</span>&amp; rule = *ope_;</td>
      </tr>
      <tr>
        <td id="L1246" class="blob-num js-line-number" data-line-number="1246"></td>
        <td id="LC1246" class="blob-code blob-code-inner js-file-line">            len = rule.<span class="pl-c1">parse</span>(s + i, n - i, sv, c, dt);</td>
      </tr>
      <tr>
        <td id="L1247" class="blob-num js-line-number" data-line-number="1247"></td>
        <td id="LC1247" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-c1">fail</span>(len)) {</td>
      </tr>
      <tr>
        <td id="L1248" class="blob-num js-line-number" data-line-number="1248"></td>
        <td id="LC1248" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">if</span> (sv.<span class="pl-c1">size</span>() != save_sv_size) {</td>
      </tr>
      <tr>
        <td id="L1249" class="blob-num js-line-number" data-line-number="1249"></td>
        <td id="LC1249" class="blob-code blob-code-inner js-file-line">                    sv.<span class="pl-c1">erase</span>(sv.<span class="pl-c1">begin</span>() + <span class="pl-k">static_cast</span>&lt;std::<span class="pl-c1">ptrdiff_t</span>&gt;(save_sv_size));</td>
      </tr>
      <tr>
        <td id="L1250" class="blob-num js-line-number" data-line-number="1250"></td>
        <td id="LC1250" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L1251" class="blob-num js-line-number" data-line-number="1251"></td>
        <td id="LC1251" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">if</span> (sv.<span class="pl-smi">tokens</span>.<span class="pl-c1">size</span>() != save_tok_size) {</td>
      </tr>
      <tr>
        <td id="L1252" class="blob-num js-line-number" data-line-number="1252"></td>
        <td id="LC1252" class="blob-code blob-code-inner js-file-line">                    sv.<span class="pl-smi">tokens</span>.<span class="pl-c1">erase</span>(sv.<span class="pl-smi">tokens</span>.<span class="pl-c1">begin</span>() + <span class="pl-k">static_cast</span>&lt;std::<span class="pl-c1">ptrdiff_t</span>&gt;(save_tok_size));</td>
      </tr>
      <tr>
        <td id="L1253" class="blob-num js-line-number" data-line-number="1253"></td>
        <td id="LC1253" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L1254" class="blob-num js-line-number" data-line-number="1254"></td>
        <td id="LC1254" class="blob-code blob-code-inner js-file-line">                c.<span class="pl-smi">error_pos</span> = save_error_pos;</td>
      </tr>
      <tr>
        <td id="L1255" class="blob-num js-line-number" data-line-number="1255"></td>
        <td id="LC1255" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L1256" class="blob-num js-line-number" data-line-number="1256"></td>
        <td id="LC1256" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L1257" class="blob-num js-line-number" data-line-number="1257"></td>
        <td id="LC1257" class="blob-code blob-code-inner js-file-line">            i += len;</td>
      </tr>
      <tr>
        <td id="L1258" class="blob-num js-line-number" data-line-number="1258"></td>
        <td id="LC1258" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L1259" class="blob-num js-line-number" data-line-number="1259"></td>
        <td id="LC1259" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> i;</td>
      </tr>
      <tr>
        <td id="L1260" class="blob-num js-line-number" data-line-number="1260"></td>
        <td id="LC1260" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1261" class="blob-num js-line-number" data-line-number="1261"></td>
        <td id="LC1261" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1262" class="blob-num js-line-number" data-line-number="1262"></td>
        <td id="LC1262" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">accept</span>(Visitor&amp; v) <span class="pl-k">override</span>;</td>
      </tr>
      <tr>
        <td id="L1263" class="blob-num js-line-number" data-line-number="1263"></td>
        <td id="LC1263" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1264" class="blob-num js-line-number" data-line-number="1264"></td>
        <td id="LC1264" class="blob-code blob-code-inner js-file-line">    std::shared_ptr&lt;Ope&gt; ope_;</td>
      </tr>
      <tr>
        <td id="L1265" class="blob-num js-line-number" data-line-number="1265"></td>
        <td id="LC1265" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L1266" class="blob-num js-line-number" data-line-number="1266"></td>
        <td id="LC1266" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1267" class="blob-num js-line-number" data-line-number="1267"></td>
        <td id="LC1267" class="blob-code blob-code-inner js-file-line"><span class="pl-k">class</span> <span class="pl-en">Option</span> : <span class="pl-k">public</span> <span class="pl-en">Ope</span></td>
      </tr>
      <tr>
        <td id="L1268" class="blob-num js-line-number" data-line-number="1268"></td>
        <td id="LC1268" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="L1269" class="blob-num js-line-number" data-line-number="1269"></td>
        <td id="LC1269" class="blob-code blob-code-inner js-file-line"><span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L1270" class="blob-num js-line-number" data-line-number="1270"></td>
        <td id="LC1270" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">Option</span>(<span class="pl-k">const</span> std::shared_ptr&lt;Ope&gt;&amp; ope) : ope_(ope) {}</td>
      </tr>
      <tr>
        <td id="L1271" class="blob-num js-line-number" data-line-number="1271"></td>
        <td id="LC1271" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1272" class="blob-num js-line-number" data-line-number="1272"></td>
        <td id="LC1272" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">size_t</span> <span class="pl-en">parse</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* s, <span class="pl-c1">size_t</span> n, SemanticValues&amp; sv, Context&amp; c, any&amp; dt) <span class="pl-k">const</span> <span class="pl-k">override</span> {</td>
      </tr>
      <tr>
        <td id="L1273" class="blob-num js-line-number" data-line-number="1273"></td>
        <td id="LC1273" class="blob-code blob-code-inner js-file-line">        c.<span class="pl-c1">trace</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>Option<span class="pl-pds">&quot;</span></span>, s, n, sv, dt);</td>
      </tr>
      <tr>
        <td id="L1274" class="blob-num js-line-number" data-line-number="1274"></td>
        <td id="LC1274" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">auto</span> save_error_pos = c.<span class="pl-smi">error_pos</span>;</td>
      </tr>
      <tr>
        <td id="L1275" class="blob-num js-line-number" data-line-number="1275"></td>
        <td id="LC1275" class="blob-code blob-code-inner js-file-line">        c.<span class="pl-smi">nest_level</span>++;</td>
      </tr>
      <tr>
        <td id="L1276" class="blob-num js-line-number" data-line-number="1276"></td>
        <td id="LC1276" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">auto</span> save_sv_size = sv.<span class="pl-c1">size</span>();</td>
      </tr>
      <tr>
        <td id="L1277" class="blob-num js-line-number" data-line-number="1277"></td>
        <td id="LC1277" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">auto</span> save_tok_size = sv.<span class="pl-smi">tokens</span>.<span class="pl-c1">size</span>();</td>
      </tr>
      <tr>
        <td id="L1278" class="blob-num js-line-number" data-line-number="1278"></td>
        <td id="LC1278" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">auto</span> se = <span class="pl-c1">make_scope_exit</span>([&amp;]() { c.<span class="pl-smi">nest_level</span>--; });</td>
      </tr>
      <tr>
        <td id="L1279" class="blob-num js-line-number" data-line-number="1279"></td>
        <td id="LC1279" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> <span class="pl-k">auto</span>&amp; rule = *ope_;</td>
      </tr>
      <tr>
        <td id="L1280" class="blob-num js-line-number" data-line-number="1280"></td>
        <td id="LC1280" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">auto</span> len = rule.<span class="pl-c1">parse</span>(s, n, sv, c, dt);</td>
      </tr>
      <tr>
        <td id="L1281" class="blob-num js-line-number" data-line-number="1281"></td>
        <td id="LC1281" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-c1">success</span>(len)) {</td>
      </tr>
      <tr>
        <td id="L1282" class="blob-num js-line-number" data-line-number="1282"></td>
        <td id="LC1282" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> len;</td>
      </tr>
      <tr>
        <td id="L1283" class="blob-num js-line-number" data-line-number="1283"></td>
        <td id="LC1283" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L1284" class="blob-num js-line-number" data-line-number="1284"></td>
        <td id="LC1284" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (sv.<span class="pl-c1">size</span>() != save_sv_size) {</td>
      </tr>
      <tr>
        <td id="L1285" class="blob-num js-line-number" data-line-number="1285"></td>
        <td id="LC1285" class="blob-code blob-code-inner js-file-line">                sv.<span class="pl-c1">erase</span>(sv.<span class="pl-c1">begin</span>() + <span class="pl-k">static_cast</span>&lt;std::<span class="pl-c1">ptrdiff_t</span>&gt;(save_sv_size));</td>
      </tr>
      <tr>
        <td id="L1286" class="blob-num js-line-number" data-line-number="1286"></td>
        <td id="LC1286" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L1287" class="blob-num js-line-number" data-line-number="1287"></td>
        <td id="LC1287" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (sv.<span class="pl-smi">tokens</span>.<span class="pl-c1">size</span>() != save_tok_size) {</td>
      </tr>
      <tr>
        <td id="L1288" class="blob-num js-line-number" data-line-number="1288"></td>
        <td id="LC1288" class="blob-code blob-code-inner js-file-line">                sv.<span class="pl-smi">tokens</span>.<span class="pl-c1">erase</span>(sv.<span class="pl-smi">tokens</span>.<span class="pl-c1">begin</span>() + <span class="pl-k">static_cast</span>&lt;std::<span class="pl-c1">ptrdiff_t</span>&gt;(save_tok_size));</td>
      </tr>
      <tr>
        <td id="L1289" class="blob-num js-line-number" data-line-number="1289"></td>
        <td id="LC1289" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L1290" class="blob-num js-line-number" data-line-number="1290"></td>
        <td id="LC1290" class="blob-code blob-code-inner js-file-line">            c.<span class="pl-smi">error_pos</span> = save_error_pos;</td>
      </tr>
      <tr>
        <td id="L1291" class="blob-num js-line-number" data-line-number="1291"></td>
        <td id="LC1291" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L1292" class="blob-num js-line-number" data-line-number="1292"></td>
        <td id="LC1292" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L1293" class="blob-num js-line-number" data-line-number="1293"></td>
        <td id="LC1293" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1294" class="blob-num js-line-number" data-line-number="1294"></td>
        <td id="LC1294" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1295" class="blob-num js-line-number" data-line-number="1295"></td>
        <td id="LC1295" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">accept</span>(Visitor&amp; v) <span class="pl-k">override</span>;</td>
      </tr>
      <tr>
        <td id="L1296" class="blob-num js-line-number" data-line-number="1296"></td>
        <td id="LC1296" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1297" class="blob-num js-line-number" data-line-number="1297"></td>
        <td id="LC1297" class="blob-code blob-code-inner js-file-line">    std::shared_ptr&lt;Ope&gt; ope_;</td>
      </tr>
      <tr>
        <td id="L1298" class="blob-num js-line-number" data-line-number="1298"></td>
        <td id="LC1298" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L1299" class="blob-num js-line-number" data-line-number="1299"></td>
        <td id="LC1299" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1300" class="blob-num js-line-number" data-line-number="1300"></td>
        <td id="LC1300" class="blob-code blob-code-inner js-file-line"><span class="pl-k">class</span> <span class="pl-en">AndPredicate</span> : <span class="pl-k">public</span> <span class="pl-en">Ope</span></td>
      </tr>
      <tr>
        <td id="L1301" class="blob-num js-line-number" data-line-number="1301"></td>
        <td id="LC1301" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="L1302" class="blob-num js-line-number" data-line-number="1302"></td>
        <td id="LC1302" class="blob-code blob-code-inner js-file-line"><span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L1303" class="blob-num js-line-number" data-line-number="1303"></td>
        <td id="LC1303" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">AndPredicate</span>(<span class="pl-k">const</span> std::shared_ptr&lt;Ope&gt;&amp; ope) : ope_(ope) {}</td>
      </tr>
      <tr>
        <td id="L1304" class="blob-num js-line-number" data-line-number="1304"></td>
        <td id="LC1304" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1305" class="blob-num js-line-number" data-line-number="1305"></td>
        <td id="LC1305" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">size_t</span> <span class="pl-en">parse</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* s, <span class="pl-c1">size_t</span> n, SemanticValues&amp; sv, Context&amp; c, any&amp; dt) <span class="pl-k">const</span> <span class="pl-k">override</span> {</td>
      </tr>
      <tr>
        <td id="L1306" class="blob-num js-line-number" data-line-number="1306"></td>
        <td id="LC1306" class="blob-code blob-code-inner js-file-line">        c.<span class="pl-c1">trace</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>AndPredicate<span class="pl-pds">&quot;</span></span>, s, n, sv, dt);</td>
      </tr>
      <tr>
        <td id="L1307" class="blob-num js-line-number" data-line-number="1307"></td>
        <td id="LC1307" class="blob-code blob-code-inner js-file-line">        c.<span class="pl-smi">nest_level</span>++;</td>
      </tr>
      <tr>
        <td id="L1308" class="blob-num js-line-number" data-line-number="1308"></td>
        <td id="LC1308" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">auto</span>&amp; chldsv = c.<span class="pl-c1">push</span>();</td>
      </tr>
      <tr>
        <td id="L1309" class="blob-num js-line-number" data-line-number="1309"></td>
        <td id="LC1309" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">auto</span> se = <span class="pl-c1">make_scope_exit</span>([&amp;]() {</td>
      </tr>
      <tr>
        <td id="L1310" class="blob-num js-line-number" data-line-number="1310"></td>
        <td id="LC1310" class="blob-code blob-code-inner js-file-line">            c.<span class="pl-smi">nest_level</span>--;</td>
      </tr>
      <tr>
        <td id="L1311" class="blob-num js-line-number" data-line-number="1311"></td>
        <td id="LC1311" class="blob-code blob-code-inner js-file-line">            c.<span class="pl-c1">pop</span>();</td>
      </tr>
      <tr>
        <td id="L1312" class="blob-num js-line-number" data-line-number="1312"></td>
        <td id="LC1312" class="blob-code blob-code-inner js-file-line">        });</td>
      </tr>
      <tr>
        <td id="L1313" class="blob-num js-line-number" data-line-number="1313"></td>
        <td id="LC1313" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> <span class="pl-k">auto</span>&amp; rule = *ope_;</td>
      </tr>
      <tr>
        <td id="L1314" class="blob-num js-line-number" data-line-number="1314"></td>
        <td id="LC1314" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">auto</span> len = rule.<span class="pl-c1">parse</span>(s, n, chldsv, c, dt);</td>
      </tr>
      <tr>
        <td id="L1315" class="blob-num js-line-number" data-line-number="1315"></td>
        <td id="LC1315" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-c1">success</span>(len)) {</td>
      </tr>
      <tr>
        <td id="L1316" class="blob-num js-line-number" data-line-number="1316"></td>
        <td id="LC1316" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L1317" class="blob-num js-line-number" data-line-number="1317"></td>
        <td id="LC1317" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L1318" class="blob-num js-line-number" data-line-number="1318"></td>
        <td id="LC1318" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">size_t</span>&gt;(-<span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L1319" class="blob-num js-line-number" data-line-number="1319"></td>
        <td id="LC1319" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L1320" class="blob-num js-line-number" data-line-number="1320"></td>
        <td id="LC1320" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1321" class="blob-num js-line-number" data-line-number="1321"></td>
        <td id="LC1321" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1322" class="blob-num js-line-number" data-line-number="1322"></td>
        <td id="LC1322" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">accept</span>(Visitor&amp; v) <span class="pl-k">override</span>;</td>
      </tr>
      <tr>
        <td id="L1323" class="blob-num js-line-number" data-line-number="1323"></td>
        <td id="LC1323" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1324" class="blob-num js-line-number" data-line-number="1324"></td>
        <td id="LC1324" class="blob-code blob-code-inner js-file-line">    std::shared_ptr&lt;Ope&gt; ope_;</td>
      </tr>
      <tr>
        <td id="L1325" class="blob-num js-line-number" data-line-number="1325"></td>
        <td id="LC1325" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L1326" class="blob-num js-line-number" data-line-number="1326"></td>
        <td id="LC1326" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1327" class="blob-num js-line-number" data-line-number="1327"></td>
        <td id="LC1327" class="blob-code blob-code-inner js-file-line"><span class="pl-k">class</span> <span class="pl-en">NotPredicate</span> : <span class="pl-k">public</span> <span class="pl-en">Ope</span></td>
      </tr>
      <tr>
        <td id="L1328" class="blob-num js-line-number" data-line-number="1328"></td>
        <td id="LC1328" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="L1329" class="blob-num js-line-number" data-line-number="1329"></td>
        <td id="LC1329" class="blob-code blob-code-inner js-file-line"><span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L1330" class="blob-num js-line-number" data-line-number="1330"></td>
        <td id="LC1330" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">NotPredicate</span>(<span class="pl-k">const</span> std::shared_ptr&lt;Ope&gt;&amp; ope) : ope_(ope) {}</td>
      </tr>
      <tr>
        <td id="L1331" class="blob-num js-line-number" data-line-number="1331"></td>
        <td id="LC1331" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1332" class="blob-num js-line-number" data-line-number="1332"></td>
        <td id="LC1332" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">size_t</span> <span class="pl-en">parse</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* s, <span class="pl-c1">size_t</span> n, SemanticValues&amp; sv, Context&amp; c, any&amp; dt) <span class="pl-k">const</span> <span class="pl-k">override</span> {</td>
      </tr>
      <tr>
        <td id="L1333" class="blob-num js-line-number" data-line-number="1333"></td>
        <td id="LC1333" class="blob-code blob-code-inner js-file-line">        c.<span class="pl-c1">trace</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>NotPredicate<span class="pl-pds">&quot;</span></span>, s, n, sv, dt);</td>
      </tr>
      <tr>
        <td id="L1334" class="blob-num js-line-number" data-line-number="1334"></td>
        <td id="LC1334" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">auto</span> save_error_pos = c.<span class="pl-smi">error_pos</span>;</td>
      </tr>
      <tr>
        <td id="L1335" class="blob-num js-line-number" data-line-number="1335"></td>
        <td id="LC1335" class="blob-code blob-code-inner js-file-line">        c.<span class="pl-smi">nest_level</span>++;</td>
      </tr>
      <tr>
        <td id="L1336" class="blob-num js-line-number" data-line-number="1336"></td>
        <td id="LC1336" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">auto</span>&amp; chldsv = c.<span class="pl-c1">push</span>();</td>
      </tr>
      <tr>
        <td id="L1337" class="blob-num js-line-number" data-line-number="1337"></td>
        <td id="LC1337" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">auto</span> se = <span class="pl-c1">make_scope_exit</span>([&amp;]() {</td>
      </tr>
      <tr>
        <td id="L1338" class="blob-num js-line-number" data-line-number="1338"></td>
        <td id="LC1338" class="blob-code blob-code-inner js-file-line">            c.<span class="pl-smi">nest_level</span>--;</td>
      </tr>
      <tr>
        <td id="L1339" class="blob-num js-line-number" data-line-number="1339"></td>
        <td id="LC1339" class="blob-code blob-code-inner js-file-line">            c.<span class="pl-c1">pop</span>();</td>
      </tr>
      <tr>
        <td id="L1340" class="blob-num js-line-number" data-line-number="1340"></td>
        <td id="LC1340" class="blob-code blob-code-inner js-file-line">        });</td>
      </tr>
      <tr>
        <td id="L1341" class="blob-num js-line-number" data-line-number="1341"></td>
        <td id="LC1341" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> <span class="pl-k">auto</span>&amp; rule = *ope_;</td>
      </tr>
      <tr>
        <td id="L1342" class="blob-num js-line-number" data-line-number="1342"></td>
        <td id="LC1342" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">auto</span> len = rule.<span class="pl-c1">parse</span>(s, n, chldsv, c, dt);</td>
      </tr>
      <tr>
        <td id="L1343" class="blob-num js-line-number" data-line-number="1343"></td>
        <td id="LC1343" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-c1">success</span>(len)) {</td>
      </tr>
      <tr>
        <td id="L1344" class="blob-num js-line-number" data-line-number="1344"></td>
        <td id="LC1344" class="blob-code blob-code-inner js-file-line">            c.<span class="pl-c1">set_error_pos</span>(s);</td>
      </tr>
      <tr>
        <td id="L1345" class="blob-num js-line-number" data-line-number="1345"></td>
        <td id="LC1345" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">size_t</span>&gt;(-<span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L1346" class="blob-num js-line-number" data-line-number="1346"></td>
        <td id="LC1346" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L1347" class="blob-num js-line-number" data-line-number="1347"></td>
        <td id="LC1347" class="blob-code blob-code-inner js-file-line">            c.<span class="pl-smi">error_pos</span> = save_error_pos;</td>
      </tr>
      <tr>
        <td id="L1348" class="blob-num js-line-number" data-line-number="1348"></td>
        <td id="LC1348" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L1349" class="blob-num js-line-number" data-line-number="1349"></td>
        <td id="LC1349" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L1350" class="blob-num js-line-number" data-line-number="1350"></td>
        <td id="LC1350" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1351" class="blob-num js-line-number" data-line-number="1351"></td>
        <td id="LC1351" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1352" class="blob-num js-line-number" data-line-number="1352"></td>
        <td id="LC1352" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">accept</span>(Visitor&amp; v) <span class="pl-k">override</span>;</td>
      </tr>
      <tr>
        <td id="L1353" class="blob-num js-line-number" data-line-number="1353"></td>
        <td id="LC1353" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1354" class="blob-num js-line-number" data-line-number="1354"></td>
        <td id="LC1354" class="blob-code blob-code-inner js-file-line">    std::shared_ptr&lt;Ope&gt; ope_;</td>
      </tr>
      <tr>
        <td id="L1355" class="blob-num js-line-number" data-line-number="1355"></td>
        <td id="LC1355" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L1356" class="blob-num js-line-number" data-line-number="1356"></td>
        <td id="LC1356" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1357" class="blob-num js-line-number" data-line-number="1357"></td>
        <td id="LC1357" class="blob-code blob-code-inner js-file-line"><span class="pl-k">class</span> <span class="pl-en">LiteralString</span> : <span class="pl-k">public</span> <span class="pl-en">Ope</span></td>
      </tr>
      <tr>
        <td id="L1358" class="blob-num js-line-number" data-line-number="1358"></td>
        <td id="LC1358" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="L1359" class="blob-num js-line-number" data-line-number="1359"></td>
        <td id="LC1359" class="blob-code blob-code-inner js-file-line"><span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L1360" class="blob-num js-line-number" data-line-number="1360"></td>
        <td id="LC1360" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">LiteralString</span>(<span class="pl-k">const</span> std::string&amp; s) : lit_(s) {}</td>
      </tr>
      <tr>
        <td id="L1361" class="blob-num js-line-number" data-line-number="1361"></td>
        <td id="LC1361" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1362" class="blob-num js-line-number" data-line-number="1362"></td>
        <td id="LC1362" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">size_t</span> <span class="pl-en">parse</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* s, <span class="pl-c1">size_t</span> n, SemanticValues&amp; sv, Context&amp; c, any&amp; dt) <span class="pl-k">const</span> <span class="pl-k">override</span>;</td>
      </tr>
      <tr>
        <td id="L1363" class="blob-num js-line-number" data-line-number="1363"></td>
        <td id="LC1363" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1364" class="blob-num js-line-number" data-line-number="1364"></td>
        <td id="LC1364" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">accept</span>(Visitor&amp; v) <span class="pl-k">override</span>;</td>
      </tr>
      <tr>
        <td id="L1365" class="blob-num js-line-number" data-line-number="1365"></td>
        <td id="LC1365" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1366" class="blob-num js-line-number" data-line-number="1366"></td>
        <td id="LC1366" class="blob-code blob-code-inner js-file-line">    std::string lit_;</td>
      </tr>
      <tr>
        <td id="L1367" class="blob-num js-line-number" data-line-number="1367"></td>
        <td id="LC1367" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L1368" class="blob-num js-line-number" data-line-number="1368"></td>
        <td id="LC1368" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1369" class="blob-num js-line-number" data-line-number="1369"></td>
        <td id="LC1369" class="blob-code blob-code-inner js-file-line"><span class="pl-k">class</span> <span class="pl-en">CharacterClass</span> : <span class="pl-k">public</span> <span class="pl-en">Ope</span></td>
      </tr>
      <tr>
        <td id="L1370" class="blob-num js-line-number" data-line-number="1370"></td>
        <td id="LC1370" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="L1371" class="blob-num js-line-number" data-line-number="1371"></td>
        <td id="LC1371" class="blob-code blob-code-inner js-file-line"><span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L1372" class="blob-num js-line-number" data-line-number="1372"></td>
        <td id="LC1372" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">CharacterClass</span>(<span class="pl-k">const</span> std::string&amp; chars) : chars_(chars) {}</td>
      </tr>
      <tr>
        <td id="L1373" class="blob-num js-line-number" data-line-number="1373"></td>
        <td id="LC1373" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1374" class="blob-num js-line-number" data-line-number="1374"></td>
        <td id="LC1374" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">size_t</span> <span class="pl-en">parse</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* s, <span class="pl-c1">size_t</span> n, SemanticValues&amp; sv, Context&amp; c, any&amp; dt) <span class="pl-k">const</span> <span class="pl-k">override</span> {</td>
      </tr>
      <tr>
        <td id="L1375" class="blob-num js-line-number" data-line-number="1375"></td>
        <td id="LC1375" class="blob-code blob-code-inner js-file-line">        c.<span class="pl-c1">trace</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>CharacterClass<span class="pl-pds">&quot;</span></span>, s, n, sv, dt);</td>
      </tr>
      <tr>
        <td id="L1376" class="blob-num js-line-number" data-line-number="1376"></td>
        <td id="LC1376" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> TODO: UTF8 support</span></td>
      </tr>
      <tr>
        <td id="L1377" class="blob-num js-line-number" data-line-number="1377"></td>
        <td id="LC1377" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (n &lt; <span class="pl-c1">1</span>) {</td>
      </tr>
      <tr>
        <td id="L1378" class="blob-num js-line-number" data-line-number="1378"></td>
        <td id="LC1378" class="blob-code blob-code-inner js-file-line">            c.<span class="pl-c1">set_error_pos</span>(s);</td>
      </tr>
      <tr>
        <td id="L1379" class="blob-num js-line-number" data-line-number="1379"></td>
        <td id="LC1379" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">size_t</span>&gt;(-<span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L1380" class="blob-num js-line-number" data-line-number="1380"></td>
        <td id="LC1380" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L1381" class="blob-num js-line-number" data-line-number="1381"></td>
        <td id="LC1381" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">auto</span> ch = s[<span class="pl-c1">0</span>];</td>
      </tr>
      <tr>
        <td id="L1382" class="blob-num js-line-number" data-line-number="1382"></td>
        <td id="LC1382" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">auto</span> i = <span class="pl-c1">0u</span>;</td>
      </tr>
      <tr>
        <td id="L1383" class="blob-num js-line-number" data-line-number="1383"></td>
        <td id="LC1383" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">while</span> (i &lt; chars_.<span class="pl-c1">size</span>()) {</td>
      </tr>
      <tr>
        <td id="L1384" class="blob-num js-line-number" data-line-number="1384"></td>
        <td id="LC1384" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (i + <span class="pl-c1">2</span> &lt; chars_.<span class="pl-c1">size</span>() &amp;&amp; chars_[i + <span class="pl-c1">1</span>] == <span class="pl-s"><span class="pl-pds">&#39;</span>-<span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L1385" class="blob-num js-line-number" data-line-number="1385"></td>
        <td id="LC1385" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">if</span> (chars_[i] &lt;= ch &amp;&amp; ch &lt;= chars_[i + <span class="pl-c1">2</span>]) {</td>
      </tr>
      <tr>
        <td id="L1386" class="blob-num js-line-number" data-line-number="1386"></td>
        <td id="LC1386" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">return</span> <span class="pl-c1">1</span>;</td>
      </tr>
      <tr>
        <td id="L1387" class="blob-num js-line-number" data-line-number="1387"></td>
        <td id="LC1387" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L1388" class="blob-num js-line-number" data-line-number="1388"></td>
        <td id="LC1388" class="blob-code blob-code-inner js-file-line">                i += <span class="pl-c1">3</span>;</td>
      </tr>
      <tr>
        <td id="L1389" class="blob-num js-line-number" data-line-number="1389"></td>
        <td id="LC1389" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L1390" class="blob-num js-line-number" data-line-number="1390"></td>
        <td id="LC1390" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">if</span> (chars_[i] == ch) {</td>
      </tr>
      <tr>
        <td id="L1391" class="blob-num js-line-number" data-line-number="1391"></td>
        <td id="LC1391" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">return</span> <span class="pl-c1">1</span>;</td>
      </tr>
      <tr>
        <td id="L1392" class="blob-num js-line-number" data-line-number="1392"></td>
        <td id="LC1392" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L1393" class="blob-num js-line-number" data-line-number="1393"></td>
        <td id="LC1393" class="blob-code blob-code-inner js-file-line">                i += <span class="pl-c1">1</span>;</td>
      </tr>
      <tr>
        <td id="L1394" class="blob-num js-line-number" data-line-number="1394"></td>
        <td id="LC1394" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L1395" class="blob-num js-line-number" data-line-number="1395"></td>
        <td id="LC1395" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L1396" class="blob-num js-line-number" data-line-number="1396"></td>
        <td id="LC1396" class="blob-code blob-code-inner js-file-line">        c.<span class="pl-c1">set_error_pos</span>(s);</td>
      </tr>
      <tr>
        <td id="L1397" class="blob-num js-line-number" data-line-number="1397"></td>
        <td id="LC1397" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">size_t</span>&gt;(-<span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L1398" class="blob-num js-line-number" data-line-number="1398"></td>
        <td id="LC1398" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1399" class="blob-num js-line-number" data-line-number="1399"></td>
        <td id="LC1399" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1400" class="blob-num js-line-number" data-line-number="1400"></td>
        <td id="LC1400" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">accept</span>(Visitor&amp; v) <span class="pl-k">override</span>;</td>
      </tr>
      <tr>
        <td id="L1401" class="blob-num js-line-number" data-line-number="1401"></td>
        <td id="LC1401" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1402" class="blob-num js-line-number" data-line-number="1402"></td>
        <td id="LC1402" class="blob-code blob-code-inner js-file-line">    std::string chars_;</td>
      </tr>
      <tr>
        <td id="L1403" class="blob-num js-line-number" data-line-number="1403"></td>
        <td id="LC1403" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L1404" class="blob-num js-line-number" data-line-number="1404"></td>
        <td id="LC1404" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1405" class="blob-num js-line-number" data-line-number="1405"></td>
        <td id="LC1405" class="blob-code blob-code-inner js-file-line"><span class="pl-k">class</span> <span class="pl-en">Character</span> : <span class="pl-k">public</span> <span class="pl-en">Ope</span></td>
      </tr>
      <tr>
        <td id="L1406" class="blob-num js-line-number" data-line-number="1406"></td>
        <td id="LC1406" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="L1407" class="blob-num js-line-number" data-line-number="1407"></td>
        <td id="LC1407" class="blob-code blob-code-inner js-file-line"><span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L1408" class="blob-num js-line-number" data-line-number="1408"></td>
        <td id="LC1408" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">Character</span>(<span class="pl-k">char</span> ch) : ch_(ch) {}</td>
      </tr>
      <tr>
        <td id="L1409" class="blob-num js-line-number" data-line-number="1409"></td>
        <td id="LC1409" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1410" class="blob-num js-line-number" data-line-number="1410"></td>
        <td id="LC1410" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">size_t</span> <span class="pl-en">parse</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* s, <span class="pl-c1">size_t</span> n, SemanticValues&amp; sv, Context&amp; c, any&amp; dt) <span class="pl-k">const</span> <span class="pl-k">override</span> {</td>
      </tr>
      <tr>
        <td id="L1411" class="blob-num js-line-number" data-line-number="1411"></td>
        <td id="LC1411" class="blob-code blob-code-inner js-file-line">        c.<span class="pl-c1">trace</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>Character<span class="pl-pds">&quot;</span></span>, s, n, sv, dt);</td>
      </tr>
      <tr>
        <td id="L1412" class="blob-num js-line-number" data-line-number="1412"></td>
        <td id="LC1412" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> TODO: UTF8 support</span></td>
      </tr>
      <tr>
        <td id="L1413" class="blob-num js-line-number" data-line-number="1413"></td>
        <td id="LC1413" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (n &lt; <span class="pl-c1">1</span> || s[<span class="pl-c1">0</span>] != ch_) {</td>
      </tr>
      <tr>
        <td id="L1414" class="blob-num js-line-number" data-line-number="1414"></td>
        <td id="LC1414" class="blob-code blob-code-inner js-file-line">            c.<span class="pl-c1">set_error_pos</span>(s);</td>
      </tr>
      <tr>
        <td id="L1415" class="blob-num js-line-number" data-line-number="1415"></td>
        <td id="LC1415" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">size_t</span>&gt;(-<span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L1416" class="blob-num js-line-number" data-line-number="1416"></td>
        <td id="LC1416" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L1417" class="blob-num js-line-number" data-line-number="1417"></td>
        <td id="LC1417" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">1</span>;</td>
      </tr>
      <tr>
        <td id="L1418" class="blob-num js-line-number" data-line-number="1418"></td>
        <td id="LC1418" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1419" class="blob-num js-line-number" data-line-number="1419"></td>
        <td id="LC1419" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1420" class="blob-num js-line-number" data-line-number="1420"></td>
        <td id="LC1420" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">accept</span>(Visitor&amp; v) <span class="pl-k">override</span>;</td>
      </tr>
      <tr>
        <td id="L1421" class="blob-num js-line-number" data-line-number="1421"></td>
        <td id="LC1421" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1422" class="blob-num js-line-number" data-line-number="1422"></td>
        <td id="LC1422" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">char</span> ch_;</td>
      </tr>
      <tr>
        <td id="L1423" class="blob-num js-line-number" data-line-number="1423"></td>
        <td id="LC1423" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L1424" class="blob-num js-line-number" data-line-number="1424"></td>
        <td id="LC1424" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1425" class="blob-num js-line-number" data-line-number="1425"></td>
        <td id="LC1425" class="blob-code blob-code-inner js-file-line"><span class="pl-k">class</span> <span class="pl-en">AnyCharacter</span> : <span class="pl-k">public</span> <span class="pl-en">Ope</span></td>
      </tr>
      <tr>
        <td id="L1426" class="blob-num js-line-number" data-line-number="1426"></td>
        <td id="LC1426" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="L1427" class="blob-num js-line-number" data-line-number="1427"></td>
        <td id="LC1427" class="blob-code blob-code-inner js-file-line"><span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L1428" class="blob-num js-line-number" data-line-number="1428"></td>
        <td id="LC1428" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">size_t</span> <span class="pl-en">parse</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* s, <span class="pl-c1">size_t</span> n, SemanticValues&amp; sv, Context&amp; c, any&amp; dt) <span class="pl-k">const</span> <span class="pl-k">override</span> {</td>
      </tr>
      <tr>
        <td id="L1429" class="blob-num js-line-number" data-line-number="1429"></td>
        <td id="LC1429" class="blob-code blob-code-inner js-file-line">        c.<span class="pl-c1">trace</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>AnyCharacter<span class="pl-pds">&quot;</span></span>, s, n, sv, dt);</td>
      </tr>
      <tr>
        <td id="L1430" class="blob-num js-line-number" data-line-number="1430"></td>
        <td id="LC1430" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> TODO: UTF8 support</span></td>
      </tr>
      <tr>
        <td id="L1431" class="blob-num js-line-number" data-line-number="1431"></td>
        <td id="LC1431" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (n &lt; <span class="pl-c1">1</span>) {</td>
      </tr>
      <tr>
        <td id="L1432" class="blob-num js-line-number" data-line-number="1432"></td>
        <td id="LC1432" class="blob-code blob-code-inner js-file-line">            c.<span class="pl-c1">set_error_pos</span>(s);</td>
      </tr>
      <tr>
        <td id="L1433" class="blob-num js-line-number" data-line-number="1433"></td>
        <td id="LC1433" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">size_t</span>&gt;(-<span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L1434" class="blob-num js-line-number" data-line-number="1434"></td>
        <td id="LC1434" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L1435" class="blob-num js-line-number" data-line-number="1435"></td>
        <td id="LC1435" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">1</span>;</td>
      </tr>
      <tr>
        <td id="L1436" class="blob-num js-line-number" data-line-number="1436"></td>
        <td id="LC1436" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1437" class="blob-num js-line-number" data-line-number="1437"></td>
        <td id="LC1437" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1438" class="blob-num js-line-number" data-line-number="1438"></td>
        <td id="LC1438" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">accept</span>(Visitor&amp; v) <span class="pl-k">override</span>;</td>
      </tr>
      <tr>
        <td id="L1439" class="blob-num js-line-number" data-line-number="1439"></td>
        <td id="LC1439" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L1440" class="blob-num js-line-number" data-line-number="1440"></td>
        <td id="LC1440" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1441" class="blob-num js-line-number" data-line-number="1441"></td>
        <td id="LC1441" class="blob-code blob-code-inner js-file-line"><span class="pl-k">class</span> <span class="pl-en">Capture</span> : <span class="pl-k">public</span> <span class="pl-en">Ope</span></td>
      </tr>
      <tr>
        <td id="L1442" class="blob-num js-line-number" data-line-number="1442"></td>
        <td id="LC1442" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="L1443" class="blob-num js-line-number" data-line-number="1443"></td>
        <td id="LC1443" class="blob-code blob-code-inner js-file-line"><span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L1444" class="blob-num js-line-number" data-line-number="1444"></td>
        <td id="LC1444" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">Capture</span>(<span class="pl-k">const</span> std::shared_ptr&lt;Ope&gt;&amp; ope, MatchAction ma, <span class="pl-c1">size_t</span> id, <span class="pl-k">const</span> std::string&amp; name)</td>
      </tr>
      <tr>
        <td id="L1445" class="blob-num js-line-number" data-line-number="1445"></td>
        <td id="LC1445" class="blob-code blob-code-inner js-file-line">        : ope_(ope), match_action_(ma), id_(id), name_(name) {}</td>
      </tr>
      <tr>
        <td id="L1446" class="blob-num js-line-number" data-line-number="1446"></td>
        <td id="LC1446" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1447" class="blob-num js-line-number" data-line-number="1447"></td>
        <td id="LC1447" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">size_t</span> <span class="pl-en">parse</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* s, <span class="pl-c1">size_t</span> n, SemanticValues&amp; sv, Context&amp; c, any&amp; dt) <span class="pl-k">const</span> <span class="pl-k">override</span> {</td>
      </tr>
      <tr>
        <td id="L1448" class="blob-num js-line-number" data-line-number="1448"></td>
        <td id="LC1448" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> <span class="pl-k">auto</span>&amp; rule = *ope_;</td>
      </tr>
      <tr>
        <td id="L1449" class="blob-num js-line-number" data-line-number="1449"></td>
        <td id="LC1449" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">auto</span> len = rule.<span class="pl-c1">parse</span>(s, n, sv, c, dt);</td>
      </tr>
      <tr>
        <td id="L1450" class="blob-num js-line-number" data-line-number="1450"></td>
        <td id="LC1450" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-c1">success</span>(len) &amp;&amp; match_action_) {</td>
      </tr>
      <tr>
        <td id="L1451" class="blob-num js-line-number" data-line-number="1451"></td>
        <td id="LC1451" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">match_action_</span>(s, len, id_, name_);</td>
      </tr>
      <tr>
        <td id="L1452" class="blob-num js-line-number" data-line-number="1452"></td>
        <td id="LC1452" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L1453" class="blob-num js-line-number" data-line-number="1453"></td>
        <td id="LC1453" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> len;</td>
      </tr>
      <tr>
        <td id="L1454" class="blob-num js-line-number" data-line-number="1454"></td>
        <td id="LC1454" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1455" class="blob-num js-line-number" data-line-number="1455"></td>
        <td id="LC1455" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1456" class="blob-num js-line-number" data-line-number="1456"></td>
        <td id="LC1456" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">accept</span>(Visitor&amp; v) <span class="pl-k">override</span>;</td>
      </tr>
      <tr>
        <td id="L1457" class="blob-num js-line-number" data-line-number="1457"></td>
        <td id="LC1457" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1458" class="blob-num js-line-number" data-line-number="1458"></td>
        <td id="LC1458" class="blob-code blob-code-inner js-file-line">    std::shared_ptr&lt;Ope&gt; ope_;</td>
      </tr>
      <tr>
        <td id="L1459" class="blob-num js-line-number" data-line-number="1459"></td>
        <td id="LC1459" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1460" class="blob-num js-line-number" data-line-number="1460"></td>
        <td id="LC1460" class="blob-code blob-code-inner js-file-line"><span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L1461" class="blob-num js-line-number" data-line-number="1461"></td>
        <td id="LC1461" class="blob-code blob-code-inner js-file-line">    MatchAction          match_action_;</td>
      </tr>
      <tr>
        <td id="L1462" class="blob-num js-line-number" data-line-number="1462"></td>
        <td id="LC1462" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">size_t</span>               id_;</td>
      </tr>
      <tr>
        <td id="L1463" class="blob-num js-line-number" data-line-number="1463"></td>
        <td id="LC1463" class="blob-code blob-code-inner js-file-line">    std::string          name_;</td>
      </tr>
      <tr>
        <td id="L1464" class="blob-num js-line-number" data-line-number="1464"></td>
        <td id="LC1464" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L1465" class="blob-num js-line-number" data-line-number="1465"></td>
        <td id="LC1465" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1466" class="blob-num js-line-number" data-line-number="1466"></td>
        <td id="LC1466" class="blob-code blob-code-inner js-file-line"><span class="pl-k">class</span> <span class="pl-en">TokenBoundary</span> : <span class="pl-k">public</span> <span class="pl-en">Ope</span></td>
      </tr>
      <tr>
        <td id="L1467" class="blob-num js-line-number" data-line-number="1467"></td>
        <td id="LC1467" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="L1468" class="blob-num js-line-number" data-line-number="1468"></td>
        <td id="LC1468" class="blob-code blob-code-inner js-file-line"><span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L1469" class="blob-num js-line-number" data-line-number="1469"></td>
        <td id="LC1469" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">TokenBoundary</span>(<span class="pl-k">const</span> std::shared_ptr&lt;Ope&gt;&amp; ope) : ope_(ope) {}</td>
      </tr>
      <tr>
        <td id="L1470" class="blob-num js-line-number" data-line-number="1470"></td>
        <td id="LC1470" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1471" class="blob-num js-line-number" data-line-number="1471"></td>
        <td id="LC1471" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">size_t</span> <span class="pl-en">parse</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* s, <span class="pl-c1">size_t</span> n, SemanticValues&amp; sv, Context&amp; c, any&amp; dt) <span class="pl-k">const</span> <span class="pl-k">override</span>;</td>
      </tr>
      <tr>
        <td id="L1472" class="blob-num js-line-number" data-line-number="1472"></td>
        <td id="LC1472" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1473" class="blob-num js-line-number" data-line-number="1473"></td>
        <td id="LC1473" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">accept</span>(Visitor&amp; v) <span class="pl-k">override</span>;</td>
      </tr>
      <tr>
        <td id="L1474" class="blob-num js-line-number" data-line-number="1474"></td>
        <td id="LC1474" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1475" class="blob-num js-line-number" data-line-number="1475"></td>
        <td id="LC1475" class="blob-code blob-code-inner js-file-line">    std::shared_ptr&lt;Ope&gt; ope_;</td>
      </tr>
      <tr>
        <td id="L1476" class="blob-num js-line-number" data-line-number="1476"></td>
        <td id="LC1476" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L1477" class="blob-num js-line-number" data-line-number="1477"></td>
        <td id="LC1477" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1478" class="blob-num js-line-number" data-line-number="1478"></td>
        <td id="LC1478" class="blob-code blob-code-inner js-file-line"><span class="pl-k">class</span> <span class="pl-en">Ignore</span> : <span class="pl-k">public</span> <span class="pl-en">Ope</span></td>
      </tr>
      <tr>
        <td id="L1479" class="blob-num js-line-number" data-line-number="1479"></td>
        <td id="LC1479" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="L1480" class="blob-num js-line-number" data-line-number="1480"></td>
        <td id="LC1480" class="blob-code blob-code-inner js-file-line"><span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L1481" class="blob-num js-line-number" data-line-number="1481"></td>
        <td id="LC1481" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">Ignore</span>(<span class="pl-k">const</span> std::shared_ptr&lt;Ope&gt;&amp; ope) : ope_(ope) {}</td>
      </tr>
      <tr>
        <td id="L1482" class="blob-num js-line-number" data-line-number="1482"></td>
        <td id="LC1482" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1483" class="blob-num js-line-number" data-line-number="1483"></td>
        <td id="LC1483" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">size_t</span> <span class="pl-en">parse</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* s, <span class="pl-c1">size_t</span> n, SemanticValues&amp; <span class="pl-c"><span class="pl-c">/*</span>sv<span class="pl-c">*/</span></span>, Context&amp; c, any&amp; dt) <span class="pl-k">const</span> <span class="pl-k">override</span> {</td>
      </tr>
      <tr>
        <td id="L1484" class="blob-num js-line-number" data-line-number="1484"></td>
        <td id="LC1484" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> <span class="pl-k">auto</span>&amp; rule = *ope_;</td>
      </tr>
      <tr>
        <td id="L1485" class="blob-num js-line-number" data-line-number="1485"></td>
        <td id="LC1485" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">auto</span>&amp; chldsv = c.<span class="pl-c1">push</span>();</td>
      </tr>
      <tr>
        <td id="L1486" class="blob-num js-line-number" data-line-number="1486"></td>
        <td id="LC1486" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">auto</span> se = <span class="pl-c1">make_scope_exit</span>([&amp;]() {</td>
      </tr>
      <tr>
        <td id="L1487" class="blob-num js-line-number" data-line-number="1487"></td>
        <td id="LC1487" class="blob-code blob-code-inner js-file-line">            c.<span class="pl-c1">pop</span>();</td>
      </tr>
      <tr>
        <td id="L1488" class="blob-num js-line-number" data-line-number="1488"></td>
        <td id="LC1488" class="blob-code blob-code-inner js-file-line">        });</td>
      </tr>
      <tr>
        <td id="L1489" class="blob-num js-line-number" data-line-number="1489"></td>
        <td id="LC1489" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> rule.<span class="pl-c1">parse</span>(s, n, chldsv, c, dt);</td>
      </tr>
      <tr>
        <td id="L1490" class="blob-num js-line-number" data-line-number="1490"></td>
        <td id="LC1490" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1491" class="blob-num js-line-number" data-line-number="1491"></td>
        <td id="LC1491" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1492" class="blob-num js-line-number" data-line-number="1492"></td>
        <td id="LC1492" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">accept</span>(Visitor&amp; v) <span class="pl-k">override</span>;</td>
      </tr>
      <tr>
        <td id="L1493" class="blob-num js-line-number" data-line-number="1493"></td>
        <td id="LC1493" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1494" class="blob-num js-line-number" data-line-number="1494"></td>
        <td id="LC1494" class="blob-code blob-code-inner js-file-line">    std::shared_ptr&lt;Ope&gt; ope_;</td>
      </tr>
      <tr>
        <td id="L1495" class="blob-num js-line-number" data-line-number="1495"></td>
        <td id="LC1495" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L1496" class="blob-num js-line-number" data-line-number="1496"></td>
        <td id="LC1496" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1497" class="blob-num js-line-number" data-line-number="1497"></td>
        <td id="LC1497" class="blob-code blob-code-inner js-file-line"><span class="pl-k">typedef</span> std::function&lt;<span class="pl-c1">size_t</span> (<span class="pl-k">const</span> <span class="pl-k">char</span>* s, <span class="pl-c1">size_t</span> n, SemanticValues&amp; sv, any&amp; dt)&gt; Parser;</td>
      </tr>
      <tr>
        <td id="L1498" class="blob-num js-line-number" data-line-number="1498"></td>
        <td id="LC1498" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1499" class="blob-num js-line-number" data-line-number="1499"></td>
        <td id="LC1499" class="blob-code blob-code-inner js-file-line"><span class="pl-k">class</span> <span class="pl-en">WeakHolder</span> : <span class="pl-k">public</span> <span class="pl-en">Ope</span></td>
      </tr>
      <tr>
        <td id="L1500" class="blob-num js-line-number" data-line-number="1500"></td>
        <td id="LC1500" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="L1501" class="blob-num js-line-number" data-line-number="1501"></td>
        <td id="LC1501" class="blob-code blob-code-inner js-file-line"><span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L1502" class="blob-num js-line-number" data-line-number="1502"></td>
        <td id="LC1502" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">WeakHolder</span>(<span class="pl-k">const</span> std::shared_ptr&lt;Ope&gt;&amp; ope) : weak_(ope) {}</td>
      </tr>
      <tr>
        <td id="L1503" class="blob-num js-line-number" data-line-number="1503"></td>
        <td id="LC1503" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1504" class="blob-num js-line-number" data-line-number="1504"></td>
        <td id="LC1504" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">size_t</span> <span class="pl-en">parse</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* s, <span class="pl-c1">size_t</span> n, SemanticValues&amp; sv, Context&amp; c, any&amp; dt) <span class="pl-k">const</span> <span class="pl-k">override</span> {</td>
      </tr>
      <tr>
        <td id="L1505" class="blob-num js-line-number" data-line-number="1505"></td>
        <td id="LC1505" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">auto</span> ope = weak_.<span class="pl-c1">lock</span>();</td>
      </tr>
      <tr>
        <td id="L1506" class="blob-num js-line-number" data-line-number="1506"></td>
        <td id="LC1506" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">assert</span>(ope);</td>
      </tr>
      <tr>
        <td id="L1507" class="blob-num js-line-number" data-line-number="1507"></td>
        <td id="LC1507" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> <span class="pl-k">auto</span>&amp; rule = *ope;</td>
      </tr>
      <tr>
        <td id="L1508" class="blob-num js-line-number" data-line-number="1508"></td>
        <td id="LC1508" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> rule.<span class="pl-c1">parse</span>(s, n, sv, c, dt);</td>
      </tr>
      <tr>
        <td id="L1509" class="blob-num js-line-number" data-line-number="1509"></td>
        <td id="LC1509" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1510" class="blob-num js-line-number" data-line-number="1510"></td>
        <td id="LC1510" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1511" class="blob-num js-line-number" data-line-number="1511"></td>
        <td id="LC1511" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">accept</span>(Visitor&amp; v) <span class="pl-k">override</span>;</td>
      </tr>
      <tr>
        <td id="L1512" class="blob-num js-line-number" data-line-number="1512"></td>
        <td id="LC1512" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1513" class="blob-num js-line-number" data-line-number="1513"></td>
        <td id="LC1513" class="blob-code blob-code-inner js-file-line">    std::weak_ptr&lt;Ope&gt; weak_;</td>
      </tr>
      <tr>
        <td id="L1514" class="blob-num js-line-number" data-line-number="1514"></td>
        <td id="LC1514" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L1515" class="blob-num js-line-number" data-line-number="1515"></td>
        <td id="LC1515" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1516" class="blob-num js-line-number" data-line-number="1516"></td>
        <td id="LC1516" class="blob-code blob-code-inner js-file-line"><span class="pl-k">class</span> <span class="pl-en">Holder</span> : <span class="pl-k">public</span> <span class="pl-en">Ope</span></td>
      </tr>
      <tr>
        <td id="L1517" class="blob-num js-line-number" data-line-number="1517"></td>
        <td id="LC1517" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="L1518" class="blob-num js-line-number" data-line-number="1518"></td>
        <td id="LC1518" class="blob-code blob-code-inner js-file-line"><span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L1519" class="blob-num js-line-number" data-line-number="1519"></td>
        <td id="LC1519" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">Holder</span>(Definition* outer)</td>
      </tr>
      <tr>
        <td id="L1520" class="blob-num js-line-number" data-line-number="1520"></td>
        <td id="LC1520" class="blob-code blob-code-inner js-file-line">       : outer_(outer) {}</td>
      </tr>
      <tr>
        <td id="L1521" class="blob-num js-line-number" data-line-number="1521"></td>
        <td id="LC1521" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1522" class="blob-num js-line-number" data-line-number="1522"></td>
        <td id="LC1522" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">size_t</span> <span class="pl-en">parse</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* s, <span class="pl-c1">size_t</span> n, SemanticValues&amp; sv, Context&amp; c, any&amp; dt) <span class="pl-k">const</span> <span class="pl-k">override</span>;</td>
      </tr>
      <tr>
        <td id="L1523" class="blob-num js-line-number" data-line-number="1523"></td>
        <td id="LC1523" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1524" class="blob-num js-line-number" data-line-number="1524"></td>
        <td id="LC1524" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">accept</span>(Visitor&amp; v) <span class="pl-k">override</span>;</td>
      </tr>
      <tr>
        <td id="L1525" class="blob-num js-line-number" data-line-number="1525"></td>
        <td id="LC1525" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1526" class="blob-num js-line-number" data-line-number="1526"></td>
        <td id="LC1526" class="blob-code blob-code-inner js-file-line">    any <span class="pl-en">reduce</span>(<span class="pl-k">const</span> SemanticValues&amp; sv, any&amp; dt) <span class="pl-k">const</span>;</td>
      </tr>
      <tr>
        <td id="L1527" class="blob-num js-line-number" data-line-number="1527"></td>
        <td id="LC1527" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1528" class="blob-num js-line-number" data-line-number="1528"></td>
        <td id="LC1528" class="blob-code blob-code-inner js-file-line">    std::shared_ptr&lt;Ope&gt; ope_;</td>
      </tr>
      <tr>
        <td id="L1529" class="blob-num js-line-number" data-line-number="1529"></td>
        <td id="LC1529" class="blob-code blob-code-inner js-file-line">    Definition*          outer_;</td>
      </tr>
      <tr>
        <td id="L1530" class="blob-num js-line-number" data-line-number="1530"></td>
        <td id="LC1530" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1531" class="blob-num js-line-number" data-line-number="1531"></td>
        <td id="LC1531" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">friend</span> <span class="pl-k">class</span> <span class="pl-en">Definition</span>;</td>
      </tr>
      <tr>
        <td id="L1532" class="blob-num js-line-number" data-line-number="1532"></td>
        <td id="LC1532" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L1533" class="blob-num js-line-number" data-line-number="1533"></td>
        <td id="LC1533" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1534" class="blob-num js-line-number" data-line-number="1534"></td>
        <td id="LC1534" class="blob-code blob-code-inner js-file-line"><span class="pl-k">class</span> <span class="pl-en">DefinitionReference</span> : <span class="pl-k">public</span> <span class="pl-en">Ope</span></td>
      </tr>
      <tr>
        <td id="L1535" class="blob-num js-line-number" data-line-number="1535"></td>
        <td id="LC1535" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="L1536" class="blob-num js-line-number" data-line-number="1536"></td>
        <td id="LC1536" class="blob-code blob-code-inner js-file-line"><span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L1537" class="blob-num js-line-number" data-line-number="1537"></td>
        <td id="LC1537" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">DefinitionReference</span>(</td>
      </tr>
      <tr>
        <td id="L1538" class="blob-num js-line-number" data-line-number="1538"></td>
        <td id="LC1538" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> std::unordered_map&lt;std::string, Definition&gt;&amp; grammar, <span class="pl-k">const</span> std::string&amp; name, <span class="pl-k">const</span> <span class="pl-k">char</span>* s)</td>
      </tr>
      <tr>
        <td id="L1539" class="blob-num js-line-number" data-line-number="1539"></td>
        <td id="LC1539" class="blob-code blob-code-inner js-file-line">        : grammar_(grammar)</td>
      </tr>
      <tr>
        <td id="L1540" class="blob-num js-line-number" data-line-number="1540"></td>
        <td id="LC1540" class="blob-code blob-code-inner js-file-line">        , name_(name)</td>
      </tr>
      <tr>
        <td id="L1541" class="blob-num js-line-number" data-line-number="1541"></td>
        <td id="LC1541" class="blob-code blob-code-inner js-file-line">        , s_(s) {}</td>
      </tr>
      <tr>
        <td id="L1542" class="blob-num js-line-number" data-line-number="1542"></td>
        <td id="LC1542" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1543" class="blob-num js-line-number" data-line-number="1543"></td>
        <td id="LC1543" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">size_t</span> <span class="pl-en">parse</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* s, <span class="pl-c1">size_t</span> n, SemanticValues&amp; sv, Context&amp; c, any&amp; dt) <span class="pl-k">const</span> <span class="pl-k">override</span>;</td>
      </tr>
      <tr>
        <td id="L1544" class="blob-num js-line-number" data-line-number="1544"></td>
        <td id="LC1544" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1545" class="blob-num js-line-number" data-line-number="1545"></td>
        <td id="LC1545" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">accept</span>(Visitor&amp; v) <span class="pl-k">override</span>;</td>
      </tr>
      <tr>
        <td id="L1546" class="blob-num js-line-number" data-line-number="1546"></td>
        <td id="LC1546" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1547" class="blob-num js-line-number" data-line-number="1547"></td>
        <td id="LC1547" class="blob-code blob-code-inner js-file-line">    std::shared_ptr&lt;Ope&gt; <span class="pl-en">get_rule</span>() <span class="pl-k">const</span>;</td>
      </tr>
      <tr>
        <td id="L1548" class="blob-num js-line-number" data-line-number="1548"></td>
        <td id="LC1548" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1549" class="blob-num js-line-number" data-line-number="1549"></td>
        <td id="LC1549" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> std::unordered_map&lt;std::string, Definition&gt;&amp; grammar_;</td>
      </tr>
      <tr>
        <td id="L1550" class="blob-num js-line-number" data-line-number="1550"></td>
        <td id="LC1550" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> std::string                                  name_;</td>
      </tr>
      <tr>
        <td id="L1551" class="blob-num js-line-number" data-line-number="1551"></td>
        <td id="LC1551" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> <span class="pl-k">char</span>*                                        s_;</td>
      </tr>
      <tr>
        <td id="L1552" class="blob-num js-line-number" data-line-number="1552"></td>
        <td id="LC1552" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1553" class="blob-num js-line-number" data-line-number="1553"></td>
        <td id="LC1553" class="blob-code blob-code-inner js-file-line"><span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L1554" class="blob-num js-line-number" data-line-number="1554"></td>
        <td id="LC1554" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">mutable</span> std::once_flag                             init_;</td>
      </tr>
      <tr>
        <td id="L1555" class="blob-num js-line-number" data-line-number="1555"></td>
        <td id="LC1555" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">mutable</span> std::shared_ptr&lt;Ope&gt;                       rule_;</td>
      </tr>
      <tr>
        <td id="L1556" class="blob-num js-line-number" data-line-number="1556"></td>
        <td id="LC1556" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L1557" class="blob-num js-line-number" data-line-number="1557"></td>
        <td id="LC1557" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1558" class="blob-num js-line-number" data-line-number="1558"></td>
        <td id="LC1558" class="blob-code blob-code-inner js-file-line"><span class="pl-k">class</span> <span class="pl-en">Whitespace</span> : <span class="pl-k">public</span> <span class="pl-en">Ope</span></td>
      </tr>
      <tr>
        <td id="L1559" class="blob-num js-line-number" data-line-number="1559"></td>
        <td id="LC1559" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="L1560" class="blob-num js-line-number" data-line-number="1560"></td>
        <td id="LC1560" class="blob-code blob-code-inner js-file-line"><span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L1561" class="blob-num js-line-number" data-line-number="1561"></td>
        <td id="LC1561" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">Whitespace</span>(<span class="pl-k">const</span> std::shared_ptr&lt;Ope&gt;&amp; ope) : ope_(ope) {}</td>
      </tr>
      <tr>
        <td id="L1562" class="blob-num js-line-number" data-line-number="1562"></td>
        <td id="LC1562" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1563" class="blob-num js-line-number" data-line-number="1563"></td>
        <td id="LC1563" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">size_t</span> <span class="pl-en">parse</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* s, <span class="pl-c1">size_t</span> n, SemanticValues&amp; sv, Context&amp; c, any&amp; dt) <span class="pl-k">const</span> <span class="pl-k">override</span> {</td>
      </tr>
      <tr>
        <td id="L1564" class="blob-num js-line-number" data-line-number="1564"></td>
        <td id="LC1564" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (c.<span class="pl-smi">in_whitespace</span>) {</td>
      </tr>
      <tr>
        <td id="L1565" class="blob-num js-line-number" data-line-number="1565"></td>
        <td id="LC1565" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L1566" class="blob-num js-line-number" data-line-number="1566"></td>
        <td id="LC1566" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L1567" class="blob-num js-line-number" data-line-number="1567"></td>
        <td id="LC1567" class="blob-code blob-code-inner js-file-line">        c.<span class="pl-smi">in_whitespace</span> = <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L1568" class="blob-num js-line-number" data-line-number="1568"></td>
        <td id="LC1568" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">auto</span> se = <span class="pl-c1">make_scope_exit</span>([&amp;]() { c.<span class="pl-smi">in_whitespace</span> = <span class="pl-c1">false</span>; });</td>
      </tr>
      <tr>
        <td id="L1569" class="blob-num js-line-number" data-line-number="1569"></td>
        <td id="LC1569" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> <span class="pl-k">auto</span>&amp; rule = *ope_;</td>
      </tr>
      <tr>
        <td id="L1570" class="blob-num js-line-number" data-line-number="1570"></td>
        <td id="LC1570" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> rule.<span class="pl-c1">parse</span>(s, n, sv, c, dt);</td>
      </tr>
      <tr>
        <td id="L1571" class="blob-num js-line-number" data-line-number="1571"></td>
        <td id="LC1571" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1572" class="blob-num js-line-number" data-line-number="1572"></td>
        <td id="LC1572" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1573" class="blob-num js-line-number" data-line-number="1573"></td>
        <td id="LC1573" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">accept</span>(Visitor&amp; v) <span class="pl-k">override</span>;</td>
      </tr>
      <tr>
        <td id="L1574" class="blob-num js-line-number" data-line-number="1574"></td>
        <td id="LC1574" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1575" class="blob-num js-line-number" data-line-number="1575"></td>
        <td id="LC1575" class="blob-code blob-code-inner js-file-line">    std::shared_ptr&lt;Ope&gt; ope_;</td>
      </tr>
      <tr>
        <td id="L1576" class="blob-num js-line-number" data-line-number="1576"></td>
        <td id="LC1576" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L1577" class="blob-num js-line-number" data-line-number="1577"></td>
        <td id="LC1577" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1578" class="blob-num js-line-number" data-line-number="1578"></td>
        <td id="LC1578" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L1579" class="blob-num js-line-number" data-line-number="1579"></td>
        <td id="LC1579" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Visitor</span></td>
      </tr>
      <tr>
        <td id="L1580" class="blob-num js-line-number" data-line-number="1580"></td>
        <td id="LC1580" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L1581" class="blob-num js-line-number" data-line-number="1581"></td>
        <td id="LC1581" class="blob-code blob-code-inner js-file-line"><span class="pl-k">struct</span> <span class="pl-en">Ope</span>::Visitor</td>
      </tr>
      <tr>
        <td id="L1582" class="blob-num js-line-number" data-line-number="1582"></td>
        <td id="LC1582" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="L1583" class="blob-num js-line-number" data-line-number="1583"></td>
        <td id="LC1583" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">virtual</span> <span class="pl-en">~Visitor</span>() {}</td>
      </tr>
      <tr>
        <td id="L1584" class="blob-num js-line-number" data-line-number="1584"></td>
        <td id="LC1584" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">virtual</span> <span class="pl-k">void</span> <span class="pl-en">visit</span>(Sequence&amp; <span class="pl-c"><span class="pl-c">/*</span>ope<span class="pl-c">*/</span></span>) {}</td>
      </tr>
      <tr>
        <td id="L1585" class="blob-num js-line-number" data-line-number="1585"></td>
        <td id="LC1585" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">virtual</span> <span class="pl-k">void</span> <span class="pl-en">visit</span>(PrioritizedChoice&amp; <span class="pl-c"><span class="pl-c">/*</span>ope<span class="pl-c">*/</span></span>) {}</td>
      </tr>
      <tr>
        <td id="L1586" class="blob-num js-line-number" data-line-number="1586"></td>
        <td id="LC1586" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">virtual</span> <span class="pl-k">void</span> <span class="pl-en">visit</span>(ZeroOrMore&amp; <span class="pl-c"><span class="pl-c">/*</span>ope<span class="pl-c">*/</span></span>) {}</td>
      </tr>
      <tr>
        <td id="L1587" class="blob-num js-line-number" data-line-number="1587"></td>
        <td id="LC1587" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">virtual</span> <span class="pl-k">void</span> <span class="pl-en">visit</span>(OneOrMore&amp; <span class="pl-c"><span class="pl-c">/*</span>ope<span class="pl-c">*/</span></span>) {}</td>
      </tr>
      <tr>
        <td id="L1588" class="blob-num js-line-number" data-line-number="1588"></td>
        <td id="LC1588" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">virtual</span> <span class="pl-k">void</span> <span class="pl-en">visit</span>(Option&amp; <span class="pl-c"><span class="pl-c">/*</span>ope<span class="pl-c">*/</span></span>) {}</td>
      </tr>
      <tr>
        <td id="L1589" class="blob-num js-line-number" data-line-number="1589"></td>
        <td id="LC1589" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">virtual</span> <span class="pl-k">void</span> <span class="pl-en">visit</span>(AndPredicate&amp; <span class="pl-c"><span class="pl-c">/*</span>ope<span class="pl-c">*/</span></span>) {}</td>
      </tr>
      <tr>
        <td id="L1590" class="blob-num js-line-number" data-line-number="1590"></td>
        <td id="LC1590" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">virtual</span> <span class="pl-k">void</span> <span class="pl-en">visit</span>(NotPredicate&amp; <span class="pl-c"><span class="pl-c">/*</span>ope<span class="pl-c">*/</span></span>) {}</td>
      </tr>
      <tr>
        <td id="L1591" class="blob-num js-line-number" data-line-number="1591"></td>
        <td id="LC1591" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">virtual</span> <span class="pl-k">void</span> <span class="pl-en">visit</span>(LiteralString&amp; <span class="pl-c"><span class="pl-c">/*</span>ope<span class="pl-c">*/</span></span>) {}</td>
      </tr>
      <tr>
        <td id="L1592" class="blob-num js-line-number" data-line-number="1592"></td>
        <td id="LC1592" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">virtual</span> <span class="pl-k">void</span> <span class="pl-en">visit</span>(CharacterClass&amp; <span class="pl-c"><span class="pl-c">/*</span>ope<span class="pl-c">*/</span></span>) {}</td>
      </tr>
      <tr>
        <td id="L1593" class="blob-num js-line-number" data-line-number="1593"></td>
        <td id="LC1593" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">virtual</span> <span class="pl-k">void</span> <span class="pl-en">visit</span>(Character&amp; <span class="pl-c"><span class="pl-c">/*</span>ope<span class="pl-c">*/</span></span>) {}</td>
      </tr>
      <tr>
        <td id="L1594" class="blob-num js-line-number" data-line-number="1594"></td>
        <td id="LC1594" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">virtual</span> <span class="pl-k">void</span> <span class="pl-en">visit</span>(AnyCharacter&amp; <span class="pl-c"><span class="pl-c">/*</span>ope<span class="pl-c">*/</span></span>) {}</td>
      </tr>
      <tr>
        <td id="L1595" class="blob-num js-line-number" data-line-number="1595"></td>
        <td id="LC1595" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">virtual</span> <span class="pl-k">void</span> <span class="pl-en">visit</span>(Capture&amp; <span class="pl-c"><span class="pl-c">/*</span>ope<span class="pl-c">*/</span></span>) {}</td>
      </tr>
      <tr>
        <td id="L1596" class="blob-num js-line-number" data-line-number="1596"></td>
        <td id="LC1596" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">virtual</span> <span class="pl-k">void</span> <span class="pl-en">visit</span>(TokenBoundary&amp; <span class="pl-c"><span class="pl-c">/*</span>ope<span class="pl-c">*/</span></span>) {}</td>
      </tr>
      <tr>
        <td id="L1597" class="blob-num js-line-number" data-line-number="1597"></td>
        <td id="LC1597" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">virtual</span> <span class="pl-k">void</span> <span class="pl-en">visit</span>(Ignore&amp; <span class="pl-c"><span class="pl-c">/*</span>ope<span class="pl-c">*/</span></span>) {}</td>
      </tr>
      <tr>
        <td id="L1598" class="blob-num js-line-number" data-line-number="1598"></td>
        <td id="LC1598" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">virtual</span> <span class="pl-k">void</span> <span class="pl-en">visit</span>(WeakHolder&amp; <span class="pl-c"><span class="pl-c">/*</span>ope<span class="pl-c">*/</span></span>) {}</td>
      </tr>
      <tr>
        <td id="L1599" class="blob-num js-line-number" data-line-number="1599"></td>
        <td id="LC1599" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">virtual</span> <span class="pl-k">void</span> <span class="pl-en">visit</span>(Holder&amp; <span class="pl-c"><span class="pl-c">/*</span>ope<span class="pl-c">*/</span></span>) {}</td>
      </tr>
      <tr>
        <td id="L1600" class="blob-num js-line-number" data-line-number="1600"></td>
        <td id="LC1600" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">virtual</span> <span class="pl-k">void</span> <span class="pl-en">visit</span>(DefinitionReference&amp; <span class="pl-c"><span class="pl-c">/*</span>ope<span class="pl-c">*/</span></span>) {}</td>
      </tr>
      <tr>
        <td id="L1601" class="blob-num js-line-number" data-line-number="1601"></td>
        <td id="LC1601" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">virtual</span> <span class="pl-k">void</span> <span class="pl-en">visit</span>(Whitespace&amp; <span class="pl-c"><span class="pl-c">/*</span>ope<span class="pl-c">*/</span></span>) {}</td>
      </tr>
      <tr>
        <td id="L1602" class="blob-num js-line-number" data-line-number="1602"></td>
        <td id="LC1602" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L1603" class="blob-num js-line-number" data-line-number="1603"></td>
        <td id="LC1603" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1604" class="blob-num js-line-number" data-line-number="1604"></td>
        <td id="LC1604" class="blob-code blob-code-inner js-file-line"><span class="pl-k">struct</span> <span class="pl-en">AssignIDToDefinition</span> : <span class="pl-k">public</span> <span class="pl-en">Ope</span>::Visitor</td>
      </tr>
      <tr>
        <td id="L1605" class="blob-num js-line-number" data-line-number="1605"></td>
        <td id="LC1605" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="L1606" class="blob-num js-line-number" data-line-number="1606"></td>
        <td id="LC1606" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">using</span> Ope::Visitor::visit;</td>
      </tr>
      <tr>
        <td id="L1607" class="blob-num js-line-number" data-line-number="1607"></td>
        <td id="LC1607" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1608" class="blob-num js-line-number" data-line-number="1608"></td>
        <td id="LC1608" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(Sequence&amp; ope) <span class="pl-k">override</span> {</td>
      </tr>
      <tr>
        <td id="L1609" class="blob-num js-line-number" data-line-number="1609"></td>
        <td id="LC1609" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">for</span> (<span class="pl-k">auto</span> op: ope.<span class="pl-smi">opes_</span>) {</td>
      </tr>
      <tr>
        <td id="L1610" class="blob-num js-line-number" data-line-number="1610"></td>
        <td id="LC1610" class="blob-code blob-code-inner js-file-line">            op-&gt;<span class="pl-c1">accept</span>(*<span class="pl-c1">this</span>);</td>
      </tr>
      <tr>
        <td id="L1611" class="blob-num js-line-number" data-line-number="1611"></td>
        <td id="LC1611" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L1612" class="blob-num js-line-number" data-line-number="1612"></td>
        <td id="LC1612" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1613" class="blob-num js-line-number" data-line-number="1613"></td>
        <td id="LC1613" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(PrioritizedChoice&amp; ope) <span class="pl-k">override</span> {</td>
      </tr>
      <tr>
        <td id="L1614" class="blob-num js-line-number" data-line-number="1614"></td>
        <td id="LC1614" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">for</span> (<span class="pl-k">auto</span> op: ope.<span class="pl-smi">opes_</span>) {</td>
      </tr>
      <tr>
        <td id="L1615" class="blob-num js-line-number" data-line-number="1615"></td>
        <td id="LC1615" class="blob-code blob-code-inner js-file-line">            op-&gt;<span class="pl-c1">accept</span>(*<span class="pl-c1">this</span>);</td>
      </tr>
      <tr>
        <td id="L1616" class="blob-num js-line-number" data-line-number="1616"></td>
        <td id="LC1616" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L1617" class="blob-num js-line-number" data-line-number="1617"></td>
        <td id="LC1617" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1618" class="blob-num js-line-number" data-line-number="1618"></td>
        <td id="LC1618" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(ZeroOrMore&amp; ope) <span class="pl-k">override</span> { ope.<span class="pl-smi">ope_</span>-&gt;<span class="pl-c1">accept</span>(*<span class="pl-c1">this</span>); }</td>
      </tr>
      <tr>
        <td id="L1619" class="blob-num js-line-number" data-line-number="1619"></td>
        <td id="LC1619" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(OneOrMore&amp; ope) <span class="pl-k">override</span> { ope.<span class="pl-smi">ope_</span>-&gt;<span class="pl-c1">accept</span>(*<span class="pl-c1">this</span>); }</td>
      </tr>
      <tr>
        <td id="L1620" class="blob-num js-line-number" data-line-number="1620"></td>
        <td id="LC1620" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(Option&amp; ope) <span class="pl-k">override</span> { ope.<span class="pl-smi">ope_</span>-&gt;<span class="pl-c1">accept</span>(*<span class="pl-c1">this</span>); }</td>
      </tr>
      <tr>
        <td id="L1621" class="blob-num js-line-number" data-line-number="1621"></td>
        <td id="LC1621" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(AndPredicate&amp; ope) <span class="pl-k">override</span> { ope.<span class="pl-smi">ope_</span>-&gt;<span class="pl-c1">accept</span>(*<span class="pl-c1">this</span>); }</td>
      </tr>
      <tr>
        <td id="L1622" class="blob-num js-line-number" data-line-number="1622"></td>
        <td id="LC1622" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(NotPredicate&amp; ope) <span class="pl-k">override</span> { ope.<span class="pl-smi">ope_</span>-&gt;<span class="pl-c1">accept</span>(*<span class="pl-c1">this</span>); }</td>
      </tr>
      <tr>
        <td id="L1623" class="blob-num js-line-number" data-line-number="1623"></td>
        <td id="LC1623" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(Capture&amp; ope) <span class="pl-k">override</span> { ope.<span class="pl-smi">ope_</span>-&gt;<span class="pl-c1">accept</span>(*<span class="pl-c1">this</span>); }</td>
      </tr>
      <tr>
        <td id="L1624" class="blob-num js-line-number" data-line-number="1624"></td>
        <td id="LC1624" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(TokenBoundary&amp; ope) <span class="pl-k">override</span> { ope.<span class="pl-smi">ope_</span>-&gt;<span class="pl-c1">accept</span>(*<span class="pl-c1">this</span>); }</td>
      </tr>
      <tr>
        <td id="L1625" class="blob-num js-line-number" data-line-number="1625"></td>
        <td id="LC1625" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(Ignore&amp; ope) <span class="pl-k">override</span> { ope.<span class="pl-smi">ope_</span>-&gt;<span class="pl-c1">accept</span>(*<span class="pl-c1">this</span>); }</td>
      </tr>
      <tr>
        <td id="L1626" class="blob-num js-line-number" data-line-number="1626"></td>
        <td id="LC1626" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(WeakHolder&amp; ope) <span class="pl-k">override</span> { ope.<span class="pl-smi">weak_</span>.<span class="pl-c1">lock</span>()-&gt;<span class="pl-c1">accept</span>(*<span class="pl-c1">this</span>); }</td>
      </tr>
      <tr>
        <td id="L1627" class="blob-num js-line-number" data-line-number="1627"></td>
        <td id="LC1627" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(Holder&amp; ope) <span class="pl-k">override</span>;</td>
      </tr>
      <tr>
        <td id="L1628" class="blob-num js-line-number" data-line-number="1628"></td>
        <td id="LC1628" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(DefinitionReference&amp; ope) <span class="pl-k">override</span> { ope.<span class="pl-c1">get_rule</span>()-&gt;<span class="pl-c1">accept</span>(*<span class="pl-c1">this</span>); }</td>
      </tr>
      <tr>
        <td id="L1629" class="blob-num js-line-number" data-line-number="1629"></td>
        <td id="LC1629" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1630" class="blob-num js-line-number" data-line-number="1630"></td>
        <td id="LC1630" class="blob-code blob-code-inner js-file-line">    std::unordered_map&lt;<span class="pl-k">void</span>*, <span class="pl-c1">size_t</span>&gt; ids;</td>
      </tr>
      <tr>
        <td id="L1631" class="blob-num js-line-number" data-line-number="1631"></td>
        <td id="LC1631" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L1632" class="blob-num js-line-number" data-line-number="1632"></td>
        <td id="LC1632" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1633" class="blob-num js-line-number" data-line-number="1633"></td>
        <td id="LC1633" class="blob-code blob-code-inner js-file-line"><span class="pl-k">struct</span> <span class="pl-en">IsToken</span> : <span class="pl-k">public</span> <span class="pl-en">Ope</span>::Visitor</td>
      </tr>
      <tr>
        <td id="L1634" class="blob-num js-line-number" data-line-number="1634"></td>
        <td id="LC1634" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="L1635" class="blob-num js-line-number" data-line-number="1635"></td>
        <td id="LC1635" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">IsToken</span>() : has_token_boundary(<span class="pl-c1">false</span>), has_rule(<span class="pl-c1">false</span>) {}</td>
      </tr>
      <tr>
        <td id="L1636" class="blob-num js-line-number" data-line-number="1636"></td>
        <td id="LC1636" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1637" class="blob-num js-line-number" data-line-number="1637"></td>
        <td id="LC1637" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">using</span> Ope::Visitor::visit;</td>
      </tr>
      <tr>
        <td id="L1638" class="blob-num js-line-number" data-line-number="1638"></td>
        <td id="LC1638" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1639" class="blob-num js-line-number" data-line-number="1639"></td>
        <td id="LC1639" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(Sequence&amp; ope) <span class="pl-k">override</span> {</td>
      </tr>
      <tr>
        <td id="L1640" class="blob-num js-line-number" data-line-number="1640"></td>
        <td id="LC1640" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">for</span> (<span class="pl-k">auto</span> op: ope.<span class="pl-smi">opes_</span>) {</td>
      </tr>
      <tr>
        <td id="L1641" class="blob-num js-line-number" data-line-number="1641"></td>
        <td id="LC1641" class="blob-code blob-code-inner js-file-line">            op-&gt;<span class="pl-c1">accept</span>(*<span class="pl-c1">this</span>);</td>
      </tr>
      <tr>
        <td id="L1642" class="blob-num js-line-number" data-line-number="1642"></td>
        <td id="LC1642" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L1643" class="blob-num js-line-number" data-line-number="1643"></td>
        <td id="LC1643" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1644" class="blob-num js-line-number" data-line-number="1644"></td>
        <td id="LC1644" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(PrioritizedChoice&amp; ope) <span class="pl-k">override</span> {</td>
      </tr>
      <tr>
        <td id="L1645" class="blob-num js-line-number" data-line-number="1645"></td>
        <td id="LC1645" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">for</span> (<span class="pl-k">auto</span> op: ope.<span class="pl-smi">opes_</span>) {</td>
      </tr>
      <tr>
        <td id="L1646" class="blob-num js-line-number" data-line-number="1646"></td>
        <td id="LC1646" class="blob-code blob-code-inner js-file-line">            op-&gt;<span class="pl-c1">accept</span>(*<span class="pl-c1">this</span>);</td>
      </tr>
      <tr>
        <td id="L1647" class="blob-num js-line-number" data-line-number="1647"></td>
        <td id="LC1647" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L1648" class="blob-num js-line-number" data-line-number="1648"></td>
        <td id="LC1648" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1649" class="blob-num js-line-number" data-line-number="1649"></td>
        <td id="LC1649" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(ZeroOrMore&amp; ope) <span class="pl-k">override</span> { ope.<span class="pl-smi">ope_</span>-&gt;<span class="pl-c1">accept</span>(*<span class="pl-c1">this</span>); }</td>
      </tr>
      <tr>
        <td id="L1650" class="blob-num js-line-number" data-line-number="1650"></td>
        <td id="LC1650" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(OneOrMore&amp; ope) <span class="pl-k">override</span> { ope.<span class="pl-smi">ope_</span>-&gt;<span class="pl-c1">accept</span>(*<span class="pl-c1">this</span>); }</td>
      </tr>
      <tr>
        <td id="L1651" class="blob-num js-line-number" data-line-number="1651"></td>
        <td id="LC1651" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(Option&amp; ope) <span class="pl-k">override</span> { ope.<span class="pl-smi">ope_</span>-&gt;<span class="pl-c1">accept</span>(*<span class="pl-c1">this</span>); }</td>
      </tr>
      <tr>
        <td id="L1652" class="blob-num js-line-number" data-line-number="1652"></td>
        <td id="LC1652" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(Capture&amp; ope) <span class="pl-k">override</span> { ope.<span class="pl-smi">ope_</span>-&gt;<span class="pl-c1">accept</span>(*<span class="pl-c1">this</span>); }</td>
      </tr>
      <tr>
        <td id="L1653" class="blob-num js-line-number" data-line-number="1653"></td>
        <td id="LC1653" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(TokenBoundary&amp; <span class="pl-c"><span class="pl-c">/*</span>ope<span class="pl-c">*/</span></span>) <span class="pl-k">override</span> { has_token_boundary = <span class="pl-c1">true</span>; }</td>
      </tr>
      <tr>
        <td id="L1654" class="blob-num js-line-number" data-line-number="1654"></td>
        <td id="LC1654" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(Ignore&amp; ope) <span class="pl-k">override</span> { ope.<span class="pl-smi">ope_</span>-&gt;<span class="pl-c1">accept</span>(*<span class="pl-c1">this</span>); }</td>
      </tr>
      <tr>
        <td id="L1655" class="blob-num js-line-number" data-line-number="1655"></td>
        <td id="LC1655" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(WeakHolder&amp; ope) <span class="pl-k">override</span> { ope.<span class="pl-smi">weak_</span>.<span class="pl-c1">lock</span>()-&gt;<span class="pl-c1">accept</span>(*<span class="pl-c1">this</span>); }</td>
      </tr>
      <tr>
        <td id="L1656" class="blob-num js-line-number" data-line-number="1656"></td>
        <td id="LC1656" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(DefinitionReference&amp; <span class="pl-c"><span class="pl-c">/*</span>ope<span class="pl-c">*/</span></span>) <span class="pl-k">override</span> { has_rule = <span class="pl-c1">true</span>; }</td>
      </tr>
      <tr>
        <td id="L1657" class="blob-num js-line-number" data-line-number="1657"></td>
        <td id="LC1657" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1658" class="blob-num js-line-number" data-line-number="1658"></td>
        <td id="LC1658" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">bool</span> <span class="pl-en">is_token</span>() <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L1659" class="blob-num js-line-number" data-line-number="1659"></td>
        <td id="LC1659" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> has_token_boundary || !has_rule;</td>
      </tr>
      <tr>
        <td id="L1660" class="blob-num js-line-number" data-line-number="1660"></td>
        <td id="LC1660" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1661" class="blob-num js-line-number" data-line-number="1661"></td>
        <td id="LC1661" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1662" class="blob-num js-line-number" data-line-number="1662"></td>
        <td id="LC1662" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">bool</span> has_token_boundary;</td>
      </tr>
      <tr>
        <td id="L1663" class="blob-num js-line-number" data-line-number="1663"></td>
        <td id="LC1663" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">bool</span> has_rule;</td>
      </tr>
      <tr>
        <td id="L1664" class="blob-num js-line-number" data-line-number="1664"></td>
        <td id="LC1664" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L1665" class="blob-num js-line-number" data-line-number="1665"></td>
        <td id="LC1665" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1666" class="blob-num js-line-number" data-line-number="1666"></td>
        <td id="LC1666" class="blob-code blob-code-inner js-file-line"><span class="pl-k">static</span> <span class="pl-k">const</span> <span class="pl-k">char</span>* WHITESPACE_DEFINITION_NAME = <span class="pl-s"><span class="pl-pds">&quot;</span>%whitespace<span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L1667" class="blob-num js-line-number" data-line-number="1667"></td>
        <td id="LC1667" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1668" class="blob-num js-line-number" data-line-number="1668"></td>
        <td id="LC1668" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L1669" class="blob-num js-line-number" data-line-number="1669"></td>
        <td id="LC1669" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Definition</span></td>
      </tr>
      <tr>
        <td id="L1670" class="blob-num js-line-number" data-line-number="1670"></td>
        <td id="LC1670" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L1671" class="blob-num js-line-number" data-line-number="1671"></td>
        <td id="LC1671" class="blob-code blob-code-inner js-file-line"><span class="pl-k">class</span> <span class="pl-en">Definition</span></td>
      </tr>
      <tr>
        <td id="L1672" class="blob-num js-line-number" data-line-number="1672"></td>
        <td id="LC1672" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="L1673" class="blob-num js-line-number" data-line-number="1673"></td>
        <td id="LC1673" class="blob-code blob-code-inner js-file-line"><span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L1674" class="blob-num js-line-number" data-line-number="1674"></td>
        <td id="LC1674" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">struct</span> <span class="pl-en">Result</span> {</td>
      </tr>
      <tr>
        <td id="L1675" class="blob-num js-line-number" data-line-number="1675"></td>
        <td id="LC1675" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">bool</span>              ret;</td>
      </tr>
      <tr>
        <td id="L1676" class="blob-num js-line-number" data-line-number="1676"></td>
        <td id="LC1676" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">size_t</span>            len;</td>
      </tr>
      <tr>
        <td id="L1677" class="blob-num js-line-number" data-line-number="1677"></td>
        <td id="LC1677" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> <span class="pl-k">char</span>*       error_pos;</td>
      </tr>
      <tr>
        <td id="L1678" class="blob-num js-line-number" data-line-number="1678"></td>
        <td id="LC1678" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> <span class="pl-k">char</span>*       message_pos;</td>
      </tr>
      <tr>
        <td id="L1679" class="blob-num js-line-number" data-line-number="1679"></td>
        <td id="LC1679" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> std::string message;</td>
      </tr>
      <tr>
        <td id="L1680" class="blob-num js-line-number" data-line-number="1680"></td>
        <td id="LC1680" class="blob-code blob-code-inner js-file-line">    };</td>
      </tr>
      <tr>
        <td id="L1681" class="blob-num js-line-number" data-line-number="1681"></td>
        <td id="LC1681" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1682" class="blob-num js-line-number" data-line-number="1682"></td>
        <td id="LC1682" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">Definition</span>()</td>
      </tr>
      <tr>
        <td id="L1683" class="blob-num js-line-number" data-line-number="1683"></td>
        <td id="LC1683" class="blob-code blob-code-inner js-file-line">        : ignoreSemanticValue(<span class="pl-c1">false</span>)</td>
      </tr>
      <tr>
        <td id="L1684" class="blob-num js-line-number" data-line-number="1684"></td>
        <td id="LC1684" class="blob-code blob-code-inner js-file-line">        , enablePackratParsing(<span class="pl-c1">false</span>)</td>
      </tr>
      <tr>
        <td id="L1685" class="blob-num js-line-number" data-line-number="1685"></td>
        <td id="LC1685" class="blob-code blob-code-inner js-file-line">        , is_token(<span class="pl-c1">false</span>)</td>
      </tr>
      <tr>
        <td id="L1686" class="blob-num js-line-number" data-line-number="1686"></td>
        <td id="LC1686" class="blob-code blob-code-inner js-file-line">        , has_token_boundary(<span class="pl-c1">false</span>)</td>
      </tr>
      <tr>
        <td id="L1687" class="blob-num js-line-number" data-line-number="1687"></td>
        <td id="LC1687" class="blob-code blob-code-inner js-file-line">        , holder_(std::make_shared&lt;Holder&gt;(<span class="pl-c1">this</span>)) {}</td>
      </tr>
      <tr>
        <td id="L1688" class="blob-num js-line-number" data-line-number="1688"></td>
        <td id="LC1688" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1689" class="blob-num js-line-number" data-line-number="1689"></td>
        <td id="LC1689" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">Definition</span>(<span class="pl-k">const</span> Definition&amp; rhs)</td>
      </tr>
      <tr>
        <td id="L1690" class="blob-num js-line-number" data-line-number="1690"></td>
        <td id="LC1690" class="blob-code blob-code-inner js-file-line">        : name(rhs.name)</td>
      </tr>
      <tr>
        <td id="L1691" class="blob-num js-line-number" data-line-number="1691"></td>
        <td id="LC1691" class="blob-code blob-code-inner js-file-line">        , ignoreSemanticValue(<span class="pl-c1">false</span>)</td>
      </tr>
      <tr>
        <td id="L1692" class="blob-num js-line-number" data-line-number="1692"></td>
        <td id="LC1692" class="blob-code blob-code-inner js-file-line">        , enablePackratParsing(<span class="pl-c1">false</span>)</td>
      </tr>
      <tr>
        <td id="L1693" class="blob-num js-line-number" data-line-number="1693"></td>
        <td id="LC1693" class="blob-code blob-code-inner js-file-line">        , is_token(<span class="pl-c1">false</span>)</td>
      </tr>
      <tr>
        <td id="L1694" class="blob-num js-line-number" data-line-number="1694"></td>
        <td id="LC1694" class="blob-code blob-code-inner js-file-line">        , has_token_boundary(<span class="pl-c1">false</span>)</td>
      </tr>
      <tr>
        <td id="L1695" class="blob-num js-line-number" data-line-number="1695"></td>
        <td id="LC1695" class="blob-code blob-code-inner js-file-line">        , holder_(rhs.holder_)</td>
      </tr>
      <tr>
        <td id="L1696" class="blob-num js-line-number" data-line-number="1696"></td>
        <td id="LC1696" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="L1697" class="blob-num js-line-number" data-line-number="1697"></td>
        <td id="LC1697" class="blob-code blob-code-inner js-file-line">        holder_-&gt;outer_ = <span class="pl-c1">this</span>;</td>
      </tr>
      <tr>
        <td id="L1698" class="blob-num js-line-number" data-line-number="1698"></td>
        <td id="LC1698" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1699" class="blob-num js-line-number" data-line-number="1699"></td>
        <td id="LC1699" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1700" class="blob-num js-line-number" data-line-number="1700"></td>
        <td id="LC1700" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">Definition</span>(Definition&amp;&amp; rhs)</td>
      </tr>
      <tr>
        <td id="L1701" class="blob-num js-line-number" data-line-number="1701"></td>
        <td id="LC1701" class="blob-code blob-code-inner js-file-line">        : name(std::move(rhs.name))</td>
      </tr>
      <tr>
        <td id="L1702" class="blob-num js-line-number" data-line-number="1702"></td>
        <td id="LC1702" class="blob-code blob-code-inner js-file-line">        , ignoreSemanticValue(rhs.ignoreSemanticValue)</td>
      </tr>
      <tr>
        <td id="L1703" class="blob-num js-line-number" data-line-number="1703"></td>
        <td id="LC1703" class="blob-code blob-code-inner js-file-line">        , whitespaceOpe(rhs.whitespaceOpe)</td>
      </tr>
      <tr>
        <td id="L1704" class="blob-num js-line-number" data-line-number="1704"></td>
        <td id="LC1704" class="blob-code blob-code-inner js-file-line">        , enablePackratParsing(rhs.enablePackratParsing)</td>
      </tr>
      <tr>
        <td id="L1705" class="blob-num js-line-number" data-line-number="1705"></td>
        <td id="LC1705" class="blob-code blob-code-inner js-file-line">        , is_token(rhs.is_token)</td>
      </tr>
      <tr>
        <td id="L1706" class="blob-num js-line-number" data-line-number="1706"></td>
        <td id="LC1706" class="blob-code blob-code-inner js-file-line">        , has_token_boundary(rhs.has_token_boundary)</td>
      </tr>
      <tr>
        <td id="L1707" class="blob-num js-line-number" data-line-number="1707"></td>
        <td id="LC1707" class="blob-code blob-code-inner js-file-line">        , holder_(std::move(rhs.holder_))</td>
      </tr>
      <tr>
        <td id="L1708" class="blob-num js-line-number" data-line-number="1708"></td>
        <td id="LC1708" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="L1709" class="blob-num js-line-number" data-line-number="1709"></td>
        <td id="LC1709" class="blob-code blob-code-inner js-file-line">        holder_-&gt;outer_ = <span class="pl-c1">this</span>;</td>
      </tr>
      <tr>
        <td id="L1710" class="blob-num js-line-number" data-line-number="1710"></td>
        <td id="LC1710" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1711" class="blob-num js-line-number" data-line-number="1711"></td>
        <td id="LC1711" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1712" class="blob-num js-line-number" data-line-number="1712"></td>
        <td id="LC1712" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">Definition</span>(<span class="pl-k">const</span> std::shared_ptr&lt;Ope&gt;&amp; ope)</td>
      </tr>
      <tr>
        <td id="L1713" class="blob-num js-line-number" data-line-number="1713"></td>
        <td id="LC1713" class="blob-code blob-code-inner js-file-line">        : ignoreSemanticValue(<span class="pl-c1">false</span>)</td>
      </tr>
      <tr>
        <td id="L1714" class="blob-num js-line-number" data-line-number="1714"></td>
        <td id="LC1714" class="blob-code blob-code-inner js-file-line">        , enablePackratParsing(<span class="pl-c1">false</span>)</td>
      </tr>
      <tr>
        <td id="L1715" class="blob-num js-line-number" data-line-number="1715"></td>
        <td id="LC1715" class="blob-code blob-code-inner js-file-line">        , is_token(<span class="pl-c1">false</span>)</td>
      </tr>
      <tr>
        <td id="L1716" class="blob-num js-line-number" data-line-number="1716"></td>
        <td id="LC1716" class="blob-code blob-code-inner js-file-line">        , has_token_boundary(<span class="pl-c1">false</span>)</td>
      </tr>
      <tr>
        <td id="L1717" class="blob-num js-line-number" data-line-number="1717"></td>
        <td id="LC1717" class="blob-code blob-code-inner js-file-line">        , holder_(std::make_shared&lt;Holder&gt;(<span class="pl-c1">this</span>))</td>
      </tr>
      <tr>
        <td id="L1718" class="blob-num js-line-number" data-line-number="1718"></td>
        <td id="LC1718" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="L1719" class="blob-num js-line-number" data-line-number="1719"></td>
        <td id="LC1719" class="blob-code blob-code-inner js-file-line">        *<span class="pl-c1">this</span> &lt;= ope;</td>
      </tr>
      <tr>
        <td id="L1720" class="blob-num js-line-number" data-line-number="1720"></td>
        <td id="LC1720" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1721" class="blob-num js-line-number" data-line-number="1721"></td>
        <td id="LC1721" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1722" class="blob-num js-line-number" data-line-number="1722"></td>
        <td id="LC1722" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">operator</span> std::shared_ptr&lt;Ope&gt;() {</td>
      </tr>
      <tr>
        <td id="L1723" class="blob-num js-line-number" data-line-number="1723"></td>
        <td id="LC1723" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> std::make_shared&lt;WeakHolder&gt;(holder_);</td>
      </tr>
      <tr>
        <td id="L1724" class="blob-num js-line-number" data-line-number="1724"></td>
        <td id="LC1724" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1725" class="blob-num js-line-number" data-line-number="1725"></td>
        <td id="LC1725" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1726" class="blob-num js-line-number" data-line-number="1726"></td>
        <td id="LC1726" class="blob-code blob-code-inner js-file-line">    Definition&amp; <span class="pl-k">operator</span>&lt;=(<span class="pl-k">const</span> std::shared_ptr&lt;Ope&gt;&amp; ope) {</td>
      </tr>
      <tr>
        <td id="L1727" class="blob-num js-line-number" data-line-number="1727"></td>
        <td id="LC1727" class="blob-code blob-code-inner js-file-line">        IsToken isToken;</td>
      </tr>
      <tr>
        <td id="L1728" class="blob-num js-line-number" data-line-number="1728"></td>
        <td id="LC1728" class="blob-code blob-code-inner js-file-line">        ope-&gt;<span class="pl-c1">accept</span>(isToken);</td>
      </tr>
      <tr>
        <td id="L1729" class="blob-num js-line-number" data-line-number="1729"></td>
        <td id="LC1729" class="blob-code blob-code-inner js-file-line">        is_token = isToken.<span class="pl-c1">is_token</span>();</td>
      </tr>
      <tr>
        <td id="L1730" class="blob-num js-line-number" data-line-number="1730"></td>
        <td id="LC1730" class="blob-code blob-code-inner js-file-line">        has_token_boundary = isToken.<span class="pl-smi">has_token_boundary</span>;</td>
      </tr>
      <tr>
        <td id="L1731" class="blob-num js-line-number" data-line-number="1731"></td>
        <td id="LC1731" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1732" class="blob-num js-line-number" data-line-number="1732"></td>
        <td id="LC1732" class="blob-code blob-code-inner js-file-line">        holder_-&gt;ope_ = ope;</td>
      </tr>
      <tr>
        <td id="L1733" class="blob-num js-line-number" data-line-number="1733"></td>
        <td id="LC1733" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1734" class="blob-num js-line-number" data-line-number="1734"></td>
        <td id="LC1734" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> *<span class="pl-c1">this</span>;</td>
      </tr>
      <tr>
        <td id="L1735" class="blob-num js-line-number" data-line-number="1735"></td>
        <td id="LC1735" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1736" class="blob-num js-line-number" data-line-number="1736"></td>
        <td id="LC1736" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1737" class="blob-num js-line-number" data-line-number="1737"></td>
        <td id="LC1737" class="blob-code blob-code-inner js-file-line">    Result <span class="pl-en">parse</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* s, <span class="pl-c1">size_t</span> n, <span class="pl-k">const</span> <span class="pl-k">char</span>* path = <span class="pl-c1">nullptr</span>) <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L1738" class="blob-num js-line-number" data-line-number="1738"></td>
        <td id="LC1738" class="blob-code blob-code-inner js-file-line">        SemanticValues sv;</td>
      </tr>
      <tr>
        <td id="L1739" class="blob-num js-line-number" data-line-number="1739"></td>
        <td id="LC1739" class="blob-code blob-code-inner js-file-line">        any dt;</td>
      </tr>
      <tr>
        <td id="L1740" class="blob-num js-line-number" data-line-number="1740"></td>
        <td id="LC1740" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">parse_core</span>(s, n, sv, dt, path);</td>
      </tr>
      <tr>
        <td id="L1741" class="blob-num js-line-number" data-line-number="1741"></td>
        <td id="LC1741" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1742" class="blob-num js-line-number" data-line-number="1742"></td>
        <td id="LC1742" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1743" class="blob-num js-line-number" data-line-number="1743"></td>
        <td id="LC1743" class="blob-code blob-code-inner js-file-line">    Result <span class="pl-en">parse</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* s, <span class="pl-k">const</span> <span class="pl-k">char</span>* path = <span class="pl-c1">nullptr</span>) <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L1744" class="blob-num js-line-number" data-line-number="1744"></td>
        <td id="LC1744" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">auto</span> n = <span class="pl-c1">strlen</span>(s);</td>
      </tr>
      <tr>
        <td id="L1745" class="blob-num js-line-number" data-line-number="1745"></td>
        <td id="LC1745" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">parse</span>(s, n, path);</td>
      </tr>
      <tr>
        <td id="L1746" class="blob-num js-line-number" data-line-number="1746"></td>
        <td id="LC1746" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1747" class="blob-num js-line-number" data-line-number="1747"></td>
        <td id="LC1747" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1748" class="blob-num js-line-number" data-line-number="1748"></td>
        <td id="LC1748" class="blob-code blob-code-inner js-file-line">    Result <span class="pl-en">parse</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* s, <span class="pl-c1">size_t</span> n, any&amp; dt, <span class="pl-k">const</span> <span class="pl-k">char</span>* path = <span class="pl-c1">nullptr</span>) <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L1749" class="blob-num js-line-number" data-line-number="1749"></td>
        <td id="LC1749" class="blob-code blob-code-inner js-file-line">        SemanticValues sv;</td>
      </tr>
      <tr>
        <td id="L1750" class="blob-num js-line-number" data-line-number="1750"></td>
        <td id="LC1750" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">parse_core</span>(s, n, sv, dt, path);</td>
      </tr>
      <tr>
        <td id="L1751" class="blob-num js-line-number" data-line-number="1751"></td>
        <td id="LC1751" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1752" class="blob-num js-line-number" data-line-number="1752"></td>
        <td id="LC1752" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1753" class="blob-num js-line-number" data-line-number="1753"></td>
        <td id="LC1753" class="blob-code blob-code-inner js-file-line">    Result <span class="pl-en">parse</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* s, any&amp; dt, <span class="pl-k">const</span> <span class="pl-k">char</span>* path = <span class="pl-c1">nullptr</span>) <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L1754" class="blob-num js-line-number" data-line-number="1754"></td>
        <td id="LC1754" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">auto</span> n = <span class="pl-c1">strlen</span>(s);</td>
      </tr>
      <tr>
        <td id="L1755" class="blob-num js-line-number" data-line-number="1755"></td>
        <td id="LC1755" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">parse</span>(s, n, dt, path);</td>
      </tr>
      <tr>
        <td id="L1756" class="blob-num js-line-number" data-line-number="1756"></td>
        <td id="LC1756" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1757" class="blob-num js-line-number" data-line-number="1757"></td>
        <td id="LC1757" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1758" class="blob-num js-line-number" data-line-number="1758"></td>
        <td id="LC1758" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> T&gt;</td>
      </tr>
      <tr>
        <td id="L1759" class="blob-num js-line-number" data-line-number="1759"></td>
        <td id="LC1759" class="blob-code blob-code-inner js-file-line">    Result <span class="pl-en">parse_and_get_value</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* s, <span class="pl-c1">size_t</span> n, T&amp; val, <span class="pl-k">const</span> <span class="pl-k">char</span>* path = <span class="pl-c1">nullptr</span>) <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L1760" class="blob-num js-line-number" data-line-number="1760"></td>
        <td id="LC1760" class="blob-code blob-code-inner js-file-line">        SemanticValues sv;</td>
      </tr>
      <tr>
        <td id="L1761" class="blob-num js-line-number" data-line-number="1761"></td>
        <td id="LC1761" class="blob-code blob-code-inner js-file-line">        any dt;</td>
      </tr>
      <tr>
        <td id="L1762" class="blob-num js-line-number" data-line-number="1762"></td>
        <td id="LC1762" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">auto</span> r = <span class="pl-c1">parse_core</span>(s, n, sv, dt, path);</td>
      </tr>
      <tr>
        <td id="L1763" class="blob-num js-line-number" data-line-number="1763"></td>
        <td id="LC1763" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (r.<span class="pl-smi">ret</span> &amp;&amp; !sv.<span class="pl-c1">empty</span>() &amp;&amp; !sv.<span class="pl-c1">front</span>().<span class="pl-c1">is_undefined</span>()) {</td>
      </tr>
      <tr>
        <td id="L1764" class="blob-num js-line-number" data-line-number="1764"></td>
        <td id="LC1764" class="blob-code blob-code-inner js-file-line">            val = sv[<span class="pl-c1">0</span>].<span class="pl-smi">get</span>&lt;T&gt;();</td>
      </tr>
      <tr>
        <td id="L1765" class="blob-num js-line-number" data-line-number="1765"></td>
        <td id="LC1765" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L1766" class="blob-num js-line-number" data-line-number="1766"></td>
        <td id="LC1766" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> r;</td>
      </tr>
      <tr>
        <td id="L1767" class="blob-num js-line-number" data-line-number="1767"></td>
        <td id="LC1767" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1768" class="blob-num js-line-number" data-line-number="1768"></td>
        <td id="LC1768" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1769" class="blob-num js-line-number" data-line-number="1769"></td>
        <td id="LC1769" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> T&gt;</td>
      </tr>
      <tr>
        <td id="L1770" class="blob-num js-line-number" data-line-number="1770"></td>
        <td id="LC1770" class="blob-code blob-code-inner js-file-line">    Result <span class="pl-en">parse_and_get_value</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* s, T&amp; val, <span class="pl-k">const</span> <span class="pl-k">char</span>* path = <span class="pl-c1">nullptr</span>) <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L1771" class="blob-num js-line-number" data-line-number="1771"></td>
        <td id="LC1771" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">auto</span> n = <span class="pl-c1">strlen</span>(s);</td>
      </tr>
      <tr>
        <td id="L1772" class="blob-num js-line-number" data-line-number="1772"></td>
        <td id="LC1772" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">parse_and_get_value</span>(s, n, val, path);</td>
      </tr>
      <tr>
        <td id="L1773" class="blob-num js-line-number" data-line-number="1773"></td>
        <td id="LC1773" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1774" class="blob-num js-line-number" data-line-number="1774"></td>
        <td id="LC1774" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1775" class="blob-num js-line-number" data-line-number="1775"></td>
        <td id="LC1775" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> T&gt;</td>
      </tr>
      <tr>
        <td id="L1776" class="blob-num js-line-number" data-line-number="1776"></td>
        <td id="LC1776" class="blob-code blob-code-inner js-file-line">    Result <span class="pl-en">parse_and_get_value</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* s, <span class="pl-c1">size_t</span> n, any&amp; dt, T&amp; val, <span class="pl-k">const</span> <span class="pl-k">char</span>* path = <span class="pl-c1">nullptr</span>) <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L1777" class="blob-num js-line-number" data-line-number="1777"></td>
        <td id="LC1777" class="blob-code blob-code-inner js-file-line">        SemanticValues sv;</td>
      </tr>
      <tr>
        <td id="L1778" class="blob-num js-line-number" data-line-number="1778"></td>
        <td id="LC1778" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">auto</span> r = <span class="pl-c1">parse_core</span>(s, n, sv, dt, path);</td>
      </tr>
      <tr>
        <td id="L1779" class="blob-num js-line-number" data-line-number="1779"></td>
        <td id="LC1779" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (r.<span class="pl-smi">ret</span> &amp;&amp; !sv.<span class="pl-c1">empty</span>() &amp;&amp; !sv.<span class="pl-c1">front</span>().<span class="pl-c1">is_undefined</span>()) {</td>
      </tr>
      <tr>
        <td id="L1780" class="blob-num js-line-number" data-line-number="1780"></td>
        <td id="LC1780" class="blob-code blob-code-inner js-file-line">            val = sv[<span class="pl-c1">0</span>].<span class="pl-smi">get</span>&lt;T&gt;();</td>
      </tr>
      <tr>
        <td id="L1781" class="blob-num js-line-number" data-line-number="1781"></td>
        <td id="LC1781" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L1782" class="blob-num js-line-number" data-line-number="1782"></td>
        <td id="LC1782" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> r;</td>
      </tr>
      <tr>
        <td id="L1783" class="blob-num js-line-number" data-line-number="1783"></td>
        <td id="LC1783" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1784" class="blob-num js-line-number" data-line-number="1784"></td>
        <td id="LC1784" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1785" class="blob-num js-line-number" data-line-number="1785"></td>
        <td id="LC1785" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> T&gt;</td>
      </tr>
      <tr>
        <td id="L1786" class="blob-num js-line-number" data-line-number="1786"></td>
        <td id="LC1786" class="blob-code blob-code-inner js-file-line">    Result <span class="pl-en">parse_and_get_value</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* s, any&amp; dt, T&amp; val, <span class="pl-k">const</span> <span class="pl-k">char</span>* path = <span class="pl-c1">nullptr</span>) <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L1787" class="blob-num js-line-number" data-line-number="1787"></td>
        <td id="LC1787" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">auto</span> n = <span class="pl-c1">strlen</span>(s);</td>
      </tr>
      <tr>
        <td id="L1788" class="blob-num js-line-number" data-line-number="1788"></td>
        <td id="LC1788" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">parse_and_get_value</span>(s, n, dt, val, path);</td>
      </tr>
      <tr>
        <td id="L1789" class="blob-num js-line-number" data-line-number="1789"></td>
        <td id="LC1789" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1790" class="blob-num js-line-number" data-line-number="1790"></td>
        <td id="LC1790" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1791" class="blob-num js-line-number" data-line-number="1791"></td>
        <td id="LC1791" class="blob-code blob-code-inner js-file-line">    Definition&amp; <span class="pl-k">operator</span>=(Action a) {</td>
      </tr>
      <tr>
        <td id="L1792" class="blob-num js-line-number" data-line-number="1792"></td>
        <td id="LC1792" class="blob-code blob-code-inner js-file-line">        action = a;</td>
      </tr>
      <tr>
        <td id="L1793" class="blob-num js-line-number" data-line-number="1793"></td>
        <td id="LC1793" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> *<span class="pl-c1">this</span>;</td>
      </tr>
      <tr>
        <td id="L1794" class="blob-num js-line-number" data-line-number="1794"></td>
        <td id="LC1794" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1795" class="blob-num js-line-number" data-line-number="1795"></td>
        <td id="LC1795" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1796" class="blob-num js-line-number" data-line-number="1796"></td>
        <td id="LC1796" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> T&gt;</td>
      </tr>
      <tr>
        <td id="L1797" class="blob-num js-line-number" data-line-number="1797"></td>
        <td id="LC1797" class="blob-code blob-code-inner js-file-line">    Definition&amp; <span class="pl-k">operator</span>,(T fn) {</td>
      </tr>
      <tr>
        <td id="L1798" class="blob-num js-line-number" data-line-number="1798"></td>
        <td id="LC1798" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">operator</span>=(fn);</td>
      </tr>
      <tr>
        <td id="L1799" class="blob-num js-line-number" data-line-number="1799"></td>
        <td id="LC1799" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> *<span class="pl-c1">this</span>;</td>
      </tr>
      <tr>
        <td id="L1800" class="blob-num js-line-number" data-line-number="1800"></td>
        <td id="LC1800" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1801" class="blob-num js-line-number" data-line-number="1801"></td>
        <td id="LC1801" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1802" class="blob-num js-line-number" data-line-number="1802"></td>
        <td id="LC1802" class="blob-code blob-code-inner js-file-line">    Definition&amp; <span class="pl-k">operator</span>~() {</td>
      </tr>
      <tr>
        <td id="L1803" class="blob-num js-line-number" data-line-number="1803"></td>
        <td id="LC1803" class="blob-code blob-code-inner js-file-line">        ignoreSemanticValue = <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L1804" class="blob-num js-line-number" data-line-number="1804"></td>
        <td id="LC1804" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> *<span class="pl-c1">this</span>;</td>
      </tr>
      <tr>
        <td id="L1805" class="blob-num js-line-number" data-line-number="1805"></td>
        <td id="LC1805" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1806" class="blob-num js-line-number" data-line-number="1806"></td>
        <td id="LC1806" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1807" class="blob-num js-line-number" data-line-number="1807"></td>
        <td id="LC1807" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">accept</span>(Ope::Visitor&amp; v) {</td>
      </tr>
      <tr>
        <td id="L1808" class="blob-num js-line-number" data-line-number="1808"></td>
        <td id="LC1808" class="blob-code blob-code-inner js-file-line">        holder_-&gt;<span class="pl-c1">accept</span>(v);</td>
      </tr>
      <tr>
        <td id="L1809" class="blob-num js-line-number" data-line-number="1809"></td>
        <td id="LC1809" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1810" class="blob-num js-line-number" data-line-number="1810"></td>
        <td id="LC1810" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1811" class="blob-num js-line-number" data-line-number="1811"></td>
        <td id="LC1811" class="blob-code blob-code-inner js-file-line">    std::shared_ptr&lt;Ope&gt; <span class="pl-en">get_core_operator</span>() {</td>
      </tr>
      <tr>
        <td id="L1812" class="blob-num js-line-number" data-line-number="1812"></td>
        <td id="LC1812" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> holder_-&gt;ope_;</td>
      </tr>
      <tr>
        <td id="L1813" class="blob-num js-line-number" data-line-number="1813"></td>
        <td id="LC1813" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1814" class="blob-num js-line-number" data-line-number="1814"></td>
        <td id="LC1814" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1815" class="blob-num js-line-number" data-line-number="1815"></td>
        <td id="LC1815" class="blob-code blob-code-inner js-file-line">    std::string                    name;</td>
      </tr>
      <tr>
        <td id="L1816" class="blob-num js-line-number" data-line-number="1816"></td>
        <td id="LC1816" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">size_t</span>                         id;</td>
      </tr>
      <tr>
        <td id="L1817" class="blob-num js-line-number" data-line-number="1817"></td>
        <td id="LC1817" class="blob-code blob-code-inner js-file-line">    Action                         action;</td>
      </tr>
      <tr>
        <td id="L1818" class="blob-num js-line-number" data-line-number="1818"></td>
        <td id="LC1818" class="blob-code blob-code-inner js-file-line">    std::function&lt;<span class="pl-k">void</span> (any&amp; dt)&gt;  enter;</td>
      </tr>
      <tr>
        <td id="L1819" class="blob-num js-line-number" data-line-number="1819"></td>
        <td id="LC1819" class="blob-code blob-code-inner js-file-line">    std::function&lt;<span class="pl-k">void</span> (any&amp; dt)&gt;  leave;</td>
      </tr>
      <tr>
        <td id="L1820" class="blob-num js-line-number" data-line-number="1820"></td>
        <td id="LC1820" class="blob-code blob-code-inner js-file-line">    std::function&lt;std::string ()&gt;  error_message;</td>
      </tr>
      <tr>
        <td id="L1821" class="blob-num js-line-number" data-line-number="1821"></td>
        <td id="LC1821" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">bool</span>                           ignoreSemanticValue;</td>
      </tr>
      <tr>
        <td id="L1822" class="blob-num js-line-number" data-line-number="1822"></td>
        <td id="LC1822" class="blob-code blob-code-inner js-file-line">    std::shared_ptr&lt;Ope&gt;           whitespaceOpe;</td>
      </tr>
      <tr>
        <td id="L1823" class="blob-num js-line-number" data-line-number="1823"></td>
        <td id="LC1823" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">bool</span>                           enablePackratParsing;</td>
      </tr>
      <tr>
        <td id="L1824" class="blob-num js-line-number" data-line-number="1824"></td>
        <td id="LC1824" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">bool</span>                           is_token;</td>
      </tr>
      <tr>
        <td id="L1825" class="blob-num js-line-number" data-line-number="1825"></td>
        <td id="LC1825" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">bool</span>                           has_token_boundary;</td>
      </tr>
      <tr>
        <td id="L1826" class="blob-num js-line-number" data-line-number="1826"></td>
        <td id="LC1826" class="blob-code blob-code-inner js-file-line">    Tracer                         tracer;</td>
      </tr>
      <tr>
        <td id="L1827" class="blob-num js-line-number" data-line-number="1827"></td>
        <td id="LC1827" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1828" class="blob-num js-line-number" data-line-number="1828"></td>
        <td id="LC1828" class="blob-code blob-code-inner js-file-line"><span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L1829" class="blob-num js-line-number" data-line-number="1829"></td>
        <td id="LC1829" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">friend</span> <span class="pl-k">class</span> <span class="pl-en">DefinitionReference</span>;</td>
      </tr>
      <tr>
        <td id="L1830" class="blob-num js-line-number" data-line-number="1830"></td>
        <td id="LC1830" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1831" class="blob-num js-line-number" data-line-number="1831"></td>
        <td id="LC1831" class="blob-code blob-code-inner js-file-line">    Definition&amp; <span class="pl-k">operator</span>=(<span class="pl-k">const</span> Definition&amp; rhs);</td>
      </tr>
      <tr>
        <td id="L1832" class="blob-num js-line-number" data-line-number="1832"></td>
        <td id="LC1832" class="blob-code blob-code-inner js-file-line">    Definition&amp; <span class="pl-k">operator</span>=(Definition&amp;&amp; rhs);</td>
      </tr>
      <tr>
        <td id="L1833" class="blob-num js-line-number" data-line-number="1833"></td>
        <td id="LC1833" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1834" class="blob-num js-line-number" data-line-number="1834"></td>
        <td id="LC1834" class="blob-code blob-code-inner js-file-line">    Result <span class="pl-en">parse_core</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* s, <span class="pl-c1">size_t</span> n, SemanticValues&amp; sv, any&amp; dt, <span class="pl-k">const</span> <span class="pl-k">char</span>* path) <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L1835" class="blob-num js-line-number" data-line-number="1835"></td>
        <td id="LC1835" class="blob-code blob-code-inner js-file-line">        AssignIDToDefinition assignId;</td>
      </tr>
      <tr>
        <td id="L1836" class="blob-num js-line-number" data-line-number="1836"></td>
        <td id="LC1836" class="blob-code blob-code-inner js-file-line">        holder_-&gt;<span class="pl-c1">accept</span>(assignId);</td>
      </tr>
      <tr>
        <td id="L1837" class="blob-num js-line-number" data-line-number="1837"></td>
        <td id="LC1837" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1838" class="blob-num js-line-number" data-line-number="1838"></td>
        <td id="LC1838" class="blob-code blob-code-inner js-file-line">        std::shared_ptr&lt;Ope&gt; ope = holder_;</td>
      </tr>
      <tr>
        <td id="L1839" class="blob-num js-line-number" data-line-number="1839"></td>
        <td id="LC1839" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (whitespaceOpe) {</td>
      </tr>
      <tr>
        <td id="L1840" class="blob-num js-line-number" data-line-number="1840"></td>
        <td id="LC1840" class="blob-code blob-code-inner js-file-line">            ope = std::make_shared&lt;Sequence&gt;(whitespaceOpe, ope);</td>
      </tr>
      <tr>
        <td id="L1841" class="blob-num js-line-number" data-line-number="1841"></td>
        <td id="LC1841" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L1842" class="blob-num js-line-number" data-line-number="1842"></td>
        <td id="LC1842" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1843" class="blob-num js-line-number" data-line-number="1843"></td>
        <td id="LC1843" class="blob-code blob-code-inner js-file-line">        Context <span class="pl-smi">cxt</span>(path, s, n, assignId.<span class="pl-smi">ids</span>.<span class="pl-c1">size</span>(), whitespaceOpe, enablePackratParsing, tracer);</td>
      </tr>
      <tr>
        <td id="L1844" class="blob-num js-line-number" data-line-number="1844"></td>
        <td id="LC1844" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">auto</span> len = ope-&gt;<span class="pl-c1">parse</span>(s, n, sv, cxt, dt);</td>
      </tr>
      <tr>
        <td id="L1845" class="blob-num js-line-number" data-line-number="1845"></td>
        <td id="LC1845" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> Result{ <span class="pl-c1">success</span>(len), len, cxt.<span class="pl-smi">error_pos</span>, cxt.<span class="pl-smi">message_pos</span>, cxt.<span class="pl-smi">message</span> };</td>
      </tr>
      <tr>
        <td id="L1846" class="blob-num js-line-number" data-line-number="1846"></td>
        <td id="LC1846" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1847" class="blob-num js-line-number" data-line-number="1847"></td>
        <td id="LC1847" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1848" class="blob-num js-line-number" data-line-number="1848"></td>
        <td id="LC1848" class="blob-code blob-code-inner js-file-line">    std::shared_ptr&lt;Holder&gt; holder_;</td>
      </tr>
      <tr>
        <td id="L1849" class="blob-num js-line-number" data-line-number="1849"></td>
        <td id="LC1849" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L1850" class="blob-num js-line-number" data-line-number="1850"></td>
        <td id="LC1850" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1851" class="blob-num js-line-number" data-line-number="1851"></td>
        <td id="LC1851" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L1852" class="blob-num js-line-number" data-line-number="1852"></td>
        <td id="LC1852" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Implementations</span></td>
      </tr>
      <tr>
        <td id="L1853" class="blob-num js-line-number" data-line-number="1853"></td>
        <td id="LC1853" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L1854" class="blob-num js-line-number" data-line-number="1854"></td>
        <td id="LC1854" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1855" class="blob-num js-line-number" data-line-number="1855"></td>
        <td id="LC1855" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-c1">size_t</span> <span class="pl-en">LiteralString::parse</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* s, <span class="pl-c1">size_t</span> n, SemanticValues&amp; sv, Context&amp; c, any&amp; dt) <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L1856" class="blob-num js-line-number" data-line-number="1856"></td>
        <td id="LC1856" class="blob-code blob-code-inner js-file-line">    c.<span class="pl-c1">trace</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>LiteralString<span class="pl-pds">&quot;</span></span>, s, n, sv, dt);</td>
      </tr>
      <tr>
        <td id="L1857" class="blob-num js-line-number" data-line-number="1857"></td>
        <td id="LC1857" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1858" class="blob-num js-line-number" data-line-number="1858"></td>
        <td id="LC1858" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">size_t</span> i = <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L1859" class="blob-num js-line-number" data-line-number="1859"></td>
        <td id="LC1859" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">for</span> (; i &lt; lit_.<span class="pl-c1">size</span>(); i++) {</td>
      </tr>
      <tr>
        <td id="L1860" class="blob-num js-line-number" data-line-number="1860"></td>
        <td id="LC1860" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (i &gt;= n || s[i] != lit_[i]) {</td>
      </tr>
      <tr>
        <td id="L1861" class="blob-num js-line-number" data-line-number="1861"></td>
        <td id="LC1861" class="blob-code blob-code-inner js-file-line">            c.<span class="pl-c1">set_error_pos</span>(s);</td>
      </tr>
      <tr>
        <td id="L1862" class="blob-num js-line-number" data-line-number="1862"></td>
        <td id="LC1862" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">size_t</span>&gt;(-<span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L1863" class="blob-num js-line-number" data-line-number="1863"></td>
        <td id="LC1863" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L1864" class="blob-num js-line-number" data-line-number="1864"></td>
        <td id="LC1864" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1865" class="blob-num js-line-number" data-line-number="1865"></td>
        <td id="LC1865" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1866" class="blob-num js-line-number" data-line-number="1866"></td>
        <td id="LC1866" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Skip whiltespace</span></td>
      </tr>
      <tr>
        <td id="L1867" class="blob-num js-line-number" data-line-number="1867"></td>
        <td id="LC1867" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (!c.<span class="pl-smi">in_token</span>) {</td>
      </tr>
      <tr>
        <td id="L1868" class="blob-num js-line-number" data-line-number="1868"></td>
        <td id="LC1868" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (c.<span class="pl-smi">whitespaceOpe</span>) {</td>
      </tr>
      <tr>
        <td id="L1869" class="blob-num js-line-number" data-line-number="1869"></td>
        <td id="LC1869" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">auto</span> len = c.<span class="pl-smi">whitespaceOpe</span>-&gt;<span class="pl-c1">parse</span>(s + i, n - i, sv, c, dt);</td>
      </tr>
      <tr>
        <td id="L1870" class="blob-num js-line-number" data-line-number="1870"></td>
        <td id="LC1870" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-c1">fail</span>(len)) {</td>
      </tr>
      <tr>
        <td id="L1871" class="blob-num js-line-number" data-line-number="1871"></td>
        <td id="LC1871" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">return</span> <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">size_t</span>&gt;(-<span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L1872" class="blob-num js-line-number" data-line-number="1872"></td>
        <td id="LC1872" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L1873" class="blob-num js-line-number" data-line-number="1873"></td>
        <td id="LC1873" class="blob-code blob-code-inner js-file-line">            i += len;</td>
      </tr>
      <tr>
        <td id="L1874" class="blob-num js-line-number" data-line-number="1874"></td>
        <td id="LC1874" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L1875" class="blob-num js-line-number" data-line-number="1875"></td>
        <td id="LC1875" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1876" class="blob-num js-line-number" data-line-number="1876"></td>
        <td id="LC1876" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1877" class="blob-num js-line-number" data-line-number="1877"></td>
        <td id="LC1877" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> i;</td>
      </tr>
      <tr>
        <td id="L1878" class="blob-num js-line-number" data-line-number="1878"></td>
        <td id="LC1878" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L1879" class="blob-num js-line-number" data-line-number="1879"></td>
        <td id="LC1879" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1880" class="blob-num js-line-number" data-line-number="1880"></td>
        <td id="LC1880" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-c1">size_t</span> <span class="pl-en">TokenBoundary::parse</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* s, <span class="pl-c1">size_t</span> n, SemanticValues&amp; sv, Context&amp; c, any&amp; dt) <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L1881" class="blob-num js-line-number" data-line-number="1881"></td>
        <td id="LC1881" class="blob-code blob-code-inner js-file-line">	c.<span class="pl-smi">in_token</span> = <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L1882" class="blob-num js-line-number" data-line-number="1882"></td>
        <td id="LC1882" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">auto</span> se = <span class="pl-c1">make_scope_exit</span>([&amp;]() { c.<span class="pl-smi">in_token</span> = <span class="pl-c1">false</span>; });</td>
      </tr>
      <tr>
        <td id="L1883" class="blob-num js-line-number" data-line-number="1883"></td>
        <td id="LC1883" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> <span class="pl-k">auto</span>&amp; rule = *ope_;</td>
      </tr>
      <tr>
        <td id="L1884" class="blob-num js-line-number" data-line-number="1884"></td>
        <td id="LC1884" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">auto</span> len = rule.<span class="pl-c1">parse</span>(s, n, sv, c, dt);</td>
      </tr>
      <tr>
        <td id="L1885" class="blob-num js-line-number" data-line-number="1885"></td>
        <td id="LC1885" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-c1">success</span>(len)) {</td>
      </tr>
      <tr>
        <td id="L1886" class="blob-num js-line-number" data-line-number="1886"></td>
        <td id="LC1886" class="blob-code blob-code-inner js-file-line">        sv.<span class="pl-smi">tokens</span>.<span class="pl-c1">push_back</span>(<span class="pl-c1">std::make_pair</span>(s, len));</td>
      </tr>
      <tr>
        <td id="L1887" class="blob-num js-line-number" data-line-number="1887"></td>
        <td id="LC1887" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1888" class="blob-num js-line-number" data-line-number="1888"></td>
        <td id="LC1888" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (c.<span class="pl-smi">whitespaceOpe</span>) {</td>
      </tr>
      <tr>
        <td id="L1889" class="blob-num js-line-number" data-line-number="1889"></td>
        <td id="LC1889" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">auto</span> l = c.<span class="pl-smi">whitespaceOpe</span>-&gt;<span class="pl-c1">parse</span>(s + len, n - len, sv, c, dt);</td>
      </tr>
      <tr>
        <td id="L1890" class="blob-num js-line-number" data-line-number="1890"></td>
        <td id="LC1890" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-c1">fail</span>(l)) {</td>
      </tr>
      <tr>
        <td id="L1891" class="blob-num js-line-number" data-line-number="1891"></td>
        <td id="LC1891" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">return</span> <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">size_t</span>&gt;(-<span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L1892" class="blob-num js-line-number" data-line-number="1892"></td>
        <td id="LC1892" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L1893" class="blob-num js-line-number" data-line-number="1893"></td>
        <td id="LC1893" class="blob-code blob-code-inner js-file-line">            len += l;</td>
      </tr>
      <tr>
        <td id="L1894" class="blob-num js-line-number" data-line-number="1894"></td>
        <td id="LC1894" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L1895" class="blob-num js-line-number" data-line-number="1895"></td>
        <td id="LC1895" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1896" class="blob-num js-line-number" data-line-number="1896"></td>
        <td id="LC1896" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> len;</td>
      </tr>
      <tr>
        <td id="L1897" class="blob-num js-line-number" data-line-number="1897"></td>
        <td id="LC1897" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L1898" class="blob-num js-line-number" data-line-number="1898"></td>
        <td id="LC1898" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1899" class="blob-num js-line-number" data-line-number="1899"></td>
        <td id="LC1899" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-c1">size_t</span> <span class="pl-en">Holder::parse</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* s, <span class="pl-c1">size_t</span> n, SemanticValues&amp; sv, Context&amp; c, any&amp; dt) <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L1900" class="blob-num js-line-number" data-line-number="1900"></td>
        <td id="LC1900" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (!ope_) {</td>
      </tr>
      <tr>
        <td id="L1901" class="blob-num js-line-number" data-line-number="1901"></td>
        <td id="LC1901" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">throw</span> <span class="pl-smi">std::logic_error</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>Uninitialized definition ope was used...<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L1902" class="blob-num js-line-number" data-line-number="1902"></td>
        <td id="LC1902" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1903" class="blob-num js-line-number" data-line-number="1903"></td>
        <td id="LC1903" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1904" class="blob-num js-line-number" data-line-number="1904"></td>
        <td id="LC1904" class="blob-code blob-code-inner js-file-line">    c.<span class="pl-c1">trace</span>(outer_-&gt;name.<span class="pl-c1">c_str</span>(), s, n, sv, dt);</td>
      </tr>
      <tr>
        <td id="L1905" class="blob-num js-line-number" data-line-number="1905"></td>
        <td id="LC1905" class="blob-code blob-code-inner js-file-line">    c.<span class="pl-smi">nest_level</span>++;</td>
      </tr>
      <tr>
        <td id="L1906" class="blob-num js-line-number" data-line-number="1906"></td>
        <td id="LC1906" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">auto</span> se = <span class="pl-c1">make_scope_exit</span>([&amp;]() { c.<span class="pl-smi">nest_level</span>--; });</td>
      </tr>
      <tr>
        <td id="L1907" class="blob-num js-line-number" data-line-number="1907"></td>
        <td id="LC1907" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1908" class="blob-num js-line-number" data-line-number="1908"></td>
        <td id="LC1908" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">size_t</span>      len;</td>
      </tr>
      <tr>
        <td id="L1909" class="blob-num js-line-number" data-line-number="1909"></td>
        <td id="LC1909" class="blob-code blob-code-inner js-file-line">    any         val;</td>
      </tr>
      <tr>
        <td id="L1910" class="blob-num js-line-number" data-line-number="1910"></td>
        <td id="LC1910" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1911" class="blob-num js-line-number" data-line-number="1911"></td>
        <td id="LC1911" class="blob-code blob-code-inner js-file-line">    c.<span class="pl-c1">packrat</span>(s, outer_-&gt;id, len, val, [&amp;](any&amp; a_val) {</td>
      </tr>
      <tr>
        <td id="L1912" class="blob-num js-line-number" data-line-number="1912"></td>
        <td id="LC1912" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">auto</span>&amp; chldsv = c.<span class="pl-c1">push</span>();</td>
      </tr>
      <tr>
        <td id="L1913" class="blob-num js-line-number" data-line-number="1913"></td>
        <td id="LC1913" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1914" class="blob-num js-line-number" data-line-number="1914"></td>
        <td id="LC1914" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (outer_-&gt;enter) {</td>
      </tr>
      <tr>
        <td id="L1915" class="blob-num js-line-number" data-line-number="1915"></td>
        <td id="LC1915" class="blob-code blob-code-inner js-file-line">            outer_-&gt;<span class="pl-c1">enter</span>(dt);</td>
      </tr>
      <tr>
        <td id="L1916" class="blob-num js-line-number" data-line-number="1916"></td>
        <td id="LC1916" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L1917" class="blob-num js-line-number" data-line-number="1917"></td>
        <td id="LC1917" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1918" class="blob-num js-line-number" data-line-number="1918"></td>
        <td id="LC1918" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">auto</span> se2 = <span class="pl-c1">make_scope_exit</span>([&amp;]() {</td>
      </tr>
      <tr>
        <td id="L1919" class="blob-num js-line-number" data-line-number="1919"></td>
        <td id="LC1919" class="blob-code blob-code-inner js-file-line">            c.<span class="pl-c1">pop</span>();</td>
      </tr>
      <tr>
        <td id="L1920" class="blob-num js-line-number" data-line-number="1920"></td>
        <td id="LC1920" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1921" class="blob-num js-line-number" data-line-number="1921"></td>
        <td id="LC1921" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (outer_-&gt;leave) {</td>
      </tr>
      <tr>
        <td id="L1922" class="blob-num js-line-number" data-line-number="1922"></td>
        <td id="LC1922" class="blob-code blob-code-inner js-file-line">                outer_-&gt;<span class="pl-c1">leave</span>(dt);</td>
      </tr>
      <tr>
        <td id="L1923" class="blob-num js-line-number" data-line-number="1923"></td>
        <td id="LC1923" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L1924" class="blob-num js-line-number" data-line-number="1924"></td>
        <td id="LC1924" class="blob-code blob-code-inner js-file-line">        });</td>
      </tr>
      <tr>
        <td id="L1925" class="blob-num js-line-number" data-line-number="1925"></td>
        <td id="LC1925" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1926" class="blob-num js-line-number" data-line-number="1926"></td>
        <td id="LC1926" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> <span class="pl-k">auto</span>&amp; rule = *ope_;</td>
      </tr>
      <tr>
        <td id="L1927" class="blob-num js-line-number" data-line-number="1927"></td>
        <td id="LC1927" class="blob-code blob-code-inner js-file-line">        len = rule.<span class="pl-c1">parse</span>(s, n, chldsv, c, dt);</td>
      </tr>
      <tr>
        <td id="L1928" class="blob-num js-line-number" data-line-number="1928"></td>
        <td id="LC1928" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1929" class="blob-num js-line-number" data-line-number="1929"></td>
        <td id="LC1929" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> Invoke action</span></td>
      </tr>
      <tr>
        <td id="L1930" class="blob-num js-line-number" data-line-number="1930"></td>
        <td id="LC1930" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-c1">success</span>(len)) {</td>
      </tr>
      <tr>
        <td id="L1931" class="blob-num js-line-number" data-line-number="1931"></td>
        <td id="LC1931" class="blob-code blob-code-inner js-file-line">            chldsv.<span class="pl-smi">s_</span> = s;</td>
      </tr>
      <tr>
        <td id="L1932" class="blob-num js-line-number" data-line-number="1932"></td>
        <td id="LC1932" class="blob-code blob-code-inner js-file-line">            chldsv.<span class="pl-smi">n_</span> = len;</td>
      </tr>
      <tr>
        <td id="L1933" class="blob-num js-line-number" data-line-number="1933"></td>
        <td id="LC1933" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1934" class="blob-num js-line-number" data-line-number="1934"></td>
        <td id="LC1934" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L1935" class="blob-num js-line-number" data-line-number="1935"></td>
        <td id="LC1935" class="blob-code blob-code-inner js-file-line">                a_val = <span class="pl-c1">reduce</span>(chldsv, dt);</td>
      </tr>
      <tr>
        <td id="L1936" class="blob-num js-line-number" data-line-number="1936"></td>
        <td id="LC1936" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">catch</span> (<span class="pl-k">const</span> parse_error&amp; e) {</td>
      </tr>
      <tr>
        <td id="L1937" class="blob-num js-line-number" data-line-number="1937"></td>
        <td id="LC1937" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">if</span> (e.<span class="pl-c1">what</span>()) {</td>
      </tr>
      <tr>
        <td id="L1938" class="blob-num js-line-number" data-line-number="1938"></td>
        <td id="LC1938" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">if</span> (c.<span class="pl-smi">message_pos</span> &lt; s) {</td>
      </tr>
      <tr>
        <td id="L1939" class="blob-num js-line-number" data-line-number="1939"></td>
        <td id="LC1939" class="blob-code blob-code-inner js-file-line">                        c.<span class="pl-smi">message_pos</span> = s;</td>
      </tr>
      <tr>
        <td id="L1940" class="blob-num js-line-number" data-line-number="1940"></td>
        <td id="LC1940" class="blob-code blob-code-inner js-file-line">                        c.<span class="pl-smi">message</span> = e.<span class="pl-c1">what</span>();</td>
      </tr>
      <tr>
        <td id="L1941" class="blob-num js-line-number" data-line-number="1941"></td>
        <td id="LC1941" class="blob-code blob-code-inner js-file-line">                    }</td>
      </tr>
      <tr>
        <td id="L1942" class="blob-num js-line-number" data-line-number="1942"></td>
        <td id="LC1942" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L1943" class="blob-num js-line-number" data-line-number="1943"></td>
        <td id="LC1943" class="blob-code blob-code-inner js-file-line">                len = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">size_t</span>&gt;(-<span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L1944" class="blob-num js-line-number" data-line-number="1944"></td>
        <td id="LC1944" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L1945" class="blob-num js-line-number" data-line-number="1945"></td>
        <td id="LC1945" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L1946" class="blob-num js-line-number" data-line-number="1946"></td>
        <td id="LC1946" class="blob-code blob-code-inner js-file-line">    });</td>
      </tr>
      <tr>
        <td id="L1947" class="blob-num js-line-number" data-line-number="1947"></td>
        <td id="LC1947" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1948" class="blob-num js-line-number" data-line-number="1948"></td>
        <td id="LC1948" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-c1">success</span>(len)) {</td>
      </tr>
      <tr>
        <td id="L1949" class="blob-num js-line-number" data-line-number="1949"></td>
        <td id="LC1949" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (!outer_-&gt;ignoreSemanticValue) {</td>
      </tr>
      <tr>
        <td id="L1950" class="blob-num js-line-number" data-line-number="1950"></td>
        <td id="LC1950" class="blob-code blob-code-inner js-file-line">            sv.<span class="pl-c1">emplace_back</span>(val);</td>
      </tr>
      <tr>
        <td id="L1951" class="blob-num js-line-number" data-line-number="1951"></td>
        <td id="LC1951" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L1952" class="blob-num js-line-number" data-line-number="1952"></td>
        <td id="LC1952" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L1953" class="blob-num js-line-number" data-line-number="1953"></td>
        <td id="LC1953" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (outer_-&gt;error_message) {</td>
      </tr>
      <tr>
        <td id="L1954" class="blob-num js-line-number" data-line-number="1954"></td>
        <td id="LC1954" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (c.<span class="pl-smi">message_pos</span> &lt; s) {</td>
      </tr>
      <tr>
        <td id="L1955" class="blob-num js-line-number" data-line-number="1955"></td>
        <td id="LC1955" class="blob-code blob-code-inner js-file-line">                c.<span class="pl-smi">message_pos</span> = s;</td>
      </tr>
      <tr>
        <td id="L1956" class="blob-num js-line-number" data-line-number="1956"></td>
        <td id="LC1956" class="blob-code blob-code-inner js-file-line">                c.<span class="pl-smi">message</span> = outer_-&gt;<span class="pl-c1">error_message</span>();</td>
      </tr>
      <tr>
        <td id="L1957" class="blob-num js-line-number" data-line-number="1957"></td>
        <td id="LC1957" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L1958" class="blob-num js-line-number" data-line-number="1958"></td>
        <td id="LC1958" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L1959" class="blob-num js-line-number" data-line-number="1959"></td>
        <td id="LC1959" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1960" class="blob-num js-line-number" data-line-number="1960"></td>
        <td id="LC1960" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1961" class="blob-num js-line-number" data-line-number="1961"></td>
        <td id="LC1961" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> len;</td>
      </tr>
      <tr>
        <td id="L1962" class="blob-num js-line-number" data-line-number="1962"></td>
        <td id="LC1962" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L1963" class="blob-num js-line-number" data-line-number="1963"></td>
        <td id="LC1963" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1964" class="blob-num js-line-number" data-line-number="1964"></td>
        <td id="LC1964" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> any <span class="pl-en">Holder::reduce</span>(<span class="pl-k">const</span> SemanticValues&amp; sv, any&amp; dt) <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L1965" class="blob-num js-line-number" data-line-number="1965"></td>
        <td id="LC1965" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (outer_-&gt;action) {</td>
      </tr>
      <tr>
        <td id="L1966" class="blob-num js-line-number" data-line-number="1966"></td>
        <td id="LC1966" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> outer_-&gt;<span class="pl-c1">action</span>(sv, dt);</td>
      </tr>
      <tr>
        <td id="L1967" class="blob-num js-line-number" data-line-number="1967"></td>
        <td id="LC1967" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">else</span> <span class="pl-k">if</span> (sv.<span class="pl-c1">empty</span>()) {</td>
      </tr>
      <tr>
        <td id="L1968" class="blob-num js-line-number" data-line-number="1968"></td>
        <td id="LC1968" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">any</span>();</td>
      </tr>
      <tr>
        <td id="L1969" class="blob-num js-line-number" data-line-number="1969"></td>
        <td id="LC1969" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L1970" class="blob-num js-line-number" data-line-number="1970"></td>
        <td id="LC1970" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> sv.<span class="pl-c1">front</span>();</td>
      </tr>
      <tr>
        <td id="L1971" class="blob-num js-line-number" data-line-number="1971"></td>
        <td id="LC1971" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1972" class="blob-num js-line-number" data-line-number="1972"></td>
        <td id="LC1972" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L1973" class="blob-num js-line-number" data-line-number="1973"></td>
        <td id="LC1973" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1974" class="blob-num js-line-number" data-line-number="1974"></td>
        <td id="LC1974" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-c1">size_t</span> <span class="pl-en">DefinitionReference::parse</span>(</td>
      </tr>
      <tr>
        <td id="L1975" class="blob-num js-line-number" data-line-number="1975"></td>
        <td id="LC1975" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> <span class="pl-k">char</span>* s, <span class="pl-c1">size_t</span> n, SemanticValues&amp; sv, Context&amp; c, any&amp; dt) <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L1976" class="blob-num js-line-number" data-line-number="1976"></td>
        <td id="LC1976" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> <span class="pl-k">auto</span>&amp; rule = *<span class="pl-c1">get_rule</span>();</td>
      </tr>
      <tr>
        <td id="L1977" class="blob-num js-line-number" data-line-number="1977"></td>
        <td id="LC1977" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> rule.<span class="pl-c1">parse</span>(s, n, sv, c, dt);</td>
      </tr>
      <tr>
        <td id="L1978" class="blob-num js-line-number" data-line-number="1978"></td>
        <td id="LC1978" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L1979" class="blob-num js-line-number" data-line-number="1979"></td>
        <td id="LC1979" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1980" class="blob-num js-line-number" data-line-number="1980"></td>
        <td id="LC1980" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::shared_ptr&lt;Ope&gt; <span class="pl-en">DefinitionReference::get_rule</span>() <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L1981" class="blob-num js-line-number" data-line-number="1981"></td>
        <td id="LC1981" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (!rule_) {</td>
      </tr>
      <tr>
        <td id="L1982" class="blob-num js-line-number" data-line-number="1982"></td>
        <td id="LC1982" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">std::call_once</span>(init_, [<span class="pl-c1">this</span>]() {</td>
      </tr>
      <tr>
        <td id="L1983" class="blob-num js-line-number" data-line-number="1983"></td>
        <td id="LC1983" class="blob-code blob-code-inner js-file-line">            rule_ = grammar_.<span class="pl-c1">at</span>(name_).<span class="pl-smi">holder_</span>;</td>
      </tr>
      <tr>
        <td id="L1984" class="blob-num js-line-number" data-line-number="1984"></td>
        <td id="LC1984" class="blob-code blob-code-inner js-file-line">        });</td>
      </tr>
      <tr>
        <td id="L1985" class="blob-num js-line-number" data-line-number="1985"></td>
        <td id="LC1985" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L1986" class="blob-num js-line-number" data-line-number="1986"></td>
        <td id="LC1986" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">assert</span>(rule_);</td>
      </tr>
      <tr>
        <td id="L1987" class="blob-num js-line-number" data-line-number="1987"></td>
        <td id="LC1987" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> rule_;</td>
      </tr>
      <tr>
        <td id="L1988" class="blob-num js-line-number" data-line-number="1988"></td>
        <td id="LC1988" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L1989" class="blob-num js-line-number" data-line-number="1989"></td>
        <td id="LC1989" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L1990" class="blob-num js-line-number" data-line-number="1990"></td>
        <td id="LC1990" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">Sequence::accept</span>(Visitor&amp; v) { v.<span class="pl-c1">visit</span>(*<span class="pl-c1">this</span>); }</td>
      </tr>
      <tr>
        <td id="L1991" class="blob-num js-line-number" data-line-number="1991"></td>
        <td id="LC1991" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">PrioritizedChoice::accept</span>(Visitor&amp; v) { v.<span class="pl-c1">visit</span>(*<span class="pl-c1">this</span>); }</td>
      </tr>
      <tr>
        <td id="L1992" class="blob-num js-line-number" data-line-number="1992"></td>
        <td id="LC1992" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ZeroOrMore::accept</span>(Visitor&amp; v) { v.<span class="pl-c1">visit</span>(*<span class="pl-c1">this</span>); }</td>
      </tr>
      <tr>
        <td id="L1993" class="blob-num js-line-number" data-line-number="1993"></td>
        <td id="LC1993" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">OneOrMore::accept</span>(Visitor&amp; v) { v.<span class="pl-c1">visit</span>(*<span class="pl-c1">this</span>); }</td>
      </tr>
      <tr>
        <td id="L1994" class="blob-num js-line-number" data-line-number="1994"></td>
        <td id="LC1994" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">Option::accept</span>(Visitor&amp; v) { v.<span class="pl-c1">visit</span>(*<span class="pl-c1">this</span>); }</td>
      </tr>
      <tr>
        <td id="L1995" class="blob-num js-line-number" data-line-number="1995"></td>
        <td id="LC1995" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">AndPredicate::accept</span>(Visitor&amp; v) { v.<span class="pl-c1">visit</span>(*<span class="pl-c1">this</span>); }</td>
      </tr>
      <tr>
        <td id="L1996" class="blob-num js-line-number" data-line-number="1996"></td>
        <td id="LC1996" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">NotPredicate::accept</span>(Visitor&amp; v) { v.<span class="pl-c1">visit</span>(*<span class="pl-c1">this</span>); }</td>
      </tr>
      <tr>
        <td id="L1997" class="blob-num js-line-number" data-line-number="1997"></td>
        <td id="LC1997" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">LiteralString::accept</span>(Visitor&amp; v) { v.<span class="pl-c1">visit</span>(*<span class="pl-c1">this</span>); }</td>
      </tr>
      <tr>
        <td id="L1998" class="blob-num js-line-number" data-line-number="1998"></td>
        <td id="LC1998" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">CharacterClass::accept</span>(Visitor&amp; v) { v.<span class="pl-c1">visit</span>(*<span class="pl-c1">this</span>); }</td>
      </tr>
      <tr>
        <td id="L1999" class="blob-num js-line-number" data-line-number="1999"></td>
        <td id="LC1999" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">Character::accept</span>(Visitor&amp; v) { v.<span class="pl-c1">visit</span>(*<span class="pl-c1">this</span>); }</td>
      </tr>
      <tr>
        <td id="L2000" class="blob-num js-line-number" data-line-number="2000"></td>
        <td id="LC2000" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">AnyCharacter::accept</span>(Visitor&amp; v) { v.<span class="pl-c1">visit</span>(*<span class="pl-c1">this</span>); }</td>
      </tr>
      <tr>
        <td id="L2001" class="blob-num js-line-number" data-line-number="2001"></td>
        <td id="LC2001" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">Capture::accept</span>(Visitor&amp; v) { v.<span class="pl-c1">visit</span>(*<span class="pl-c1">this</span>); }</td>
      </tr>
      <tr>
        <td id="L2002" class="blob-num js-line-number" data-line-number="2002"></td>
        <td id="LC2002" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">TokenBoundary::accept</span>(Visitor&amp; v) { v.<span class="pl-c1">visit</span>(*<span class="pl-c1">this</span>); }</td>
      </tr>
      <tr>
        <td id="L2003" class="blob-num js-line-number" data-line-number="2003"></td>
        <td id="LC2003" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">Ignore::accept</span>(Visitor&amp; v) { v.<span class="pl-c1">visit</span>(*<span class="pl-c1">this</span>); }</td>
      </tr>
      <tr>
        <td id="L2004" class="blob-num js-line-number" data-line-number="2004"></td>
        <td id="LC2004" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">WeakHolder::accept</span>(Visitor&amp; v) { v.<span class="pl-c1">visit</span>(*<span class="pl-c1">this</span>); }</td>
      </tr>
      <tr>
        <td id="L2005" class="blob-num js-line-number" data-line-number="2005"></td>
        <td id="LC2005" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">Holder::accept</span>(Visitor&amp; v) { v.<span class="pl-c1">visit</span>(*<span class="pl-c1">this</span>); }</td>
      </tr>
      <tr>
        <td id="L2006" class="blob-num js-line-number" data-line-number="2006"></td>
        <td id="LC2006" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">DefinitionReference::accept</span>(Visitor&amp; v) { v.<span class="pl-c1">visit</span>(*<span class="pl-c1">this</span>); }</td>
      </tr>
      <tr>
        <td id="L2007" class="blob-num js-line-number" data-line-number="2007"></td>
        <td id="LC2007" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">Whitespace::accept</span>(Visitor&amp; v) { v.<span class="pl-c1">visit</span>(*<span class="pl-c1">this</span>); }</td>
      </tr>
      <tr>
        <td id="L2008" class="blob-num js-line-number" data-line-number="2008"></td>
        <td id="LC2008" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2009" class="blob-num js-line-number" data-line-number="2009"></td>
        <td id="LC2009" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">AssignIDToDefinition::visit</span>(Holder&amp; ope) {</td>
      </tr>
      <tr>
        <td id="L2010" class="blob-num js-line-number" data-line-number="2010"></td>
        <td id="LC2010" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">auto</span> p = <span class="pl-k">static_cast</span>&lt;<span class="pl-k">void</span>*&gt;(ope.<span class="pl-smi">outer_</span>);</td>
      </tr>
      <tr>
        <td id="L2011" class="blob-num js-line-number" data-line-number="2011"></td>
        <td id="LC2011" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (ids.<span class="pl-c1">count</span>(p)) {</td>
      </tr>
      <tr>
        <td id="L2012" class="blob-num js-line-number" data-line-number="2012"></td>
        <td id="LC2012" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span>;</td>
      </tr>
      <tr>
        <td id="L2013" class="blob-num js-line-number" data-line-number="2013"></td>
        <td id="LC2013" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L2014" class="blob-num js-line-number" data-line-number="2014"></td>
        <td id="LC2014" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">auto</span> id = ids.<span class="pl-c1">size</span>();</td>
      </tr>
      <tr>
        <td id="L2015" class="blob-num js-line-number" data-line-number="2015"></td>
        <td id="LC2015" class="blob-code blob-code-inner js-file-line">    ids[p] = id;</td>
      </tr>
      <tr>
        <td id="L2016" class="blob-num js-line-number" data-line-number="2016"></td>
        <td id="LC2016" class="blob-code blob-code-inner js-file-line">    ope.<span class="pl-smi">outer_</span>-&gt;id = id;</td>
      </tr>
      <tr>
        <td id="L2017" class="blob-num js-line-number" data-line-number="2017"></td>
        <td id="LC2017" class="blob-code blob-code-inner js-file-line">    ope.<span class="pl-smi">ope_</span>-&gt;<span class="pl-c1">accept</span>(*<span class="pl-c1">this</span>);</td>
      </tr>
      <tr>
        <td id="L2018" class="blob-num js-line-number" data-line-number="2018"></td>
        <td id="LC2018" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2019" class="blob-num js-line-number" data-line-number="2019"></td>
        <td id="LC2019" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2020" class="blob-num js-line-number" data-line-number="2020"></td>
        <td id="LC2020" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L2021" class="blob-num js-line-number" data-line-number="2021"></td>
        <td id="LC2021" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Factories</span></td>
      </tr>
      <tr>
        <td id="L2022" class="blob-num js-line-number" data-line-number="2022"></td>
        <td id="LC2022" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L2023" class="blob-num js-line-number" data-line-number="2023"></td>
        <td id="LC2023" class="blob-code blob-code-inner js-file-line"><span class="pl-k">template </span>&lt;<span class="pl-k">typename</span>... Args&gt;</td>
      </tr>
      <tr>
        <td id="L2024" class="blob-num js-line-number" data-line-number="2024"></td>
        <td id="LC2024" class="blob-code blob-code-inner js-file-line">std::shared_ptr&lt;Ope&gt; <span class="pl-en">seq</span>(Args&amp;&amp; ...args) {</td>
      </tr>
      <tr>
        <td id="L2025" class="blob-num js-line-number" data-line-number="2025"></td>
        <td id="LC2025" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> std::make_shared&lt;Sequence&gt;(<span class="pl-k">static_cast</span>&lt;std::shared_ptr&lt;Ope&gt;&gt;(args)...);</td>
      </tr>
      <tr>
        <td id="L2026" class="blob-num js-line-number" data-line-number="2026"></td>
        <td id="LC2026" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2027" class="blob-num js-line-number" data-line-number="2027"></td>
        <td id="LC2027" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2028" class="blob-num js-line-number" data-line-number="2028"></td>
        <td id="LC2028" class="blob-code blob-code-inner js-file-line"><span class="pl-k">template </span>&lt;<span class="pl-k">typename</span>... Args&gt;</td>
      </tr>
      <tr>
        <td id="L2029" class="blob-num js-line-number" data-line-number="2029"></td>
        <td id="LC2029" class="blob-code blob-code-inner js-file-line">std::shared_ptr&lt;Ope&gt; <span class="pl-en">cho</span>(Args&amp;&amp; ...args) {</td>
      </tr>
      <tr>
        <td id="L2030" class="blob-num js-line-number" data-line-number="2030"></td>
        <td id="LC2030" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> std::make_shared&lt;PrioritizedChoice&gt;(<span class="pl-k">static_cast</span>&lt;std::shared_ptr&lt;Ope&gt;&gt;(args)...);</td>
      </tr>
      <tr>
        <td id="L2031" class="blob-num js-line-number" data-line-number="2031"></td>
        <td id="LC2031" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2032" class="blob-num js-line-number" data-line-number="2032"></td>
        <td id="LC2032" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2033" class="blob-num js-line-number" data-line-number="2033"></td>
        <td id="LC2033" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::shared_ptr&lt;Ope&gt; <span class="pl-en">zom</span>(<span class="pl-k">const</span> std::shared_ptr&lt;Ope&gt;&amp; ope) {</td>
      </tr>
      <tr>
        <td id="L2034" class="blob-num js-line-number" data-line-number="2034"></td>
        <td id="LC2034" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> std::make_shared&lt;ZeroOrMore&gt;(ope);</td>
      </tr>
      <tr>
        <td id="L2035" class="blob-num js-line-number" data-line-number="2035"></td>
        <td id="LC2035" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2036" class="blob-num js-line-number" data-line-number="2036"></td>
        <td id="LC2036" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2037" class="blob-num js-line-number" data-line-number="2037"></td>
        <td id="LC2037" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::shared_ptr&lt;Ope&gt; <span class="pl-en">oom</span>(<span class="pl-k">const</span> std::shared_ptr&lt;Ope&gt;&amp; ope) {</td>
      </tr>
      <tr>
        <td id="L2038" class="blob-num js-line-number" data-line-number="2038"></td>
        <td id="LC2038" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> std::make_shared&lt;OneOrMore&gt;(ope);</td>
      </tr>
      <tr>
        <td id="L2039" class="blob-num js-line-number" data-line-number="2039"></td>
        <td id="LC2039" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2040" class="blob-num js-line-number" data-line-number="2040"></td>
        <td id="LC2040" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2041" class="blob-num js-line-number" data-line-number="2041"></td>
        <td id="LC2041" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::shared_ptr&lt;Ope&gt; <span class="pl-en">opt</span>(<span class="pl-k">const</span> std::shared_ptr&lt;Ope&gt;&amp; ope) {</td>
      </tr>
      <tr>
        <td id="L2042" class="blob-num js-line-number" data-line-number="2042"></td>
        <td id="LC2042" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> std::make_shared&lt;Option&gt;(ope);</td>
      </tr>
      <tr>
        <td id="L2043" class="blob-num js-line-number" data-line-number="2043"></td>
        <td id="LC2043" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2044" class="blob-num js-line-number" data-line-number="2044"></td>
        <td id="LC2044" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2045" class="blob-num js-line-number" data-line-number="2045"></td>
        <td id="LC2045" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::shared_ptr&lt;Ope&gt; <span class="pl-en">apd</span>(<span class="pl-k">const</span> std::shared_ptr&lt;Ope&gt;&amp; ope) {</td>
      </tr>
      <tr>
        <td id="L2046" class="blob-num js-line-number" data-line-number="2046"></td>
        <td id="LC2046" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> std::make_shared&lt;AndPredicate&gt;(ope);</td>
      </tr>
      <tr>
        <td id="L2047" class="blob-num js-line-number" data-line-number="2047"></td>
        <td id="LC2047" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2048" class="blob-num js-line-number" data-line-number="2048"></td>
        <td id="LC2048" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2049" class="blob-num js-line-number" data-line-number="2049"></td>
        <td id="LC2049" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::shared_ptr&lt;Ope&gt; <span class="pl-en">npd</span>(<span class="pl-k">const</span> std::shared_ptr&lt;Ope&gt;&amp; ope) {</td>
      </tr>
      <tr>
        <td id="L2050" class="blob-num js-line-number" data-line-number="2050"></td>
        <td id="LC2050" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> std::make_shared&lt;NotPredicate&gt;(ope);</td>
      </tr>
      <tr>
        <td id="L2051" class="blob-num js-line-number" data-line-number="2051"></td>
        <td id="LC2051" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2052" class="blob-num js-line-number" data-line-number="2052"></td>
        <td id="LC2052" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2053" class="blob-num js-line-number" data-line-number="2053"></td>
        <td id="LC2053" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::shared_ptr&lt;Ope&gt; <span class="pl-en">lit</span>(<span class="pl-k">const</span> std::string&amp; lit) {</td>
      </tr>
      <tr>
        <td id="L2054" class="blob-num js-line-number" data-line-number="2054"></td>
        <td id="LC2054" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> std::make_shared&lt;LiteralString&gt;(lit);</td>
      </tr>
      <tr>
        <td id="L2055" class="blob-num js-line-number" data-line-number="2055"></td>
        <td id="LC2055" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2056" class="blob-num js-line-number" data-line-number="2056"></td>
        <td id="LC2056" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2057" class="blob-num js-line-number" data-line-number="2057"></td>
        <td id="LC2057" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::shared_ptr&lt;Ope&gt; <span class="pl-en">cls</span>(<span class="pl-k">const</span> std::string&amp; chars) {</td>
      </tr>
      <tr>
        <td id="L2058" class="blob-num js-line-number" data-line-number="2058"></td>
        <td id="LC2058" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> std::make_shared&lt;CharacterClass&gt;(chars);</td>
      </tr>
      <tr>
        <td id="L2059" class="blob-num js-line-number" data-line-number="2059"></td>
        <td id="LC2059" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2060" class="blob-num js-line-number" data-line-number="2060"></td>
        <td id="LC2060" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2061" class="blob-num js-line-number" data-line-number="2061"></td>
        <td id="LC2061" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::shared_ptr&lt;Ope&gt; <span class="pl-en">chr</span>(<span class="pl-k">char</span> dt) {</td>
      </tr>
      <tr>
        <td id="L2062" class="blob-num js-line-number" data-line-number="2062"></td>
        <td id="LC2062" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> std::make_shared&lt;Character&gt;(dt);</td>
      </tr>
      <tr>
        <td id="L2063" class="blob-num js-line-number" data-line-number="2063"></td>
        <td id="LC2063" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2064" class="blob-num js-line-number" data-line-number="2064"></td>
        <td id="LC2064" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2065" class="blob-num js-line-number" data-line-number="2065"></td>
        <td id="LC2065" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::shared_ptr&lt;Ope&gt; <span class="pl-en">dot</span>() {</td>
      </tr>
      <tr>
        <td id="L2066" class="blob-num js-line-number" data-line-number="2066"></td>
        <td id="LC2066" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> std::make_shared&lt;AnyCharacter&gt;();</td>
      </tr>
      <tr>
        <td id="L2067" class="blob-num js-line-number" data-line-number="2067"></td>
        <td id="LC2067" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2068" class="blob-num js-line-number" data-line-number="2068"></td>
        <td id="LC2068" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2069" class="blob-num js-line-number" data-line-number="2069"></td>
        <td id="LC2069" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::shared_ptr&lt;Ope&gt; <span class="pl-en">cap</span>(<span class="pl-k">const</span> std::shared_ptr&lt;Ope&gt;&amp; ope, MatchAction ma, <span class="pl-c1">size_t</span> n, <span class="pl-k">const</span> std::string&amp; s) {</td>
      </tr>
      <tr>
        <td id="L2070" class="blob-num js-line-number" data-line-number="2070"></td>
        <td id="LC2070" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> std::make_shared&lt;Capture&gt;(ope, ma, n, s);</td>
      </tr>
      <tr>
        <td id="L2071" class="blob-num js-line-number" data-line-number="2071"></td>
        <td id="LC2071" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2072" class="blob-num js-line-number" data-line-number="2072"></td>
        <td id="LC2072" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2073" class="blob-num js-line-number" data-line-number="2073"></td>
        <td id="LC2073" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::shared_ptr&lt;Ope&gt; <span class="pl-en">cap</span>(<span class="pl-k">const</span> std::shared_ptr&lt;Ope&gt;&amp; ope, MatchAction ma) {</td>
      </tr>
      <tr>
        <td id="L2074" class="blob-num js-line-number" data-line-number="2074"></td>
        <td id="LC2074" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> std::make_shared&lt;Capture&gt;(ope, ma, <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">size_t</span>&gt;(-<span class="pl-c1">1</span>), <span class="pl-c1">std::string</span>());</td>
      </tr>
      <tr>
        <td id="L2075" class="blob-num js-line-number" data-line-number="2075"></td>
        <td id="LC2075" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2076" class="blob-num js-line-number" data-line-number="2076"></td>
        <td id="LC2076" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2077" class="blob-num js-line-number" data-line-number="2077"></td>
        <td id="LC2077" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::shared_ptr&lt;Ope&gt; <span class="pl-en">tok</span>(<span class="pl-k">const</span> std::shared_ptr&lt;Ope&gt;&amp; ope) {</td>
      </tr>
      <tr>
        <td id="L2078" class="blob-num js-line-number" data-line-number="2078"></td>
        <td id="LC2078" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> std::make_shared&lt;TokenBoundary&gt;(ope);</td>
      </tr>
      <tr>
        <td id="L2079" class="blob-num js-line-number" data-line-number="2079"></td>
        <td id="LC2079" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2080" class="blob-num js-line-number" data-line-number="2080"></td>
        <td id="LC2080" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2081" class="blob-num js-line-number" data-line-number="2081"></td>
        <td id="LC2081" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::shared_ptr&lt;Ope&gt; <span class="pl-en">ign</span>(<span class="pl-k">const</span> std::shared_ptr&lt;Ope&gt;&amp; ope) {</td>
      </tr>
      <tr>
        <td id="L2082" class="blob-num js-line-number" data-line-number="2082"></td>
        <td id="LC2082" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> std::make_shared&lt;Ignore&gt;(ope);</td>
      </tr>
      <tr>
        <td id="L2083" class="blob-num js-line-number" data-line-number="2083"></td>
        <td id="LC2083" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2084" class="blob-num js-line-number" data-line-number="2084"></td>
        <td id="LC2084" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2085" class="blob-num js-line-number" data-line-number="2085"></td>
        <td id="LC2085" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::shared_ptr&lt;Ope&gt; <span class="pl-en">ref</span>(<span class="pl-k">const</span> std::unordered_map&lt;std::string, Definition&gt;&amp; grammar, <span class="pl-k">const</span> std::string&amp; name, <span class="pl-k">const</span> <span class="pl-k">char</span>* s) {</td>
      </tr>
      <tr>
        <td id="L2086" class="blob-num js-line-number" data-line-number="2086"></td>
        <td id="LC2086" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> std::make_shared&lt;DefinitionReference&gt;(grammar, name, s);</td>
      </tr>
      <tr>
        <td id="L2087" class="blob-num js-line-number" data-line-number="2087"></td>
        <td id="LC2087" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2088" class="blob-num js-line-number" data-line-number="2088"></td>
        <td id="LC2088" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2089" class="blob-num js-line-number" data-line-number="2089"></td>
        <td id="LC2089" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::shared_ptr&lt;Ope&gt; <span class="pl-en">wsp</span>(<span class="pl-k">const</span> std::shared_ptr&lt;Ope&gt;&amp; ope) {</td>
      </tr>
      <tr>
        <td id="L2090" class="blob-num js-line-number" data-line-number="2090"></td>
        <td id="LC2090" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> std::make_shared&lt;Whitespace&gt;(std::make_shared&lt;Ignore&gt;(ope));</td>
      </tr>
      <tr>
        <td id="L2091" class="blob-num js-line-number" data-line-number="2091"></td>
        <td id="LC2091" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2092" class="blob-num js-line-number" data-line-number="2092"></td>
        <td id="LC2092" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2093" class="blob-num js-line-number" data-line-number="2093"></td>
        <td id="LC2093" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span>-----------------------------------------------------------------------------</span></td>
      </tr>
      <tr>
        <td id="L2094" class="blob-num js-line-number" data-line-number="2094"></td>
        <td id="LC2094" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *  PEG parser generator</span></td>
      </tr>
      <tr>
        <td id="L2095" class="blob-num js-line-number" data-line-number="2095"></td>
        <td id="LC2095" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *---------------------------------------------------------------------------<span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L2096" class="blob-num js-line-number" data-line-number="2096"></td>
        <td id="LC2096" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2097" class="blob-num js-line-number" data-line-number="2097"></td>
        <td id="LC2097" class="blob-code blob-code-inner js-file-line"><span class="pl-k">typedef</span> std::unordered_map&lt;std::string, Definition&gt; Grammar;</td>
      </tr>
      <tr>
        <td id="L2098" class="blob-num js-line-number" data-line-number="2098"></td>
        <td id="LC2098" class="blob-code blob-code-inner js-file-line"><span class="pl-k">typedef</span> std::function&lt;<span class="pl-k">void</span> (<span class="pl-c1">size_t</span>, <span class="pl-c1">size_t</span>, <span class="pl-k">const</span> std::string&amp;)&gt; Log;</td>
      </tr>
      <tr>
        <td id="L2099" class="blob-num js-line-number" data-line-number="2099"></td>
        <td id="LC2099" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2100" class="blob-num js-line-number" data-line-number="2100"></td>
        <td id="LC2100" class="blob-code blob-code-inner js-file-line"><span class="pl-k">class</span> <span class="pl-en">ParserGenerator</span></td>
      </tr>
      <tr>
        <td id="L2101" class="blob-num js-line-number" data-line-number="2101"></td>
        <td id="LC2101" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="L2102" class="blob-num js-line-number" data-line-number="2102"></td>
        <td id="LC2102" class="blob-code blob-code-inner js-file-line"><span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L2103" class="blob-num js-line-number" data-line-number="2103"></td>
        <td id="LC2103" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">static</span> std::shared_ptr&lt;Grammar&gt; <span class="pl-en">parse</span>(</td>
      </tr>
      <tr>
        <td id="L2104" class="blob-num js-line-number" data-line-number="2104"></td>
        <td id="LC2104" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> <span class="pl-k">char</span>*  s,</td>
      </tr>
      <tr>
        <td id="L2105" class="blob-num js-line-number" data-line-number="2105"></td>
        <td id="LC2105" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">size_t</span>       n,</td>
      </tr>
      <tr>
        <td id="L2106" class="blob-num js-line-number" data-line-number="2106"></td>
        <td id="LC2106" class="blob-code blob-code-inner js-file-line">        std::string&amp; start,</td>
      </tr>
      <tr>
        <td id="L2107" class="blob-num js-line-number" data-line-number="2107"></td>
        <td id="LC2107" class="blob-code blob-code-inner js-file-line">        MatchAction  ma,</td>
      </tr>
      <tr>
        <td id="L2108" class="blob-num js-line-number" data-line-number="2108"></td>
        <td id="LC2108" class="blob-code blob-code-inner js-file-line">        Log          log)</td>
      </tr>
      <tr>
        <td id="L2109" class="blob-num js-line-number" data-line-number="2109"></td>
        <td id="LC2109" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="L2110" class="blob-num js-line-number" data-line-number="2110"></td>
        <td id="LC2110" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">get_instance</span>().<span class="pl-c1">perform_core</span>(s, n, start, ma, <span class="pl-c1">log</span>);</td>
      </tr>
      <tr>
        <td id="L2111" class="blob-num js-line-number" data-line-number="2111"></td>
        <td id="LC2111" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L2112" class="blob-num js-line-number" data-line-number="2112"></td>
        <td id="LC2112" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2113" class="blob-num js-line-number" data-line-number="2113"></td>
        <td id="LC2113" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> For debuging purpose</span></td>
      </tr>
      <tr>
        <td id="L2114" class="blob-num js-line-number" data-line-number="2114"></td>
        <td id="LC2114" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">static</span> Grammar&amp; <span class="pl-en">grammar</span>() {</td>
      </tr>
      <tr>
        <td id="L2115" class="blob-num js-line-number" data-line-number="2115"></td>
        <td id="LC2115" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">get_instance</span>().<span class="pl-smi">g</span>;</td>
      </tr>
      <tr>
        <td id="L2116" class="blob-num js-line-number" data-line-number="2116"></td>
        <td id="LC2116" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L2117" class="blob-num js-line-number" data-line-number="2117"></td>
        <td id="LC2117" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2118" class="blob-num js-line-number" data-line-number="2118"></td>
        <td id="LC2118" class="blob-code blob-code-inner js-file-line"><span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L2119" class="blob-num js-line-number" data-line-number="2119"></td>
        <td id="LC2119" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">static</span> ParserGenerator&amp; <span class="pl-en">get_instance</span>() {</td>
      </tr>
      <tr>
        <td id="L2120" class="blob-num js-line-number" data-line-number="2120"></td>
        <td id="LC2120" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">static</span> ParserGenerator instance;</td>
      </tr>
      <tr>
        <td id="L2121" class="blob-num js-line-number" data-line-number="2121"></td>
        <td id="LC2121" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> instance;</td>
      </tr>
      <tr>
        <td id="L2122" class="blob-num js-line-number" data-line-number="2122"></td>
        <td id="LC2122" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L2123" class="blob-num js-line-number" data-line-number="2123"></td>
        <td id="LC2123" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2124" class="blob-num js-line-number" data-line-number="2124"></td>
        <td id="LC2124" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">ParserGenerator</span>() {</td>
      </tr>
      <tr>
        <td id="L2125" class="blob-num js-line-number" data-line-number="2125"></td>
        <td id="LC2125" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">make_grammar</span>();</td>
      </tr>
      <tr>
        <td id="L2126" class="blob-num js-line-number" data-line-number="2126"></td>
        <td id="LC2126" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">setup_actions</span>();</td>
      </tr>
      <tr>
        <td id="L2127" class="blob-num js-line-number" data-line-number="2127"></td>
        <td id="LC2127" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L2128" class="blob-num js-line-number" data-line-number="2128"></td>
        <td id="LC2128" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2129" class="blob-num js-line-number" data-line-number="2129"></td>
        <td id="LC2129" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">struct</span> <span class="pl-en">Data</span> {</td>
      </tr>
      <tr>
        <td id="L2130" class="blob-num js-line-number" data-line-number="2130"></td>
        <td id="LC2130" class="blob-code blob-code-inner js-file-line">        std::shared_ptr&lt;Grammar&gt;                         grammar;</td>
      </tr>
      <tr>
        <td id="L2131" class="blob-num js-line-number" data-line-number="2131"></td>
        <td id="LC2131" class="blob-code blob-code-inner js-file-line">        std::string                                      start;</td>
      </tr>
      <tr>
        <td id="L2132" class="blob-num js-line-number" data-line-number="2132"></td>
        <td id="LC2132" class="blob-code blob-code-inner js-file-line">        MatchAction                                      match_action;</td>
      </tr>
      <tr>
        <td id="L2133" class="blob-num js-line-number" data-line-number="2133"></td>
        <td id="LC2133" class="blob-code blob-code-inner js-file-line">        std::vector&lt;std::pair&lt;std::string, <span class="pl-k">const</span> <span class="pl-k">char</span>*&gt;&gt; duplicates;</td>
      </tr>
      <tr>
        <td id="L2134" class="blob-num js-line-number" data-line-number="2134"></td>
        <td id="LC2134" class="blob-code blob-code-inner js-file-line">        std::unordered_map&lt;std::string, <span class="pl-k">const</span> <span class="pl-k">char</span>*&gt;     references;</td>
      </tr>
      <tr>
        <td id="L2135" class="blob-num js-line-number" data-line-number="2135"></td>
        <td id="LC2135" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">size_t</span>                                           capture_count;</td>
      </tr>
      <tr>
        <td id="L2136" class="blob-num js-line-number" data-line-number="2136"></td>
        <td id="LC2136" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2137" class="blob-num js-line-number" data-line-number="2137"></td>
        <td id="LC2137" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">Data</span>()</td>
      </tr>
      <tr>
        <td id="L2138" class="blob-num js-line-number" data-line-number="2138"></td>
        <td id="LC2138" class="blob-code blob-code-inner js-file-line">            : grammar(std::make_shared&lt;Grammar&gt;())</td>
      </tr>
      <tr>
        <td id="L2139" class="blob-num js-line-number" data-line-number="2139"></td>
        <td id="LC2139" class="blob-code blob-code-inner js-file-line">            , capture_count(<span class="pl-c1">0</span>)</td>
      </tr>
      <tr>
        <td id="L2140" class="blob-num js-line-number" data-line-number="2140"></td>
        <td id="LC2140" class="blob-code blob-code-inner js-file-line">            {}</td>
      </tr>
      <tr>
        <td id="L2141" class="blob-num js-line-number" data-line-number="2141"></td>
        <td id="LC2141" class="blob-code blob-code-inner js-file-line">    };</td>
      </tr>
      <tr>
        <td id="L2142" class="blob-num js-line-number" data-line-number="2142"></td>
        <td id="LC2142" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2143" class="blob-num js-line-number" data-line-number="2143"></td>
        <td id="LC2143" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">struct</span> <span class="pl-en">DetectLeftRecursion</span> : <span class="pl-k">public</span> <span class="pl-en">Ope</span>::Visitor {</td>
      </tr>
      <tr>
        <td id="L2144" class="blob-num js-line-number" data-line-number="2144"></td>
        <td id="LC2144" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">DetectLeftRecursion</span>(<span class="pl-k">const</span> std::string&amp; name)</td>
      </tr>
      <tr>
        <td id="L2145" class="blob-num js-line-number" data-line-number="2145"></td>
        <td id="LC2145" class="blob-code blob-code-inner js-file-line">            : s_(<span class="pl-c1">nullptr</span>), name_(name), done_(<span class="pl-c1">false</span>) {}</td>
      </tr>
      <tr>
        <td id="L2146" class="blob-num js-line-number" data-line-number="2146"></td>
        <td id="LC2146" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2147" class="blob-num js-line-number" data-line-number="2147"></td>
        <td id="LC2147" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">using</span> Ope::Visitor::visit;</td>
      </tr>
      <tr>
        <td id="L2148" class="blob-num js-line-number" data-line-number="2148"></td>
        <td id="LC2148" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2149" class="blob-num js-line-number" data-line-number="2149"></td>
        <td id="LC2149" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">void</span> <span class="pl-en">visit</span>(Sequence&amp; ope) <span class="pl-k">override</span> {</td>
      </tr>
      <tr>
        <td id="L2150" class="blob-num js-line-number" data-line-number="2150"></td>
        <td id="LC2150" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">for</span> (<span class="pl-k">auto</span> op: ope.<span class="pl-smi">opes_</span>) {</td>
      </tr>
      <tr>
        <td id="L2151" class="blob-num js-line-number" data-line-number="2151"></td>
        <td id="LC2151" class="blob-code blob-code-inner js-file-line">                op-&gt;<span class="pl-c1">accept</span>(*<span class="pl-c1">this</span>);</td>
      </tr>
      <tr>
        <td id="L2152" class="blob-num js-line-number" data-line-number="2152"></td>
        <td id="LC2152" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">if</span> (done_) {</td>
      </tr>
      <tr>
        <td id="L2153" class="blob-num js-line-number" data-line-number="2153"></td>
        <td id="LC2153" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L2154" class="blob-num js-line-number" data-line-number="2154"></td>
        <td id="LC2154" class="blob-code blob-code-inner js-file-line">                } <span class="pl-k">else</span> <span class="pl-k">if</span> (s_) {</td>
      </tr>
      <tr>
        <td id="L2155" class="blob-num js-line-number" data-line-number="2155"></td>
        <td id="LC2155" class="blob-code blob-code-inner js-file-line">                    done_ = <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L2156" class="blob-num js-line-number" data-line-number="2156"></td>
        <td id="LC2156" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L2157" class="blob-num js-line-number" data-line-number="2157"></td>
        <td id="LC2157" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L2158" class="blob-num js-line-number" data-line-number="2158"></td>
        <td id="LC2158" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L2159" class="blob-num js-line-number" data-line-number="2159"></td>
        <td id="LC2159" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L2160" class="blob-num js-line-number" data-line-number="2160"></td>
        <td id="LC2160" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">void</span> <span class="pl-en">visit</span>(PrioritizedChoice&amp; ope) <span class="pl-k">override</span> {</td>
      </tr>
      <tr>
        <td id="L2161" class="blob-num js-line-number" data-line-number="2161"></td>
        <td id="LC2161" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">for</span> (<span class="pl-k">auto</span> op: ope.<span class="pl-smi">opes_</span>) {</td>
      </tr>
      <tr>
        <td id="L2162" class="blob-num js-line-number" data-line-number="2162"></td>
        <td id="LC2162" class="blob-code blob-code-inner js-file-line">                op-&gt;<span class="pl-c1">accept</span>(*<span class="pl-c1">this</span>);</td>
      </tr>
      <tr>
        <td id="L2163" class="blob-num js-line-number" data-line-number="2163"></td>
        <td id="LC2163" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">if</span> (s_) {</td>
      </tr>
      <tr>
        <td id="L2164" class="blob-num js-line-number" data-line-number="2164"></td>
        <td id="LC2164" class="blob-code blob-code-inner js-file-line">                    done_ = <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L2165" class="blob-num js-line-number" data-line-number="2165"></td>
        <td id="LC2165" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L2166" class="blob-num js-line-number" data-line-number="2166"></td>
        <td id="LC2166" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L2167" class="blob-num js-line-number" data-line-number="2167"></td>
        <td id="LC2167" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L2168" class="blob-num js-line-number" data-line-number="2168"></td>
        <td id="LC2168" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L2169" class="blob-num js-line-number" data-line-number="2169"></td>
        <td id="LC2169" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">void</span> <span class="pl-en">visit</span>(ZeroOrMore&amp; ope) <span class="pl-k">override</span> {</td>
      </tr>
      <tr>
        <td id="L2170" class="blob-num js-line-number" data-line-number="2170"></td>
        <td id="LC2170" class="blob-code blob-code-inner js-file-line">            ope.<span class="pl-smi">ope_</span>-&gt;<span class="pl-c1">accept</span>(*<span class="pl-c1">this</span>);</td>
      </tr>
      <tr>
        <td id="L2171" class="blob-num js-line-number" data-line-number="2171"></td>
        <td id="LC2171" class="blob-code blob-code-inner js-file-line">            done_ = <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L2172" class="blob-num js-line-number" data-line-number="2172"></td>
        <td id="LC2172" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L2173" class="blob-num js-line-number" data-line-number="2173"></td>
        <td id="LC2173" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">void</span> <span class="pl-en">visit</span>(OneOrMore&amp; ope) <span class="pl-k">override</span> {</td>
      </tr>
      <tr>
        <td id="L2174" class="blob-num js-line-number" data-line-number="2174"></td>
        <td id="LC2174" class="blob-code blob-code-inner js-file-line">            ope.<span class="pl-smi">ope_</span>-&gt;<span class="pl-c1">accept</span>(*<span class="pl-c1">this</span>);</td>
      </tr>
      <tr>
        <td id="L2175" class="blob-num js-line-number" data-line-number="2175"></td>
        <td id="LC2175" class="blob-code blob-code-inner js-file-line">            done_ = <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L2176" class="blob-num js-line-number" data-line-number="2176"></td>
        <td id="LC2176" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L2177" class="blob-num js-line-number" data-line-number="2177"></td>
        <td id="LC2177" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">void</span> <span class="pl-en">visit</span>(Option&amp; ope) <span class="pl-k">override</span> {</td>
      </tr>
      <tr>
        <td id="L2178" class="blob-num js-line-number" data-line-number="2178"></td>
        <td id="LC2178" class="blob-code blob-code-inner js-file-line">            ope.<span class="pl-smi">ope_</span>-&gt;<span class="pl-c1">accept</span>(*<span class="pl-c1">this</span>);</td>
      </tr>
      <tr>
        <td id="L2179" class="blob-num js-line-number" data-line-number="2179"></td>
        <td id="LC2179" class="blob-code blob-code-inner js-file-line">            done_ = <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L2180" class="blob-num js-line-number" data-line-number="2180"></td>
        <td id="LC2180" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L2181" class="blob-num js-line-number" data-line-number="2181"></td>
        <td id="LC2181" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">void</span> <span class="pl-en">visit</span>(AndPredicate&amp; ope) <span class="pl-k">override</span> {</td>
      </tr>
      <tr>
        <td id="L2182" class="blob-num js-line-number" data-line-number="2182"></td>
        <td id="LC2182" class="blob-code blob-code-inner js-file-line">            ope.<span class="pl-smi">ope_</span>-&gt;<span class="pl-c1">accept</span>(*<span class="pl-c1">this</span>);</td>
      </tr>
      <tr>
        <td id="L2183" class="blob-num js-line-number" data-line-number="2183"></td>
        <td id="LC2183" class="blob-code blob-code-inner js-file-line">            done_ = <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L2184" class="blob-num js-line-number" data-line-number="2184"></td>
        <td id="LC2184" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L2185" class="blob-num js-line-number" data-line-number="2185"></td>
        <td id="LC2185" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">void</span> <span class="pl-en">visit</span>(NotPredicate&amp; ope) <span class="pl-k">override</span> {</td>
      </tr>
      <tr>
        <td id="L2186" class="blob-num js-line-number" data-line-number="2186"></td>
        <td id="LC2186" class="blob-code blob-code-inner js-file-line">            ope.<span class="pl-smi">ope_</span>-&gt;<span class="pl-c1">accept</span>(*<span class="pl-c1">this</span>);</td>
      </tr>
      <tr>
        <td id="L2187" class="blob-num js-line-number" data-line-number="2187"></td>
        <td id="LC2187" class="blob-code blob-code-inner js-file-line">            done_ = <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L2188" class="blob-num js-line-number" data-line-number="2188"></td>
        <td id="LC2188" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L2189" class="blob-num js-line-number" data-line-number="2189"></td>
        <td id="LC2189" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">void</span> <span class="pl-en">visit</span>(LiteralString&amp; ope) <span class="pl-k">override</span> {</td>
      </tr>
      <tr>
        <td id="L2190" class="blob-num js-line-number" data-line-number="2190"></td>
        <td id="LC2190" class="blob-code blob-code-inner js-file-line">            done_ = !ope.<span class="pl-smi">lit_</span>.<span class="pl-c1">empty</span>();</td>
      </tr>
      <tr>
        <td id="L2191" class="blob-num js-line-number" data-line-number="2191"></td>
        <td id="LC2191" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L2192" class="blob-num js-line-number" data-line-number="2192"></td>
        <td id="LC2192" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">void</span> <span class="pl-en">visit</span>(CharacterClass&amp; <span class="pl-c"><span class="pl-c">/*</span>ope<span class="pl-c">*/</span></span>) <span class="pl-k">override</span> {</td>
      </tr>
      <tr>
        <td id="L2193" class="blob-num js-line-number" data-line-number="2193"></td>
        <td id="LC2193" class="blob-code blob-code-inner js-file-line">            done_ = <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L2194" class="blob-num js-line-number" data-line-number="2194"></td>
        <td id="LC2194" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L2195" class="blob-num js-line-number" data-line-number="2195"></td>
        <td id="LC2195" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">void</span> <span class="pl-en">visit</span>(Character&amp; <span class="pl-c"><span class="pl-c">/*</span>ope<span class="pl-c">*/</span></span>) <span class="pl-k">override</span> {</td>
      </tr>
      <tr>
        <td id="L2196" class="blob-num js-line-number" data-line-number="2196"></td>
        <td id="LC2196" class="blob-code blob-code-inner js-file-line">            done_ = <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L2197" class="blob-num js-line-number" data-line-number="2197"></td>
        <td id="LC2197" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L2198" class="blob-num js-line-number" data-line-number="2198"></td>
        <td id="LC2198" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">void</span> <span class="pl-en">visit</span>(AnyCharacter&amp; <span class="pl-c"><span class="pl-c">/*</span>ope<span class="pl-c">*/</span></span>) <span class="pl-k">override</span> {</td>
      </tr>
      <tr>
        <td id="L2199" class="blob-num js-line-number" data-line-number="2199"></td>
        <td id="LC2199" class="blob-code blob-code-inner js-file-line">            done_ = <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L2200" class="blob-num js-line-number" data-line-number="2200"></td>
        <td id="LC2200" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L2201" class="blob-num js-line-number" data-line-number="2201"></td>
        <td id="LC2201" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">void</span> <span class="pl-en">visit</span>(Capture&amp; ope) <span class="pl-k">override</span> {</td>
      </tr>
      <tr>
        <td id="L2202" class="blob-num js-line-number" data-line-number="2202"></td>
        <td id="LC2202" class="blob-code blob-code-inner js-file-line">            ope.<span class="pl-smi">ope_</span>-&gt;<span class="pl-c1">accept</span>(*<span class="pl-c1">this</span>);</td>
      </tr>
      <tr>
        <td id="L2203" class="blob-num js-line-number" data-line-number="2203"></td>
        <td id="LC2203" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L2204" class="blob-num js-line-number" data-line-number="2204"></td>
        <td id="LC2204" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">void</span> <span class="pl-en">visit</span>(TokenBoundary&amp; ope) <span class="pl-k">override</span> {</td>
      </tr>
      <tr>
        <td id="L2205" class="blob-num js-line-number" data-line-number="2205"></td>
        <td id="LC2205" class="blob-code blob-code-inner js-file-line">            ope.<span class="pl-smi">ope_</span>-&gt;<span class="pl-c1">accept</span>(*<span class="pl-c1">this</span>);</td>
      </tr>
      <tr>
        <td id="L2206" class="blob-num js-line-number" data-line-number="2206"></td>
        <td id="LC2206" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L2207" class="blob-num js-line-number" data-line-number="2207"></td>
        <td id="LC2207" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">void</span> <span class="pl-en">visit</span>(Ignore&amp; ope) <span class="pl-k">override</span> {</td>
      </tr>
      <tr>
        <td id="L2208" class="blob-num js-line-number" data-line-number="2208"></td>
        <td id="LC2208" class="blob-code blob-code-inner js-file-line">            ope.<span class="pl-smi">ope_</span>-&gt;<span class="pl-c1">accept</span>(*<span class="pl-c1">this</span>);</td>
      </tr>
      <tr>
        <td id="L2209" class="blob-num js-line-number" data-line-number="2209"></td>
        <td id="LC2209" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L2210" class="blob-num js-line-number" data-line-number="2210"></td>
        <td id="LC2210" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">void</span> <span class="pl-en">visit</span>(WeakHolder&amp; ope) <span class="pl-k">override</span> {</td>
      </tr>
      <tr>
        <td id="L2211" class="blob-num js-line-number" data-line-number="2211"></td>
        <td id="LC2211" class="blob-code blob-code-inner js-file-line">            ope.<span class="pl-smi">weak_</span>.<span class="pl-c1">lock</span>()-&gt;<span class="pl-c1">accept</span>(*<span class="pl-c1">this</span>);</td>
      </tr>
      <tr>
        <td id="L2212" class="blob-num js-line-number" data-line-number="2212"></td>
        <td id="LC2212" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L2213" class="blob-num js-line-number" data-line-number="2213"></td>
        <td id="LC2213" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">void</span> <span class="pl-en">visit</span>(Holder&amp; ope) <span class="pl-k">override</span> {</td>
      </tr>
      <tr>
        <td id="L2214" class="blob-num js-line-number" data-line-number="2214"></td>
        <td id="LC2214" class="blob-code blob-code-inner js-file-line">            ope.<span class="pl-smi">ope_</span>-&gt;<span class="pl-c1">accept</span>(*<span class="pl-c1">this</span>);</td>
      </tr>
      <tr>
        <td id="L2215" class="blob-num js-line-number" data-line-number="2215"></td>
        <td id="LC2215" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L2216" class="blob-num js-line-number" data-line-number="2216"></td>
        <td id="LC2216" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">void</span> <span class="pl-en">visit</span>(DefinitionReference&amp; ope) <span class="pl-k">override</span> {</td>
      </tr>
      <tr>
        <td id="L2217" class="blob-num js-line-number" data-line-number="2217"></td>
        <td id="LC2217" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (ope.<span class="pl-smi">name_</span> == name_) {</td>
      </tr>
      <tr>
        <td id="L2218" class="blob-num js-line-number" data-line-number="2218"></td>
        <td id="LC2218" class="blob-code blob-code-inner js-file-line">                s_ = ope.<span class="pl-smi">s_</span>;</td>
      </tr>
      <tr>
        <td id="L2219" class="blob-num js-line-number" data-line-number="2219"></td>
        <td id="LC2219" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> <span class="pl-k">if</span> (refs_.<span class="pl-c1">count</span>(ope.<span class="pl-smi">name_</span>)) {</td>
      </tr>
      <tr>
        <td id="L2220" class="blob-num js-line-number" data-line-number="2220"></td>
        <td id="LC2220" class="blob-code blob-code-inner js-file-line">                ;</td>
      </tr>
      <tr>
        <td id="L2221" class="blob-num js-line-number" data-line-number="2221"></td>
        <td id="LC2221" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L2222" class="blob-num js-line-number" data-line-number="2222"></td>
        <td id="LC2222" class="blob-code blob-code-inner js-file-line">                refs_.<span class="pl-c1">insert</span>(ope.<span class="pl-smi">name_</span>);</td>
      </tr>
      <tr>
        <td id="L2223" class="blob-num js-line-number" data-line-number="2223"></td>
        <td id="LC2223" class="blob-code blob-code-inner js-file-line">                ope.<span class="pl-c1">get_rule</span>()-&gt;<span class="pl-c1">accept</span>(*<span class="pl-c1">this</span>);</td>
      </tr>
      <tr>
        <td id="L2224" class="blob-num js-line-number" data-line-number="2224"></td>
        <td id="LC2224" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L2225" class="blob-num js-line-number" data-line-number="2225"></td>
        <td id="LC2225" class="blob-code blob-code-inner js-file-line">            done_ = <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L2226" class="blob-num js-line-number" data-line-number="2226"></td>
        <td id="LC2226" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L2227" class="blob-num js-line-number" data-line-number="2227"></td>
        <td id="LC2227" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2228" class="blob-num js-line-number" data-line-number="2228"></td>
        <td id="LC2228" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> <span class="pl-k">char</span>* s_;</td>
      </tr>
      <tr>
        <td id="L2229" class="blob-num js-line-number" data-line-number="2229"></td>
        <td id="LC2229" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2230" class="blob-num js-line-number" data-line-number="2230"></td>
        <td id="LC2230" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L2231" class="blob-num js-line-number" data-line-number="2231"></td>
        <td id="LC2231" class="blob-code blob-code-inner js-file-line">        std::string           name_;</td>
      </tr>
      <tr>
        <td id="L2232" class="blob-num js-line-number" data-line-number="2232"></td>
        <td id="LC2232" class="blob-code blob-code-inner js-file-line">        std::set&lt;std::string&gt; refs_;</td>
      </tr>
      <tr>
        <td id="L2233" class="blob-num js-line-number" data-line-number="2233"></td>
        <td id="LC2233" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">bool</span>                  done_;</td>
      </tr>
      <tr>
        <td id="L2234" class="blob-num js-line-number" data-line-number="2234"></td>
        <td id="LC2234" class="blob-code blob-code-inner js-file-line">    };</td>
      </tr>
      <tr>
        <td id="L2235" class="blob-num js-line-number" data-line-number="2235"></td>
        <td id="LC2235" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2236" class="blob-num js-line-number" data-line-number="2236"></td>
        <td id="LC2236" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">make_grammar</span>() {</td>
      </tr>
      <tr>
        <td id="L2237" class="blob-num js-line-number" data-line-number="2237"></td>
        <td id="LC2237" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> Setup PEG syntax parser</span></td>
      </tr>
      <tr>
        <td id="L2238" class="blob-num js-line-number" data-line-number="2238"></td>
        <td id="LC2238" class="blob-code blob-code-inner js-file-line">        g[<span class="pl-s"><span class="pl-pds">&quot;</span>Grammar<span class="pl-pds">&quot;</span></span>]    &lt;= <span class="pl-c1">seq</span>(g[<span class="pl-s"><span class="pl-pds">&quot;</span>Spacing<span class="pl-pds">&quot;</span></span>], <span class="pl-c1">oom</span>(g[<span class="pl-s"><span class="pl-pds">&quot;</span>Definition<span class="pl-pds">&quot;</span></span>]), g[<span class="pl-s"><span class="pl-pds">&quot;</span>EndOfFile<span class="pl-pds">&quot;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L2239" class="blob-num js-line-number" data-line-number="2239"></td>
        <td id="LC2239" class="blob-code blob-code-inner js-file-line">        g[<span class="pl-s"><span class="pl-pds">&quot;</span>Definition<span class="pl-pds">&quot;</span></span>] &lt;= <span class="pl-c1">seq</span>(<span class="pl-c1">opt</span>(g[<span class="pl-s"><span class="pl-pds">&quot;</span>IGNORE<span class="pl-pds">&quot;</span></span>]), g[<span class="pl-s"><span class="pl-pds">&quot;</span>Identifier<span class="pl-pds">&quot;</span></span>], g[<span class="pl-s"><span class="pl-pds">&quot;</span>LEFTARROW<span class="pl-pds">&quot;</span></span>], g[<span class="pl-s"><span class="pl-pds">&quot;</span>Expression<span class="pl-pds">&quot;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L2240" class="blob-num js-line-number" data-line-number="2240"></td>
        <td id="LC2240" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2241" class="blob-num js-line-number" data-line-number="2241"></td>
        <td id="LC2241" class="blob-code blob-code-inner js-file-line">        g[<span class="pl-s"><span class="pl-pds">&quot;</span>Expression<span class="pl-pds">&quot;</span></span>] &lt;= <span class="pl-c1">seq</span>(g[<span class="pl-s"><span class="pl-pds">&quot;</span>Sequence<span class="pl-pds">&quot;</span></span>], <span class="pl-c1">zom</span>(<span class="pl-c1">seq</span>(g[<span class="pl-s"><span class="pl-pds">&quot;</span>SLASH<span class="pl-pds">&quot;</span></span>], g[<span class="pl-s"><span class="pl-pds">&quot;</span>Sequence<span class="pl-pds">&quot;</span></span>])));</td>
      </tr>
      <tr>
        <td id="L2242" class="blob-num js-line-number" data-line-number="2242"></td>
        <td id="LC2242" class="blob-code blob-code-inner js-file-line">        g[<span class="pl-s"><span class="pl-pds">&quot;</span>Sequence<span class="pl-pds">&quot;</span></span>]   &lt;= <span class="pl-c1">zom</span>(g[<span class="pl-s"><span class="pl-pds">&quot;</span>Prefix<span class="pl-pds">&quot;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L2243" class="blob-num js-line-number" data-line-number="2243"></td>
        <td id="LC2243" class="blob-code blob-code-inner js-file-line">        g[<span class="pl-s"><span class="pl-pds">&quot;</span>Prefix<span class="pl-pds">&quot;</span></span>]     &lt;= <span class="pl-c1">seq</span>(<span class="pl-c1">opt</span>(<span class="pl-c1">cho</span>(g[<span class="pl-s"><span class="pl-pds">&quot;</span>AND<span class="pl-pds">&quot;</span></span>], g[<span class="pl-s"><span class="pl-pds">&quot;</span>NOT<span class="pl-pds">&quot;</span></span>])), g[<span class="pl-s"><span class="pl-pds">&quot;</span>Suffix<span class="pl-pds">&quot;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L2244" class="blob-num js-line-number" data-line-number="2244"></td>
        <td id="LC2244" class="blob-code blob-code-inner js-file-line">        g[<span class="pl-s"><span class="pl-pds">&quot;</span>Suffix<span class="pl-pds">&quot;</span></span>]     &lt;= <span class="pl-c1">seq</span>(g[<span class="pl-s"><span class="pl-pds">&quot;</span>Primary<span class="pl-pds">&quot;</span></span>], <span class="pl-c1">opt</span>(<span class="pl-c1">cho</span>(g[<span class="pl-s"><span class="pl-pds">&quot;</span>QUESTION<span class="pl-pds">&quot;</span></span>], g[<span class="pl-s"><span class="pl-pds">&quot;</span>STAR<span class="pl-pds">&quot;</span></span>], g[<span class="pl-s"><span class="pl-pds">&quot;</span>PLUS<span class="pl-pds">&quot;</span></span>])));</td>
      </tr>
      <tr>
        <td id="L2245" class="blob-num js-line-number" data-line-number="2245"></td>
        <td id="LC2245" class="blob-code blob-code-inner js-file-line">        g[<span class="pl-s"><span class="pl-pds">&quot;</span>Primary<span class="pl-pds">&quot;</span></span>]    &lt;= <span class="pl-c1">cho</span>(<span class="pl-c1">seq</span>(<span class="pl-c1">opt</span>(g[<span class="pl-s"><span class="pl-pds">&quot;</span>IGNORE<span class="pl-pds">&quot;</span></span>]), g[<span class="pl-s"><span class="pl-pds">&quot;</span>Identifier<span class="pl-pds">&quot;</span></span>], <span class="pl-c1">npd</span>(g[<span class="pl-s"><span class="pl-pds">&quot;</span>LEFTARROW<span class="pl-pds">&quot;</span></span>])),</td>
      </tr>
      <tr>
        <td id="L2246" class="blob-num js-line-number" data-line-number="2246"></td>
        <td id="LC2246" class="blob-code blob-code-inner js-file-line">                               <span class="pl-c1">seq</span>(g[<span class="pl-s"><span class="pl-pds">&quot;</span>OPEN<span class="pl-pds">&quot;</span></span>], g[<span class="pl-s"><span class="pl-pds">&quot;</span>Expression<span class="pl-pds">&quot;</span></span>], g[<span class="pl-s"><span class="pl-pds">&quot;</span>CLOSE<span class="pl-pds">&quot;</span></span>]),</td>
      </tr>
      <tr>
        <td id="L2247" class="blob-num js-line-number" data-line-number="2247"></td>
        <td id="LC2247" class="blob-code blob-code-inner js-file-line">                               <span class="pl-c1">seq</span>(g[<span class="pl-s"><span class="pl-pds">&quot;</span>BeginTok<span class="pl-pds">&quot;</span></span>], g[<span class="pl-s"><span class="pl-pds">&quot;</span>Expression<span class="pl-pds">&quot;</span></span>], g[<span class="pl-s"><span class="pl-pds">&quot;</span>EndTok<span class="pl-pds">&quot;</span></span>]),</td>
      </tr>
      <tr>
        <td id="L2248" class="blob-num js-line-number" data-line-number="2248"></td>
        <td id="LC2248" class="blob-code blob-code-inner js-file-line">                               <span class="pl-c1">seq</span>(g[<span class="pl-s"><span class="pl-pds">&quot;</span>BeginCap<span class="pl-pds">&quot;</span></span>], g[<span class="pl-s"><span class="pl-pds">&quot;</span>Expression<span class="pl-pds">&quot;</span></span>], g[<span class="pl-s"><span class="pl-pds">&quot;</span>EndCap<span class="pl-pds">&quot;</span></span>]),</td>
      </tr>
      <tr>
        <td id="L2249" class="blob-num js-line-number" data-line-number="2249"></td>
        <td id="LC2249" class="blob-code blob-code-inner js-file-line">                               g[<span class="pl-s"><span class="pl-pds">&quot;</span>Literal<span class="pl-pds">&quot;</span></span>], g[<span class="pl-s"><span class="pl-pds">&quot;</span>Class<span class="pl-pds">&quot;</span></span>], g[<span class="pl-s"><span class="pl-pds">&quot;</span>DOT<span class="pl-pds">&quot;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L2250" class="blob-num js-line-number" data-line-number="2250"></td>
        <td id="LC2250" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2251" class="blob-num js-line-number" data-line-number="2251"></td>
        <td id="LC2251" class="blob-code blob-code-inner js-file-line">        g[<span class="pl-s"><span class="pl-pds">&quot;</span>Identifier<span class="pl-pds">&quot;</span></span>] &lt;= <span class="pl-c1">seq</span>(g[<span class="pl-s"><span class="pl-pds">&quot;</span>IdentCont<span class="pl-pds">&quot;</span></span>], g[<span class="pl-s"><span class="pl-pds">&quot;</span>Spacing<span class="pl-pds">&quot;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L2252" class="blob-num js-line-number" data-line-number="2252"></td>
        <td id="LC2252" class="blob-code blob-code-inner js-file-line">        g[<span class="pl-s"><span class="pl-pds">&quot;</span>IdentCont<span class="pl-pds">&quot;</span></span>]  &lt;= <span class="pl-c1">seq</span>(g[<span class="pl-s"><span class="pl-pds">&quot;</span>IdentStart<span class="pl-pds">&quot;</span></span>], <span class="pl-c1">zom</span>(g[<span class="pl-s"><span class="pl-pds">&quot;</span>IdentRest<span class="pl-pds">&quot;</span></span>]));</td>
      </tr>
      <tr>
        <td id="L2253" class="blob-num js-line-number" data-line-number="2253"></td>
        <td id="LC2253" class="blob-code blob-code-inner js-file-line">        g[<span class="pl-s"><span class="pl-pds">&quot;</span>IdentStart<span class="pl-pds">&quot;</span></span>] &lt;= <span class="pl-c1">cls</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>a-zA-Z_<span class="pl-cce">\x80</span>-<span class="pl-cce">\xff</span>%<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L2254" class="blob-num js-line-number" data-line-number="2254"></td>
        <td id="LC2254" class="blob-code blob-code-inner js-file-line">        g[<span class="pl-s"><span class="pl-pds">&quot;</span>IdentRest<span class="pl-pds">&quot;</span></span>]  &lt;= <span class="pl-c1">cho</span>(g[<span class="pl-s"><span class="pl-pds">&quot;</span>IdentStart<span class="pl-pds">&quot;</span></span>], <span class="pl-c1">cls</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>0-9<span class="pl-pds">&quot;</span></span>));</td>
      </tr>
      <tr>
        <td id="L2255" class="blob-num js-line-number" data-line-number="2255"></td>
        <td id="LC2255" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2256" class="blob-num js-line-number" data-line-number="2256"></td>
        <td id="LC2256" class="blob-code blob-code-inner js-file-line">        g[<span class="pl-s"><span class="pl-pds">&quot;</span>Literal<span class="pl-pds">&quot;</span></span>]    &lt;= <span class="pl-c1">cho</span>(<span class="pl-c1">seq</span>(<span class="pl-c1">cls</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;<span class="pl-pds">&quot;</span></span>), <span class="pl-c1">tok</span>(<span class="pl-c1">zom</span>(<span class="pl-c1">seq</span>(<span class="pl-c1">npd</span>(<span class="pl-c1">cls</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;<span class="pl-pds">&quot;</span></span>)), g[<span class="pl-s"><span class="pl-pds">&quot;</span>Char<span class="pl-pds">&quot;</span></span>]))), <span class="pl-c1">cls</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&#39;<span class="pl-pds">&quot;</span></span>), g[<span class="pl-s"><span class="pl-pds">&quot;</span>Spacing<span class="pl-pds">&quot;</span></span>]),</td>
      </tr>
      <tr>
        <td id="L2257" class="blob-num js-line-number" data-line-number="2257"></td>
        <td id="LC2257" class="blob-code blob-code-inner js-file-line">                               <span class="pl-c1">seq</span>(<span class="pl-c1">cls</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>), <span class="pl-c1">tok</span>(<span class="pl-c1">zom</span>(<span class="pl-c1">seq</span>(<span class="pl-c1">npd</span>(<span class="pl-c1">cls</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>)), g[<span class="pl-s"><span class="pl-pds">&quot;</span>Char<span class="pl-pds">&quot;</span></span>]))), <span class="pl-c1">cls</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>), g[<span class="pl-s"><span class="pl-pds">&quot;</span>Spacing<span class="pl-pds">&quot;</span></span>]));</td>
      </tr>
      <tr>
        <td id="L2258" class="blob-num js-line-number" data-line-number="2258"></td>
        <td id="LC2258" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2259" class="blob-num js-line-number" data-line-number="2259"></td>
        <td id="LC2259" class="blob-code blob-code-inner js-file-line">        g[<span class="pl-s"><span class="pl-pds">&quot;</span>Class<span class="pl-pds">&quot;</span></span>]      &lt;= <span class="pl-c1">seq</span>(<span class="pl-c1">chr</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>[<span class="pl-pds">&#39;</span></span>), <span class="pl-c1">tok</span>(<span class="pl-c1">zom</span>(<span class="pl-c1">seq</span>(<span class="pl-c1">npd</span>(<span class="pl-c1">chr</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>]<span class="pl-pds">&#39;</span></span>)), g[<span class="pl-s"><span class="pl-pds">&quot;</span>Range<span class="pl-pds">&quot;</span></span>]))), <span class="pl-c1">chr</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>]<span class="pl-pds">&#39;</span></span>), g[<span class="pl-s"><span class="pl-pds">&quot;</span>Spacing<span class="pl-pds">&quot;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L2260" class="blob-num js-line-number" data-line-number="2260"></td>
        <td id="LC2260" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2261" class="blob-num js-line-number" data-line-number="2261"></td>
        <td id="LC2261" class="blob-code blob-code-inner js-file-line">        g[<span class="pl-s"><span class="pl-pds">&quot;</span>Range<span class="pl-pds">&quot;</span></span>]      &lt;= <span class="pl-c1">cho</span>(<span class="pl-c1">seq</span>(g[<span class="pl-s"><span class="pl-pds">&quot;</span>Char<span class="pl-pds">&quot;</span></span>], <span class="pl-c1">chr</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>-<span class="pl-pds">&#39;</span></span>), g[<span class="pl-s"><span class="pl-pds">&quot;</span>Char<span class="pl-pds">&quot;</span></span>]), g[<span class="pl-s"><span class="pl-pds">&quot;</span>Char<span class="pl-pds">&quot;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L2262" class="blob-num js-line-number" data-line-number="2262"></td>
        <td id="LC2262" class="blob-code blob-code-inner js-file-line">        g[<span class="pl-s"><span class="pl-pds">&quot;</span>Char<span class="pl-pds">&quot;</span></span>]       &lt;= <span class="pl-c1">cho</span>(<span class="pl-c1">seq</span>(<span class="pl-c1">chr</span>(<span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\\</span><span class="pl-pds">&#39;</span></span>), <span class="pl-c1">cls</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>nrt&#39;<span class="pl-cce">\&quot;</span>[]<span class="pl-cce">\\</span><span class="pl-pds">&quot;</span></span>)),</td>
      </tr>
      <tr>
        <td id="L2263" class="blob-num js-line-number" data-line-number="2263"></td>
        <td id="LC2263" class="blob-code blob-code-inner js-file-line">                               <span class="pl-c1">seq</span>(<span class="pl-c1">chr</span>(<span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\\</span><span class="pl-pds">&#39;</span></span>), <span class="pl-c1">cls</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>0-3<span class="pl-pds">&quot;</span></span>), <span class="pl-c1">cls</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>0-7<span class="pl-pds">&quot;</span></span>), <span class="pl-c1">cls</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>0-7<span class="pl-pds">&quot;</span></span>)),</td>
      </tr>
      <tr>
        <td id="L2264" class="blob-num js-line-number" data-line-number="2264"></td>
        <td id="LC2264" class="blob-code blob-code-inner js-file-line">                               <span class="pl-c1">seq</span>(<span class="pl-c1">chr</span>(<span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\\</span><span class="pl-pds">&#39;</span></span>), <span class="pl-c1">cls</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>0-7<span class="pl-pds">&quot;</span></span>), <span class="pl-c1">opt</span>(<span class="pl-c1">cls</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>0-7<span class="pl-pds">&quot;</span></span>))),</td>
      </tr>
      <tr>
        <td id="L2265" class="blob-num js-line-number" data-line-number="2265"></td>
        <td id="LC2265" class="blob-code blob-code-inner js-file-line">                               <span class="pl-c1">seq</span>(<span class="pl-c1">lit</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\\</span>x<span class="pl-pds">&quot;</span></span>), <span class="pl-c1">cls</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>0-9a-fA-F<span class="pl-pds">&quot;</span></span>), <span class="pl-c1">opt</span>(<span class="pl-c1">cls</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>0-9a-fA-F<span class="pl-pds">&quot;</span></span>))),</td>
      </tr>
      <tr>
        <td id="L2266" class="blob-num js-line-number" data-line-number="2266"></td>
        <td id="LC2266" class="blob-code blob-code-inner js-file-line">                               <span class="pl-c1">seq</span>(<span class="pl-c1">npd</span>(<span class="pl-c1">chr</span>(<span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\\</span><span class="pl-pds">&#39;</span></span>)), <span class="pl-c1">dot</span>()));</td>
      </tr>
      <tr>
        <td id="L2267" class="blob-num js-line-number" data-line-number="2267"></td>
        <td id="LC2267" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2268" class="blob-num js-line-number" data-line-number="2268"></td>
        <td id="LC2268" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">if</span> !defined(PEGLIB_NO_UNICODE_CHARS)</td>
      </tr>
      <tr>
        <td id="L2269" class="blob-num js-line-number" data-line-number="2269"></td>
        <td id="LC2269" class="blob-code blob-code-inner js-file-line">        g[<span class="pl-s"><span class="pl-pds">&quot;</span>LEFTARROW<span class="pl-pds">&quot;</span></span>]  &lt;= <span class="pl-c1">seq</span>(<span class="pl-c1">cho</span>(<span class="pl-c1">lit</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&lt;-<span class="pl-pds">&quot;</span></span>), <span class="pl-c1">lit</span>(<span class="pl-s"><span class="pl-pds">u8&quot;</span>←<span class="pl-pds">&quot;</span></span>)), g[<span class="pl-s"><span class="pl-pds">&quot;</span>Spacing<span class="pl-pds">&quot;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L2270" class="blob-num js-line-number" data-line-number="2270"></td>
        <td id="LC2270" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">else</span></td>
      </tr>
      <tr>
        <td id="L2271" class="blob-num js-line-number" data-line-number="2271"></td>
        <td id="LC2271" class="blob-code blob-code-inner js-file-line">        g[<span class="pl-s"><span class="pl-pds">&quot;</span>LEFTARROW<span class="pl-pds">&quot;</span></span>]  &lt;= <span class="pl-c1">seq</span>(<span class="pl-c1">lit</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&lt;-<span class="pl-pds">&quot;</span></span>), g[<span class="pl-s"><span class="pl-pds">&quot;</span>Spacing<span class="pl-pds">&quot;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L2272" class="blob-num js-line-number" data-line-number="2272"></td>
        <td id="LC2272" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L2273" class="blob-num js-line-number" data-line-number="2273"></td>
        <td id="LC2273" class="blob-code blob-code-inner js-file-line">        ~g[<span class="pl-s"><span class="pl-pds">&quot;</span>SLASH<span class="pl-pds">&quot;</span></span>]     &lt;= <span class="pl-c1">seq</span>(<span class="pl-c1">chr</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>/<span class="pl-pds">&#39;</span></span>), g[<span class="pl-s"><span class="pl-pds">&quot;</span>Spacing<span class="pl-pds">&quot;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L2274" class="blob-num js-line-number" data-line-number="2274"></td>
        <td id="LC2274" class="blob-code blob-code-inner js-file-line">        g[<span class="pl-s"><span class="pl-pds">&quot;</span>AND<span class="pl-pds">&quot;</span></span>]        &lt;= <span class="pl-c1">seq</span>(<span class="pl-c1">chr</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>&amp;<span class="pl-pds">&#39;</span></span>), g[<span class="pl-s"><span class="pl-pds">&quot;</span>Spacing<span class="pl-pds">&quot;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L2275" class="blob-num js-line-number" data-line-number="2275"></td>
        <td id="LC2275" class="blob-code blob-code-inner js-file-line">        g[<span class="pl-s"><span class="pl-pds">&quot;</span>NOT<span class="pl-pds">&quot;</span></span>]        &lt;= <span class="pl-c1">seq</span>(<span class="pl-c1">chr</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>!<span class="pl-pds">&#39;</span></span>), g[<span class="pl-s"><span class="pl-pds">&quot;</span>Spacing<span class="pl-pds">&quot;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L2276" class="blob-num js-line-number" data-line-number="2276"></td>
        <td id="LC2276" class="blob-code blob-code-inner js-file-line">        g[<span class="pl-s"><span class="pl-pds">&quot;</span>QUESTION<span class="pl-pds">&quot;</span></span>]   &lt;= <span class="pl-c1">seq</span>(<span class="pl-c1">chr</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>?<span class="pl-pds">&#39;</span></span>), g[<span class="pl-s"><span class="pl-pds">&quot;</span>Spacing<span class="pl-pds">&quot;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L2277" class="blob-num js-line-number" data-line-number="2277"></td>
        <td id="LC2277" class="blob-code blob-code-inner js-file-line">        g[<span class="pl-s"><span class="pl-pds">&quot;</span>STAR<span class="pl-pds">&quot;</span></span>]       &lt;= <span class="pl-c1">seq</span>(<span class="pl-c1">chr</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>*<span class="pl-pds">&#39;</span></span>), g[<span class="pl-s"><span class="pl-pds">&quot;</span>Spacing<span class="pl-pds">&quot;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L2278" class="blob-num js-line-number" data-line-number="2278"></td>
        <td id="LC2278" class="blob-code blob-code-inner js-file-line">        g[<span class="pl-s"><span class="pl-pds">&quot;</span>PLUS<span class="pl-pds">&quot;</span></span>]       &lt;= <span class="pl-c1">seq</span>(<span class="pl-c1">chr</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>+<span class="pl-pds">&#39;</span></span>), g[<span class="pl-s"><span class="pl-pds">&quot;</span>Spacing<span class="pl-pds">&quot;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L2279" class="blob-num js-line-number" data-line-number="2279"></td>
        <td id="LC2279" class="blob-code blob-code-inner js-file-line">        g[<span class="pl-s"><span class="pl-pds">&quot;</span>OPEN<span class="pl-pds">&quot;</span></span>]       &lt;= <span class="pl-c1">seq</span>(<span class="pl-c1">chr</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>(<span class="pl-pds">&#39;</span></span>), g[<span class="pl-s"><span class="pl-pds">&quot;</span>Spacing<span class="pl-pds">&quot;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L2280" class="blob-num js-line-number" data-line-number="2280"></td>
        <td id="LC2280" class="blob-code blob-code-inner js-file-line">        g[<span class="pl-s"><span class="pl-pds">&quot;</span>CLOSE<span class="pl-pds">&quot;</span></span>]      &lt;= <span class="pl-c1">seq</span>(<span class="pl-c1">chr</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>)<span class="pl-pds">&#39;</span></span>), g[<span class="pl-s"><span class="pl-pds">&quot;</span>Spacing<span class="pl-pds">&quot;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L2281" class="blob-num js-line-number" data-line-number="2281"></td>
        <td id="LC2281" class="blob-code blob-code-inner js-file-line">        g[<span class="pl-s"><span class="pl-pds">&quot;</span>DOT<span class="pl-pds">&quot;</span></span>]        &lt;= <span class="pl-c1">seq</span>(<span class="pl-c1">chr</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>.<span class="pl-pds">&#39;</span></span>), g[<span class="pl-s"><span class="pl-pds">&quot;</span>Spacing<span class="pl-pds">&quot;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L2282" class="blob-num js-line-number" data-line-number="2282"></td>
        <td id="LC2282" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2283" class="blob-num js-line-number" data-line-number="2283"></td>
        <td id="LC2283" class="blob-code blob-code-inner js-file-line">        g[<span class="pl-s"><span class="pl-pds">&quot;</span>Spacing<span class="pl-pds">&quot;</span></span>]    &lt;= <span class="pl-c1">zom</span>(<span class="pl-c1">cho</span>(g[<span class="pl-s"><span class="pl-pds">&quot;</span>Space<span class="pl-pds">&quot;</span></span>], g[<span class="pl-s"><span class="pl-pds">&quot;</span>Comment<span class="pl-pds">&quot;</span></span>]));</td>
      </tr>
      <tr>
        <td id="L2284" class="blob-num js-line-number" data-line-number="2284"></td>
        <td id="LC2284" class="blob-code blob-code-inner js-file-line">        g[<span class="pl-s"><span class="pl-pds">&quot;</span>Comment<span class="pl-pds">&quot;</span></span>]    &lt;= <span class="pl-c1">seq</span>(<span class="pl-c1">chr</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>#<span class="pl-pds">&#39;</span></span>), <span class="pl-c1">zom</span>(<span class="pl-c1">seq</span>(<span class="pl-c1">npd</span>(g[<span class="pl-s"><span class="pl-pds">&quot;</span>EndOfLine<span class="pl-pds">&quot;</span></span>]), <span class="pl-c1">dot</span>())), g[<span class="pl-s"><span class="pl-pds">&quot;</span>EndOfLine<span class="pl-pds">&quot;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L2285" class="blob-num js-line-number" data-line-number="2285"></td>
        <td id="LC2285" class="blob-code blob-code-inner js-file-line">        g[<span class="pl-s"><span class="pl-pds">&quot;</span>Space<span class="pl-pds">&quot;</span></span>]      &lt;= <span class="pl-c1">cho</span>(<span class="pl-c1">chr</span>(<span class="pl-s"><span class="pl-pds">&#39;</span> <span class="pl-pds">&#39;</span></span>), <span class="pl-c1">chr</span>(<span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\t</span><span class="pl-pds">&#39;</span></span>), g[<span class="pl-s"><span class="pl-pds">&quot;</span>EndOfLine<span class="pl-pds">&quot;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L2286" class="blob-num js-line-number" data-line-number="2286"></td>
        <td id="LC2286" class="blob-code blob-code-inner js-file-line">        g[<span class="pl-s"><span class="pl-pds">&quot;</span>EndOfLine<span class="pl-pds">&quot;</span></span>]  &lt;= <span class="pl-c1">cho</span>(<span class="pl-c1">lit</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\r\n</span><span class="pl-pds">&quot;</span></span>), <span class="pl-c1">chr</span>(<span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\n</span><span class="pl-pds">&#39;</span></span>), <span class="pl-c1">chr</span>(<span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\r</span><span class="pl-pds">&#39;</span></span>));</td>
      </tr>
      <tr>
        <td id="L2287" class="blob-num js-line-number" data-line-number="2287"></td>
        <td id="LC2287" class="blob-code blob-code-inner js-file-line">        g[<span class="pl-s"><span class="pl-pds">&quot;</span>EndOfFile<span class="pl-pds">&quot;</span></span>]  &lt;= <span class="pl-c1">npd</span>(<span class="pl-c1">dot</span>());</td>
      </tr>
      <tr>
        <td id="L2288" class="blob-num js-line-number" data-line-number="2288"></td>
        <td id="LC2288" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2289" class="blob-num js-line-number" data-line-number="2289"></td>
        <td id="LC2289" class="blob-code blob-code-inner js-file-line">        g[<span class="pl-s"><span class="pl-pds">&quot;</span>BeginTok<span class="pl-pds">&quot;</span></span>]   &lt;= <span class="pl-c1">seq</span>(<span class="pl-c1">chr</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>&lt;<span class="pl-pds">&#39;</span></span>), g[<span class="pl-s"><span class="pl-pds">&quot;</span>Spacing<span class="pl-pds">&quot;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L2290" class="blob-num js-line-number" data-line-number="2290"></td>
        <td id="LC2290" class="blob-code blob-code-inner js-file-line">        g[<span class="pl-s"><span class="pl-pds">&quot;</span>EndTok<span class="pl-pds">&quot;</span></span>]     &lt;= <span class="pl-c1">seq</span>(<span class="pl-c1">chr</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>&gt;<span class="pl-pds">&#39;</span></span>), g[<span class="pl-s"><span class="pl-pds">&quot;</span>Spacing<span class="pl-pds">&quot;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L2291" class="blob-num js-line-number" data-line-number="2291"></td>
        <td id="LC2291" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2292" class="blob-num js-line-number" data-line-number="2292"></td>
        <td id="LC2292" class="blob-code blob-code-inner js-file-line">        g[<span class="pl-s"><span class="pl-pds">&quot;</span>BeginCap<span class="pl-pds">&quot;</span></span>]   &lt;= <span class="pl-c1">seq</span>(<span class="pl-c1">chr</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>$<span class="pl-pds">&#39;</span></span>), <span class="pl-c1">tok</span>(<span class="pl-c1">opt</span>(g[<span class="pl-s"><span class="pl-pds">&quot;</span>Identifier<span class="pl-pds">&quot;</span></span>])), <span class="pl-c1">chr</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>&lt;<span class="pl-pds">&#39;</span></span>), g[<span class="pl-s"><span class="pl-pds">&quot;</span>Spacing<span class="pl-pds">&quot;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L2293" class="blob-num js-line-number" data-line-number="2293"></td>
        <td id="LC2293" class="blob-code blob-code-inner js-file-line">        g[<span class="pl-s"><span class="pl-pds">&quot;</span>EndCap<span class="pl-pds">&quot;</span></span>]     &lt;= <span class="pl-c1">seq</span>(<span class="pl-c1">lit</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>&gt;<span class="pl-pds">&quot;</span></span>), g[<span class="pl-s"><span class="pl-pds">&quot;</span>Spacing<span class="pl-pds">&quot;</span></span>]);</td>
      </tr>
      <tr>
        <td id="L2294" class="blob-num js-line-number" data-line-number="2294"></td>
        <td id="LC2294" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2295" class="blob-num js-line-number" data-line-number="2295"></td>
        <td id="LC2295" class="blob-code blob-code-inner js-file-line">        g[<span class="pl-s"><span class="pl-pds">&quot;</span>IGNORE<span class="pl-pds">&quot;</span></span>]     &lt;= <span class="pl-c1">chr</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>~<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L2296" class="blob-num js-line-number" data-line-number="2296"></td>
        <td id="LC2296" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2297" class="blob-num js-line-number" data-line-number="2297"></td>
        <td id="LC2297" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> Set definition names</span></td>
      </tr>
      <tr>
        <td id="L2298" class="blob-num js-line-number" data-line-number="2298"></td>
        <td id="LC2298" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">for</span> (<span class="pl-k">auto</span>&amp; x: g) {</td>
      </tr>
      <tr>
        <td id="L2299" class="blob-num js-line-number" data-line-number="2299"></td>
        <td id="LC2299" class="blob-code blob-code-inner js-file-line">            x.<span class="pl-smi">second</span>.<span class="pl-smi">name</span> = x.<span class="pl-smi">first</span>;</td>
      </tr>
      <tr>
        <td id="L2300" class="blob-num js-line-number" data-line-number="2300"></td>
        <td id="LC2300" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L2301" class="blob-num js-line-number" data-line-number="2301"></td>
        <td id="LC2301" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L2302" class="blob-num js-line-number" data-line-number="2302"></td>
        <td id="LC2302" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2303" class="blob-num js-line-number" data-line-number="2303"></td>
        <td id="LC2303" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">setup_actions</span>() {</td>
      </tr>
      <tr>
        <td id="L2304" class="blob-num js-line-number" data-line-number="2304"></td>
        <td id="LC2304" class="blob-code blob-code-inner js-file-line">        g[<span class="pl-s"><span class="pl-pds">&quot;</span>Definition<span class="pl-pds">&quot;</span></span>] = [&amp;](<span class="pl-k">const</span> SemanticValues&amp; sv, any&amp; dt) {</td>
      </tr>
      <tr>
        <td id="L2305" class="blob-num js-line-number" data-line-number="2305"></td>
        <td id="LC2305" class="blob-code blob-code-inner js-file-line">            Data&amp; data = *dt.<span class="pl-smi">get</span>&lt;Data*&gt;();</td>
      </tr>
      <tr>
        <td id="L2306" class="blob-num js-line-number" data-line-number="2306"></td>
        <td id="LC2306" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2307" class="blob-num js-line-number" data-line-number="2307"></td>
        <td id="LC2307" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">auto</span> ignore = (sv.<span class="pl-c1">size</span>() == <span class="pl-c1">4</span>);</td>
      </tr>
      <tr>
        <td id="L2308" class="blob-num js-line-number" data-line-number="2308"></td>
        <td id="LC2308" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">auto</span> baseId = ignore ? <span class="pl-c1">1u</span> : <span class="pl-c1">0u</span>;</td>
      </tr>
      <tr>
        <td id="L2309" class="blob-num js-line-number" data-line-number="2309"></td>
        <td id="LC2309" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2310" class="blob-num js-line-number" data-line-number="2310"></td>
        <td id="LC2310" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">const</span> <span class="pl-k">auto</span>&amp; name = sv[baseId].<span class="pl-smi">get</span>&lt;std::string&gt;();</td>
      </tr>
      <tr>
        <td id="L2311" class="blob-num js-line-number" data-line-number="2311"></td>
        <td id="LC2311" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">auto</span> ope = sv[baseId + <span class="pl-c1">2</span>].<span class="pl-smi">get</span>&lt;std::shared_ptr&lt;Ope&gt;&gt;();</td>
      </tr>
      <tr>
        <td id="L2312" class="blob-num js-line-number" data-line-number="2312"></td>
        <td id="LC2312" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2313" class="blob-num js-line-number" data-line-number="2313"></td>
        <td id="LC2313" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">auto</span>&amp; grammar = *data.<span class="pl-smi">grammar</span>;</td>
      </tr>
      <tr>
        <td id="L2314" class="blob-num js-line-number" data-line-number="2314"></td>
        <td id="LC2314" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (!grammar.<span class="pl-c1">count</span>(name)) {</td>
      </tr>
      <tr>
        <td id="L2315" class="blob-num js-line-number" data-line-number="2315"></td>
        <td id="LC2315" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">auto</span>&amp; rule = grammar[name];</td>
      </tr>
      <tr>
        <td id="L2316" class="blob-num js-line-number" data-line-number="2316"></td>
        <td id="LC2316" class="blob-code blob-code-inner js-file-line">                rule &lt;= ope;</td>
      </tr>
      <tr>
        <td id="L2317" class="blob-num js-line-number" data-line-number="2317"></td>
        <td id="LC2317" class="blob-code blob-code-inner js-file-line">                rule.<span class="pl-smi">name</span> = name;</td>
      </tr>
      <tr>
        <td id="L2318" class="blob-num js-line-number" data-line-number="2318"></td>
        <td id="LC2318" class="blob-code blob-code-inner js-file-line">                rule.<span class="pl-smi">ignoreSemanticValue</span> = ignore;</td>
      </tr>
      <tr>
        <td id="L2319" class="blob-num js-line-number" data-line-number="2319"></td>
        <td id="LC2319" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2320" class="blob-num js-line-number" data-line-number="2320"></td>
        <td id="LC2320" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">if</span> (data.<span class="pl-smi">start</span>.<span class="pl-c1">empty</span>()) {</td>
      </tr>
      <tr>
        <td id="L2321" class="blob-num js-line-number" data-line-number="2321"></td>
        <td id="LC2321" class="blob-code blob-code-inner js-file-line">                    data.<span class="pl-smi">start</span> = name;</td>
      </tr>
      <tr>
        <td id="L2322" class="blob-num js-line-number" data-line-number="2322"></td>
        <td id="LC2322" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L2323" class="blob-num js-line-number" data-line-number="2323"></td>
        <td id="LC2323" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L2324" class="blob-num js-line-number" data-line-number="2324"></td>
        <td id="LC2324" class="blob-code blob-code-inner js-file-line">                data.<span class="pl-smi">duplicates</span>.<span class="pl-c1">emplace_back</span>(name, sv.<span class="pl-c1">c_str</span>());</td>
      </tr>
      <tr>
        <td id="L2325" class="blob-num js-line-number" data-line-number="2325"></td>
        <td id="LC2325" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L2326" class="blob-num js-line-number" data-line-number="2326"></td>
        <td id="LC2326" class="blob-code blob-code-inner js-file-line">        };</td>
      </tr>
      <tr>
        <td id="L2327" class="blob-num js-line-number" data-line-number="2327"></td>
        <td id="LC2327" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2328" class="blob-num js-line-number" data-line-number="2328"></td>
        <td id="LC2328" class="blob-code blob-code-inner js-file-line">        g[<span class="pl-s"><span class="pl-pds">&quot;</span>Expression<span class="pl-pds">&quot;</span></span>] = [&amp;](<span class="pl-k">const</span> SemanticValues&amp; sv) {</td>
      </tr>
      <tr>
        <td id="L2329" class="blob-num js-line-number" data-line-number="2329"></td>
        <td id="LC2329" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (sv.<span class="pl-c1">size</span>() == <span class="pl-c1">1</span>) {</td>
      </tr>
      <tr>
        <td id="L2330" class="blob-num js-line-number" data-line-number="2330"></td>
        <td id="LC2330" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">return</span> sv[<span class="pl-c1">0</span>].<span class="pl-smi">get</span>&lt;std::shared_ptr&lt;Ope&gt;&gt;();</td>
      </tr>
      <tr>
        <td id="L2331" class="blob-num js-line-number" data-line-number="2331"></td>
        <td id="LC2331" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L2332" class="blob-num js-line-number" data-line-number="2332"></td>
        <td id="LC2332" class="blob-code blob-code-inner js-file-line">                std::vector&lt;std::shared_ptr&lt;Ope&gt;&gt; opes;</td>
      </tr>
      <tr>
        <td id="L2333" class="blob-num js-line-number" data-line-number="2333"></td>
        <td id="LC2333" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">for</span> (<span class="pl-k">auto</span> i = <span class="pl-c1">0u</span>; i &lt; sv.<span class="pl-c1">size</span>(); i++) {</td>
      </tr>
      <tr>
        <td id="L2334" class="blob-num js-line-number" data-line-number="2334"></td>
        <td id="LC2334" class="blob-code blob-code-inner js-file-line">                    opes.<span class="pl-c1">emplace_back</span>(sv[i].<span class="pl-smi">get</span>&lt;std::shared_ptr&lt;Ope&gt;&gt;());</td>
      </tr>
      <tr>
        <td id="L2335" class="blob-num js-line-number" data-line-number="2335"></td>
        <td id="LC2335" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L2336" class="blob-num js-line-number" data-line-number="2336"></td>
        <td id="LC2336" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">const</span> std::shared_ptr&lt;Ope&gt; ope = std::make_shared&lt;PrioritizedChoice&gt;(opes);</td>
      </tr>
      <tr>
        <td id="L2337" class="blob-num js-line-number" data-line-number="2337"></td>
        <td id="LC2337" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">return</span> ope;</td>
      </tr>
      <tr>
        <td id="L2338" class="blob-num js-line-number" data-line-number="2338"></td>
        <td id="LC2338" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L2339" class="blob-num js-line-number" data-line-number="2339"></td>
        <td id="LC2339" class="blob-code blob-code-inner js-file-line">        };</td>
      </tr>
      <tr>
        <td id="L2340" class="blob-num js-line-number" data-line-number="2340"></td>
        <td id="LC2340" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2341" class="blob-num js-line-number" data-line-number="2341"></td>
        <td id="LC2341" class="blob-code blob-code-inner js-file-line">        g[<span class="pl-s"><span class="pl-pds">&quot;</span>Sequence<span class="pl-pds">&quot;</span></span>] = [&amp;](<span class="pl-k">const</span> SemanticValues&amp; sv) {</td>
      </tr>
      <tr>
        <td id="L2342" class="blob-num js-line-number" data-line-number="2342"></td>
        <td id="LC2342" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (sv.<span class="pl-c1">size</span>() == <span class="pl-c1">1</span>) {</td>
      </tr>
      <tr>
        <td id="L2343" class="blob-num js-line-number" data-line-number="2343"></td>
        <td id="LC2343" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">return</span> sv[<span class="pl-c1">0</span>].<span class="pl-smi">get</span>&lt;std::shared_ptr&lt;Ope&gt;&gt;();</td>
      </tr>
      <tr>
        <td id="L2344" class="blob-num js-line-number" data-line-number="2344"></td>
        <td id="LC2344" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L2345" class="blob-num js-line-number" data-line-number="2345"></td>
        <td id="LC2345" class="blob-code blob-code-inner js-file-line">                std::vector&lt;std::shared_ptr&lt;Ope&gt;&gt; opes;</td>
      </tr>
      <tr>
        <td id="L2346" class="blob-num js-line-number" data-line-number="2346"></td>
        <td id="LC2346" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">for</span> (<span class="pl-k">const</span> <span class="pl-k">auto</span>&amp; x: sv) {</td>
      </tr>
      <tr>
        <td id="L2347" class="blob-num js-line-number" data-line-number="2347"></td>
        <td id="LC2347" class="blob-code blob-code-inner js-file-line">                    opes.<span class="pl-c1">emplace_back</span>(x.<span class="pl-smi">get</span>&lt;std::shared_ptr&lt;Ope&gt;&gt;());</td>
      </tr>
      <tr>
        <td id="L2348" class="blob-num js-line-number" data-line-number="2348"></td>
        <td id="LC2348" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L2349" class="blob-num js-line-number" data-line-number="2349"></td>
        <td id="LC2349" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">const</span> std::shared_ptr&lt;Ope&gt; ope = std::make_shared&lt;Sequence&gt;(opes);</td>
      </tr>
      <tr>
        <td id="L2350" class="blob-num js-line-number" data-line-number="2350"></td>
        <td id="LC2350" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">return</span> ope;</td>
      </tr>
      <tr>
        <td id="L2351" class="blob-num js-line-number" data-line-number="2351"></td>
        <td id="LC2351" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L2352" class="blob-num js-line-number" data-line-number="2352"></td>
        <td id="LC2352" class="blob-code blob-code-inner js-file-line">        };</td>
      </tr>
      <tr>
        <td id="L2353" class="blob-num js-line-number" data-line-number="2353"></td>
        <td id="LC2353" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2354" class="blob-num js-line-number" data-line-number="2354"></td>
        <td id="LC2354" class="blob-code blob-code-inner js-file-line">        g[<span class="pl-s"><span class="pl-pds">&quot;</span>Prefix<span class="pl-pds">&quot;</span></span>] = [&amp;](<span class="pl-k">const</span> SemanticValues&amp; sv) {</td>
      </tr>
      <tr>
        <td id="L2355" class="blob-num js-line-number" data-line-number="2355"></td>
        <td id="LC2355" class="blob-code blob-code-inner js-file-line">            std::shared_ptr&lt;Ope&gt; ope;</td>
      </tr>
      <tr>
        <td id="L2356" class="blob-num js-line-number" data-line-number="2356"></td>
        <td id="LC2356" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (sv.<span class="pl-c1">size</span>() == <span class="pl-c1">1</span>) {</td>
      </tr>
      <tr>
        <td id="L2357" class="blob-num js-line-number" data-line-number="2357"></td>
        <td id="LC2357" class="blob-code blob-code-inner js-file-line">                ope = sv[<span class="pl-c1">0</span>].<span class="pl-smi">get</span>&lt;std::shared_ptr&lt;Ope&gt;&gt;();</td>
      </tr>
      <tr>
        <td id="L2358" class="blob-num js-line-number" data-line-number="2358"></td>
        <td id="LC2358" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L2359" class="blob-num js-line-number" data-line-number="2359"></td>
        <td id="LC2359" class="blob-code blob-code-inner js-file-line">                <span class="pl-c1">assert</span>(sv.<span class="pl-c1">size</span>() == <span class="pl-c1">2</span>);</td>
      </tr>
      <tr>
        <td id="L2360" class="blob-num js-line-number" data-line-number="2360"></td>
        <td id="LC2360" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">auto</span> tok = sv[<span class="pl-c1">0</span>].<span class="pl-smi">get</span>&lt;<span class="pl-k">char</span>&gt;();</td>
      </tr>
      <tr>
        <td id="L2361" class="blob-num js-line-number" data-line-number="2361"></td>
        <td id="LC2361" class="blob-code blob-code-inner js-file-line">                ope = sv[<span class="pl-c1">1</span>].<span class="pl-smi">get</span>&lt;std::shared_ptr&lt;Ope&gt;&gt;();</td>
      </tr>
      <tr>
        <td id="L2362" class="blob-num js-line-number" data-line-number="2362"></td>
        <td id="LC2362" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">if</span> (tok == <span class="pl-s"><span class="pl-pds">&#39;</span>&amp;<span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L2363" class="blob-num js-line-number" data-line-number="2363"></td>
        <td id="LC2363" class="blob-code blob-code-inner js-file-line">                    ope = <span class="pl-c1">apd</span>(ope);</td>
      </tr>
      <tr>
        <td id="L2364" class="blob-num js-line-number" data-line-number="2364"></td>
        <td id="LC2364" class="blob-code blob-code-inner js-file-line">                } <span class="pl-k">else</span> { <span class="pl-c"><span class="pl-c">//</span> &#39;!&#39;</span></td>
      </tr>
      <tr>
        <td id="L2365" class="blob-num js-line-number" data-line-number="2365"></td>
        <td id="LC2365" class="blob-code blob-code-inner js-file-line">                    ope = <span class="pl-c1">npd</span>(ope);</td>
      </tr>
      <tr>
        <td id="L2366" class="blob-num js-line-number" data-line-number="2366"></td>
        <td id="LC2366" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L2367" class="blob-num js-line-number" data-line-number="2367"></td>
        <td id="LC2367" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L2368" class="blob-num js-line-number" data-line-number="2368"></td>
        <td id="LC2368" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> ope;</td>
      </tr>
      <tr>
        <td id="L2369" class="blob-num js-line-number" data-line-number="2369"></td>
        <td id="LC2369" class="blob-code blob-code-inner js-file-line">        };</td>
      </tr>
      <tr>
        <td id="L2370" class="blob-num js-line-number" data-line-number="2370"></td>
        <td id="LC2370" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2371" class="blob-num js-line-number" data-line-number="2371"></td>
        <td id="LC2371" class="blob-code blob-code-inner js-file-line">        g[<span class="pl-s"><span class="pl-pds">&quot;</span>Suffix<span class="pl-pds">&quot;</span></span>] = [&amp;](<span class="pl-k">const</span> SemanticValues&amp; sv) {</td>
      </tr>
      <tr>
        <td id="L2372" class="blob-num js-line-number" data-line-number="2372"></td>
        <td id="LC2372" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">auto</span> ope = sv[<span class="pl-c1">0</span>].<span class="pl-smi">get</span>&lt;std::shared_ptr&lt;Ope&gt;&gt;();</td>
      </tr>
      <tr>
        <td id="L2373" class="blob-num js-line-number" data-line-number="2373"></td>
        <td id="LC2373" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (sv.<span class="pl-c1">size</span>() == <span class="pl-c1">1</span>) {</td>
      </tr>
      <tr>
        <td id="L2374" class="blob-num js-line-number" data-line-number="2374"></td>
        <td id="LC2374" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">return</span> ope;</td>
      </tr>
      <tr>
        <td id="L2375" class="blob-num js-line-number" data-line-number="2375"></td>
        <td id="LC2375" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L2376" class="blob-num js-line-number" data-line-number="2376"></td>
        <td id="LC2376" class="blob-code blob-code-inner js-file-line">                <span class="pl-c1">assert</span>(sv.<span class="pl-c1">size</span>() == <span class="pl-c1">2</span>);</td>
      </tr>
      <tr>
        <td id="L2377" class="blob-num js-line-number" data-line-number="2377"></td>
        <td id="LC2377" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">auto</span> tok = sv[<span class="pl-c1">1</span>].<span class="pl-smi">get</span>&lt;<span class="pl-k">char</span>&gt;();</td>
      </tr>
      <tr>
        <td id="L2378" class="blob-num js-line-number" data-line-number="2378"></td>
        <td id="LC2378" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">if</span> (tok == <span class="pl-s"><span class="pl-pds">&#39;</span>?<span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L2379" class="blob-num js-line-number" data-line-number="2379"></td>
        <td id="LC2379" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">return</span> <span class="pl-c1">opt</span>(ope);</td>
      </tr>
      <tr>
        <td id="L2380" class="blob-num js-line-number" data-line-number="2380"></td>
        <td id="LC2380" class="blob-code blob-code-inner js-file-line">                } <span class="pl-k">else</span> <span class="pl-k">if</span> (tok == <span class="pl-s"><span class="pl-pds">&#39;</span>*<span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L2381" class="blob-num js-line-number" data-line-number="2381"></td>
        <td id="LC2381" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">return</span> <span class="pl-c1">zom</span>(ope);</td>
      </tr>
      <tr>
        <td id="L2382" class="blob-num js-line-number" data-line-number="2382"></td>
        <td id="LC2382" class="blob-code blob-code-inner js-file-line">                } <span class="pl-k">else</span> { <span class="pl-c"><span class="pl-c">//</span> &#39;+&#39;</span></td>
      </tr>
      <tr>
        <td id="L2383" class="blob-num js-line-number" data-line-number="2383"></td>
        <td id="LC2383" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">return</span> <span class="pl-c1">oom</span>(ope);</td>
      </tr>
      <tr>
        <td id="L2384" class="blob-num js-line-number" data-line-number="2384"></td>
        <td id="LC2384" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L2385" class="blob-num js-line-number" data-line-number="2385"></td>
        <td id="LC2385" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L2386" class="blob-num js-line-number" data-line-number="2386"></td>
        <td id="LC2386" class="blob-code blob-code-inner js-file-line">        };</td>
      </tr>
      <tr>
        <td id="L2387" class="blob-num js-line-number" data-line-number="2387"></td>
        <td id="LC2387" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2388" class="blob-num js-line-number" data-line-number="2388"></td>
        <td id="LC2388" class="blob-code blob-code-inner js-file-line">        g[<span class="pl-s"><span class="pl-pds">&quot;</span>Primary<span class="pl-pds">&quot;</span></span>] = [&amp;](<span class="pl-k">const</span> SemanticValues&amp; sv, any&amp; dt) -&gt; std::shared_ptr&lt;Ope&gt; {</td>
      </tr>
      <tr>
        <td id="L2389" class="blob-num js-line-number" data-line-number="2389"></td>
        <td id="LC2389" class="blob-code blob-code-inner js-file-line">            Data&amp; data = *dt.<span class="pl-smi">get</span>&lt;Data*&gt;();</td>
      </tr>
      <tr>
        <td id="L2390" class="blob-num js-line-number" data-line-number="2390"></td>
        <td id="LC2390" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2391" class="blob-num js-line-number" data-line-number="2391"></td>
        <td id="LC2391" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">switch</span> (sv.<span class="pl-c1">choice</span>()) {</td>
      </tr>
      <tr>
        <td id="L2392" class="blob-num js-line-number" data-line-number="2392"></td>
        <td id="LC2392" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">case</span> <span class="pl-c1">0</span>: { <span class="pl-c"><span class="pl-c">//</span> Reference</span></td>
      </tr>
      <tr>
        <td id="L2393" class="blob-num js-line-number" data-line-number="2393"></td>
        <td id="LC2393" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">auto</span> ignore = (sv.<span class="pl-c1">size</span>() == <span class="pl-c1">2</span>);</td>
      </tr>
      <tr>
        <td id="L2394" class="blob-num js-line-number" data-line-number="2394"></td>
        <td id="LC2394" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">auto</span> baseId = ignore ? <span class="pl-c1">1u</span> : <span class="pl-c1">0u</span>;</td>
      </tr>
      <tr>
        <td id="L2395" class="blob-num js-line-number" data-line-number="2395"></td>
        <td id="LC2395" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2396" class="blob-num js-line-number" data-line-number="2396"></td>
        <td id="LC2396" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">const</span> <span class="pl-k">auto</span>&amp; ident = sv[baseId].<span class="pl-smi">get</span>&lt;std::string&gt;();</td>
      </tr>
      <tr>
        <td id="L2397" class="blob-num js-line-number" data-line-number="2397"></td>
        <td id="LC2397" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2398" class="blob-num js-line-number" data-line-number="2398"></td>
        <td id="LC2398" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">if</span> (!data.<span class="pl-smi">references</span>.<span class="pl-c1">count</span>(ident)) {</td>
      </tr>
      <tr>
        <td id="L2399" class="blob-num js-line-number" data-line-number="2399"></td>
        <td id="LC2399" class="blob-code blob-code-inner js-file-line">                        data.<span class="pl-smi">references</span>[ident] = sv.<span class="pl-c1">c_str</span>(); <span class="pl-c"><span class="pl-c">//</span> for error handling</span></td>
      </tr>
      <tr>
        <td id="L2400" class="blob-num js-line-number" data-line-number="2400"></td>
        <td id="LC2400" class="blob-code blob-code-inner js-file-line">                    }</td>
      </tr>
      <tr>
        <td id="L2401" class="blob-num js-line-number" data-line-number="2401"></td>
        <td id="LC2401" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2402" class="blob-num js-line-number" data-line-number="2402"></td>
        <td id="LC2402" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">if</span> (ignore) {</td>
      </tr>
      <tr>
        <td id="L2403" class="blob-num js-line-number" data-line-number="2403"></td>
        <td id="LC2403" class="blob-code blob-code-inner js-file-line">                        <span class="pl-k">return</span> <span class="pl-c1">ign</span>(<span class="pl-c1">ref</span>(*data.<span class="pl-smi">grammar</span>, ident, sv.<span class="pl-c1">c_str</span>()));</td>
      </tr>
      <tr>
        <td id="L2404" class="blob-num js-line-number" data-line-number="2404"></td>
        <td id="LC2404" class="blob-code blob-code-inner js-file-line">                    } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L2405" class="blob-num js-line-number" data-line-number="2405"></td>
        <td id="LC2405" class="blob-code blob-code-inner js-file-line">                        <span class="pl-k">return</span> <span class="pl-c1">ref</span>(*data.<span class="pl-smi">grammar</span>, ident, sv.<span class="pl-c1">c_str</span>());</td>
      </tr>
      <tr>
        <td id="L2406" class="blob-num js-line-number" data-line-number="2406"></td>
        <td id="LC2406" class="blob-code blob-code-inner js-file-line">                    }</td>
      </tr>
      <tr>
        <td id="L2407" class="blob-num js-line-number" data-line-number="2407"></td>
        <td id="LC2407" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L2408" class="blob-num js-line-number" data-line-number="2408"></td>
        <td id="LC2408" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">case</span> <span class="pl-c1">1</span>: { <span class="pl-c"><span class="pl-c">//</span> (Expression)</span></td>
      </tr>
      <tr>
        <td id="L2409" class="blob-num js-line-number" data-line-number="2409"></td>
        <td id="LC2409" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">return</span> sv[<span class="pl-c1">1</span>].<span class="pl-smi">get</span>&lt;std::shared_ptr&lt;Ope&gt;&gt;();</td>
      </tr>
      <tr>
        <td id="L2410" class="blob-num js-line-number" data-line-number="2410"></td>
        <td id="LC2410" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L2411" class="blob-num js-line-number" data-line-number="2411"></td>
        <td id="LC2411" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">case</span> <span class="pl-c1">2</span>: { <span class="pl-c"><span class="pl-c">//</span> TokenBoundary</span></td>
      </tr>
      <tr>
        <td id="L2412" class="blob-num js-line-number" data-line-number="2412"></td>
        <td id="LC2412" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">return</span> <span class="pl-c1">tok</span>(sv[<span class="pl-c1">1</span>].<span class="pl-smi">get</span>&lt;std::shared_ptr&lt;Ope&gt;&gt;());</td>
      </tr>
      <tr>
        <td id="L2413" class="blob-num js-line-number" data-line-number="2413"></td>
        <td id="LC2413" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L2414" class="blob-num js-line-number" data-line-number="2414"></td>
        <td id="LC2414" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">case</span> <span class="pl-c1">3</span>: { <span class="pl-c"><span class="pl-c">//</span> Capture</span></td>
      </tr>
      <tr>
        <td id="L2415" class="blob-num js-line-number" data-line-number="2415"></td>
        <td id="LC2415" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">const</span> <span class="pl-k">auto</span>&amp; name = sv[<span class="pl-c1">0</span>].<span class="pl-smi">get</span>&lt;std::string&gt;();</td>
      </tr>
      <tr>
        <td id="L2416" class="blob-num js-line-number" data-line-number="2416"></td>
        <td id="LC2416" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">auto</span> ope = sv[<span class="pl-c1">1</span>].<span class="pl-smi">get</span>&lt;std::shared_ptr&lt;Ope&gt;&gt;();</td>
      </tr>
      <tr>
        <td id="L2417" class="blob-num js-line-number" data-line-number="2417"></td>
        <td id="LC2417" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">return</span> <span class="pl-c1">cap</span>(ope, data.<span class="pl-smi">match_action</span>, ++data.<span class="pl-smi">capture_count</span>, name);</td>
      </tr>
      <tr>
        <td id="L2418" class="blob-num js-line-number" data-line-number="2418"></td>
        <td id="LC2418" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L2419" class="blob-num js-line-number" data-line-number="2419"></td>
        <td id="LC2419" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">default</span>: {</td>
      </tr>
      <tr>
        <td id="L2420" class="blob-num js-line-number" data-line-number="2420"></td>
        <td id="LC2420" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">return</span> sv[<span class="pl-c1">0</span>].<span class="pl-smi">get</span>&lt;std::shared_ptr&lt;Ope&gt;&gt;();</td>
      </tr>
      <tr>
        <td id="L2421" class="blob-num js-line-number" data-line-number="2421"></td>
        <td id="LC2421" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L2422" class="blob-num js-line-number" data-line-number="2422"></td>
        <td id="LC2422" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L2423" class="blob-num js-line-number" data-line-number="2423"></td>
        <td id="LC2423" class="blob-code blob-code-inner js-file-line">        };</td>
      </tr>
      <tr>
        <td id="L2424" class="blob-num js-line-number" data-line-number="2424"></td>
        <td id="LC2424" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2425" class="blob-num js-line-number" data-line-number="2425"></td>
        <td id="LC2425" class="blob-code blob-code-inner js-file-line">        g[<span class="pl-s"><span class="pl-pds">&quot;</span>IdentCont<span class="pl-pds">&quot;</span></span>] = [](<span class="pl-k">const</span> SemanticValues&amp; sv) {</td>
      </tr>
      <tr>
        <td id="L2426" class="blob-num js-line-number" data-line-number="2426"></td>
        <td id="LC2426" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> <span class="pl-c1">std::string</span>(sv.<span class="pl-c1">c_str</span>(), sv.<span class="pl-c1">length</span>());</td>
      </tr>
      <tr>
        <td id="L2427" class="blob-num js-line-number" data-line-number="2427"></td>
        <td id="LC2427" class="blob-code blob-code-inner js-file-line">        };</td>
      </tr>
      <tr>
        <td id="L2428" class="blob-num js-line-number" data-line-number="2428"></td>
        <td id="LC2428" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2429" class="blob-num js-line-number" data-line-number="2429"></td>
        <td id="LC2429" class="blob-code blob-code-inner js-file-line">        g[<span class="pl-s"><span class="pl-pds">&quot;</span>Literal<span class="pl-pds">&quot;</span></span>] = [<span class="pl-c1">this</span>](<span class="pl-k">const</span> SemanticValues&amp; sv) {</td>
      </tr>
      <tr>
        <td id="L2430" class="blob-num js-line-number" data-line-number="2430"></td>
        <td id="LC2430" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">const</span> <span class="pl-k">auto</span>&amp; tok = sv.<span class="pl-smi">tokens</span>.<span class="pl-c1">front</span>();</td>
      </tr>
      <tr>
        <td id="L2431" class="blob-num js-line-number" data-line-number="2431"></td>
        <td id="LC2431" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> <span class="pl-c1">lit</span>(<span class="pl-c1">resolve_escape_sequence</span>(tok.<span class="pl-smi">first</span>, tok.<span class="pl-smi">second</span>));</td>
      </tr>
      <tr>
        <td id="L2432" class="blob-num js-line-number" data-line-number="2432"></td>
        <td id="LC2432" class="blob-code blob-code-inner js-file-line">        };</td>
      </tr>
      <tr>
        <td id="L2433" class="blob-num js-line-number" data-line-number="2433"></td>
        <td id="LC2433" class="blob-code blob-code-inner js-file-line">        g[<span class="pl-s"><span class="pl-pds">&quot;</span>Class<span class="pl-pds">&quot;</span></span>] = [<span class="pl-c1">this</span>](<span class="pl-k">const</span> SemanticValues&amp; sv) {</td>
      </tr>
      <tr>
        <td id="L2434" class="blob-num js-line-number" data-line-number="2434"></td>
        <td id="LC2434" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">const</span> <span class="pl-k">auto</span>&amp; tok = sv.<span class="pl-smi">tokens</span>.<span class="pl-c1">front</span>();</td>
      </tr>
      <tr>
        <td id="L2435" class="blob-num js-line-number" data-line-number="2435"></td>
        <td id="LC2435" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> <span class="pl-c1">cls</span>(<span class="pl-c1">resolve_escape_sequence</span>(tok.<span class="pl-smi">first</span>, tok.<span class="pl-smi">second</span>));</td>
      </tr>
      <tr>
        <td id="L2436" class="blob-num js-line-number" data-line-number="2436"></td>
        <td id="LC2436" class="blob-code blob-code-inner js-file-line">        };</td>
      </tr>
      <tr>
        <td id="L2437" class="blob-num js-line-number" data-line-number="2437"></td>
        <td id="LC2437" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2438" class="blob-num js-line-number" data-line-number="2438"></td>
        <td id="LC2438" class="blob-code blob-code-inner js-file-line">        g[<span class="pl-s"><span class="pl-pds">&quot;</span>AND<span class="pl-pds">&quot;</span></span>]      = [](<span class="pl-k">const</span> SemanticValues&amp; sv) { <span class="pl-k">return</span> *sv.<span class="pl-c1">c_str</span>(); };</td>
      </tr>
      <tr>
        <td id="L2439" class="blob-num js-line-number" data-line-number="2439"></td>
        <td id="LC2439" class="blob-code blob-code-inner js-file-line">        g[<span class="pl-s"><span class="pl-pds">&quot;</span>NOT<span class="pl-pds">&quot;</span></span>]      = [](<span class="pl-k">const</span> SemanticValues&amp; sv) { <span class="pl-k">return</span> *sv.<span class="pl-c1">c_str</span>(); };</td>
      </tr>
      <tr>
        <td id="L2440" class="blob-num js-line-number" data-line-number="2440"></td>
        <td id="LC2440" class="blob-code blob-code-inner js-file-line">        g[<span class="pl-s"><span class="pl-pds">&quot;</span>QUESTION<span class="pl-pds">&quot;</span></span>] = [](<span class="pl-k">const</span> SemanticValues&amp; sv) { <span class="pl-k">return</span> *sv.<span class="pl-c1">c_str</span>(); };</td>
      </tr>
      <tr>
        <td id="L2441" class="blob-num js-line-number" data-line-number="2441"></td>
        <td id="LC2441" class="blob-code blob-code-inner js-file-line">        g[<span class="pl-s"><span class="pl-pds">&quot;</span>STAR<span class="pl-pds">&quot;</span></span>]     = [](<span class="pl-k">const</span> SemanticValues&amp; sv) { <span class="pl-k">return</span> *sv.<span class="pl-c1">c_str</span>(); };</td>
      </tr>
      <tr>
        <td id="L2442" class="blob-num js-line-number" data-line-number="2442"></td>
        <td id="LC2442" class="blob-code blob-code-inner js-file-line">        g[<span class="pl-s"><span class="pl-pds">&quot;</span>PLUS<span class="pl-pds">&quot;</span></span>]     = [](<span class="pl-k">const</span> SemanticValues&amp; sv) { <span class="pl-k">return</span> *sv.<span class="pl-c1">c_str</span>(); };</td>
      </tr>
      <tr>
        <td id="L2443" class="blob-num js-line-number" data-line-number="2443"></td>
        <td id="LC2443" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2444" class="blob-num js-line-number" data-line-number="2444"></td>
        <td id="LC2444" class="blob-code blob-code-inner js-file-line">        g[<span class="pl-s"><span class="pl-pds">&quot;</span>DOT<span class="pl-pds">&quot;</span></span>] = [](<span class="pl-k">const</span> SemanticValues&amp; <span class="pl-c"><span class="pl-c">/*</span>sv<span class="pl-c">*/</span></span>) { <span class="pl-k">return</span> <span class="pl-c1">dot</span>(); };</td>
      </tr>
      <tr>
        <td id="L2445" class="blob-num js-line-number" data-line-number="2445"></td>
        <td id="LC2445" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2446" class="blob-num js-line-number" data-line-number="2446"></td>
        <td id="LC2446" class="blob-code blob-code-inner js-file-line">        g[<span class="pl-s"><span class="pl-pds">&quot;</span>BeginCap<span class="pl-pds">&quot;</span></span>] = [](<span class="pl-k">const</span> SemanticValues&amp; sv) { <span class="pl-k">return</span> sv.<span class="pl-c1">token</span>(); };</td>
      </tr>
      <tr>
        <td id="L2447" class="blob-num js-line-number" data-line-number="2447"></td>
        <td id="LC2447" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L2448" class="blob-num js-line-number" data-line-number="2448"></td>
        <td id="LC2448" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2449" class="blob-num js-line-number" data-line-number="2449"></td>
        <td id="LC2449" class="blob-code blob-code-inner js-file-line">    std::shared_ptr&lt;Grammar&gt; <span class="pl-en">perform_core</span>(</td>
      </tr>
      <tr>
        <td id="L2450" class="blob-num js-line-number" data-line-number="2450"></td>
        <td id="LC2450" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> <span class="pl-k">char</span>*  s,</td>
      </tr>
      <tr>
        <td id="L2451" class="blob-num js-line-number" data-line-number="2451"></td>
        <td id="LC2451" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">size_t</span>       n,</td>
      </tr>
      <tr>
        <td id="L2452" class="blob-num js-line-number" data-line-number="2452"></td>
        <td id="LC2452" class="blob-code blob-code-inner js-file-line">        std::string&amp; start,</td>
      </tr>
      <tr>
        <td id="L2453" class="blob-num js-line-number" data-line-number="2453"></td>
        <td id="LC2453" class="blob-code blob-code-inner js-file-line">        MatchAction  ma,</td>
      </tr>
      <tr>
        <td id="L2454" class="blob-num js-line-number" data-line-number="2454"></td>
        <td id="LC2454" class="blob-code blob-code-inner js-file-line">        Log          log)</td>
      </tr>
      <tr>
        <td id="L2455" class="blob-num js-line-number" data-line-number="2455"></td>
        <td id="LC2455" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="L2456" class="blob-num js-line-number" data-line-number="2456"></td>
        <td id="LC2456" class="blob-code blob-code-inner js-file-line">        Data data;</td>
      </tr>
      <tr>
        <td id="L2457" class="blob-num js-line-number" data-line-number="2457"></td>
        <td id="LC2457" class="blob-code blob-code-inner js-file-line">        data.<span class="pl-smi">match_action</span> = ma;</td>
      </tr>
      <tr>
        <td id="L2458" class="blob-num js-line-number" data-line-number="2458"></td>
        <td id="LC2458" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2459" class="blob-num js-line-number" data-line-number="2459"></td>
        <td id="LC2459" class="blob-code blob-code-inner js-file-line">        any dt = &amp;data;</td>
      </tr>
      <tr>
        <td id="L2460" class="blob-num js-line-number" data-line-number="2460"></td>
        <td id="LC2460" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">auto</span> r = g[<span class="pl-s"><span class="pl-pds">&quot;</span>Grammar<span class="pl-pds">&quot;</span></span>].<span class="pl-c1">parse</span>(s, n, dt);</td>
      </tr>
      <tr>
        <td id="L2461" class="blob-num js-line-number" data-line-number="2461"></td>
        <td id="LC2461" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2462" class="blob-num js-line-number" data-line-number="2462"></td>
        <td id="LC2462" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (!r.<span class="pl-smi">ret</span>) {</td>
      </tr>
      <tr>
        <td id="L2463" class="blob-num js-line-number" data-line-number="2463"></td>
        <td id="LC2463" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-c1">log</span>) {</td>
      </tr>
      <tr>
        <td id="L2464" class="blob-num js-line-number" data-line-number="2464"></td>
        <td id="LC2464" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">if</span> (r.<span class="pl-smi">message_pos</span>) {</td>
      </tr>
      <tr>
        <td id="L2465" class="blob-num js-line-number" data-line-number="2465"></td>
        <td id="LC2465" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">auto</span> line = <span class="pl-c1">line_info</span>(s, r.<span class="pl-smi">message_pos</span>);</td>
      </tr>
      <tr>
        <td id="L2466" class="blob-num js-line-number" data-line-number="2466"></td>
        <td id="LC2466" class="blob-code blob-code-inner js-file-line">                    <span class="pl-c1">log</span>(line.<span class="pl-smi">first</span>, line.<span class="pl-smi">second</span>, r.<span class="pl-smi">message</span>);</td>
      </tr>
      <tr>
        <td id="L2467" class="blob-num js-line-number" data-line-number="2467"></td>
        <td id="LC2467" class="blob-code blob-code-inner js-file-line">                } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L2468" class="blob-num js-line-number" data-line-number="2468"></td>
        <td id="LC2468" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">auto</span> line = <span class="pl-c1">line_info</span>(s, r.<span class="pl-smi">error_pos</span>);</td>
      </tr>
      <tr>
        <td id="L2469" class="blob-num js-line-number" data-line-number="2469"></td>
        <td id="LC2469" class="blob-code blob-code-inner js-file-line">                    <span class="pl-c1">log</span>(line.<span class="pl-smi">first</span>, line.<span class="pl-smi">second</span>, <span class="pl-s"><span class="pl-pds">&quot;</span>syntax error<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L2470" class="blob-num js-line-number" data-line-number="2470"></td>
        <td id="LC2470" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L2471" class="blob-num js-line-number" data-line-number="2471"></td>
        <td id="LC2471" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L2472" class="blob-num js-line-number" data-line-number="2472"></td>
        <td id="LC2472" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> <span class="pl-c1">nullptr</span>;</td>
      </tr>
      <tr>
        <td id="L2473" class="blob-num js-line-number" data-line-number="2473"></td>
        <td id="LC2473" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L2474" class="blob-num js-line-number" data-line-number="2474"></td>
        <td id="LC2474" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2475" class="blob-num js-line-number" data-line-number="2475"></td>
        <td id="LC2475" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">auto</span>&amp; grammar = *data.<span class="pl-smi">grammar</span>;</td>
      </tr>
      <tr>
        <td id="L2476" class="blob-num js-line-number" data-line-number="2476"></td>
        <td id="LC2476" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2477" class="blob-num js-line-number" data-line-number="2477"></td>
        <td id="LC2477" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> Check duplicated definitions</span></td>
      </tr>
      <tr>
        <td id="L2478" class="blob-num js-line-number" data-line-number="2478"></td>
        <td id="LC2478" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">bool</span> ret = data.<span class="pl-smi">duplicates</span>.<span class="pl-c1">empty</span>();</td>
      </tr>
      <tr>
        <td id="L2479" class="blob-num js-line-number" data-line-number="2479"></td>
        <td id="LC2479" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2480" class="blob-num js-line-number" data-line-number="2480"></td>
        <td id="LC2480" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">for</span> (<span class="pl-k">const</span> <span class="pl-k">auto</span>&amp; x: data.<span class="pl-smi">duplicates</span>) {</td>
      </tr>
      <tr>
        <td id="L2481" class="blob-num js-line-number" data-line-number="2481"></td>
        <td id="LC2481" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-c1">log</span>) {</td>
      </tr>
      <tr>
        <td id="L2482" class="blob-num js-line-number" data-line-number="2482"></td>
        <td id="LC2482" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">const</span> <span class="pl-k">auto</span>&amp; name = x.<span class="pl-smi">first</span>;</td>
      </tr>
      <tr>
        <td id="L2483" class="blob-num js-line-number" data-line-number="2483"></td>
        <td id="LC2483" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">auto</span> ptr = x.<span class="pl-smi">second</span>;</td>
      </tr>
      <tr>
        <td id="L2484" class="blob-num js-line-number" data-line-number="2484"></td>
        <td id="LC2484" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">auto</span> line = <span class="pl-c1">line_info</span>(s, ptr);</td>
      </tr>
      <tr>
        <td id="L2485" class="blob-num js-line-number" data-line-number="2485"></td>
        <td id="LC2485" class="blob-code blob-code-inner js-file-line">                <span class="pl-c1">log</span>(line.<span class="pl-smi">first</span>, line.<span class="pl-smi">second</span>, <span class="pl-s"><span class="pl-pds">&quot;</span>&#39;<span class="pl-pds">&quot;</span></span> + name + <span class="pl-s"><span class="pl-pds">&quot;</span>&#39; is already defined.<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L2486" class="blob-num js-line-number" data-line-number="2486"></td>
        <td id="LC2486" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L2487" class="blob-num js-line-number" data-line-number="2487"></td>
        <td id="LC2487" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L2488" class="blob-num js-line-number" data-line-number="2488"></td>
        <td id="LC2488" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2489" class="blob-num js-line-number" data-line-number="2489"></td>
        <td id="LC2489" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> Check missing definitions</span></td>
      </tr>
      <tr>
        <td id="L2490" class="blob-num js-line-number" data-line-number="2490"></td>
        <td id="LC2490" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">for</span> (<span class="pl-k">const</span> <span class="pl-k">auto</span>&amp; x : data.<span class="pl-smi">references</span>) {</td>
      </tr>
      <tr>
        <td id="L2491" class="blob-num js-line-number" data-line-number="2491"></td>
        <td id="LC2491" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">const</span> <span class="pl-k">auto</span>&amp; name = x.<span class="pl-smi">first</span>;</td>
      </tr>
      <tr>
        <td id="L2492" class="blob-num js-line-number" data-line-number="2492"></td>
        <td id="LC2492" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">auto</span> ptr = x.<span class="pl-smi">second</span>;</td>
      </tr>
      <tr>
        <td id="L2493" class="blob-num js-line-number" data-line-number="2493"></td>
        <td id="LC2493" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (!grammar.<span class="pl-c1">count</span>(name)) {</td>
      </tr>
      <tr>
        <td id="L2494" class="blob-num js-line-number" data-line-number="2494"></td>
        <td id="LC2494" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">if</span> (<span class="pl-c1">log</span>) {</td>
      </tr>
      <tr>
        <td id="L2495" class="blob-num js-line-number" data-line-number="2495"></td>
        <td id="LC2495" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">auto</span> line = <span class="pl-c1">line_info</span>(s, ptr);</td>
      </tr>
      <tr>
        <td id="L2496" class="blob-num js-line-number" data-line-number="2496"></td>
        <td id="LC2496" class="blob-code blob-code-inner js-file-line">                    <span class="pl-c1">log</span>(line.<span class="pl-smi">first</span>, line.<span class="pl-smi">second</span>, <span class="pl-s"><span class="pl-pds">&quot;</span>&#39;<span class="pl-pds">&quot;</span></span> + name + <span class="pl-s"><span class="pl-pds">&quot;</span>&#39; is not defined.<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L2497" class="blob-num js-line-number" data-line-number="2497"></td>
        <td id="LC2497" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L2498" class="blob-num js-line-number" data-line-number="2498"></td>
        <td id="LC2498" class="blob-code blob-code-inner js-file-line">                ret = <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L2499" class="blob-num js-line-number" data-line-number="2499"></td>
        <td id="LC2499" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L2500" class="blob-num js-line-number" data-line-number="2500"></td>
        <td id="LC2500" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L2501" class="blob-num js-line-number" data-line-number="2501"></td>
        <td id="LC2501" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2502" class="blob-num js-line-number" data-line-number="2502"></td>
        <td id="LC2502" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (!ret) {</td>
      </tr>
      <tr>
        <td id="L2503" class="blob-num js-line-number" data-line-number="2503"></td>
        <td id="LC2503" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> <span class="pl-c1">nullptr</span>;</td>
      </tr>
      <tr>
        <td id="L2504" class="blob-num js-line-number" data-line-number="2504"></td>
        <td id="LC2504" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L2505" class="blob-num js-line-number" data-line-number="2505"></td>
        <td id="LC2505" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2506" class="blob-num js-line-number" data-line-number="2506"></td>
        <td id="LC2506" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> Check left recursion</span></td>
      </tr>
      <tr>
        <td id="L2507" class="blob-num js-line-number" data-line-number="2507"></td>
        <td id="LC2507" class="blob-code blob-code-inner js-file-line">        ret = <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L2508" class="blob-num js-line-number" data-line-number="2508"></td>
        <td id="LC2508" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2509" class="blob-num js-line-number" data-line-number="2509"></td>
        <td id="LC2509" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">for</span> (<span class="pl-k">auto</span>&amp; x: grammar) {</td>
      </tr>
      <tr>
        <td id="L2510" class="blob-num js-line-number" data-line-number="2510"></td>
        <td id="LC2510" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">const</span> <span class="pl-k">auto</span>&amp; name = x.<span class="pl-smi">first</span>;</td>
      </tr>
      <tr>
        <td id="L2511" class="blob-num js-line-number" data-line-number="2511"></td>
        <td id="LC2511" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">auto</span>&amp; rule = x.<span class="pl-smi">second</span>;</td>
      </tr>
      <tr>
        <td id="L2512" class="blob-num js-line-number" data-line-number="2512"></td>
        <td id="LC2512" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2513" class="blob-num js-line-number" data-line-number="2513"></td>
        <td id="LC2513" class="blob-code blob-code-inner js-file-line">            DetectLeftRecursion <span class="pl-smi">lr</span>(name);</td>
      </tr>
      <tr>
        <td id="L2514" class="blob-num js-line-number" data-line-number="2514"></td>
        <td id="LC2514" class="blob-code blob-code-inner js-file-line">            rule.<span class="pl-c1">accept</span>(lr);</td>
      </tr>
      <tr>
        <td id="L2515" class="blob-num js-line-number" data-line-number="2515"></td>
        <td id="LC2515" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (lr.<span class="pl-smi">s_</span>) {</td>
      </tr>
      <tr>
        <td id="L2516" class="blob-num js-line-number" data-line-number="2516"></td>
        <td id="LC2516" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">if</span> (<span class="pl-c1">log</span>) {</td>
      </tr>
      <tr>
        <td id="L2517" class="blob-num js-line-number" data-line-number="2517"></td>
        <td id="LC2517" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">auto</span> line = <span class="pl-c1">line_info</span>(s, lr.<span class="pl-smi">s_</span>);</td>
      </tr>
      <tr>
        <td id="L2518" class="blob-num js-line-number" data-line-number="2518"></td>
        <td id="LC2518" class="blob-code blob-code-inner js-file-line">                    <span class="pl-c1">log</span>(line.<span class="pl-smi">first</span>, line.<span class="pl-smi">second</span>, <span class="pl-s"><span class="pl-pds">&quot;</span>&#39;<span class="pl-pds">&quot;</span></span> + name + <span class="pl-s"><span class="pl-pds">&quot;</span>&#39; is left recursive.<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L2519" class="blob-num js-line-number" data-line-number="2519"></td>
        <td id="LC2519" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L2520" class="blob-num js-line-number" data-line-number="2520"></td>
        <td id="LC2520" class="blob-code blob-code-inner js-file-line">                ret = <span class="pl-c1">false</span>;;</td>
      </tr>
      <tr>
        <td id="L2521" class="blob-num js-line-number" data-line-number="2521"></td>
        <td id="LC2521" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L2522" class="blob-num js-line-number" data-line-number="2522"></td>
        <td id="LC2522" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L2523" class="blob-num js-line-number" data-line-number="2523"></td>
        <td id="LC2523" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2524" class="blob-num js-line-number" data-line-number="2524"></td>
        <td id="LC2524" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (!ret) {</td>
      </tr>
      <tr>
        <td id="L2525" class="blob-num js-line-number" data-line-number="2525"></td>
        <td id="LC2525" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> <span class="pl-c1">nullptr</span>;</td>
      </tr>
      <tr>
        <td id="L2526" class="blob-num js-line-number" data-line-number="2526"></td>
        <td id="LC2526" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L2527" class="blob-num js-line-number" data-line-number="2527"></td>
        <td id="LC2527" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2528" class="blob-num js-line-number" data-line-number="2528"></td>
        <td id="LC2528" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> Set root definition</span></td>
      </tr>
      <tr>
        <td id="L2529" class="blob-num js-line-number" data-line-number="2529"></td>
        <td id="LC2529" class="blob-code blob-code-inner js-file-line">        start = data.<span class="pl-smi">start</span>;</td>
      </tr>
      <tr>
        <td id="L2530" class="blob-num js-line-number" data-line-number="2530"></td>
        <td id="LC2530" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2531" class="blob-num js-line-number" data-line-number="2531"></td>
        <td id="LC2531" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> Automatic whitespace skipping</span></td>
      </tr>
      <tr>
        <td id="L2532" class="blob-num js-line-number" data-line-number="2532"></td>
        <td id="LC2532" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (grammar.<span class="pl-c1">count</span>(WHITESPACE_DEFINITION_NAME)) {</td>
      </tr>
      <tr>
        <td id="L2533" class="blob-num js-line-number" data-line-number="2533"></td>
        <td id="LC2533" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">auto</span>&amp; rule = (*data.<span class="pl-smi">grammar</span>)[start];</td>
      </tr>
      <tr>
        <td id="L2534" class="blob-num js-line-number" data-line-number="2534"></td>
        <td id="LC2534" class="blob-code blob-code-inner js-file-line">            rule.<span class="pl-smi">whitespaceOpe</span> = <span class="pl-c1">wsp</span>((*data.<span class="pl-smi">grammar</span>)[WHITESPACE_DEFINITION_NAME].<span class="pl-c1">get_core_operator</span>());</td>
      </tr>
      <tr>
        <td id="L2535" class="blob-num js-line-number" data-line-number="2535"></td>
        <td id="LC2535" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L2536" class="blob-num js-line-number" data-line-number="2536"></td>
        <td id="LC2536" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2537" class="blob-num js-line-number" data-line-number="2537"></td>
        <td id="LC2537" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> data.<span class="pl-smi">grammar</span>;</td>
      </tr>
      <tr>
        <td id="L2538" class="blob-num js-line-number" data-line-number="2538"></td>
        <td id="LC2538" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L2539" class="blob-num js-line-number" data-line-number="2539"></td>
        <td id="LC2539" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2540" class="blob-num js-line-number" data-line-number="2540"></td>
        <td id="LC2540" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">bool</span> <span class="pl-en">is_hex</span>(<span class="pl-k">char</span> c, <span class="pl-k">int</span>&amp; v) {</td>
      </tr>
      <tr>
        <td id="L2541" class="blob-num js-line-number" data-line-number="2541"></td>
        <td id="LC2541" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-s"><span class="pl-pds">&#39;</span>0<span class="pl-pds">&#39;</span></span> &lt;= c &amp;&amp; c &lt;= <span class="pl-s"><span class="pl-pds">&#39;</span>9<span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L2542" class="blob-num js-line-number" data-line-number="2542"></td>
        <td id="LC2542" class="blob-code blob-code-inner js-file-line">            v = c - <span class="pl-s"><span class="pl-pds">&#39;</span>0<span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L2543" class="blob-num js-line-number" data-line-number="2543"></td>
        <td id="LC2543" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L2544" class="blob-num js-line-number" data-line-number="2544"></td>
        <td id="LC2544" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-s"><span class="pl-pds">&#39;</span>a<span class="pl-pds">&#39;</span></span> &lt;= c &amp;&amp; c &lt;= <span class="pl-s"><span class="pl-pds">&#39;</span>f<span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L2545" class="blob-num js-line-number" data-line-number="2545"></td>
        <td id="LC2545" class="blob-code blob-code-inner js-file-line">            v = c - <span class="pl-s"><span class="pl-pds">&#39;</span>a<span class="pl-pds">&#39;</span></span> + <span class="pl-c1">10</span>;</td>
      </tr>
      <tr>
        <td id="L2546" class="blob-num js-line-number" data-line-number="2546"></td>
        <td id="LC2546" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L2547" class="blob-num js-line-number" data-line-number="2547"></td>
        <td id="LC2547" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-s"><span class="pl-pds">&#39;</span>A<span class="pl-pds">&#39;</span></span> &lt;= c &amp;&amp; c &lt;= <span class="pl-s"><span class="pl-pds">&#39;</span>F<span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L2548" class="blob-num js-line-number" data-line-number="2548"></td>
        <td id="LC2548" class="blob-code blob-code-inner js-file-line">            v = c - <span class="pl-s"><span class="pl-pds">&#39;</span>A<span class="pl-pds">&#39;</span></span> + <span class="pl-c1">10</span>;</td>
      </tr>
      <tr>
        <td id="L2549" class="blob-num js-line-number" data-line-number="2549"></td>
        <td id="LC2549" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L2550" class="blob-num js-line-number" data-line-number="2550"></td>
        <td id="LC2550" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L2551" class="blob-num js-line-number" data-line-number="2551"></td>
        <td id="LC2551" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L2552" class="blob-num js-line-number" data-line-number="2552"></td>
        <td id="LC2552" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L2553" class="blob-num js-line-number" data-line-number="2553"></td>
        <td id="LC2553" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2554" class="blob-num js-line-number" data-line-number="2554"></td>
        <td id="LC2554" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">bool</span> <span class="pl-en">is_digit</span>(<span class="pl-k">char</span> c, <span class="pl-k">int</span>&amp; v) {</td>
      </tr>
      <tr>
        <td id="L2555" class="blob-num js-line-number" data-line-number="2555"></td>
        <td id="LC2555" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-s"><span class="pl-pds">&#39;</span>0<span class="pl-pds">&#39;</span></span> &lt;= c &amp;&amp; c &lt;= <span class="pl-s"><span class="pl-pds">&#39;</span>9<span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L2556" class="blob-num js-line-number" data-line-number="2556"></td>
        <td id="LC2556" class="blob-code blob-code-inner js-file-line">            v = c - <span class="pl-s"><span class="pl-pds">&#39;</span>0<span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L2557" class="blob-num js-line-number" data-line-number="2557"></td>
        <td id="LC2557" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L2558" class="blob-num js-line-number" data-line-number="2558"></td>
        <td id="LC2558" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L2559" class="blob-num js-line-number" data-line-number="2559"></td>
        <td id="LC2559" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L2560" class="blob-num js-line-number" data-line-number="2560"></td>
        <td id="LC2560" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L2561" class="blob-num js-line-number" data-line-number="2561"></td>
        <td id="LC2561" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2562" class="blob-num js-line-number" data-line-number="2562"></td>
        <td id="LC2562" class="blob-code blob-code-inner js-file-line">    std::pair&lt;<span class="pl-k">char</span>, <span class="pl-c1">size_t</span>&gt; <span class="pl-en">parse_hex_number</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* s, <span class="pl-c1">size_t</span> n, <span class="pl-c1">size_t</span> i) {</td>
      </tr>
      <tr>
        <td id="L2563" class="blob-num js-line-number" data-line-number="2563"></td>
        <td id="LC2563" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">char</span> ret = <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L2564" class="blob-num js-line-number" data-line-number="2564"></td>
        <td id="LC2564" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">int</span> val;</td>
      </tr>
      <tr>
        <td id="L2565" class="blob-num js-line-number" data-line-number="2565"></td>
        <td id="LC2565" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">while</span> (i &lt; n &amp;&amp; <span class="pl-c1">is_hex</span>(s[i], val)) {</td>
      </tr>
      <tr>
        <td id="L2566" class="blob-num js-line-number" data-line-number="2566"></td>
        <td id="LC2566" class="blob-code blob-code-inner js-file-line">            ret = <span class="pl-k">static_cast</span>&lt;<span class="pl-k">char</span>&gt;(ret * <span class="pl-c1">16</span> + val);</td>
      </tr>
      <tr>
        <td id="L2567" class="blob-num js-line-number" data-line-number="2567"></td>
        <td id="LC2567" class="blob-code blob-code-inner js-file-line">            i++;</td>
      </tr>
      <tr>
        <td id="L2568" class="blob-num js-line-number" data-line-number="2568"></td>
        <td id="LC2568" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L2569" class="blob-num js-line-number" data-line-number="2569"></td>
        <td id="LC2569" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">std::make_pair</span>(ret, i);</td>
      </tr>
      <tr>
        <td id="L2570" class="blob-num js-line-number" data-line-number="2570"></td>
        <td id="LC2570" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L2571" class="blob-num js-line-number" data-line-number="2571"></td>
        <td id="LC2571" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2572" class="blob-num js-line-number" data-line-number="2572"></td>
        <td id="LC2572" class="blob-code blob-code-inner js-file-line">    std::pair&lt;<span class="pl-k">char</span>, <span class="pl-c1">size_t</span>&gt; <span class="pl-en">parse_octal_number</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* s, <span class="pl-c1">size_t</span> n, <span class="pl-c1">size_t</span> i) {</td>
      </tr>
      <tr>
        <td id="L2573" class="blob-num js-line-number" data-line-number="2573"></td>
        <td id="LC2573" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">char</span> ret = <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L2574" class="blob-num js-line-number" data-line-number="2574"></td>
        <td id="LC2574" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">int</span> val;</td>
      </tr>
      <tr>
        <td id="L2575" class="blob-num js-line-number" data-line-number="2575"></td>
        <td id="LC2575" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">while</span> (i &lt; n &amp;&amp; <span class="pl-c1">is_digit</span>(s[i], val)) {</td>
      </tr>
      <tr>
        <td id="L2576" class="blob-num js-line-number" data-line-number="2576"></td>
        <td id="LC2576" class="blob-code blob-code-inner js-file-line">            ret = <span class="pl-k">static_cast</span>&lt;<span class="pl-k">char</span>&gt;(ret * <span class="pl-c1">8</span> + val);</td>
      </tr>
      <tr>
        <td id="L2577" class="blob-num js-line-number" data-line-number="2577"></td>
        <td id="LC2577" class="blob-code blob-code-inner js-file-line">            i++;</td>
      </tr>
      <tr>
        <td id="L2578" class="blob-num js-line-number" data-line-number="2578"></td>
        <td id="LC2578" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L2579" class="blob-num js-line-number" data-line-number="2579"></td>
        <td id="LC2579" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">std::make_pair</span>(ret, i);</td>
      </tr>
      <tr>
        <td id="L2580" class="blob-num js-line-number" data-line-number="2580"></td>
        <td id="LC2580" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L2581" class="blob-num js-line-number" data-line-number="2581"></td>
        <td id="LC2581" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2582" class="blob-num js-line-number" data-line-number="2582"></td>
        <td id="LC2582" class="blob-code blob-code-inner js-file-line">    std::string <span class="pl-en">resolve_escape_sequence</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* s, <span class="pl-c1">size_t</span> n) {</td>
      </tr>
      <tr>
        <td id="L2583" class="blob-num js-line-number" data-line-number="2583"></td>
        <td id="LC2583" class="blob-code blob-code-inner js-file-line">        std::string r;</td>
      </tr>
      <tr>
        <td id="L2584" class="blob-num js-line-number" data-line-number="2584"></td>
        <td id="LC2584" class="blob-code blob-code-inner js-file-line">        r.<span class="pl-c1">reserve</span>(n);</td>
      </tr>
      <tr>
        <td id="L2585" class="blob-num js-line-number" data-line-number="2585"></td>
        <td id="LC2585" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2586" class="blob-num js-line-number" data-line-number="2586"></td>
        <td id="LC2586" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">size_t</span> i = <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L2587" class="blob-num js-line-number" data-line-number="2587"></td>
        <td id="LC2587" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">while</span> (i &lt; n) {</td>
      </tr>
      <tr>
        <td id="L2588" class="blob-num js-line-number" data-line-number="2588"></td>
        <td id="LC2588" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">auto</span> ch = s[i];</td>
      </tr>
      <tr>
        <td id="L2589" class="blob-num js-line-number" data-line-number="2589"></td>
        <td id="LC2589" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (ch == <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\\</span><span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L2590" class="blob-num js-line-number" data-line-number="2590"></td>
        <td id="LC2590" class="blob-code blob-code-inner js-file-line">                i++;</td>
      </tr>
      <tr>
        <td id="L2591" class="blob-num js-line-number" data-line-number="2591"></td>
        <td id="LC2591" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">switch</span> (s[i]) {</td>
      </tr>
      <tr>
        <td id="L2592" class="blob-num js-line-number" data-line-number="2592"></td>
        <td id="LC2592" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&#39;</span>n<span class="pl-pds">&#39;</span></span>:  r += <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\n</span><span class="pl-pds">&#39;</span></span>; i++; <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L2593" class="blob-num js-line-number" data-line-number="2593"></td>
        <td id="LC2593" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&#39;</span>r<span class="pl-pds">&#39;</span></span>:  r += <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\r</span><span class="pl-pds">&#39;</span></span>; i++; <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L2594" class="blob-num js-line-number" data-line-number="2594"></td>
        <td id="LC2594" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&#39;</span>t<span class="pl-pds">&#39;</span></span>:  r += <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\t</span><span class="pl-pds">&#39;</span></span>; i++; <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L2595" class="blob-num js-line-number" data-line-number="2595"></td>
        <td id="LC2595" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\&#39;</span><span class="pl-pds">&#39;</span></span>: r += <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\&#39;</span><span class="pl-pds">&#39;</span></span>; i++; <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L2596" class="blob-num js-line-number" data-line-number="2596"></td>
        <td id="LC2596" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&#39;</span>&quot;<span class="pl-pds">&#39;</span></span>:  r += <span class="pl-s"><span class="pl-pds">&#39;</span>&quot;<span class="pl-pds">&#39;</span></span>;  i++; <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L2597" class="blob-num js-line-number" data-line-number="2597"></td>
        <td id="LC2597" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&#39;</span>[<span class="pl-pds">&#39;</span></span>:  r += <span class="pl-s"><span class="pl-pds">&#39;</span>[<span class="pl-pds">&#39;</span></span>;  i++; <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L2598" class="blob-num js-line-number" data-line-number="2598"></td>
        <td id="LC2598" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&#39;</span>]<span class="pl-pds">&#39;</span></span>:  r += <span class="pl-s"><span class="pl-pds">&#39;</span>]<span class="pl-pds">&#39;</span></span>;  i++; <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L2599" class="blob-num js-line-number" data-line-number="2599"></td>
        <td id="LC2599" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\\</span><span class="pl-pds">&#39;</span></span>: r += <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\\</span><span class="pl-pds">&#39;</span></span>; i++; <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L2600" class="blob-num js-line-number" data-line-number="2600"></td>
        <td id="LC2600" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&#39;</span>x<span class="pl-pds">&#39;</span></span>: {</td>
      </tr>
      <tr>
        <td id="L2601" class="blob-num js-line-number" data-line-number="2601"></td>
        <td id="LC2601" class="blob-code blob-code-inner js-file-line">                        <span class="pl-c1">std::tie</span>(ch, i) = <span class="pl-c1">parse_hex_number</span>(s, n, i + <span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L2602" class="blob-num js-line-number" data-line-number="2602"></td>
        <td id="LC2602" class="blob-code blob-code-inner js-file-line">                        r += ch;</td>
      </tr>
      <tr>
        <td id="L2603" class="blob-num js-line-number" data-line-number="2603"></td>
        <td id="LC2603" class="blob-code blob-code-inner js-file-line">                        <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L2604" class="blob-num js-line-number" data-line-number="2604"></td>
        <td id="LC2604" class="blob-code blob-code-inner js-file-line">                    }</td>
      </tr>
      <tr>
        <td id="L2605" class="blob-num js-line-number" data-line-number="2605"></td>
        <td id="LC2605" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">default</span>: {</td>
      </tr>
      <tr>
        <td id="L2606" class="blob-num js-line-number" data-line-number="2606"></td>
        <td id="LC2606" class="blob-code blob-code-inner js-file-line">                        <span class="pl-c1">std::tie</span>(ch, i) = <span class="pl-c1">parse_octal_number</span>(s, n, i);</td>
      </tr>
      <tr>
        <td id="L2607" class="blob-num js-line-number" data-line-number="2607"></td>
        <td id="LC2607" class="blob-code blob-code-inner js-file-line">                        r += ch;</td>
      </tr>
      <tr>
        <td id="L2608" class="blob-num js-line-number" data-line-number="2608"></td>
        <td id="LC2608" class="blob-code blob-code-inner js-file-line">                        <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L2609" class="blob-num js-line-number" data-line-number="2609"></td>
        <td id="LC2609" class="blob-code blob-code-inner js-file-line">                    }</td>
      </tr>
      <tr>
        <td id="L2610" class="blob-num js-line-number" data-line-number="2610"></td>
        <td id="LC2610" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L2611" class="blob-num js-line-number" data-line-number="2611"></td>
        <td id="LC2611" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L2612" class="blob-num js-line-number" data-line-number="2612"></td>
        <td id="LC2612" class="blob-code blob-code-inner js-file-line">                r += ch;</td>
      </tr>
      <tr>
        <td id="L2613" class="blob-num js-line-number" data-line-number="2613"></td>
        <td id="LC2613" class="blob-code blob-code-inner js-file-line">                i++;</td>
      </tr>
      <tr>
        <td id="L2614" class="blob-num js-line-number" data-line-number="2614"></td>
        <td id="LC2614" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L2615" class="blob-num js-line-number" data-line-number="2615"></td>
        <td id="LC2615" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L2616" class="blob-num js-line-number" data-line-number="2616"></td>
        <td id="LC2616" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> r;</td>
      </tr>
      <tr>
        <td id="L2617" class="blob-num js-line-number" data-line-number="2617"></td>
        <td id="LC2617" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L2618" class="blob-num js-line-number" data-line-number="2618"></td>
        <td id="LC2618" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2619" class="blob-num js-line-number" data-line-number="2619"></td>
        <td id="LC2619" class="blob-code blob-code-inner js-file-line">    Grammar g;</td>
      </tr>
      <tr>
        <td id="L2620" class="blob-num js-line-number" data-line-number="2620"></td>
        <td id="LC2620" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L2621" class="blob-num js-line-number" data-line-number="2621"></td>
        <td id="LC2621" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2622" class="blob-num js-line-number" data-line-number="2622"></td>
        <td id="LC2622" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span>-----------------------------------------------------------------------------</span></td>
      </tr>
      <tr>
        <td id="L2623" class="blob-num js-line-number" data-line-number="2623"></td>
        <td id="LC2623" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *  AST</span></td>
      </tr>
      <tr>
        <td id="L2624" class="blob-num js-line-number" data-line-number="2624"></td>
        <td id="LC2624" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *---------------------------------------------------------------------------<span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L2625" class="blob-num js-line-number" data-line-number="2625"></td>
        <td id="LC2625" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2626" class="blob-num js-line-number" data-line-number="2626"></td>
        <td id="LC2626" class="blob-code blob-code-inner js-file-line"><span class="pl-k">const</span> <span class="pl-k">int</span> AstDefaultTag = -<span class="pl-c1">1</span>;</td>
      </tr>
      <tr>
        <td id="L2627" class="blob-num js-line-number" data-line-number="2627"></td>
        <td id="LC2627" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2628" class="blob-num js-line-number" data-line-number="2628"></td>
        <td id="LC2628" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifndef</span> PEGLIB_NO_CONSTEXPR_SUPPORT</td>
      </tr>
      <tr>
        <td id="L2629" class="blob-num js-line-number" data-line-number="2629"></td>
        <td id="LC2629" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">constexpr</span> <span class="pl-k">unsigned</span> <span class="pl-k">int</span> <span class="pl-en">str2tag</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* str, <span class="pl-k">int</span> h = <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L2630" class="blob-num js-line-number" data-line-number="2630"></td>
        <td id="LC2630" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> !str[h] ? <span class="pl-c1">5381</span> : (<span class="pl-c1">str2tag</span>(str, h + <span class="pl-c1">1</span>) * <span class="pl-c1">33</span>) ^ <span class="pl-k">static_cast</span>&lt;<span class="pl-k">unsigned</span> <span class="pl-k">char</span>&gt;(str[h]);</td>
      </tr>
      <tr>
        <td id="L2631" class="blob-num js-line-number" data-line-number="2631"></td>
        <td id="LC2631" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2632" class="blob-num js-line-number" data-line-number="2632"></td>
        <td id="LC2632" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2633" class="blob-num js-line-number" data-line-number="2633"></td>
        <td id="LC2633" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">udl</span> {</td>
      </tr>
      <tr>
        <td id="L2634" class="blob-num js-line-number" data-line-number="2634"></td>
        <td id="LC2634" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">constexpr</span> <span class="pl-k">unsigned</span> <span class="pl-k">int</span> <span class="pl-k">operator</span> <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span> _(<span class="pl-k">const</span> <span class="pl-k">char</span>* s, <span class="pl-c1">size_t</span>) {</td>
      </tr>
      <tr>
        <td id="L2635" class="blob-num js-line-number" data-line-number="2635"></td>
        <td id="LC2635" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-c1">str2tag</span>(s);</td>
      </tr>
      <tr>
        <td id="L2636" class="blob-num js-line-number" data-line-number="2636"></td>
        <td id="LC2636" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2637" class="blob-num js-line-number" data-line-number="2637"></td>
        <td id="LC2637" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2638" class="blob-num js-line-number" data-line-number="2638"></td>
        <td id="LC2638" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L2639" class="blob-num js-line-number" data-line-number="2639"></td>
        <td id="LC2639" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2640" class="blob-num js-line-number" data-line-number="2640"></td>
        <td id="LC2640" class="blob-code blob-code-inner js-file-line"><span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> Annotation&gt;</td>
      </tr>
      <tr>
        <td id="L2641" class="blob-num js-line-number" data-line-number="2641"></td>
        <td id="LC2641" class="blob-code blob-code-inner js-file-line"><span class="pl-k">struct</span> <span class="pl-en">AstBase</span> : <span class="pl-k">public</span> <span class="pl-en">Annotation</span></td>
      </tr>
      <tr>
        <td id="L2642" class="blob-num js-line-number" data-line-number="2642"></td>
        <td id="LC2642" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="L2643" class="blob-num js-line-number" data-line-number="2643"></td>
        <td id="LC2643" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">AstBase</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* a_path, <span class="pl-c1">size_t</span> a_line, <span class="pl-c1">size_t</span> a_column, <span class="pl-k">const</span> <span class="pl-k">char</span>* a_name, <span class="pl-k">const</span> std::vector&lt;std::shared_ptr&lt;AstBase&gt;&gt;&amp; a_nodes)</td>
      </tr>
      <tr>
        <td id="L2644" class="blob-num js-line-number" data-line-number="2644"></td>
        <td id="LC2644" class="blob-code blob-code-inner js-file-line">        : path(a_path ? a_path : <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>)</td>
      </tr>
      <tr>
        <td id="L2645" class="blob-num js-line-number" data-line-number="2645"></td>
        <td id="LC2645" class="blob-code blob-code-inner js-file-line">        , line(a_line)</td>
      </tr>
      <tr>
        <td id="L2646" class="blob-num js-line-number" data-line-number="2646"></td>
        <td id="LC2646" class="blob-code blob-code-inner js-file-line">        , column(a_column)</td>
      </tr>
      <tr>
        <td id="L2647" class="blob-num js-line-number" data-line-number="2647"></td>
        <td id="LC2647" class="blob-code blob-code-inner js-file-line">        , name(a_name)</td>
      </tr>
      <tr>
        <td id="L2648" class="blob-num js-line-number" data-line-number="2648"></td>
        <td id="LC2648" class="blob-code blob-code-inner js-file-line">        , original_name(a_name)</td>
      </tr>
      <tr>
        <td id="L2649" class="blob-num js-line-number" data-line-number="2649"></td>
        <td id="LC2649" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifndef</span> PEGLIB_NO_CONSTEXPR_SUPPORT</td>
      </tr>
      <tr>
        <td id="L2650" class="blob-num js-line-number" data-line-number="2650"></td>
        <td id="LC2650" class="blob-code blob-code-inner js-file-line">        , tag(str2tag(a_name))</td>
      </tr>
      <tr>
        <td id="L2651" class="blob-num js-line-number" data-line-number="2651"></td>
        <td id="LC2651" class="blob-code blob-code-inner js-file-line">        , original_tag(tag)</td>
      </tr>
      <tr>
        <td id="L2652" class="blob-num js-line-number" data-line-number="2652"></td>
        <td id="LC2652" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L2653" class="blob-num js-line-number" data-line-number="2653"></td>
        <td id="LC2653" class="blob-code blob-code-inner js-file-line">        , is_token(<span class="pl-c1">false</span>)</td>
      </tr>
      <tr>
        <td id="L2654" class="blob-num js-line-number" data-line-number="2654"></td>
        <td id="LC2654" class="blob-code blob-code-inner js-file-line">        , nodes(a_nodes)</td>
      </tr>
      <tr>
        <td id="L2655" class="blob-num js-line-number" data-line-number="2655"></td>
        <td id="LC2655" class="blob-code blob-code-inner js-file-line">    {}</td>
      </tr>
      <tr>
        <td id="L2656" class="blob-num js-line-number" data-line-number="2656"></td>
        <td id="LC2656" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2657" class="blob-num js-line-number" data-line-number="2657"></td>
        <td id="LC2657" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">AstBase</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* a_path, <span class="pl-c1">size_t</span> a_line, <span class="pl-c1">size_t</span> a_column, <span class="pl-k">const</span> <span class="pl-k">char</span>* a_name, <span class="pl-k">const</span> std::string&amp; a_token)</td>
      </tr>
      <tr>
        <td id="L2658" class="blob-num js-line-number" data-line-number="2658"></td>
        <td id="LC2658" class="blob-code blob-code-inner js-file-line">        : path(a_path ? a_path : <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>)</td>
      </tr>
      <tr>
        <td id="L2659" class="blob-num js-line-number" data-line-number="2659"></td>
        <td id="LC2659" class="blob-code blob-code-inner js-file-line">        , line(a_line)</td>
      </tr>
      <tr>
        <td id="L2660" class="blob-num js-line-number" data-line-number="2660"></td>
        <td id="LC2660" class="blob-code blob-code-inner js-file-line">        , column(a_column)</td>
      </tr>
      <tr>
        <td id="L2661" class="blob-num js-line-number" data-line-number="2661"></td>
        <td id="LC2661" class="blob-code blob-code-inner js-file-line">        , name(a_name)</td>
      </tr>
      <tr>
        <td id="L2662" class="blob-num js-line-number" data-line-number="2662"></td>
        <td id="LC2662" class="blob-code blob-code-inner js-file-line">        , original_name(a_name)</td>
      </tr>
      <tr>
        <td id="L2663" class="blob-num js-line-number" data-line-number="2663"></td>
        <td id="LC2663" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifndef</span> PEGLIB_NO_CONSTEXPR_SUPPORT</td>
      </tr>
      <tr>
        <td id="L2664" class="blob-num js-line-number" data-line-number="2664"></td>
        <td id="LC2664" class="blob-code blob-code-inner js-file-line">        , tag(str2tag(a_name))</td>
      </tr>
      <tr>
        <td id="L2665" class="blob-num js-line-number" data-line-number="2665"></td>
        <td id="LC2665" class="blob-code blob-code-inner js-file-line">        , original_tag(tag)</td>
      </tr>
      <tr>
        <td id="L2666" class="blob-num js-line-number" data-line-number="2666"></td>
        <td id="LC2666" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L2667" class="blob-num js-line-number" data-line-number="2667"></td>
        <td id="LC2667" class="blob-code blob-code-inner js-file-line">        , is_token(<span class="pl-c1">true</span>)</td>
      </tr>
      <tr>
        <td id="L2668" class="blob-num js-line-number" data-line-number="2668"></td>
        <td id="LC2668" class="blob-code blob-code-inner js-file-line">        , token(a_token)</td>
      </tr>
      <tr>
        <td id="L2669" class="blob-num js-line-number" data-line-number="2669"></td>
        <td id="LC2669" class="blob-code blob-code-inner js-file-line">    {}</td>
      </tr>
      <tr>
        <td id="L2670" class="blob-num js-line-number" data-line-number="2670"></td>
        <td id="LC2670" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2671" class="blob-num js-line-number" data-line-number="2671"></td>
        <td id="LC2671" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">AstBase</span>(<span class="pl-k">const</span> AstBase&amp; ast, <span class="pl-k">const</span> <span class="pl-k">char</span>* a_original_name)</td>
      </tr>
      <tr>
        <td id="L2672" class="blob-num js-line-number" data-line-number="2672"></td>
        <td id="LC2672" class="blob-code blob-code-inner js-file-line">        : path(ast.path)</td>
      </tr>
      <tr>
        <td id="L2673" class="blob-num js-line-number" data-line-number="2673"></td>
        <td id="LC2673" class="blob-code blob-code-inner js-file-line">        , line(ast.line)</td>
      </tr>
      <tr>
        <td id="L2674" class="blob-num js-line-number" data-line-number="2674"></td>
        <td id="LC2674" class="blob-code blob-code-inner js-file-line">        , column(ast.column)</td>
      </tr>
      <tr>
        <td id="L2675" class="blob-num js-line-number" data-line-number="2675"></td>
        <td id="LC2675" class="blob-code blob-code-inner js-file-line">        , name(ast.name)</td>
      </tr>
      <tr>
        <td id="L2676" class="blob-num js-line-number" data-line-number="2676"></td>
        <td id="LC2676" class="blob-code blob-code-inner js-file-line">        , original_name(a_original_name)</td>
      </tr>
      <tr>
        <td id="L2677" class="blob-num js-line-number" data-line-number="2677"></td>
        <td id="LC2677" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifndef</span> PEGLIB_NO_CONSTEXPR_SUPPORT</td>
      </tr>
      <tr>
        <td id="L2678" class="blob-num js-line-number" data-line-number="2678"></td>
        <td id="LC2678" class="blob-code blob-code-inner js-file-line">        , tag(ast.tag)</td>
      </tr>
      <tr>
        <td id="L2679" class="blob-num js-line-number" data-line-number="2679"></td>
        <td id="LC2679" class="blob-code blob-code-inner js-file-line">        , original_tag(str2tag(a_original_name))</td>
      </tr>
      <tr>
        <td id="L2680" class="blob-num js-line-number" data-line-number="2680"></td>
        <td id="LC2680" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L2681" class="blob-num js-line-number" data-line-number="2681"></td>
        <td id="LC2681" class="blob-code blob-code-inner js-file-line">        , is_token(ast.is_token)</td>
      </tr>
      <tr>
        <td id="L2682" class="blob-num js-line-number" data-line-number="2682"></td>
        <td id="LC2682" class="blob-code blob-code-inner js-file-line">        , token(ast.token)</td>
      </tr>
      <tr>
        <td id="L2683" class="blob-num js-line-number" data-line-number="2683"></td>
        <td id="LC2683" class="blob-code blob-code-inner js-file-line">        , nodes(ast.nodes)</td>
      </tr>
      <tr>
        <td id="L2684" class="blob-num js-line-number" data-line-number="2684"></td>
        <td id="LC2684" class="blob-code blob-code-inner js-file-line">        , parent(ast.parent)</td>
      </tr>
      <tr>
        <td id="L2685" class="blob-num js-line-number" data-line-number="2685"></td>
        <td id="LC2685" class="blob-code blob-code-inner js-file-line">    {}</td>
      </tr>
      <tr>
        <td id="L2686" class="blob-num js-line-number" data-line-number="2686"></td>
        <td id="LC2686" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2687" class="blob-num js-line-number" data-line-number="2687"></td>
        <td id="LC2687" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> std::string                 path;</td>
      </tr>
      <tr>
        <td id="L2688" class="blob-num js-line-number" data-line-number="2688"></td>
        <td id="LC2688" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> <span class="pl-c1">size_t</span>                      line;</td>
      </tr>
      <tr>
        <td id="L2689" class="blob-num js-line-number" data-line-number="2689"></td>
        <td id="LC2689" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> <span class="pl-c1">size_t</span>                      column;</td>
      </tr>
      <tr>
        <td id="L2690" class="blob-num js-line-number" data-line-number="2690"></td>
        <td id="LC2690" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2691" class="blob-num js-line-number" data-line-number="2691"></td>
        <td id="LC2691" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> std::string                 name;</td>
      </tr>
      <tr>
        <td id="L2692" class="blob-num js-line-number" data-line-number="2692"></td>
        <td id="LC2692" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> std::string                 original_name;</td>
      </tr>
      <tr>
        <td id="L2693" class="blob-num js-line-number" data-line-number="2693"></td>
        <td id="LC2693" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifndef</span> PEGLIB_NO_CONSTEXPR_SUPPORT</td>
      </tr>
      <tr>
        <td id="L2694" class="blob-num js-line-number" data-line-number="2694"></td>
        <td id="LC2694" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> <span class="pl-k">unsigned</span> <span class="pl-k">int</span>                tag;</td>
      </tr>
      <tr>
        <td id="L2695" class="blob-num js-line-number" data-line-number="2695"></td>
        <td id="LC2695" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> <span class="pl-k">unsigned</span> <span class="pl-k">int</span>                original_tag;</td>
      </tr>
      <tr>
        <td id="L2696" class="blob-num js-line-number" data-line-number="2696"></td>
        <td id="LC2696" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L2697" class="blob-num js-line-number" data-line-number="2697"></td>
        <td id="LC2697" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2698" class="blob-num js-line-number" data-line-number="2698"></td>
        <td id="LC2698" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> <span class="pl-k">bool</span>                        is_token;</td>
      </tr>
      <tr>
        <td id="L2699" class="blob-num js-line-number" data-line-number="2699"></td>
        <td id="LC2699" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> std::string                 token;</td>
      </tr>
      <tr>
        <td id="L2700" class="blob-num js-line-number" data-line-number="2700"></td>
        <td id="LC2700" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2701" class="blob-num js-line-number" data-line-number="2701"></td>
        <td id="LC2701" class="blob-code blob-code-inner js-file-line">    std::vector&lt;std::shared_ptr&lt;AstBase&lt;Annotation&gt;&gt;&gt; nodes;</td>
      </tr>
      <tr>
        <td id="L2702" class="blob-num js-line-number" data-line-number="2702"></td>
        <td id="LC2702" class="blob-code blob-code-inner js-file-line">    std::shared_ptr&lt;AstBase&lt;Annotation&gt;&gt;              parent;</td>
      </tr>
      <tr>
        <td id="L2703" class="blob-num js-line-number" data-line-number="2703"></td>
        <td id="LC2703" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L2704" class="blob-num js-line-number" data-line-number="2704"></td>
        <td id="LC2704" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2705" class="blob-num js-line-number" data-line-number="2705"></td>
        <td id="LC2705" class="blob-code blob-code-inner js-file-line"><span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> T&gt;</td>
      </tr>
      <tr>
        <td id="L2706" class="blob-num js-line-number" data-line-number="2706"></td>
        <td id="LC2706" class="blob-code blob-code-inner js-file-line"><span class="pl-k">void</span> <span class="pl-en">ast_to_s_core</span>(</td>
      </tr>
      <tr>
        <td id="L2707" class="blob-num js-line-number" data-line-number="2707"></td>
        <td id="LC2707" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> std::shared_ptr&lt;T&gt;&amp; ptr,</td>
      </tr>
      <tr>
        <td id="L2708" class="blob-num js-line-number" data-line-number="2708"></td>
        <td id="LC2708" class="blob-code blob-code-inner js-file-line">    std::string&amp; s,</td>
      </tr>
      <tr>
        <td id="L2709" class="blob-num js-line-number" data-line-number="2709"></td>
        <td id="LC2709" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">int</span> level,</td>
      </tr>
      <tr>
        <td id="L2710" class="blob-num js-line-number" data-line-number="2710"></td>
        <td id="LC2710" class="blob-code blob-code-inner js-file-line">    std::function&lt;std::string (<span class="pl-k">const</span> T&amp; ast, <span class="pl-k">int</span> level)&gt; fn) {</td>
      </tr>
      <tr>
        <td id="L2711" class="blob-num js-line-number" data-line-number="2711"></td>
        <td id="LC2711" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2712" class="blob-num js-line-number" data-line-number="2712"></td>
        <td id="LC2712" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> <span class="pl-k">auto</span>&amp; ast = *ptr;</td>
      </tr>
      <tr>
        <td id="L2713" class="blob-num js-line-number" data-line-number="2713"></td>
        <td id="LC2713" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">for</span> (<span class="pl-k">auto</span> i = <span class="pl-c1">0</span>; i &lt; level; i++) {</td>
      </tr>
      <tr>
        <td id="L2714" class="blob-num js-line-number" data-line-number="2714"></td>
        <td id="LC2714" class="blob-code blob-code-inner js-file-line">        s += <span class="pl-s"><span class="pl-pds">&quot;</span>  <span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L2715" class="blob-num js-line-number" data-line-number="2715"></td>
        <td id="LC2715" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L2716" class="blob-num js-line-number" data-line-number="2716"></td>
        <td id="LC2716" class="blob-code blob-code-inner js-file-line">    std::string name;</td>
      </tr>
      <tr>
        <td id="L2717" class="blob-num js-line-number" data-line-number="2717"></td>
        <td id="LC2717" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (ast.<span class="pl-smi">name</span> == ast.<span class="pl-smi">original_name</span>) {</td>
      </tr>
      <tr>
        <td id="L2718" class="blob-num js-line-number" data-line-number="2718"></td>
        <td id="LC2718" class="blob-code blob-code-inner js-file-line">        name = ast.<span class="pl-smi">name</span>;</td>
      </tr>
      <tr>
        <td id="L2719" class="blob-num js-line-number" data-line-number="2719"></td>
        <td id="LC2719" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L2720" class="blob-num js-line-number" data-line-number="2720"></td>
        <td id="LC2720" class="blob-code blob-code-inner js-file-line">        name = ast.<span class="pl-smi">original_name</span> + <span class="pl-s"><span class="pl-pds">&quot;</span>[<span class="pl-pds">&quot;</span></span> + ast.<span class="pl-smi">name</span> + <span class="pl-s"><span class="pl-pds">&quot;</span>]<span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L2721" class="blob-num js-line-number" data-line-number="2721"></td>
        <td id="LC2721" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L2722" class="blob-num js-line-number" data-line-number="2722"></td>
        <td id="LC2722" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (ast.<span class="pl-smi">is_token</span>) {</td>
      </tr>
      <tr>
        <td id="L2723" class="blob-num js-line-number" data-line-number="2723"></td>
        <td id="LC2723" class="blob-code blob-code-inner js-file-line">        s += <span class="pl-s"><span class="pl-pds">&quot;</span>- <span class="pl-pds">&quot;</span></span> + name + <span class="pl-s"><span class="pl-pds">&quot;</span> (<span class="pl-pds">&quot;</span></span> + ast.<span class="pl-smi">token</span> + <span class="pl-s"><span class="pl-pds">&quot;</span>)<span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L2724" class="blob-num js-line-number" data-line-number="2724"></td>
        <td id="LC2724" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L2725" class="blob-num js-line-number" data-line-number="2725"></td>
        <td id="LC2725" class="blob-code blob-code-inner js-file-line">        s += <span class="pl-s"><span class="pl-pds">&quot;</span>+ <span class="pl-pds">&quot;</span></span> + name + <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L2726" class="blob-num js-line-number" data-line-number="2726"></td>
        <td id="LC2726" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L2727" class="blob-num js-line-number" data-line-number="2727"></td>
        <td id="LC2727" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (fn) {</td>
      </tr>
      <tr>
        <td id="L2728" class="blob-num js-line-number" data-line-number="2728"></td>
        <td id="LC2728" class="blob-code blob-code-inner js-file-line">      s += <span class="pl-c1">fn</span>(ast, level + <span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L2729" class="blob-num js-line-number" data-line-number="2729"></td>
        <td id="LC2729" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L2730" class="blob-num js-line-number" data-line-number="2730"></td>
        <td id="LC2730" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">for</span> (<span class="pl-k">auto</span> node : ast.<span class="pl-smi">nodes</span>) {</td>
      </tr>
      <tr>
        <td id="L2731" class="blob-num js-line-number" data-line-number="2731"></td>
        <td id="LC2731" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">ast_to_s_core</span>(node, s, level + <span class="pl-c1">1</span>, fn);</td>
      </tr>
      <tr>
        <td id="L2732" class="blob-num js-line-number" data-line-number="2732"></td>
        <td id="LC2732" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L2733" class="blob-num js-line-number" data-line-number="2733"></td>
        <td id="LC2733" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2734" class="blob-num js-line-number" data-line-number="2734"></td>
        <td id="LC2734" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2735" class="blob-num js-line-number" data-line-number="2735"></td>
        <td id="LC2735" class="blob-code blob-code-inner js-file-line"><span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> T&gt;</td>
      </tr>
      <tr>
        <td id="L2736" class="blob-num js-line-number" data-line-number="2736"></td>
        <td id="LC2736" class="blob-code blob-code-inner js-file-line">std::string <span class="pl-en">ast_to_s</span>(</td>
      </tr>
      <tr>
        <td id="L2737" class="blob-num js-line-number" data-line-number="2737"></td>
        <td id="LC2737" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> std::shared_ptr&lt;T&gt;&amp; ptr,</td>
      </tr>
      <tr>
        <td id="L2738" class="blob-num js-line-number" data-line-number="2738"></td>
        <td id="LC2738" class="blob-code blob-code-inner js-file-line">    std::function&lt;std::string (<span class="pl-k">const</span> T&amp; ast, <span class="pl-k">int</span> level)&gt; fn = nullptr) {</td>
      </tr>
      <tr>
        <td id="L2739" class="blob-num js-line-number" data-line-number="2739"></td>
        <td id="LC2739" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2740" class="blob-num js-line-number" data-line-number="2740"></td>
        <td id="LC2740" class="blob-code blob-code-inner js-file-line">    std::string s;</td>
      </tr>
      <tr>
        <td id="L2741" class="blob-num js-line-number" data-line-number="2741"></td>
        <td id="LC2741" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">ast_to_s_core</span>(ptr, s, <span class="pl-c1">0</span>, fn);</td>
      </tr>
      <tr>
        <td id="L2742" class="blob-num js-line-number" data-line-number="2742"></td>
        <td id="LC2742" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> s;</td>
      </tr>
      <tr>
        <td id="L2743" class="blob-num js-line-number" data-line-number="2743"></td>
        <td id="LC2743" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2744" class="blob-num js-line-number" data-line-number="2744"></td>
        <td id="LC2744" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2745" class="blob-num js-line-number" data-line-number="2745"></td>
        <td id="LC2745" class="blob-code blob-code-inner js-file-line"><span class="pl-k">struct</span> <span class="pl-en">AstOptimizer</span></td>
      </tr>
      <tr>
        <td id="L2746" class="blob-num js-line-number" data-line-number="2746"></td>
        <td id="LC2746" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="L2747" class="blob-num js-line-number" data-line-number="2747"></td>
        <td id="LC2747" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">AstOptimizer</span>(<span class="pl-k">bool</span> optimize_nodes, <span class="pl-k">const</span> std::vector&lt;std::string&gt;&amp; filters = {})</td>
      </tr>
      <tr>
        <td id="L2748" class="blob-num js-line-number" data-line-number="2748"></td>
        <td id="LC2748" class="blob-code blob-code-inner js-file-line">        : optimize_nodes_(optimize_nodes)</td>
      </tr>
      <tr>
        <td id="L2749" class="blob-num js-line-number" data-line-number="2749"></td>
        <td id="LC2749" class="blob-code blob-code-inner js-file-line">        , filters_(filters) {}</td>
      </tr>
      <tr>
        <td id="L2750" class="blob-num js-line-number" data-line-number="2750"></td>
        <td id="LC2750" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2751" class="blob-num js-line-number" data-line-number="2751"></td>
        <td id="LC2751" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> T&gt;</td>
      </tr>
      <tr>
        <td id="L2752" class="blob-num js-line-number" data-line-number="2752"></td>
        <td id="LC2752" class="blob-code blob-code-inner js-file-line">    std::shared_ptr&lt;T&gt; <span class="pl-en">optimize</span>(std::shared_ptr&lt;T&gt; original, std::shared_ptr&lt;T&gt; parent = <span class="pl-c1">nullptr</span>) {</td>
      </tr>
      <tr>
        <td id="L2753" class="blob-num js-line-number" data-line-number="2753"></td>
        <td id="LC2753" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2754" class="blob-num js-line-number" data-line-number="2754"></td>
        <td id="LC2754" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">auto</span> found = <span class="pl-c1">std::find</span>(filters_.<span class="pl-c1">begin</span>(), filters_.<span class="pl-c1">end</span>(), original-&gt;name) != filters_.<span class="pl-c1">end</span>();</td>
      </tr>
      <tr>
        <td id="L2755" class="blob-num js-line-number" data-line-number="2755"></td>
        <td id="LC2755" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">bool</span> opt = optimize_nodes_ ? !found : found;</td>
      </tr>
      <tr>
        <td id="L2756" class="blob-num js-line-number" data-line-number="2756"></td>
        <td id="LC2756" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2757" class="blob-num js-line-number" data-line-number="2757"></td>
        <td id="LC2757" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (opt &amp;&amp; original-&gt;nodes.<span class="pl-c1">size</span>() == <span class="pl-c1">1</span>) {</td>
      </tr>
      <tr>
        <td id="L2758" class="blob-num js-line-number" data-line-number="2758"></td>
        <td id="LC2758" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">auto</span> child = <span class="pl-c1">optimize</span>(original-&gt;nodes[<span class="pl-c1">0</span>], parent);</td>
      </tr>
      <tr>
        <td id="L2759" class="blob-num js-line-number" data-line-number="2759"></td>
        <td id="LC2759" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> std::make_shared&lt;T&gt;(*child, original-&gt;name.<span class="pl-c1">c_str</span>());</td>
      </tr>
      <tr>
        <td id="L2760" class="blob-num js-line-number" data-line-number="2760"></td>
        <td id="LC2760" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L2761" class="blob-num js-line-number" data-line-number="2761"></td>
        <td id="LC2761" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2762" class="blob-num js-line-number" data-line-number="2762"></td>
        <td id="LC2762" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">auto</span> ast = std::make_shared&lt;T&gt;(*original);</td>
      </tr>
      <tr>
        <td id="L2763" class="blob-num js-line-number" data-line-number="2763"></td>
        <td id="LC2763" class="blob-code blob-code-inner js-file-line">        ast-&gt;parent = parent;</td>
      </tr>
      <tr>
        <td id="L2764" class="blob-num js-line-number" data-line-number="2764"></td>
        <td id="LC2764" class="blob-code blob-code-inner js-file-line">        ast-&gt;nodes.<span class="pl-c1">clear</span>();</td>
      </tr>
      <tr>
        <td id="L2765" class="blob-num js-line-number" data-line-number="2765"></td>
        <td id="LC2765" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">for</span> (<span class="pl-k">auto</span> node : original-&gt;nodes) {</td>
      </tr>
      <tr>
        <td id="L2766" class="blob-num js-line-number" data-line-number="2766"></td>
        <td id="LC2766" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">auto</span> child = <span class="pl-c1">optimize</span>(node, ast);</td>
      </tr>
      <tr>
        <td id="L2767" class="blob-num js-line-number" data-line-number="2767"></td>
        <td id="LC2767" class="blob-code blob-code-inner js-file-line">            ast-&gt;nodes.<span class="pl-c1">push_back</span>(child);</td>
      </tr>
      <tr>
        <td id="L2768" class="blob-num js-line-number" data-line-number="2768"></td>
        <td id="LC2768" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L2769" class="blob-num js-line-number" data-line-number="2769"></td>
        <td id="LC2769" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> ast;</td>
      </tr>
      <tr>
        <td id="L2770" class="blob-num js-line-number" data-line-number="2770"></td>
        <td id="LC2770" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L2771" class="blob-num js-line-number" data-line-number="2771"></td>
        <td id="LC2771" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2772" class="blob-num js-line-number" data-line-number="2772"></td>
        <td id="LC2772" class="blob-code blob-code-inner js-file-line"><span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L2773" class="blob-num js-line-number" data-line-number="2773"></td>
        <td id="LC2773" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> <span class="pl-k">bool</span>                     optimize_nodes_;</td>
      </tr>
      <tr>
        <td id="L2774" class="blob-num js-line-number" data-line-number="2774"></td>
        <td id="LC2774" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> std::vector&lt;std::string&gt; filters_;</td>
      </tr>
      <tr>
        <td id="L2775" class="blob-num js-line-number" data-line-number="2775"></td>
        <td id="LC2775" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L2776" class="blob-num js-line-number" data-line-number="2776"></td>
        <td id="LC2776" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2777" class="blob-num js-line-number" data-line-number="2777"></td>
        <td id="LC2777" class="blob-code blob-code-inner js-file-line"><span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> T&gt;</td>
      </tr>
      <tr>
        <td id="L2778" class="blob-num js-line-number" data-line-number="2778"></td>
        <td id="LC2778" class="blob-code blob-code-inner js-file-line"><span class="pl-k">static</span> std::shared_ptr&lt;T&gt; <span class="pl-en">optimize_ast</span>(</td>
      </tr>
      <tr>
        <td id="L2779" class="blob-num js-line-number" data-line-number="2779"></td>
        <td id="LC2779" class="blob-code blob-code-inner js-file-line">    std::shared_ptr&lt;T&gt; ast,</td>
      </tr>
      <tr>
        <td id="L2780" class="blob-num js-line-number" data-line-number="2780"></td>
        <td id="LC2780" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> std::vector&lt;std::string&gt;&amp; filters = {}) {</td>
      </tr>
      <tr>
        <td id="L2781" class="blob-num js-line-number" data-line-number="2781"></td>
        <td id="LC2781" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-c1">AstOptimizer</span>(<span class="pl-c1">true</span>, filters).<span class="pl-c1">optimize</span>(ast);</td>
      </tr>
      <tr>
        <td id="L2782" class="blob-num js-line-number" data-line-number="2782"></td>
        <td id="LC2782" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L2783" class="blob-num js-line-number" data-line-number="2783"></td>
        <td id="LC2783" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2784" class="blob-num js-line-number" data-line-number="2784"></td>
        <td id="LC2784" class="blob-code blob-code-inner js-file-line"><span class="pl-k">struct</span> <span class="pl-en">EmptyType</span> {};</td>
      </tr>
      <tr>
        <td id="L2785" class="blob-num js-line-number" data-line-number="2785"></td>
        <td id="LC2785" class="blob-code blob-code-inner js-file-line"><span class="pl-k">typedef</span> AstBase&lt;EmptyType&gt; Ast;</td>
      </tr>
      <tr>
        <td id="L2786" class="blob-num js-line-number" data-line-number="2786"></td>
        <td id="LC2786" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2787" class="blob-num js-line-number" data-line-number="2787"></td>
        <td id="LC2787" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span>-----------------------------------------------------------------------------</span></td>
      </tr>
      <tr>
        <td id="L2788" class="blob-num js-line-number" data-line-number="2788"></td>
        <td id="LC2788" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *  parser</span></td>
      </tr>
      <tr>
        <td id="L2789" class="blob-num js-line-number" data-line-number="2789"></td>
        <td id="LC2789" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *---------------------------------------------------------------------------<span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L2790" class="blob-num js-line-number" data-line-number="2790"></td>
        <td id="LC2790" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2791" class="blob-num js-line-number" data-line-number="2791"></td>
        <td id="LC2791" class="blob-code blob-code-inner js-file-line"><span class="pl-k">class</span> <span class="pl-en">parser</span></td>
      </tr>
      <tr>
        <td id="L2792" class="blob-num js-line-number" data-line-number="2792"></td>
        <td id="LC2792" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="L2793" class="blob-num js-line-number" data-line-number="2793"></td>
        <td id="LC2793" class="blob-code blob-code-inner js-file-line"><span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L2794" class="blob-num js-line-number" data-line-number="2794"></td>
        <td id="LC2794" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">parser</span>() = <span class="pl-k">default</span>;</td>
      </tr>
      <tr>
        <td id="L2795" class="blob-num js-line-number" data-line-number="2795"></td>
        <td id="LC2795" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2796" class="blob-num js-line-number" data-line-number="2796"></td>
        <td id="LC2796" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">parser</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* s, <span class="pl-c1">size_t</span> n) {</td>
      </tr>
      <tr>
        <td id="L2797" class="blob-num js-line-number" data-line-number="2797"></td>
        <td id="LC2797" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">load_grammar</span>(s, n);</td>
      </tr>
      <tr>
        <td id="L2798" class="blob-num js-line-number" data-line-number="2798"></td>
        <td id="LC2798" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L2799" class="blob-num js-line-number" data-line-number="2799"></td>
        <td id="LC2799" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2800" class="blob-num js-line-number" data-line-number="2800"></td>
        <td id="LC2800" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">parser</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* s)</td>
      </tr>
      <tr>
        <td id="L2801" class="blob-num js-line-number" data-line-number="2801"></td>
        <td id="LC2801" class="blob-code blob-code-inner js-file-line">        : parser(s, strlen(s)) {}</td>
      </tr>
      <tr>
        <td id="L2802" class="blob-num js-line-number" data-line-number="2802"></td>
        <td id="LC2802" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2803" class="blob-num js-line-number" data-line-number="2803"></td>
        <td id="LC2803" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">operator</span> <span class="pl-en">bool</span>() {</td>
      </tr>
      <tr>
        <td id="L2804" class="blob-num js-line-number" data-line-number="2804"></td>
        <td id="LC2804" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> grammar_ != <span class="pl-c1">nullptr</span>;</td>
      </tr>
      <tr>
        <td id="L2805" class="blob-num js-line-number" data-line-number="2805"></td>
        <td id="LC2805" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L2806" class="blob-num js-line-number" data-line-number="2806"></td>
        <td id="LC2806" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2807" class="blob-num js-line-number" data-line-number="2807"></td>
        <td id="LC2807" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">bool</span> <span class="pl-en">load_grammar</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* s, <span class="pl-c1">size_t</span> n) {</td>
      </tr>
      <tr>
        <td id="L2808" class="blob-num js-line-number" data-line-number="2808"></td>
        <td id="LC2808" class="blob-code blob-code-inner js-file-line">        grammar_ = <span class="pl-c1">ParserGenerator::parse</span>(</td>
      </tr>
      <tr>
        <td id="L2809" class="blob-num js-line-number" data-line-number="2809"></td>
        <td id="LC2809" class="blob-code blob-code-inner js-file-line">            s, n,</td>
      </tr>
      <tr>
        <td id="L2810" class="blob-num js-line-number" data-line-number="2810"></td>
        <td id="LC2810" class="blob-code blob-code-inner js-file-line">            start_,</td>
      </tr>
      <tr>
        <td id="L2811" class="blob-num js-line-number" data-line-number="2811"></td>
        <td id="LC2811" class="blob-code blob-code-inner js-file-line">            [&amp;](<span class="pl-k">const</span> <span class="pl-k">char</span>* a_s, <span class="pl-c1">size_t</span> a_n, <span class="pl-c1">size_t</span> a_id, <span class="pl-k">const</span> std::string&amp; a_name) {</td>
      </tr>
      <tr>
        <td id="L2812" class="blob-num js-line-number" data-line-number="2812"></td>
        <td id="LC2812" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">if</span> (match_action) <span class="pl-c1">match_action</span>(a_s, a_n, a_id, a_name);</td>
      </tr>
      <tr>
        <td id="L2813" class="blob-num js-line-number" data-line-number="2813"></td>
        <td id="LC2813" class="blob-code blob-code-inner js-file-line">            },</td>
      </tr>
      <tr>
        <td id="L2814" class="blob-num js-line-number" data-line-number="2814"></td>
        <td id="LC2814" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">log</span>);</td>
      </tr>
      <tr>
        <td id="L2815" class="blob-num js-line-number" data-line-number="2815"></td>
        <td id="LC2815" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2816" class="blob-num js-line-number" data-line-number="2816"></td>
        <td id="LC2816" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> grammar_ != <span class="pl-c1">nullptr</span>;</td>
      </tr>
      <tr>
        <td id="L2817" class="blob-num js-line-number" data-line-number="2817"></td>
        <td id="LC2817" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L2818" class="blob-num js-line-number" data-line-number="2818"></td>
        <td id="LC2818" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2819" class="blob-num js-line-number" data-line-number="2819"></td>
        <td id="LC2819" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">bool</span> <span class="pl-en">load_grammar</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* s) {</td>
      </tr>
      <tr>
        <td id="L2820" class="blob-num js-line-number" data-line-number="2820"></td>
        <td id="LC2820" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">auto</span> n = <span class="pl-c1">strlen</span>(s);</td>
      </tr>
      <tr>
        <td id="L2821" class="blob-num js-line-number" data-line-number="2821"></td>
        <td id="LC2821" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">load_grammar</span>(s, n);</td>
      </tr>
      <tr>
        <td id="L2822" class="blob-num js-line-number" data-line-number="2822"></td>
        <td id="LC2822" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L2823" class="blob-num js-line-number" data-line-number="2823"></td>
        <td id="LC2823" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2824" class="blob-num js-line-number" data-line-number="2824"></td>
        <td id="LC2824" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">bool</span> <span class="pl-en">parse_n</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* s, <span class="pl-c1">size_t</span> n, <span class="pl-k">const</span> <span class="pl-k">char</span>* path = <span class="pl-c1">nullptr</span>) <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L2825" class="blob-num js-line-number" data-line-number="2825"></td>
        <td id="LC2825" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (grammar_ != <span class="pl-c1">nullptr</span>) {</td>
      </tr>
      <tr>
        <td id="L2826" class="blob-num js-line-number" data-line-number="2826"></td>
        <td id="LC2826" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">const</span> <span class="pl-k">auto</span>&amp; rule = (*grammar_)[start_];</td>
      </tr>
      <tr>
        <td id="L2827" class="blob-num js-line-number" data-line-number="2827"></td>
        <td id="LC2827" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">auto</span> r = rule.<span class="pl-c1">parse</span>(s, n, path);</td>
      </tr>
      <tr>
        <td id="L2828" class="blob-num js-line-number" data-line-number="2828"></td>
        <td id="LC2828" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">output_log</span>(s, n, r);</td>
      </tr>
      <tr>
        <td id="L2829" class="blob-num js-line-number" data-line-number="2829"></td>
        <td id="LC2829" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> r.<span class="pl-smi">ret</span> &amp;&amp; r.<span class="pl-smi">len</span> == n;</td>
      </tr>
      <tr>
        <td id="L2830" class="blob-num js-line-number" data-line-number="2830"></td>
        <td id="LC2830" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L2831" class="blob-num js-line-number" data-line-number="2831"></td>
        <td id="LC2831" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L2832" class="blob-num js-line-number" data-line-number="2832"></td>
        <td id="LC2832" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L2833" class="blob-num js-line-number" data-line-number="2833"></td>
        <td id="LC2833" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2834" class="blob-num js-line-number" data-line-number="2834"></td>
        <td id="LC2834" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">bool</span> <span class="pl-en">parse</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* s, <span class="pl-k">const</span> <span class="pl-k">char</span>* path = <span class="pl-c1">nullptr</span>) <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L2835" class="blob-num js-line-number" data-line-number="2835"></td>
        <td id="LC2835" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">auto</span> n = <span class="pl-c1">strlen</span>(s);</td>
      </tr>
      <tr>
        <td id="L2836" class="blob-num js-line-number" data-line-number="2836"></td>
        <td id="LC2836" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">parse_n</span>(s, n, path);</td>
      </tr>
      <tr>
        <td id="L2837" class="blob-num js-line-number" data-line-number="2837"></td>
        <td id="LC2837" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L2838" class="blob-num js-line-number" data-line-number="2838"></td>
        <td id="LC2838" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2839" class="blob-num js-line-number" data-line-number="2839"></td>
        <td id="LC2839" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">bool</span> <span class="pl-en">parse_n</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* s, <span class="pl-c1">size_t</span> n, any&amp; dt, <span class="pl-k">const</span> <span class="pl-k">char</span>* path = <span class="pl-c1">nullptr</span>) <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L2840" class="blob-num js-line-number" data-line-number="2840"></td>
        <td id="LC2840" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (grammar_ != <span class="pl-c1">nullptr</span>) {</td>
      </tr>
      <tr>
        <td id="L2841" class="blob-num js-line-number" data-line-number="2841"></td>
        <td id="LC2841" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">const</span> <span class="pl-k">auto</span>&amp; rule = (*grammar_)[start_];</td>
      </tr>
      <tr>
        <td id="L2842" class="blob-num js-line-number" data-line-number="2842"></td>
        <td id="LC2842" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">auto</span> r = rule.<span class="pl-c1">parse</span>(s, n, dt, path);</td>
      </tr>
      <tr>
        <td id="L2843" class="blob-num js-line-number" data-line-number="2843"></td>
        <td id="LC2843" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">output_log</span>(s, n, r);</td>
      </tr>
      <tr>
        <td id="L2844" class="blob-num js-line-number" data-line-number="2844"></td>
        <td id="LC2844" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> r.<span class="pl-smi">ret</span> &amp;&amp; r.<span class="pl-smi">len</span> == n;</td>
      </tr>
      <tr>
        <td id="L2845" class="blob-num js-line-number" data-line-number="2845"></td>
        <td id="LC2845" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L2846" class="blob-num js-line-number" data-line-number="2846"></td>
        <td id="LC2846" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L2847" class="blob-num js-line-number" data-line-number="2847"></td>
        <td id="LC2847" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L2848" class="blob-num js-line-number" data-line-number="2848"></td>
        <td id="LC2848" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2849" class="blob-num js-line-number" data-line-number="2849"></td>
        <td id="LC2849" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">bool</span> <span class="pl-en">parse</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* s, any&amp; dt, <span class="pl-k">const</span> <span class="pl-k">char</span>* path = <span class="pl-c1">nullptr</span>) <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L2850" class="blob-num js-line-number" data-line-number="2850"></td>
        <td id="LC2850" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">auto</span> n = <span class="pl-c1">strlen</span>(s);</td>
      </tr>
      <tr>
        <td id="L2851" class="blob-num js-line-number" data-line-number="2851"></td>
        <td id="LC2851" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">parse_n</span>(s, n, dt, path);</td>
      </tr>
      <tr>
        <td id="L2852" class="blob-num js-line-number" data-line-number="2852"></td>
        <td id="LC2852" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L2853" class="blob-num js-line-number" data-line-number="2853"></td>
        <td id="LC2853" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2854" class="blob-num js-line-number" data-line-number="2854"></td>
        <td id="LC2854" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> T&gt;</td>
      </tr>
      <tr>
        <td id="L2855" class="blob-num js-line-number" data-line-number="2855"></td>
        <td id="LC2855" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">bool</span> <span class="pl-en">parse_n</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* s, <span class="pl-c1">size_t</span> n, T&amp; val, <span class="pl-k">const</span> <span class="pl-k">char</span>* path = <span class="pl-c1">nullptr</span>) <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L2856" class="blob-num js-line-number" data-line-number="2856"></td>
        <td id="LC2856" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (grammar_ != <span class="pl-c1">nullptr</span>) {</td>
      </tr>
      <tr>
        <td id="L2857" class="blob-num js-line-number" data-line-number="2857"></td>
        <td id="LC2857" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">const</span> <span class="pl-k">auto</span>&amp; rule = (*grammar_)[start_];</td>
      </tr>
      <tr>
        <td id="L2858" class="blob-num js-line-number" data-line-number="2858"></td>
        <td id="LC2858" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">auto</span> r = rule.<span class="pl-c1">parse_and_get_value</span>(s, n, val, path);</td>
      </tr>
      <tr>
        <td id="L2859" class="blob-num js-line-number" data-line-number="2859"></td>
        <td id="LC2859" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">output_log</span>(s, n, r);</td>
      </tr>
      <tr>
        <td id="L2860" class="blob-num js-line-number" data-line-number="2860"></td>
        <td id="LC2860" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> r.<span class="pl-smi">ret</span> &amp;&amp; r.<span class="pl-smi">len</span> == n;</td>
      </tr>
      <tr>
        <td id="L2861" class="blob-num js-line-number" data-line-number="2861"></td>
        <td id="LC2861" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L2862" class="blob-num js-line-number" data-line-number="2862"></td>
        <td id="LC2862" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L2863" class="blob-num js-line-number" data-line-number="2863"></td>
        <td id="LC2863" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L2864" class="blob-num js-line-number" data-line-number="2864"></td>
        <td id="LC2864" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2865" class="blob-num js-line-number" data-line-number="2865"></td>
        <td id="LC2865" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> T&gt;</td>
      </tr>
      <tr>
        <td id="L2866" class="blob-num js-line-number" data-line-number="2866"></td>
        <td id="LC2866" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">bool</span> <span class="pl-en">parse</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* s, T&amp; val, <span class="pl-k">const</span> <span class="pl-k">char</span>* path = <span class="pl-c1">nullptr</span>) <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L2867" class="blob-num js-line-number" data-line-number="2867"></td>
        <td id="LC2867" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">auto</span> n = <span class="pl-c1">strlen</span>(s);</td>
      </tr>
      <tr>
        <td id="L2868" class="blob-num js-line-number" data-line-number="2868"></td>
        <td id="LC2868" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">parse_n</span>(s, n, val, path);</td>
      </tr>
      <tr>
        <td id="L2869" class="blob-num js-line-number" data-line-number="2869"></td>
        <td id="LC2869" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L2870" class="blob-num js-line-number" data-line-number="2870"></td>
        <td id="LC2870" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2871" class="blob-num js-line-number" data-line-number="2871"></td>
        <td id="LC2871" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> T&gt;</td>
      </tr>
      <tr>
        <td id="L2872" class="blob-num js-line-number" data-line-number="2872"></td>
        <td id="LC2872" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">bool</span> <span class="pl-en">parse_n</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* s, <span class="pl-c1">size_t</span> n, any&amp; dt, T&amp; val, <span class="pl-k">const</span> <span class="pl-k">char</span>* path = <span class="pl-c1">nullptr</span>) <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L2873" class="blob-num js-line-number" data-line-number="2873"></td>
        <td id="LC2873" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (grammar_ != <span class="pl-c1">nullptr</span>) {</td>
      </tr>
      <tr>
        <td id="L2874" class="blob-num js-line-number" data-line-number="2874"></td>
        <td id="LC2874" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">const</span> <span class="pl-k">auto</span>&amp; rule = (*grammar_)[start_];</td>
      </tr>
      <tr>
        <td id="L2875" class="blob-num js-line-number" data-line-number="2875"></td>
        <td id="LC2875" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">auto</span> r = rule.<span class="pl-c1">parse_and_get_value</span>(s, n, dt, val, path);</td>
      </tr>
      <tr>
        <td id="L2876" class="blob-num js-line-number" data-line-number="2876"></td>
        <td id="LC2876" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">output_log</span>(s, n, r);</td>
      </tr>
      <tr>
        <td id="L2877" class="blob-num js-line-number" data-line-number="2877"></td>
        <td id="LC2877" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> r.<span class="pl-smi">ret</span> &amp;&amp; r.<span class="pl-smi">len</span> == n;</td>
      </tr>
      <tr>
        <td id="L2878" class="blob-num js-line-number" data-line-number="2878"></td>
        <td id="LC2878" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L2879" class="blob-num js-line-number" data-line-number="2879"></td>
        <td id="LC2879" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L2880" class="blob-num js-line-number" data-line-number="2880"></td>
        <td id="LC2880" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L2881" class="blob-num js-line-number" data-line-number="2881"></td>
        <td id="LC2881" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2882" class="blob-num js-line-number" data-line-number="2882"></td>
        <td id="LC2882" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> T&gt;</td>
      </tr>
      <tr>
        <td id="L2883" class="blob-num js-line-number" data-line-number="2883"></td>
        <td id="LC2883" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">bool</span> <span class="pl-en">parse</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* s, any&amp; dt, T&amp; val, <span class="pl-k">const</span> <span class="pl-k">char</span>* <span class="pl-c"><span class="pl-c">/*</span>path<span class="pl-c">*/</span></span> = <span class="pl-c1">nullptr</span>) <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L2884" class="blob-num js-line-number" data-line-number="2884"></td>
        <td id="LC2884" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">auto</span> n = <span class="pl-c1">strlen</span>(s);</td>
      </tr>
      <tr>
        <td id="L2885" class="blob-num js-line-number" data-line-number="2885"></td>
        <td id="LC2885" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">parse_n</span>(s, n, dt, val);</td>
      </tr>
      <tr>
        <td id="L2886" class="blob-num js-line-number" data-line-number="2886"></td>
        <td id="LC2886" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L2887" class="blob-num js-line-number" data-line-number="2887"></td>
        <td id="LC2887" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2888" class="blob-num js-line-number" data-line-number="2888"></td>
        <td id="LC2888" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">bool</span> <span class="pl-en">search</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* s, <span class="pl-c1">size_t</span> n, <span class="pl-c1">size_t</span>&amp; mpos, <span class="pl-c1">size_t</span>&amp; mlen) <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L2889" class="blob-num js-line-number" data-line-number="2889"></td>
        <td id="LC2889" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> <span class="pl-k">auto</span>&amp; rule = (*grammar_)[start_];</td>
      </tr>
      <tr>
        <td id="L2890" class="blob-num js-line-number" data-line-number="2890"></td>
        <td id="LC2890" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (grammar_ != <span class="pl-c1">nullptr</span>) {</td>
      </tr>
      <tr>
        <td id="L2891" class="blob-num js-line-number" data-line-number="2891"></td>
        <td id="LC2891" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">size_t</span> pos = <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L2892" class="blob-num js-line-number" data-line-number="2892"></td>
        <td id="LC2892" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">while</span> (pos &lt; n) {</td>
      </tr>
      <tr>
        <td id="L2893" class="blob-num js-line-number" data-line-number="2893"></td>
        <td id="LC2893" class="blob-code blob-code-inner js-file-line">                <span class="pl-c1">size_t</span> len = n - pos;</td>
      </tr>
      <tr>
        <td id="L2894" class="blob-num js-line-number" data-line-number="2894"></td>
        <td id="LC2894" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">auto</span> r = rule.<span class="pl-c1">parse</span>(s + pos, len);</td>
      </tr>
      <tr>
        <td id="L2895" class="blob-num js-line-number" data-line-number="2895"></td>
        <td id="LC2895" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">if</span> (r.<span class="pl-smi">ret</span>) {</td>
      </tr>
      <tr>
        <td id="L2896" class="blob-num js-line-number" data-line-number="2896"></td>
        <td id="LC2896" class="blob-code blob-code-inner js-file-line">                    mpos = pos;</td>
      </tr>
      <tr>
        <td id="L2897" class="blob-num js-line-number" data-line-number="2897"></td>
        <td id="LC2897" class="blob-code blob-code-inner js-file-line">                    mlen = len;</td>
      </tr>
      <tr>
        <td id="L2898" class="blob-num js-line-number" data-line-number="2898"></td>
        <td id="LC2898" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">return</span> <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L2899" class="blob-num js-line-number" data-line-number="2899"></td>
        <td id="LC2899" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L2900" class="blob-num js-line-number" data-line-number="2900"></td>
        <td id="LC2900" class="blob-code blob-code-inner js-file-line">                pos++;</td>
      </tr>
      <tr>
        <td id="L2901" class="blob-num js-line-number" data-line-number="2901"></td>
        <td id="LC2901" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L2902" class="blob-num js-line-number" data-line-number="2902"></td>
        <td id="LC2902" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L2903" class="blob-num js-line-number" data-line-number="2903"></td>
        <td id="LC2903" class="blob-code blob-code-inner js-file-line">        mpos = <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L2904" class="blob-num js-line-number" data-line-number="2904"></td>
        <td id="LC2904" class="blob-code blob-code-inner js-file-line">        mlen = <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L2905" class="blob-num js-line-number" data-line-number="2905"></td>
        <td id="LC2905" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L2906" class="blob-num js-line-number" data-line-number="2906"></td>
        <td id="LC2906" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L2907" class="blob-num js-line-number" data-line-number="2907"></td>
        <td id="LC2907" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2908" class="blob-num js-line-number" data-line-number="2908"></td>
        <td id="LC2908" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">bool</span> <span class="pl-en">search</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* s, <span class="pl-c1">size_t</span>&amp; mpos, <span class="pl-c1">size_t</span>&amp; mlen) <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L2909" class="blob-num js-line-number" data-line-number="2909"></td>
        <td id="LC2909" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">auto</span> n = <span class="pl-c1">strlen</span>(s);</td>
      </tr>
      <tr>
        <td id="L2910" class="blob-num js-line-number" data-line-number="2910"></td>
        <td id="LC2910" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">search</span>(s, n, mpos, mlen);</td>
      </tr>
      <tr>
        <td id="L2911" class="blob-num js-line-number" data-line-number="2911"></td>
        <td id="LC2911" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L2912" class="blob-num js-line-number" data-line-number="2912"></td>
        <td id="LC2912" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2913" class="blob-num js-line-number" data-line-number="2913"></td>
        <td id="LC2913" class="blob-code blob-code-inner js-file-line">    Definition&amp; <span class="pl-k">operator</span>[](<span class="pl-k">const</span> <span class="pl-k">char</span>* s) {</td>
      </tr>
      <tr>
        <td id="L2914" class="blob-num js-line-number" data-line-number="2914"></td>
        <td id="LC2914" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> (*grammar_)[s];</td>
      </tr>
      <tr>
        <td id="L2915" class="blob-num js-line-number" data-line-number="2915"></td>
        <td id="LC2915" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L2916" class="blob-num js-line-number" data-line-number="2916"></td>
        <td id="LC2916" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2917" class="blob-num js-line-number" data-line-number="2917"></td>
        <td id="LC2917" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">enable_packrat_parsing</span>() {</td>
      </tr>
      <tr>
        <td id="L2918" class="blob-num js-line-number" data-line-number="2918"></td>
        <td id="LC2918" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (grammar_ != <span class="pl-c1">nullptr</span>) {</td>
      </tr>
      <tr>
        <td id="L2919" class="blob-num js-line-number" data-line-number="2919"></td>
        <td id="LC2919" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">auto</span>&amp; rule = (*grammar_)[start_];</td>
      </tr>
      <tr>
        <td id="L2920" class="blob-num js-line-number" data-line-number="2920"></td>
        <td id="LC2920" class="blob-code blob-code-inner js-file-line">            rule.<span class="pl-smi">enablePackratParsing</span> = <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L2921" class="blob-num js-line-number" data-line-number="2921"></td>
        <td id="LC2921" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L2922" class="blob-num js-line-number" data-line-number="2922"></td>
        <td id="LC2922" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L2923" class="blob-num js-line-number" data-line-number="2923"></td>
        <td id="LC2923" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2924" class="blob-num js-line-number" data-line-number="2924"></td>
        <td id="LC2924" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> T = Ast&gt;</td>
      </tr>
      <tr>
        <td id="L2925" class="blob-num js-line-number" data-line-number="2925"></td>
        <td id="LC2925" class="blob-code blob-code-inner js-file-line">    parser&amp; <span class="pl-en">enable_ast</span>() {</td>
      </tr>
      <tr>
        <td id="L2926" class="blob-num js-line-number" data-line-number="2926"></td>
        <td id="LC2926" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">for</span> (<span class="pl-k">auto</span>&amp; x: *grammar_) {</td>
      </tr>
      <tr>
        <td id="L2927" class="blob-num js-line-number" data-line-number="2927"></td>
        <td id="LC2927" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">const</span> <span class="pl-k">auto</span>&amp; name = x.<span class="pl-smi">first</span>;</td>
      </tr>
      <tr>
        <td id="L2928" class="blob-num js-line-number" data-line-number="2928"></td>
        <td id="LC2928" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">auto</span>&amp; rule = x.<span class="pl-smi">second</span>;</td>
      </tr>
      <tr>
        <td id="L2929" class="blob-num js-line-number" data-line-number="2929"></td>
        <td id="LC2929" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2930" class="blob-num js-line-number" data-line-number="2930"></td>
        <td id="LC2930" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (!rule.<span class="pl-smi">action</span>) {</td>
      </tr>
      <tr>
        <td id="L2931" class="blob-num js-line-number" data-line-number="2931"></td>
        <td id="LC2931" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">auto</span> is_token = rule.<span class="pl-smi">is_token</span>;</td>
      </tr>
      <tr>
        <td id="L2932" class="blob-num js-line-number" data-line-number="2932"></td>
        <td id="LC2932" class="blob-code blob-code-inner js-file-line">                rule.<span class="pl-smi">action</span> = [=](<span class="pl-k">const</span> SemanticValues&amp; sv) {</td>
      </tr>
      <tr>
        <td id="L2933" class="blob-num js-line-number" data-line-number="2933"></td>
        <td id="LC2933" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">auto</span> line = <span class="pl-c1">line_info</span>(sv.<span class="pl-smi">ss</span>, sv.<span class="pl-c1">c_str</span>());</td>
      </tr>
      <tr>
        <td id="L2934" class="blob-num js-line-number" data-line-number="2934"></td>
        <td id="LC2934" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2935" class="blob-num js-line-number" data-line-number="2935"></td>
        <td id="LC2935" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">if</span> (is_token) {</td>
      </tr>
      <tr>
        <td id="L2936" class="blob-num js-line-number" data-line-number="2936"></td>
        <td id="LC2936" class="blob-code blob-code-inner js-file-line">                        <span class="pl-k">return</span> std::make_shared&lt;T&gt;(sv.<span class="pl-smi">path</span>, line.<span class="pl-smi">first</span>, line.<span class="pl-smi">second</span>, name.<span class="pl-c1">c_str</span>(), sv.<span class="pl-c1">token</span>());</td>
      </tr>
      <tr>
        <td id="L2937" class="blob-num js-line-number" data-line-number="2937"></td>
        <td id="LC2937" class="blob-code blob-code-inner js-file-line">                    }</td>
      </tr>
      <tr>
        <td id="L2938" class="blob-num js-line-number" data-line-number="2938"></td>
        <td id="LC2938" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2939" class="blob-num js-line-number" data-line-number="2939"></td>
        <td id="LC2939" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">auto</span> ast = std::make_shared&lt;T&gt;(sv.<span class="pl-smi">path</span>, line.<span class="pl-smi">first</span>, line.<span class="pl-smi">second</span>, name.<span class="pl-c1">c_str</span>(), sv.<span class="pl-smi">transform</span>&lt;std::shared_ptr&lt;T&gt;&gt;());</td>
      </tr>
      <tr>
        <td id="L2940" class="blob-num js-line-number" data-line-number="2940"></td>
        <td id="LC2940" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2941" class="blob-num js-line-number" data-line-number="2941"></td>
        <td id="LC2941" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">for</span> (<span class="pl-k">auto</span> node: ast-&gt;nodes) {</td>
      </tr>
      <tr>
        <td id="L2942" class="blob-num js-line-number" data-line-number="2942"></td>
        <td id="LC2942" class="blob-code blob-code-inner js-file-line">                        node-&gt;parent = ast;</td>
      </tr>
      <tr>
        <td id="L2943" class="blob-num js-line-number" data-line-number="2943"></td>
        <td id="LC2943" class="blob-code blob-code-inner js-file-line">                    }</td>
      </tr>
      <tr>
        <td id="L2944" class="blob-num js-line-number" data-line-number="2944"></td>
        <td id="LC2944" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">return</span> ast;</td>
      </tr>
      <tr>
        <td id="L2945" class="blob-num js-line-number" data-line-number="2945"></td>
        <td id="LC2945" class="blob-code blob-code-inner js-file-line">                };</td>
      </tr>
      <tr>
        <td id="L2946" class="blob-num js-line-number" data-line-number="2946"></td>
        <td id="LC2946" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L2947" class="blob-num js-line-number" data-line-number="2947"></td>
        <td id="LC2947" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L2948" class="blob-num js-line-number" data-line-number="2948"></td>
        <td id="LC2948" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> *<span class="pl-c1">this</span>;</td>
      </tr>
      <tr>
        <td id="L2949" class="blob-num js-line-number" data-line-number="2949"></td>
        <td id="LC2949" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L2950" class="blob-num js-line-number" data-line-number="2950"></td>
        <td id="LC2950" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2951" class="blob-num js-line-number" data-line-number="2951"></td>
        <td id="LC2951" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">enable_trace</span>(Tracer tracer) {</td>
      </tr>
      <tr>
        <td id="L2952" class="blob-num js-line-number" data-line-number="2952"></td>
        <td id="LC2952" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (grammar_ != <span class="pl-c1">nullptr</span>) {</td>
      </tr>
      <tr>
        <td id="L2953" class="blob-num js-line-number" data-line-number="2953"></td>
        <td id="LC2953" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">auto</span>&amp; rule = (*grammar_)[start_];</td>
      </tr>
      <tr>
        <td id="L2954" class="blob-num js-line-number" data-line-number="2954"></td>
        <td id="LC2954" class="blob-code blob-code-inner js-file-line">            rule.<span class="pl-smi">tracer</span> = tracer;</td>
      </tr>
      <tr>
        <td id="L2955" class="blob-num js-line-number" data-line-number="2955"></td>
        <td id="LC2955" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L2956" class="blob-num js-line-number" data-line-number="2956"></td>
        <td id="LC2956" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L2957" class="blob-num js-line-number" data-line-number="2957"></td>
        <td id="LC2957" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2958" class="blob-num js-line-number" data-line-number="2958"></td>
        <td id="LC2958" class="blob-code blob-code-inner js-file-line">    MatchAction match_action;</td>
      </tr>
      <tr>
        <td id="L2959" class="blob-num js-line-number" data-line-number="2959"></td>
        <td id="LC2959" class="blob-code blob-code-inner js-file-line">    Log         log;</td>
      </tr>
      <tr>
        <td id="L2960" class="blob-num js-line-number" data-line-number="2960"></td>
        <td id="LC2960" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2961" class="blob-num js-line-number" data-line-number="2961"></td>
        <td id="LC2961" class="blob-code blob-code-inner js-file-line"><span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L2962" class="blob-num js-line-number" data-line-number="2962"></td>
        <td id="LC2962" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">output_log</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* s, <span class="pl-c1">size_t</span> n, <span class="pl-k">const</span> Definition::Result&amp; r) <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L2963" class="blob-num js-line-number" data-line-number="2963"></td>
        <td id="LC2963" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-c1">log</span>) {</td>
      </tr>
      <tr>
        <td id="L2964" class="blob-num js-line-number" data-line-number="2964"></td>
        <td id="LC2964" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (!r.<span class="pl-smi">ret</span>) {</td>
      </tr>
      <tr>
        <td id="L2965" class="blob-num js-line-number" data-line-number="2965"></td>
        <td id="LC2965" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">if</span> (r.<span class="pl-smi">message_pos</span>) {</td>
      </tr>
      <tr>
        <td id="L2966" class="blob-num js-line-number" data-line-number="2966"></td>
        <td id="LC2966" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">auto</span> line = <span class="pl-c1">line_info</span>(s, r.<span class="pl-smi">message_pos</span>);</td>
      </tr>
      <tr>
        <td id="L2967" class="blob-num js-line-number" data-line-number="2967"></td>
        <td id="LC2967" class="blob-code blob-code-inner js-file-line">                    <span class="pl-c1">log</span>(line.<span class="pl-smi">first</span>, line.<span class="pl-smi">second</span>, r.<span class="pl-smi">message</span>);</td>
      </tr>
      <tr>
        <td id="L2968" class="blob-num js-line-number" data-line-number="2968"></td>
        <td id="LC2968" class="blob-code blob-code-inner js-file-line">                } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L2969" class="blob-num js-line-number" data-line-number="2969"></td>
        <td id="LC2969" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">auto</span> line = <span class="pl-c1">line_info</span>(s, r.<span class="pl-smi">error_pos</span>);</td>
      </tr>
      <tr>
        <td id="L2970" class="blob-num js-line-number" data-line-number="2970"></td>
        <td id="LC2970" class="blob-code blob-code-inner js-file-line">                    <span class="pl-c1">log</span>(line.<span class="pl-smi">first</span>, line.<span class="pl-smi">second</span>, <span class="pl-s"><span class="pl-pds">&quot;</span>syntax error<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L2971" class="blob-num js-line-number" data-line-number="2971"></td>
        <td id="LC2971" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L2972" class="blob-num js-line-number" data-line-number="2972"></td>
        <td id="LC2972" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> <span class="pl-k">if</span> (r.<span class="pl-smi">len</span> != n) {</td>
      </tr>
      <tr>
        <td id="L2973" class="blob-num js-line-number" data-line-number="2973"></td>
        <td id="LC2973" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">auto</span> line = <span class="pl-c1">line_info</span>(s, s + r.<span class="pl-smi">len</span>);</td>
      </tr>
      <tr>
        <td id="L2974" class="blob-num js-line-number" data-line-number="2974"></td>
        <td id="LC2974" class="blob-code blob-code-inner js-file-line">                <span class="pl-c1">log</span>(line.<span class="pl-smi">first</span>, line.<span class="pl-smi">second</span>, <span class="pl-s"><span class="pl-pds">&quot;</span>syntax error<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L2975" class="blob-num js-line-number" data-line-number="2975"></td>
        <td id="LC2975" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L2976" class="blob-num js-line-number" data-line-number="2976"></td>
        <td id="LC2976" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L2977" class="blob-num js-line-number" data-line-number="2977"></td>
        <td id="LC2977" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L2978" class="blob-num js-line-number" data-line-number="2978"></td>
        <td id="LC2978" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2979" class="blob-num js-line-number" data-line-number="2979"></td>
        <td id="LC2979" class="blob-code blob-code-inner js-file-line">    std::shared_ptr&lt;Grammar&gt; grammar_;</td>
      </tr>
      <tr>
        <td id="L2980" class="blob-num js-line-number" data-line-number="2980"></td>
        <td id="LC2980" class="blob-code blob-code-inner js-file-line">    std::string              start_;</td>
      </tr>
      <tr>
        <td id="L2981" class="blob-num js-line-number" data-line-number="2981"></td>
        <td id="LC2981" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L2982" class="blob-num js-line-number" data-line-number="2982"></td>
        <td id="LC2982" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2983" class="blob-num js-line-number" data-line-number="2983"></td>
        <td id="LC2983" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span>-----------------------------------------------------------------------------</span></td>
      </tr>
      <tr>
        <td id="L2984" class="blob-num js-line-number" data-line-number="2984"></td>
        <td id="LC2984" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *  Simple interface</span></td>
      </tr>
      <tr>
        <td id="L2985" class="blob-num js-line-number" data-line-number="2985"></td>
        <td id="LC2985" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *---------------------------------------------------------------------------<span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L2986" class="blob-num js-line-number" data-line-number="2986"></td>
        <td id="LC2986" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2987" class="blob-num js-line-number" data-line-number="2987"></td>
        <td id="LC2987" class="blob-code blob-code-inner js-file-line"><span class="pl-k">struct</span> <span class="pl-en">match</span></td>
      </tr>
      <tr>
        <td id="L2988" class="blob-num js-line-number" data-line-number="2988"></td>
        <td id="LC2988" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="L2989" class="blob-num js-line-number" data-line-number="2989"></td>
        <td id="LC2989" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">struct</span> <span class="pl-en">Item</span> {</td>
      </tr>
      <tr>
        <td id="L2990" class="blob-num js-line-number" data-line-number="2990"></td>
        <td id="LC2990" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> <span class="pl-k">char</span>* s;</td>
      </tr>
      <tr>
        <td id="L2991" class="blob-num js-line-number" data-line-number="2991"></td>
        <td id="LC2991" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">size_t</span>      n;</td>
      </tr>
      <tr>
        <td id="L2992" class="blob-num js-line-number" data-line-number="2992"></td>
        <td id="LC2992" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">size_t</span>      id;</td>
      </tr>
      <tr>
        <td id="L2993" class="blob-num js-line-number" data-line-number="2993"></td>
        <td id="LC2993" class="blob-code blob-code-inner js-file-line">        std::string name;</td>
      </tr>
      <tr>
        <td id="L2994" class="blob-num js-line-number" data-line-number="2994"></td>
        <td id="LC2994" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2995" class="blob-num js-line-number" data-line-number="2995"></td>
        <td id="LC2995" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">size_t</span> <span class="pl-en">length</span>() <span class="pl-k">const</span> { <span class="pl-k">return</span> n; }</td>
      </tr>
      <tr>
        <td id="L2996" class="blob-num js-line-number" data-line-number="2996"></td>
        <td id="LC2996" class="blob-code blob-code-inner js-file-line">        std::string <span class="pl-en">str</span>() <span class="pl-k">const</span> { <span class="pl-k">return</span> <span class="pl-c1">std::string</span>(s, n); }</td>
      </tr>
      <tr>
        <td id="L2997" class="blob-num js-line-number" data-line-number="2997"></td>
        <td id="LC2997" class="blob-code blob-code-inner js-file-line">    };</td>
      </tr>
      <tr>
        <td id="L2998" class="blob-num js-line-number" data-line-number="2998"></td>
        <td id="LC2998" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L2999" class="blob-num js-line-number" data-line-number="2999"></td>
        <td id="LC2999" class="blob-code blob-code-inner js-file-line">    std::vector&lt;Item&gt; matches;</td>
      </tr>
      <tr>
        <td id="L3000" class="blob-num js-line-number" data-line-number="3000"></td>
        <td id="LC3000" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3001" class="blob-num js-line-number" data-line-number="3001"></td>
        <td id="LC3001" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">typedef</span> std::vector&lt;Item&gt;::iterator iterator;</td>
      </tr>
      <tr>
        <td id="L3002" class="blob-num js-line-number" data-line-number="3002"></td>
        <td id="LC3002" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">typedef</span> std::vector&lt;Item&gt;::const_iterator const_iterator;</td>
      </tr>
      <tr>
        <td id="L3003" class="blob-num js-line-number" data-line-number="3003"></td>
        <td id="LC3003" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3004" class="blob-num js-line-number" data-line-number="3004"></td>
        <td id="LC3004" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">bool</span> <span class="pl-en">empty</span>() <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L3005" class="blob-num js-line-number" data-line-number="3005"></td>
        <td id="LC3005" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> matches.<span class="pl-c1">empty</span>();</td>
      </tr>
      <tr>
        <td id="L3006" class="blob-num js-line-number" data-line-number="3006"></td>
        <td id="LC3006" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L3007" class="blob-num js-line-number" data-line-number="3007"></td>
        <td id="LC3007" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3008" class="blob-num js-line-number" data-line-number="3008"></td>
        <td id="LC3008" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">size_t</span> <span class="pl-en">size</span>() <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L3009" class="blob-num js-line-number" data-line-number="3009"></td>
        <td id="LC3009" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> matches.<span class="pl-c1">size</span>();</td>
      </tr>
      <tr>
        <td id="L3010" class="blob-num js-line-number" data-line-number="3010"></td>
        <td id="LC3010" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L3011" class="blob-num js-line-number" data-line-number="3011"></td>
        <td id="LC3011" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3012" class="blob-num js-line-number" data-line-number="3012"></td>
        <td id="LC3012" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">size_t</span> <span class="pl-en">length</span>(<span class="pl-c1">size_t</span> n = <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L3013" class="blob-num js-line-number" data-line-number="3013"></td>
        <td id="LC3013" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> matches[n].<span class="pl-c1">length</span>();</td>
      </tr>
      <tr>
        <td id="L3014" class="blob-num js-line-number" data-line-number="3014"></td>
        <td id="LC3014" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L3015" class="blob-num js-line-number" data-line-number="3015"></td>
        <td id="LC3015" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3016" class="blob-num js-line-number" data-line-number="3016"></td>
        <td id="LC3016" class="blob-code blob-code-inner js-file-line">    std::string <span class="pl-en">str</span>(<span class="pl-c1">size_t</span> n = <span class="pl-c1">0</span>) <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L3017" class="blob-num js-line-number" data-line-number="3017"></td>
        <td id="LC3017" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> matches[n].<span class="pl-c1">str</span>();</td>
      </tr>
      <tr>
        <td id="L3018" class="blob-num js-line-number" data-line-number="3018"></td>
        <td id="LC3018" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L3019" class="blob-num js-line-number" data-line-number="3019"></td>
        <td id="LC3019" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3020" class="blob-num js-line-number" data-line-number="3020"></td>
        <td id="LC3020" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> Item&amp; <span class="pl-k">operator</span>[](<span class="pl-c1">size_t</span> n) <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L3021" class="blob-num js-line-number" data-line-number="3021"></td>
        <td id="LC3021" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> matches[n];</td>
      </tr>
      <tr>
        <td id="L3022" class="blob-num js-line-number" data-line-number="3022"></td>
        <td id="LC3022" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L3023" class="blob-num js-line-number" data-line-number="3023"></td>
        <td id="LC3023" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3024" class="blob-num js-line-number" data-line-number="3024"></td>
        <td id="LC3024" class="blob-code blob-code-inner js-file-line">    iterator <span class="pl-en">begin</span>() {</td>
      </tr>
      <tr>
        <td id="L3025" class="blob-num js-line-number" data-line-number="3025"></td>
        <td id="LC3025" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> matches.<span class="pl-c1">begin</span>();</td>
      </tr>
      <tr>
        <td id="L3026" class="blob-num js-line-number" data-line-number="3026"></td>
        <td id="LC3026" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L3027" class="blob-num js-line-number" data-line-number="3027"></td>
        <td id="LC3027" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3028" class="blob-num js-line-number" data-line-number="3028"></td>
        <td id="LC3028" class="blob-code blob-code-inner js-file-line">    iterator <span class="pl-en">end</span>() {</td>
      </tr>
      <tr>
        <td id="L3029" class="blob-num js-line-number" data-line-number="3029"></td>
        <td id="LC3029" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> matches.<span class="pl-c1">end</span>();</td>
      </tr>
      <tr>
        <td id="L3030" class="blob-num js-line-number" data-line-number="3030"></td>
        <td id="LC3030" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L3031" class="blob-num js-line-number" data-line-number="3031"></td>
        <td id="LC3031" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3032" class="blob-num js-line-number" data-line-number="3032"></td>
        <td id="LC3032" class="blob-code blob-code-inner js-file-line">    const_iterator <span class="pl-en">begin</span>() <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L3033" class="blob-num js-line-number" data-line-number="3033"></td>
        <td id="LC3033" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> matches.<span class="pl-c1">cbegin</span>();</td>
      </tr>
      <tr>
        <td id="L3034" class="blob-num js-line-number" data-line-number="3034"></td>
        <td id="LC3034" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L3035" class="blob-num js-line-number" data-line-number="3035"></td>
        <td id="LC3035" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3036" class="blob-num js-line-number" data-line-number="3036"></td>
        <td id="LC3036" class="blob-code blob-code-inner js-file-line">    const_iterator <span class="pl-en">end</span>() <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L3037" class="blob-num js-line-number" data-line-number="3037"></td>
        <td id="LC3037" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> matches.<span class="pl-c1">cend</span>();</td>
      </tr>
      <tr>
        <td id="L3038" class="blob-num js-line-number" data-line-number="3038"></td>
        <td id="LC3038" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L3039" class="blob-num js-line-number" data-line-number="3039"></td>
        <td id="LC3039" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3040" class="blob-num js-line-number" data-line-number="3040"></td>
        <td id="LC3040" class="blob-code blob-code-inner js-file-line">    std::vector&lt;<span class="pl-c1">size_t</span>&gt; <span class="pl-en">named_capture</span>(<span class="pl-k">const</span> std::string&amp; name) <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L3041" class="blob-num js-line-number" data-line-number="3041"></td>
        <td id="LC3041" class="blob-code blob-code-inner js-file-line">        std::vector&lt;<span class="pl-c1">size_t</span>&gt; ret;</td>
      </tr>
      <tr>
        <td id="L3042" class="blob-num js-line-number" data-line-number="3042"></td>
        <td id="LC3042" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">for</span> (<span class="pl-k">auto</span> i = <span class="pl-c1">0u</span>; i &lt; matches.<span class="pl-c1">size</span>(); i++) {</td>
      </tr>
      <tr>
        <td id="L3043" class="blob-num js-line-number" data-line-number="3043"></td>
        <td id="LC3043" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (matches[i].<span class="pl-smi">name</span> == name) {</td>
      </tr>
      <tr>
        <td id="L3044" class="blob-num js-line-number" data-line-number="3044"></td>
        <td id="LC3044" class="blob-code blob-code-inner js-file-line">                ret.<span class="pl-c1">push_back</span>(i);</td>
      </tr>
      <tr>
        <td id="L3045" class="blob-num js-line-number" data-line-number="3045"></td>
        <td id="LC3045" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L3046" class="blob-num js-line-number" data-line-number="3046"></td>
        <td id="LC3046" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L3047" class="blob-num js-line-number" data-line-number="3047"></td>
        <td id="LC3047" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> ret;</td>
      </tr>
      <tr>
        <td id="L3048" class="blob-num js-line-number" data-line-number="3048"></td>
        <td id="LC3048" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L3049" class="blob-num js-line-number" data-line-number="3049"></td>
        <td id="LC3049" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3050" class="blob-num js-line-number" data-line-number="3050"></td>
        <td id="LC3050" class="blob-code blob-code-inner js-file-line">    std::map&lt;std::string, std::vector&lt;<span class="pl-c1">size_t</span>&gt;&gt; <span class="pl-en">named_captures</span>() <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L3051" class="blob-num js-line-number" data-line-number="3051"></td>
        <td id="LC3051" class="blob-code blob-code-inner js-file-line">        std::map&lt;std::string, std::vector&lt;<span class="pl-c1">size_t</span>&gt;&gt; ret;</td>
      </tr>
      <tr>
        <td id="L3052" class="blob-num js-line-number" data-line-number="3052"></td>
        <td id="LC3052" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">for</span> (<span class="pl-k">auto</span> i = <span class="pl-c1">0u</span>; i &lt; matches.<span class="pl-c1">size</span>(); i++) {</td>
      </tr>
      <tr>
        <td id="L3053" class="blob-num js-line-number" data-line-number="3053"></td>
        <td id="LC3053" class="blob-code blob-code-inner js-file-line">            ret[matches[i].<span class="pl-smi">name</span>].<span class="pl-c1">push_back</span>(i);</td>
      </tr>
      <tr>
        <td id="L3054" class="blob-num js-line-number" data-line-number="3054"></td>
        <td id="LC3054" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L3055" class="blob-num js-line-number" data-line-number="3055"></td>
        <td id="LC3055" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> ret;</td>
      </tr>
      <tr>
        <td id="L3056" class="blob-num js-line-number" data-line-number="3056"></td>
        <td id="LC3056" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L3057" class="blob-num js-line-number" data-line-number="3057"></td>
        <td id="LC3057" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3058" class="blob-num js-line-number" data-line-number="3058"></td>
        <td id="LC3058" class="blob-code blob-code-inner js-file-line">    std::vector&lt;<span class="pl-c1">size_t</span>&gt; <span class="pl-en">indexed_capture</span>(<span class="pl-c1">size_t</span> id) <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L3059" class="blob-num js-line-number" data-line-number="3059"></td>
        <td id="LC3059" class="blob-code blob-code-inner js-file-line">        std::vector&lt;<span class="pl-c1">size_t</span>&gt; ret;</td>
      </tr>
      <tr>
        <td id="L3060" class="blob-num js-line-number" data-line-number="3060"></td>
        <td id="LC3060" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">for</span> (<span class="pl-k">auto</span> i = <span class="pl-c1">0u</span>; i &lt; matches.<span class="pl-c1">size</span>(); i++) {</td>
      </tr>
      <tr>
        <td id="L3061" class="blob-num js-line-number" data-line-number="3061"></td>
        <td id="LC3061" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (matches[i].<span class="pl-smi">id</span> == id) {</td>
      </tr>
      <tr>
        <td id="L3062" class="blob-num js-line-number" data-line-number="3062"></td>
        <td id="LC3062" class="blob-code blob-code-inner js-file-line">                ret.<span class="pl-c1">push_back</span>(i);</td>
      </tr>
      <tr>
        <td id="L3063" class="blob-num js-line-number" data-line-number="3063"></td>
        <td id="LC3063" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L3064" class="blob-num js-line-number" data-line-number="3064"></td>
        <td id="LC3064" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L3065" class="blob-num js-line-number" data-line-number="3065"></td>
        <td id="LC3065" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> ret;</td>
      </tr>
      <tr>
        <td id="L3066" class="blob-num js-line-number" data-line-number="3066"></td>
        <td id="LC3066" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L3067" class="blob-num js-line-number" data-line-number="3067"></td>
        <td id="LC3067" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3068" class="blob-num js-line-number" data-line-number="3068"></td>
        <td id="LC3068" class="blob-code blob-code-inner js-file-line">    std::map&lt;<span class="pl-c1">size_t</span>, std::vector&lt;<span class="pl-c1">size_t</span>&gt;&gt; <span class="pl-en">indexed_captures</span>() <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L3069" class="blob-num js-line-number" data-line-number="3069"></td>
        <td id="LC3069" class="blob-code blob-code-inner js-file-line">        std::map&lt;<span class="pl-c1">size_t</span>, std::vector&lt;<span class="pl-c1">size_t</span>&gt;&gt; ret;</td>
      </tr>
      <tr>
        <td id="L3070" class="blob-num js-line-number" data-line-number="3070"></td>
        <td id="LC3070" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">for</span> (<span class="pl-k">auto</span> i = <span class="pl-c1">0u</span>; i &lt; matches.<span class="pl-c1">size</span>(); i++) {</td>
      </tr>
      <tr>
        <td id="L3071" class="blob-num js-line-number" data-line-number="3071"></td>
        <td id="LC3071" class="blob-code blob-code-inner js-file-line">            ret[matches[i].<span class="pl-smi">id</span>].<span class="pl-c1">push_back</span>(i);</td>
      </tr>
      <tr>
        <td id="L3072" class="blob-num js-line-number" data-line-number="3072"></td>
        <td id="LC3072" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L3073" class="blob-num js-line-number" data-line-number="3073"></td>
        <td id="LC3073" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> ret;</td>
      </tr>
      <tr>
        <td id="L3074" class="blob-num js-line-number" data-line-number="3074"></td>
        <td id="LC3074" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L3075" class="blob-num js-line-number" data-line-number="3075"></td>
        <td id="LC3075" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L3076" class="blob-num js-line-number" data-line-number="3076"></td>
        <td id="LC3076" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3077" class="blob-num js-line-number" data-line-number="3077"></td>
        <td id="LC3077" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">bool</span> <span class="pl-en">peg_match</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* syntax, <span class="pl-k">const</span> <span class="pl-k">char</span>* s, match&amp; m) {</td>
      </tr>
      <tr>
        <td id="L3078" class="blob-num js-line-number" data-line-number="3078"></td>
        <td id="LC3078" class="blob-code blob-code-inner js-file-line">    m.<span class="pl-smi">matches</span>.<span class="pl-c1">clear</span>();</td>
      </tr>
      <tr>
        <td id="L3079" class="blob-num js-line-number" data-line-number="3079"></td>
        <td id="LC3079" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3080" class="blob-num js-line-number" data-line-number="3080"></td>
        <td id="LC3080" class="blob-code blob-code-inner js-file-line">    parser <span class="pl-smi">pg</span>(syntax);</td>
      </tr>
      <tr>
        <td id="L3081" class="blob-num js-line-number" data-line-number="3081"></td>
        <td id="LC3081" class="blob-code blob-code-inner js-file-line">    pg.<span class="pl-smi">match_action</span> = [&amp;](<span class="pl-k">const</span> <span class="pl-k">char</span>* a_s, <span class="pl-c1">size_t</span> a_n, <span class="pl-c1">size_t</span> a_id, <span class="pl-k">const</span> std::string&amp; a_name) {</td>
      </tr>
      <tr>
        <td id="L3082" class="blob-num js-line-number" data-line-number="3082"></td>
        <td id="LC3082" class="blob-code blob-code-inner js-file-line">        m.<span class="pl-smi">matches</span>.<span class="pl-c1">push_back</span>(match::Item{ a_s, a_n, a_id, a_name });</td>
      </tr>
      <tr>
        <td id="L3083" class="blob-num js-line-number" data-line-number="3083"></td>
        <td id="LC3083" class="blob-code blob-code-inner js-file-line">    };</td>
      </tr>
      <tr>
        <td id="L3084" class="blob-num js-line-number" data-line-number="3084"></td>
        <td id="LC3084" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3085" class="blob-num js-line-number" data-line-number="3085"></td>
        <td id="LC3085" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">auto</span> ret = pg.<span class="pl-c1">parse</span>(s);</td>
      </tr>
      <tr>
        <td id="L3086" class="blob-num js-line-number" data-line-number="3086"></td>
        <td id="LC3086" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (ret) {</td>
      </tr>
      <tr>
        <td id="L3087" class="blob-num js-line-number" data-line-number="3087"></td>
        <td id="LC3087" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">auto</span> n = <span class="pl-c1">strlen</span>(s);</td>
      </tr>
      <tr>
        <td id="L3088" class="blob-num js-line-number" data-line-number="3088"></td>
        <td id="LC3088" class="blob-code blob-code-inner js-file-line">        m.<span class="pl-smi">matches</span>.<span class="pl-c1">insert</span>(m.<span class="pl-smi">matches</span>.<span class="pl-c1">begin</span>(), match::Item{ s, n, <span class="pl-c1">0</span>, <span class="pl-c1">std::string</span>() });</td>
      </tr>
      <tr>
        <td id="L3089" class="blob-num js-line-number" data-line-number="3089"></td>
        <td id="LC3089" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L3090" class="blob-num js-line-number" data-line-number="3090"></td>
        <td id="LC3090" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3091" class="blob-num js-line-number" data-line-number="3091"></td>
        <td id="LC3091" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> ret;</td>
      </tr>
      <tr>
        <td id="L3092" class="blob-num js-line-number" data-line-number="3092"></td>
        <td id="LC3092" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L3093" class="blob-num js-line-number" data-line-number="3093"></td>
        <td id="LC3093" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3094" class="blob-num js-line-number" data-line-number="3094"></td>
        <td id="LC3094" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">bool</span> <span class="pl-en">peg_match</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* syntax, <span class="pl-k">const</span> <span class="pl-k">char</span>* s) {</td>
      </tr>
      <tr>
        <td id="L3095" class="blob-num js-line-number" data-line-number="3095"></td>
        <td id="LC3095" class="blob-code blob-code-inner js-file-line">    parser <span class="pl-smi">parser</span>(syntax);</td>
      </tr>
      <tr>
        <td id="L3096" class="blob-num js-line-number" data-line-number="3096"></td>
        <td id="LC3096" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> parser.<span class="pl-c1">parse</span>(s);</td>
      </tr>
      <tr>
        <td id="L3097" class="blob-num js-line-number" data-line-number="3097"></td>
        <td id="LC3097" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L3098" class="blob-num js-line-number" data-line-number="3098"></td>
        <td id="LC3098" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3099" class="blob-num js-line-number" data-line-number="3099"></td>
        <td id="LC3099" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">bool</span> <span class="pl-en">peg_search</span>(parser&amp; pg, <span class="pl-k">const</span> <span class="pl-k">char</span>* s, <span class="pl-c1">size_t</span> n, match&amp; m) {</td>
      </tr>
      <tr>
        <td id="L3100" class="blob-num js-line-number" data-line-number="3100"></td>
        <td id="LC3100" class="blob-code blob-code-inner js-file-line">    m.<span class="pl-smi">matches</span>.<span class="pl-c1">clear</span>();</td>
      </tr>
      <tr>
        <td id="L3101" class="blob-num js-line-number" data-line-number="3101"></td>
        <td id="LC3101" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3102" class="blob-num js-line-number" data-line-number="3102"></td>
        <td id="LC3102" class="blob-code blob-code-inner js-file-line">    pg.<span class="pl-smi">match_action</span> = [&amp;](<span class="pl-k">const</span> <span class="pl-k">char</span>* a_s, <span class="pl-c1">size_t</span> a_n, <span class="pl-c1">size_t</span> a_id, <span class="pl-k">const</span> std::string&amp; a_name) {</td>
      </tr>
      <tr>
        <td id="L3103" class="blob-num js-line-number" data-line-number="3103"></td>
        <td id="LC3103" class="blob-code blob-code-inner js-file-line">        m.<span class="pl-smi">matches</span>.<span class="pl-c1">push_back</span>(match::Item{ a_s, a_n, a_id, a_name });</td>
      </tr>
      <tr>
        <td id="L3104" class="blob-num js-line-number" data-line-number="3104"></td>
        <td id="LC3104" class="blob-code blob-code-inner js-file-line">    };</td>
      </tr>
      <tr>
        <td id="L3105" class="blob-num js-line-number" data-line-number="3105"></td>
        <td id="LC3105" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3106" class="blob-num js-line-number" data-line-number="3106"></td>
        <td id="LC3106" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">size_t</span> mpos, mlen;</td>
      </tr>
      <tr>
        <td id="L3107" class="blob-num js-line-number" data-line-number="3107"></td>
        <td id="LC3107" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">auto</span> ret = pg.<span class="pl-c1">search</span>(s, n, mpos, mlen);</td>
      </tr>
      <tr>
        <td id="L3108" class="blob-num js-line-number" data-line-number="3108"></td>
        <td id="LC3108" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (ret) {</td>
      </tr>
      <tr>
        <td id="L3109" class="blob-num js-line-number" data-line-number="3109"></td>
        <td id="LC3109" class="blob-code blob-code-inner js-file-line">        m.<span class="pl-smi">matches</span>.<span class="pl-c1">insert</span>(m.<span class="pl-smi">matches</span>.<span class="pl-c1">begin</span>(), match::Item{ s + mpos, mlen, <span class="pl-c1">0</span>, <span class="pl-c1">std::string</span>() });</td>
      </tr>
      <tr>
        <td id="L3110" class="blob-num js-line-number" data-line-number="3110"></td>
        <td id="LC3110" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L3111" class="blob-num js-line-number" data-line-number="3111"></td>
        <td id="LC3111" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L3112" class="blob-num js-line-number" data-line-number="3112"></td>
        <td id="LC3112" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3113" class="blob-num js-line-number" data-line-number="3113"></td>
        <td id="LC3113" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L3114" class="blob-num js-line-number" data-line-number="3114"></td>
        <td id="LC3114" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L3115" class="blob-num js-line-number" data-line-number="3115"></td>
        <td id="LC3115" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3116" class="blob-num js-line-number" data-line-number="3116"></td>
        <td id="LC3116" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">bool</span> <span class="pl-en">peg_search</span>(parser&amp; pg, <span class="pl-k">const</span> <span class="pl-k">char</span>* s, match&amp; m) {</td>
      </tr>
      <tr>
        <td id="L3117" class="blob-num js-line-number" data-line-number="3117"></td>
        <td id="LC3117" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">auto</span> n = <span class="pl-c1">strlen</span>(s);</td>
      </tr>
      <tr>
        <td id="L3118" class="blob-num js-line-number" data-line-number="3118"></td>
        <td id="LC3118" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-c1">peg_search</span>(pg, s, n, m);</td>
      </tr>
      <tr>
        <td id="L3119" class="blob-num js-line-number" data-line-number="3119"></td>
        <td id="LC3119" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L3120" class="blob-num js-line-number" data-line-number="3120"></td>
        <td id="LC3120" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3121" class="blob-num js-line-number" data-line-number="3121"></td>
        <td id="LC3121" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">bool</span> <span class="pl-en">peg_search</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* syntax, <span class="pl-k">const</span> <span class="pl-k">char</span>* s, <span class="pl-c1">size_t</span> n, match&amp; m) {</td>
      </tr>
      <tr>
        <td id="L3122" class="blob-num js-line-number" data-line-number="3122"></td>
        <td id="LC3122" class="blob-code blob-code-inner js-file-line">    parser <span class="pl-smi">pg</span>(syntax);</td>
      </tr>
      <tr>
        <td id="L3123" class="blob-num js-line-number" data-line-number="3123"></td>
        <td id="LC3123" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-c1">peg_search</span>(pg, s, n, m);</td>
      </tr>
      <tr>
        <td id="L3124" class="blob-num js-line-number" data-line-number="3124"></td>
        <td id="LC3124" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L3125" class="blob-num js-line-number" data-line-number="3125"></td>
        <td id="LC3125" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3126" class="blob-num js-line-number" data-line-number="3126"></td>
        <td id="LC3126" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">bool</span> <span class="pl-en">peg_search</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* syntax, <span class="pl-k">const</span> <span class="pl-k">char</span>* s, match&amp; m) {</td>
      </tr>
      <tr>
        <td id="L3127" class="blob-num js-line-number" data-line-number="3127"></td>
        <td id="LC3127" class="blob-code blob-code-inner js-file-line">    parser <span class="pl-smi">pg</span>(syntax);</td>
      </tr>
      <tr>
        <td id="L3128" class="blob-num js-line-number" data-line-number="3128"></td>
        <td id="LC3128" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">auto</span> n = <span class="pl-c1">strlen</span>(s);</td>
      </tr>
      <tr>
        <td id="L3129" class="blob-num js-line-number" data-line-number="3129"></td>
        <td id="LC3129" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-c1">peg_search</span>(pg, s, n, m);</td>
      </tr>
      <tr>
        <td id="L3130" class="blob-num js-line-number" data-line-number="3130"></td>
        <td id="LC3130" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L3131" class="blob-num js-line-number" data-line-number="3131"></td>
        <td id="LC3131" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3132" class="blob-num js-line-number" data-line-number="3132"></td>
        <td id="LC3132" class="blob-code blob-code-inner js-file-line"><span class="pl-k">class</span> <span class="pl-en">peg_token_iterator</span> : <span class="pl-k">public</span> <span class="pl-en">std</span>::iterator&lt;std::forward_iterator_tag, match&gt;</td>
      </tr>
      <tr>
        <td id="L3133" class="blob-num js-line-number" data-line-number="3133"></td>
        <td id="LC3133" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="L3134" class="blob-num js-line-number" data-line-number="3134"></td>
        <td id="LC3134" class="blob-code blob-code-inner js-file-line"><span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L3135" class="blob-num js-line-number" data-line-number="3135"></td>
        <td id="LC3135" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">peg_token_iterator</span>()</td>
      </tr>
      <tr>
        <td id="L3136" class="blob-num js-line-number" data-line-number="3136"></td>
        <td id="LC3136" class="blob-code blob-code-inner js-file-line">        : s_(<span class="pl-c1">nullptr</span>)</td>
      </tr>
      <tr>
        <td id="L3137" class="blob-num js-line-number" data-line-number="3137"></td>
        <td id="LC3137" class="blob-code blob-code-inner js-file-line">        , l_(<span class="pl-c1">0</span>)</td>
      </tr>
      <tr>
        <td id="L3138" class="blob-num js-line-number" data-line-number="3138"></td>
        <td id="LC3138" class="blob-code blob-code-inner js-file-line">        , pos_((std::numeric_limits&lt;<span class="pl-c1">size_t</span>&gt;::max)()) {}</td>
      </tr>
      <tr>
        <td id="L3139" class="blob-num js-line-number" data-line-number="3139"></td>
        <td id="LC3139" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3140" class="blob-num js-line-number" data-line-number="3140"></td>
        <td id="LC3140" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">peg_token_iterator</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* syntax, <span class="pl-k">const</span> <span class="pl-k">char</span>* s)</td>
      </tr>
      <tr>
        <td id="L3141" class="blob-num js-line-number" data-line-number="3141"></td>
        <td id="LC3141" class="blob-code blob-code-inner js-file-line">        : peg_(syntax)</td>
      </tr>
      <tr>
        <td id="L3142" class="blob-num js-line-number" data-line-number="3142"></td>
        <td id="LC3142" class="blob-code blob-code-inner js-file-line">        , s_(s)</td>
      </tr>
      <tr>
        <td id="L3143" class="blob-num js-line-number" data-line-number="3143"></td>
        <td id="LC3143" class="blob-code blob-code-inner js-file-line">        , l_(strlen(s))</td>
      </tr>
      <tr>
        <td id="L3144" class="blob-num js-line-number" data-line-number="3144"></td>
        <td id="LC3144" class="blob-code blob-code-inner js-file-line">        , pos_(<span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L3145" class="blob-num js-line-number" data-line-number="3145"></td>
        <td id="LC3145" class="blob-code blob-code-inner js-file-line">        peg_.<span class="pl-smi">match_action</span> = [&amp;](<span class="pl-k">const</span> <span class="pl-k">char</span>* a_s, <span class="pl-c1">size_t</span> a_n, <span class="pl-c1">size_t</span> a_id, <span class="pl-k">const</span> std::string&amp; a_name) {</td>
      </tr>
      <tr>
        <td id="L3146" class="blob-num js-line-number" data-line-number="3146"></td>
        <td id="LC3146" class="blob-code blob-code-inner js-file-line">            m_.<span class="pl-smi">matches</span>.<span class="pl-c1">push_back</span>(match::Item{ a_s, a_n, a_id, a_name });</td>
      </tr>
      <tr>
        <td id="L3147" class="blob-num js-line-number" data-line-number="3147"></td>
        <td id="LC3147" class="blob-code blob-code-inner js-file-line">        };</td>
      </tr>
      <tr>
        <td id="L3148" class="blob-num js-line-number" data-line-number="3148"></td>
        <td id="LC3148" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">search</span>();</td>
      </tr>
      <tr>
        <td id="L3149" class="blob-num js-line-number" data-line-number="3149"></td>
        <td id="LC3149" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L3150" class="blob-num js-line-number" data-line-number="3150"></td>
        <td id="LC3150" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3151" class="blob-num js-line-number" data-line-number="3151"></td>
        <td id="LC3151" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">peg_token_iterator</span>(<span class="pl-k">const</span> peg_token_iterator&amp; rhs)</td>
      </tr>
      <tr>
        <td id="L3152" class="blob-num js-line-number" data-line-number="3152"></td>
        <td id="LC3152" class="blob-code blob-code-inner js-file-line">        : peg_(rhs.peg_)</td>
      </tr>
      <tr>
        <td id="L3153" class="blob-num js-line-number" data-line-number="3153"></td>
        <td id="LC3153" class="blob-code blob-code-inner js-file-line">        , s_(rhs.s_)</td>
      </tr>
      <tr>
        <td id="L3154" class="blob-num js-line-number" data-line-number="3154"></td>
        <td id="LC3154" class="blob-code blob-code-inner js-file-line">        , l_(rhs.l_)</td>
      </tr>
      <tr>
        <td id="L3155" class="blob-num js-line-number" data-line-number="3155"></td>
        <td id="LC3155" class="blob-code blob-code-inner js-file-line">        , pos_(rhs.pos_)</td>
      </tr>
      <tr>
        <td id="L3156" class="blob-num js-line-number" data-line-number="3156"></td>
        <td id="LC3156" class="blob-code blob-code-inner js-file-line">        , m_(rhs.m_) {}</td>
      </tr>
      <tr>
        <td id="L3157" class="blob-num js-line-number" data-line-number="3157"></td>
        <td id="LC3157" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3158" class="blob-num js-line-number" data-line-number="3158"></td>
        <td id="LC3158" class="blob-code blob-code-inner js-file-line">    peg_token_iterator&amp; <span class="pl-k">operator</span>++() {</td>
      </tr>
      <tr>
        <td id="L3159" class="blob-num js-line-number" data-line-number="3159"></td>
        <td id="LC3159" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">search</span>();</td>
      </tr>
      <tr>
        <td id="L3160" class="blob-num js-line-number" data-line-number="3160"></td>
        <td id="LC3160" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> *<span class="pl-c1">this</span>;</td>
      </tr>
      <tr>
        <td id="L3161" class="blob-num js-line-number" data-line-number="3161"></td>
        <td id="LC3161" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L3162" class="blob-num js-line-number" data-line-number="3162"></td>
        <td id="LC3162" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3163" class="blob-num js-line-number" data-line-number="3163"></td>
        <td id="LC3163" class="blob-code blob-code-inner js-file-line">    peg_token_iterator <span class="pl-k">operator</span>++(<span class="pl-k">int</span>) {</td>
      </tr>
      <tr>
        <td id="L3164" class="blob-num js-line-number" data-line-number="3164"></td>
        <td id="LC3164" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">auto</span> it = *<span class="pl-c1">this</span>;</td>
      </tr>
      <tr>
        <td id="L3165" class="blob-num js-line-number" data-line-number="3165"></td>
        <td id="LC3165" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">search</span>();</td>
      </tr>
      <tr>
        <td id="L3166" class="blob-num js-line-number" data-line-number="3166"></td>
        <td id="LC3166" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> it;</td>
      </tr>
      <tr>
        <td id="L3167" class="blob-num js-line-number" data-line-number="3167"></td>
        <td id="LC3167" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L3168" class="blob-num js-line-number" data-line-number="3168"></td>
        <td id="LC3168" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3169" class="blob-num js-line-number" data-line-number="3169"></td>
        <td id="LC3169" class="blob-code blob-code-inner js-file-line">    match&amp; <span class="pl-k">operator</span>*() {</td>
      </tr>
      <tr>
        <td id="L3170" class="blob-num js-line-number" data-line-number="3170"></td>
        <td id="LC3170" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> m_;</td>
      </tr>
      <tr>
        <td id="L3171" class="blob-num js-line-number" data-line-number="3171"></td>
        <td id="LC3171" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L3172" class="blob-num js-line-number" data-line-number="3172"></td>
        <td id="LC3172" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3173" class="blob-num js-line-number" data-line-number="3173"></td>
        <td id="LC3173" class="blob-code blob-code-inner js-file-line">    match* <span class="pl-k">operator</span>-&gt;() {</td>
      </tr>
      <tr>
        <td id="L3174" class="blob-num js-line-number" data-line-number="3174"></td>
        <td id="LC3174" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> &amp;m_;</td>
      </tr>
      <tr>
        <td id="L3175" class="blob-num js-line-number" data-line-number="3175"></td>
        <td id="LC3175" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L3176" class="blob-num js-line-number" data-line-number="3176"></td>
        <td id="LC3176" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3177" class="blob-num js-line-number" data-line-number="3177"></td>
        <td id="LC3177" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">bool</span> <span class="pl-k">operator</span>==(<span class="pl-k">const</span> peg_token_iterator&amp; rhs) {</td>
      </tr>
      <tr>
        <td id="L3178" class="blob-num js-line-number" data-line-number="3178"></td>
        <td id="LC3178" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> pos_ == rhs.<span class="pl-smi">pos_</span>;</td>
      </tr>
      <tr>
        <td id="L3179" class="blob-num js-line-number" data-line-number="3179"></td>
        <td id="LC3179" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L3180" class="blob-num js-line-number" data-line-number="3180"></td>
        <td id="LC3180" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3181" class="blob-num js-line-number" data-line-number="3181"></td>
        <td id="LC3181" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">bool</span> <span class="pl-k">operator</span>!=(<span class="pl-k">const</span> peg_token_iterator&amp; rhs) {</td>
      </tr>
      <tr>
        <td id="L3182" class="blob-num js-line-number" data-line-number="3182"></td>
        <td id="LC3182" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> pos_ != rhs.<span class="pl-smi">pos_</span>;</td>
      </tr>
      <tr>
        <td id="L3183" class="blob-num js-line-number" data-line-number="3183"></td>
        <td id="LC3183" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L3184" class="blob-num js-line-number" data-line-number="3184"></td>
        <td id="LC3184" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3185" class="blob-num js-line-number" data-line-number="3185"></td>
        <td id="LC3185" class="blob-code blob-code-inner js-file-line"><span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L3186" class="blob-num js-line-number" data-line-number="3186"></td>
        <td id="LC3186" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">search</span>() {</td>
      </tr>
      <tr>
        <td id="L3187" class="blob-num js-line-number" data-line-number="3187"></td>
        <td id="LC3187" class="blob-code blob-code-inner js-file-line">        m_.<span class="pl-smi">matches</span>.<span class="pl-c1">clear</span>();</td>
      </tr>
      <tr>
        <td id="L3188" class="blob-num js-line-number" data-line-number="3188"></td>
        <td id="LC3188" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">size_t</span> mpos, mlen;</td>
      </tr>
      <tr>
        <td id="L3189" class="blob-num js-line-number" data-line-number="3189"></td>
        <td id="LC3189" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (peg_.<span class="pl-c1">search</span>(s_ + pos_, l_ - pos_, mpos, mlen)) {</td>
      </tr>
      <tr>
        <td id="L3190" class="blob-num js-line-number" data-line-number="3190"></td>
        <td id="LC3190" class="blob-code blob-code-inner js-file-line">            m_.<span class="pl-smi">matches</span>.<span class="pl-c1">insert</span>(m_.<span class="pl-smi">matches</span>.<span class="pl-c1">begin</span>(), match::Item{ s_ + mpos, mlen, <span class="pl-c1">0</span>, <span class="pl-c1">std::string</span>() });</td>
      </tr>
      <tr>
        <td id="L3191" class="blob-num js-line-number" data-line-number="3191"></td>
        <td id="LC3191" class="blob-code blob-code-inner js-file-line">            pos_ += mpos + mlen;</td>
      </tr>
      <tr>
        <td id="L3192" class="blob-num js-line-number" data-line-number="3192"></td>
        <td id="LC3192" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L3193" class="blob-num js-line-number" data-line-number="3193"></td>
        <td id="LC3193" class="blob-code blob-code-inner js-file-line">            pos_ = (std::numeric_limits&lt;<span class="pl-c1">size_t</span>&gt;::max)();</td>
      </tr>
      <tr>
        <td id="L3194" class="blob-num js-line-number" data-line-number="3194"></td>
        <td id="LC3194" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L3195" class="blob-num js-line-number" data-line-number="3195"></td>
        <td id="LC3195" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L3196" class="blob-num js-line-number" data-line-number="3196"></td>
        <td id="LC3196" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3197" class="blob-num js-line-number" data-line-number="3197"></td>
        <td id="LC3197" class="blob-code blob-code-inner js-file-line">    parser      peg_;</td>
      </tr>
      <tr>
        <td id="L3198" class="blob-num js-line-number" data-line-number="3198"></td>
        <td id="LC3198" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> <span class="pl-k">char</span>* s_;</td>
      </tr>
      <tr>
        <td id="L3199" class="blob-num js-line-number" data-line-number="3199"></td>
        <td id="LC3199" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">size_t</span>      l_;</td>
      </tr>
      <tr>
        <td id="L3200" class="blob-num js-line-number" data-line-number="3200"></td>
        <td id="LC3200" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">size_t</span>      pos_;</td>
      </tr>
      <tr>
        <td id="L3201" class="blob-num js-line-number" data-line-number="3201"></td>
        <td id="LC3201" class="blob-code blob-code-inner js-file-line">    match       m_;</td>
      </tr>
      <tr>
        <td id="L3202" class="blob-num js-line-number" data-line-number="3202"></td>
        <td id="LC3202" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L3203" class="blob-num js-line-number" data-line-number="3203"></td>
        <td id="LC3203" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3204" class="blob-num js-line-number" data-line-number="3204"></td>
        <td id="LC3204" class="blob-code blob-code-inner js-file-line"><span class="pl-k">struct</span> <span class="pl-en">peg_token_range</span> {</td>
      </tr>
      <tr>
        <td id="L3205" class="blob-num js-line-number" data-line-number="3205"></td>
        <td id="LC3205" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">typedef</span> peg_token_iterator iterator;</td>
      </tr>
      <tr>
        <td id="L3206" class="blob-num js-line-number" data-line-number="3206"></td>
        <td id="LC3206" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">typedef</span> <span class="pl-k">const</span> peg_token_iterator const_iterator;</td>
      </tr>
      <tr>
        <td id="L3207" class="blob-num js-line-number" data-line-number="3207"></td>
        <td id="LC3207" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3208" class="blob-num js-line-number" data-line-number="3208"></td>
        <td id="LC3208" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">peg_token_range</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* syntax, <span class="pl-k">const</span> <span class="pl-k">char</span>* s)</td>
      </tr>
      <tr>
        <td id="L3209" class="blob-num js-line-number" data-line-number="3209"></td>
        <td id="LC3209" class="blob-code blob-code-inner js-file-line">        : beg_iter(peg_token_iterator(syntax, s))</td>
      </tr>
      <tr>
        <td id="L3210" class="blob-num js-line-number" data-line-number="3210"></td>
        <td id="LC3210" class="blob-code blob-code-inner js-file-line">        , end_iter() {}</td>
      </tr>
      <tr>
        <td id="L3211" class="blob-num js-line-number" data-line-number="3211"></td>
        <td id="LC3211" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3212" class="blob-num js-line-number" data-line-number="3212"></td>
        <td id="LC3212" class="blob-code blob-code-inner js-file-line">    iterator <span class="pl-en">begin</span>() {</td>
      </tr>
      <tr>
        <td id="L3213" class="blob-num js-line-number" data-line-number="3213"></td>
        <td id="LC3213" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> beg_iter;</td>
      </tr>
      <tr>
        <td id="L3214" class="blob-num js-line-number" data-line-number="3214"></td>
        <td id="LC3214" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L3215" class="blob-num js-line-number" data-line-number="3215"></td>
        <td id="LC3215" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3216" class="blob-num js-line-number" data-line-number="3216"></td>
        <td id="LC3216" class="blob-code blob-code-inner js-file-line">    iterator <span class="pl-en">end</span>() {</td>
      </tr>
      <tr>
        <td id="L3217" class="blob-num js-line-number" data-line-number="3217"></td>
        <td id="LC3217" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> end_iter;</td>
      </tr>
      <tr>
        <td id="L3218" class="blob-num js-line-number" data-line-number="3218"></td>
        <td id="LC3218" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L3219" class="blob-num js-line-number" data-line-number="3219"></td>
        <td id="LC3219" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3220" class="blob-num js-line-number" data-line-number="3220"></td>
        <td id="LC3220" class="blob-code blob-code-inner js-file-line">    const_iterator <span class="pl-en">cbegin</span>() <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L3221" class="blob-num js-line-number" data-line-number="3221"></td>
        <td id="LC3221" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> beg_iter;</td>
      </tr>
      <tr>
        <td id="L3222" class="blob-num js-line-number" data-line-number="3222"></td>
        <td id="LC3222" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L3223" class="blob-num js-line-number" data-line-number="3223"></td>
        <td id="LC3223" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3224" class="blob-num js-line-number" data-line-number="3224"></td>
        <td id="LC3224" class="blob-code blob-code-inner js-file-line">    const_iterator <span class="pl-en">cend</span>() <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L3225" class="blob-num js-line-number" data-line-number="3225"></td>
        <td id="LC3225" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> end_iter;</td>
      </tr>
      <tr>
        <td id="L3226" class="blob-num js-line-number" data-line-number="3226"></td>
        <td id="LC3226" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L3227" class="blob-num js-line-number" data-line-number="3227"></td>
        <td id="LC3227" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3228" class="blob-num js-line-number" data-line-number="3228"></td>
        <td id="LC3228" class="blob-code blob-code-inner js-file-line"><span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L3229" class="blob-num js-line-number" data-line-number="3229"></td>
        <td id="LC3229" class="blob-code blob-code-inner js-file-line">    peg_token_iterator beg_iter;</td>
      </tr>
      <tr>
        <td id="L3230" class="blob-num js-line-number" data-line-number="3230"></td>
        <td id="LC3230" class="blob-code blob-code-inner js-file-line">    peg_token_iterator end_iter;</td>
      </tr>
      <tr>
        <td id="L3231" class="blob-num js-line-number" data-line-number="3231"></td>
        <td id="LC3231" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L3232" class="blob-num js-line-number" data-line-number="3232"></td>
        <td id="LC3232" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3233" class="blob-num js-line-number" data-line-number="3233"></td>
        <td id="LC3233" class="blob-code blob-code-inner js-file-line">} <span class="pl-c"><span class="pl-c">//</span> namespace peg</span></td>
      </tr>
      <tr>
        <td id="L3234" class="blob-num js-line-number" data-line-number="3234"></td>
        <td id="LC3234" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3235" class="blob-num js-line-number" data-line-number="3235"></td>
        <td id="LC3235" class="blob-code blob-code-inner js-file-line">#endif</td>
      </tr>
      <tr>
        <td id="L3236" class="blob-num js-line-number" data-line-number="3236"></td>
        <td id="LC3236" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3237" class="blob-num js-line-number" data-line-number="3237"></td>
        <td id="LC3237" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> vim: et ts=4 sw=4 cin cino={1s ff=unix</span></td>
      </tr>
      <tr>
        <td id="L3238" class="blob-num js-line-number" data-line-number="3238"></td>
        <td id="LC3238" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifndef</span> ARGH</td>
      </tr>
      <tr>
        <td id="L3239" class="blob-num js-line-number" data-line-number="3239"></td>
        <td id="LC3239" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">define</span> <span class="pl-en">ARGH</span></td>
      </tr>
      <tr>
        <td id="L3240" class="blob-num js-line-number" data-line-number="3240"></td>
        <td id="LC3240" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#pragma once</span></td>
      </tr>
      <tr>
        <td id="L3241" class="blob-num js-line-number" data-line-number="3241"></td>
        <td id="LC3241" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3242" class="blob-num js-line-number" data-line-number="3242"></td>
        <td id="LC3242" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>algorithm<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L3243" class="blob-num js-line-number" data-line-number="3243"></td>
        <td id="LC3243" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>sstream<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L3244" class="blob-num js-line-number" data-line-number="3244"></td>
        <td id="LC3244" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>string<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L3245" class="blob-num js-line-number" data-line-number="3245"></td>
        <td id="LC3245" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>vector<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L3246" class="blob-num js-line-number" data-line-number="3246"></td>
        <td id="LC3246" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>set<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L3247" class="blob-num js-line-number" data-line-number="3247"></td>
        <td id="LC3247" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>map<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L3248" class="blob-num js-line-number" data-line-number="3248"></td>
        <td id="LC3248" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>cassert<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L3249" class="blob-num js-line-number" data-line-number="3249"></td>
        <td id="LC3249" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3250" class="blob-num js-line-number" data-line-number="3250"></td>
        <td id="LC3250" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">argh</span></td>
      </tr>
      <tr>
        <td id="L3251" class="blob-num js-line-number" data-line-number="3251"></td>
        <td id="LC3251" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="L3252" class="blob-num js-line-number" data-line-number="3252"></td>
        <td id="LC3252" class="blob-code blob-code-inner js-file-line">   <span class="pl-c"><span class="pl-c">//</span> Terminology:</span></td>
      </tr>
      <tr>
        <td id="L3253" class="blob-num js-line-number" data-line-number="3253"></td>
        <td id="LC3253" class="blob-code blob-code-inner js-file-line">   <span class="pl-c"><span class="pl-c">//</span> A command line is composed of 2 types of args:</span></td>
      </tr>
      <tr>
        <td id="L3254" class="blob-num js-line-number" data-line-number="3254"></td>
        <td id="LC3254" class="blob-code blob-code-inner js-file-line">   <span class="pl-c"><span class="pl-c">//</span> 1. Positional args, i.e. free standing values</span></td>
      </tr>
      <tr>
        <td id="L3255" class="blob-num js-line-number" data-line-number="3255"></td>
        <td id="LC3255" class="blob-code blob-code-inner js-file-line">   <span class="pl-c"><span class="pl-c">//</span> 2. Options: args beginning with &#39;-&#39;. We identify two kinds:</span></td>
      </tr>
      <tr>
        <td id="L3256" class="blob-num js-line-number" data-line-number="3256"></td>
        <td id="LC3256" class="blob-code blob-code-inner js-file-line">   <span class="pl-c"><span class="pl-c">//</span>    2.1: Flags: boolean options =&gt;  (exist ? true : false)</span></td>
      </tr>
      <tr>
        <td id="L3257" class="blob-num js-line-number" data-line-number="3257"></td>
        <td id="LC3257" class="blob-code blob-code-inner js-file-line">   <span class="pl-c"><span class="pl-c">//</span>    2.2: Parameters: a name followed by a non-option value</span></td>
      </tr>
      <tr>
        <td id="L3258" class="blob-num js-line-number" data-line-number="3258"></td>
        <td id="LC3258" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3259" class="blob-num js-line-number" data-line-number="3259"></td>
        <td id="LC3259" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">if</span> !defined(__GNUC__) || (__GNUC__ &gt;= 5)</td>
      </tr>
      <tr>
        <td id="L3260" class="blob-num js-line-number" data-line-number="3260"></td>
        <td id="LC3260" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">using</span> string_stream = std::istringstream;</td>
      </tr>
      <tr>
        <td id="L3261" class="blob-num js-line-number" data-line-number="3261"></td>
        <td id="LC3261" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">else</span></td>
      </tr>
      <tr>
        <td id="L3262" class="blob-num js-line-number" data-line-number="3262"></td>
        <td id="LC3262" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Until GCC 5, istringstream did not have a move constructor.</span></td>
      </tr>
      <tr>
        <td id="L3263" class="blob-num js-line-number" data-line-number="3263"></td>
        <td id="LC3263" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> stringstream_proxy is used instead, as a workaround.</span></td>
      </tr>
      <tr>
        <td id="L3264" class="blob-num js-line-number" data-line-number="3264"></td>
        <td id="LC3264" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">class</span> <span class="pl-en">stringstream_proxy</span></td>
      </tr>
      <tr>
        <td id="L3265" class="blob-num js-line-number" data-line-number="3265"></td>
        <td id="LC3265" class="blob-code blob-code-inner js-file-line">   {</td>
      </tr>
      <tr>
        <td id="L3266" class="blob-num js-line-number" data-line-number="3266"></td>
        <td id="LC3266" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L3267" class="blob-num js-line-number" data-line-number="3267"></td>
        <td id="LC3267" class="blob-code blob-code-inner js-file-line">      <span class="pl-en">stringstream_proxy</span>() = <span class="pl-k">default</span>;</td>
      </tr>
      <tr>
        <td id="L3268" class="blob-num js-line-number" data-line-number="3268"></td>
        <td id="LC3268" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3269" class="blob-num js-line-number" data-line-number="3269"></td>
        <td id="LC3269" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> Construct with a value.</span></td>
      </tr>
      <tr>
        <td id="L3270" class="blob-num js-line-number" data-line-number="3270"></td>
        <td id="LC3270" class="blob-code blob-code-inner js-file-line">      <span class="pl-en">stringstream_proxy</span>(std::string <span class="pl-k">const</span>&amp; value) :</td>
      </tr>
      <tr>
        <td id="L3271" class="blob-num js-line-number" data-line-number="3271"></td>
        <td id="LC3271" class="blob-code blob-code-inner js-file-line">         <span class="pl-en">stream_</span>(value)</td>
      </tr>
      <tr>
        <td id="L3272" class="blob-num js-line-number" data-line-number="3272"></td>
        <td id="LC3272" class="blob-code blob-code-inner js-file-line">      {}</td>
      </tr>
      <tr>
        <td id="L3273" class="blob-num js-line-number" data-line-number="3273"></td>
        <td id="LC3273" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3274" class="blob-num js-line-number" data-line-number="3274"></td>
        <td id="LC3274" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> Copy constructor.</span></td>
      </tr>
      <tr>
        <td id="L3275" class="blob-num js-line-number" data-line-number="3275"></td>
        <td id="LC3275" class="blob-code blob-code-inner js-file-line">      <span class="pl-en">stringstream_proxy</span>(<span class="pl-k">const</span> stringstream_proxy&amp; other) :</td>
      </tr>
      <tr>
        <td id="L3276" class="blob-num js-line-number" data-line-number="3276"></td>
        <td id="LC3276" class="blob-code blob-code-inner js-file-line">         <span class="pl-en">stream_</span>(other.stream_.str())</td>
      </tr>
      <tr>
        <td id="L3277" class="blob-num js-line-number" data-line-number="3277"></td>
        <td id="LC3277" class="blob-code blob-code-inner js-file-line">      {</td>
      </tr>
      <tr>
        <td id="L3278" class="blob-num js-line-number" data-line-number="3278"></td>
        <td id="LC3278" class="blob-code blob-code-inner js-file-line">         stream_.<span class="pl-c1">setstate</span>(other.<span class="pl-smi">stream_</span>.<span class="pl-c1">rdstate</span>());</td>
      </tr>
      <tr>
        <td id="L3279" class="blob-num js-line-number" data-line-number="3279"></td>
        <td id="LC3279" class="blob-code blob-code-inner js-file-line">      }</td>
      </tr>
      <tr>
        <td id="L3280" class="blob-num js-line-number" data-line-number="3280"></td>
        <td id="LC3280" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3281" class="blob-num js-line-number" data-line-number="3281"></td>
        <td id="LC3281" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">void</span> <span class="pl-en">setstate</span>(std::ios_base::iostate state) { stream_.<span class="pl-c1">setstate</span>(state); }</td>
      </tr>
      <tr>
        <td id="L3282" class="blob-num js-line-number" data-line-number="3282"></td>
        <td id="LC3282" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3283" class="blob-num js-line-number" data-line-number="3283"></td>
        <td id="LC3283" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> Stream out the value of the parameter.</span></td>
      </tr>
      <tr>
        <td id="L3284" class="blob-num js-line-number" data-line-number="3284"></td>
        <td id="LC3284" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> If the conversion was not possible, the stream will enter the fail state,</span></td>
      </tr>
      <tr>
        <td id="L3285" class="blob-num js-line-number" data-line-number="3285"></td>
        <td id="LC3285" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> and operator bool will return false.</span></td>
      </tr>
      <tr>
        <td id="L3286" class="blob-num js-line-number" data-line-number="3286"></td>
        <td id="LC3286" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">template</span>&lt;<span class="pl-k">typename</span> T&gt;</td>
      </tr>
      <tr>
        <td id="L3287" class="blob-num js-line-number" data-line-number="3287"></td>
        <td id="LC3287" class="blob-code blob-code-inner js-file-line">      stringstream_proxy&amp; <span class="pl-k">operator</span> &gt;&gt; (T&amp; thing)</td>
      </tr>
      <tr>
        <td id="L3288" class="blob-num js-line-number" data-line-number="3288"></td>
        <td id="LC3288" class="blob-code blob-code-inner js-file-line">      {</td>
      </tr>
      <tr>
        <td id="L3289" class="blob-num js-line-number" data-line-number="3289"></td>
        <td id="LC3289" class="blob-code blob-code-inner js-file-line">         stream_ &gt;&gt; thing;</td>
      </tr>
      <tr>
        <td id="L3290" class="blob-num js-line-number" data-line-number="3290"></td>
        <td id="LC3290" class="blob-code blob-code-inner js-file-line">         <span class="pl-k">return</span> *<span class="pl-c1">this</span>;</td>
      </tr>
      <tr>
        <td id="L3291" class="blob-num js-line-number" data-line-number="3291"></td>
        <td id="LC3291" class="blob-code blob-code-inner js-file-line">      }</td>
      </tr>
      <tr>
        <td id="L3292" class="blob-num js-line-number" data-line-number="3292"></td>
        <td id="LC3292" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3293" class="blob-num js-line-number" data-line-number="3293"></td>
        <td id="LC3293" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3294" class="blob-num js-line-number" data-line-number="3294"></td>
        <td id="LC3294" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> Get the string value.</span></td>
      </tr>
      <tr>
        <td id="L3295" class="blob-num js-line-number" data-line-number="3295"></td>
        <td id="LC3295" class="blob-code blob-code-inner js-file-line">      std::string <span class="pl-en">str</span>() <span class="pl-k">const</span> { <span class="pl-k">return</span> stream_.<span class="pl-c1">str</span>(); }</td>
      </tr>
      <tr>
        <td id="L3296" class="blob-num js-line-number" data-line-number="3296"></td>
        <td id="LC3296" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3297" class="blob-num js-line-number" data-line-number="3297"></td>
        <td id="LC3297" class="blob-code blob-code-inner js-file-line">      std::stringbuf* <span class="pl-en">rdbuf</span>() <span class="pl-k">const</span> { <span class="pl-k">return</span> stream_.<span class="pl-c1">rdbuf</span>(); }</td>
      </tr>
      <tr>
        <td id="L3298" class="blob-num js-line-number" data-line-number="3298"></td>
        <td id="LC3298" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3299" class="blob-num js-line-number" data-line-number="3299"></td>
        <td id="LC3299" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> Check the state of the stream. </span></td>
      </tr>
      <tr>
        <td id="L3300" class="blob-num js-line-number" data-line-number="3300"></td>
        <td id="LC3300" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> False when the most recent stream operation failed</span></td>
      </tr>
      <tr>
        <td id="L3301" class="blob-num js-line-number" data-line-number="3301"></td>
        <td id="LC3301" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">operator</span> <span class="pl-en">bool</span>() <span class="pl-k">const</span> { <span class="pl-k">return</span> !!stream_; }</td>
      </tr>
      <tr>
        <td id="L3302" class="blob-num js-line-number" data-line-number="3302"></td>
        <td id="LC3302" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3303" class="blob-num js-line-number" data-line-number="3303"></td>
        <td id="LC3303" class="blob-code blob-code-inner js-file-line">      <span class="pl-en">~stringstream_proxy</span>() = <span class="pl-k">default</span>;</td>
      </tr>
      <tr>
        <td id="L3304" class="blob-num js-line-number" data-line-number="3304"></td>
        <td id="LC3304" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L3305" class="blob-num js-line-number" data-line-number="3305"></td>
        <td id="LC3305" class="blob-code blob-code-inner js-file-line">      std::istringstream stream_;</td>
      </tr>
      <tr>
        <td id="L3306" class="blob-num js-line-number" data-line-number="3306"></td>
        <td id="LC3306" class="blob-code blob-code-inner js-file-line">   };</td>
      </tr>
      <tr>
        <td id="L3307" class="blob-num js-line-number" data-line-number="3307"></td>
        <td id="LC3307" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">using</span> string_stream = stringstream_proxy;</td>
      </tr>
      <tr>
        <td id="L3308" class="blob-num js-line-number" data-line-number="3308"></td>
        <td id="LC3308" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L3309" class="blob-num js-line-number" data-line-number="3309"></td>
        <td id="LC3309" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3310" class="blob-num js-line-number" data-line-number="3310"></td>
        <td id="LC3310" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">class</span> <span class="pl-en">parser</span></td>
      </tr>
      <tr>
        <td id="L3311" class="blob-num js-line-number" data-line-number="3311"></td>
        <td id="LC3311" class="blob-code blob-code-inner js-file-line">   {</td>
      </tr>
      <tr>
        <td id="L3312" class="blob-num js-line-number" data-line-number="3312"></td>
        <td id="LC3312" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L3313" class="blob-num js-line-number" data-line-number="3313"></td>
        <td id="LC3313" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">enum</span> Mode { PREFER_FLAG_FOR_UNREG_OPTION = <span class="pl-c1">1</span> &lt;&lt; <span class="pl-c1">0</span>,</td>
      </tr>
      <tr>
        <td id="L3314" class="blob-num js-line-number" data-line-number="3314"></td>
        <td id="LC3314" class="blob-code blob-code-inner js-file-line">                  PREFER_PARAM_FOR_UNREG_OPTION = <span class="pl-c1">1</span> &lt;&lt; <span class="pl-c1">1</span>,</td>
      </tr>
      <tr>
        <td id="L3315" class="blob-num js-line-number" data-line-number="3315"></td>
        <td id="LC3315" class="blob-code blob-code-inner js-file-line">                  NO_SPLIT_ON_EQUALSIGN = <span class="pl-c1">1</span> &lt;&lt; <span class="pl-c1">2</span>,</td>
      </tr>
      <tr>
        <td id="L3316" class="blob-num js-line-number" data-line-number="3316"></td>
        <td id="LC3316" class="blob-code blob-code-inner js-file-line">                  SINGLE_DASH_IS_MULTIFLAG = <span class="pl-c1">1</span> &lt;&lt; <span class="pl-c1">3</span>,</td>
      </tr>
      <tr>
        <td id="L3317" class="blob-num js-line-number" data-line-number="3317"></td>
        <td id="LC3317" class="blob-code blob-code-inner js-file-line">                };</td>
      </tr>
      <tr>
        <td id="L3318" class="blob-num js-line-number" data-line-number="3318"></td>
        <td id="LC3318" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3319" class="blob-num js-line-number" data-line-number="3319"></td>
        <td id="LC3319" class="blob-code blob-code-inner js-file-line">      <span class="pl-en">parser</span>() = <span class="pl-k">default</span>;</td>
      </tr>
      <tr>
        <td id="L3320" class="blob-num js-line-number" data-line-number="3320"></td>
        <td id="LC3320" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3321" class="blob-num js-line-number" data-line-number="3321"></td>
        <td id="LC3321" class="blob-code blob-code-inner js-file-line">      <span class="pl-en">parser</span>(std::initializer_list&lt;<span class="pl-k">char</span> <span class="pl-k">const</span>* <span class="pl-k">const</span>&gt; pre_reg_names)</td>
      </tr>
      <tr>
        <td id="L3322" class="blob-num js-line-number" data-line-number="3322"></td>
        <td id="LC3322" class="blob-code blob-code-inner js-file-line">      {  <span class="pl-c1">add_params</span>(pre_reg_names); }</td>
      </tr>
      <tr>
        <td id="L3323" class="blob-num js-line-number" data-line-number="3323"></td>
        <td id="LC3323" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3324" class="blob-num js-line-number" data-line-number="3324"></td>
        <td id="LC3324" class="blob-code blob-code-inner js-file-line">      <span class="pl-en">parser</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* <span class="pl-k">const</span> argv[], <span class="pl-k">int</span> mode = PREFER_FLAG_FOR_UNREG_OPTION)</td>
      </tr>
      <tr>
        <td id="L3325" class="blob-num js-line-number" data-line-number="3325"></td>
        <td id="LC3325" class="blob-code blob-code-inner js-file-line">      {  <span class="pl-c1">parse</span>(argv, mode); }</td>
      </tr>
      <tr>
        <td id="L3326" class="blob-num js-line-number" data-line-number="3326"></td>
        <td id="LC3326" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3327" class="blob-num js-line-number" data-line-number="3327"></td>
        <td id="LC3327" class="blob-code blob-code-inner js-file-line">      <span class="pl-en">parser</span>(<span class="pl-k">int</span> argc, <span class="pl-k">const</span> <span class="pl-k">char</span>* <span class="pl-k">const</span> argv[], <span class="pl-k">int</span> mode = PREFER_FLAG_FOR_UNREG_OPTION)</td>
      </tr>
      <tr>
        <td id="L3328" class="blob-num js-line-number" data-line-number="3328"></td>
        <td id="LC3328" class="blob-code blob-code-inner js-file-line">      {  <span class="pl-c1">parse</span>(argc, argv, mode); }</td>
      </tr>
      <tr>
        <td id="L3329" class="blob-num js-line-number" data-line-number="3329"></td>
        <td id="LC3329" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3330" class="blob-num js-line-number" data-line-number="3330"></td>
        <td id="LC3330" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">void</span> <span class="pl-en">add_param</span>(std::string <span class="pl-k">const</span>&amp; name);</td>
      </tr>
      <tr>
        <td id="L3331" class="blob-num js-line-number" data-line-number="3331"></td>
        <td id="LC3331" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">void</span> <span class="pl-en">add_params</span>(std::initializer_list&lt;<span class="pl-k">char</span> <span class="pl-k">const</span>* <span class="pl-k">const</span>&gt; init_list);</td>
      </tr>
      <tr>
        <td id="L3332" class="blob-num js-line-number" data-line-number="3332"></td>
        <td id="LC3332" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3333" class="blob-num js-line-number" data-line-number="3333"></td>
        <td id="LC3333" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">void</span> <span class="pl-en">parse</span>(<span class="pl-k">const</span> <span class="pl-k">char</span>* <span class="pl-k">const</span> argv[], <span class="pl-k">int</span> mode = PREFER_FLAG_FOR_UNREG_OPTION);</td>
      </tr>
      <tr>
        <td id="L3334" class="blob-num js-line-number" data-line-number="3334"></td>
        <td id="LC3334" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">void</span> <span class="pl-en">parse</span>(<span class="pl-k">int</span> argc, <span class="pl-k">const</span> <span class="pl-k">char</span>* <span class="pl-k">const</span> argv[], <span class="pl-k">int</span> mode = PREFER_FLAG_FOR_UNREG_OPTION);</td>
      </tr>
      <tr>
        <td id="L3335" class="blob-num js-line-number" data-line-number="3335"></td>
        <td id="LC3335" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3336" class="blob-num js-line-number" data-line-number="3336"></td>
        <td id="LC3336" class="blob-code blob-code-inner js-file-line">      std::multiset&lt;std::string&gt;          <span class="pl-k">const</span>&amp; <span class="pl-en">flags</span>()    <span class="pl-k">const</span> { <span class="pl-k">return</span> flags_;    }</td>
      </tr>
      <tr>
        <td id="L3337" class="blob-num js-line-number" data-line-number="3337"></td>
        <td id="LC3337" class="blob-code blob-code-inner js-file-line">      std::map&lt;std::string, std::string&gt;  <span class="pl-k">const</span>&amp; <span class="pl-en">params</span>()   <span class="pl-k">const</span> { <span class="pl-k">return</span> params_;   }</td>
      </tr>
      <tr>
        <td id="L3338" class="blob-num js-line-number" data-line-number="3338"></td>
        <td id="LC3338" class="blob-code blob-code-inner js-file-line">      std::vector&lt;std::string&gt;            <span class="pl-k">const</span>&amp; <span class="pl-en">pos_args</span>() <span class="pl-k">const</span> { <span class="pl-k">return</span> pos_args_; }</td>
      </tr>
      <tr>
        <td id="L3339" class="blob-num js-line-number" data-line-number="3339"></td>
        <td id="LC3339" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3340" class="blob-num js-line-number" data-line-number="3340"></td>
        <td id="LC3340" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> begin() and end() for using range-for over positional args.</span></td>
      </tr>
      <tr>
        <td id="L3341" class="blob-num js-line-number" data-line-number="3341"></td>
        <td id="LC3341" class="blob-code blob-code-inner js-file-line">      std::vector&lt;std::string&gt;::const_iterator <span class="pl-en">begin</span>() <span class="pl-k">const</span> { <span class="pl-k">return</span> pos_args_.<span class="pl-c1">cbegin</span>(); }</td>
      </tr>
      <tr>
        <td id="L3342" class="blob-num js-line-number" data-line-number="3342"></td>
        <td id="LC3342" class="blob-code blob-code-inner js-file-line">      std::vector&lt;std::string&gt;::const_iterator <span class="pl-en">end</span>()   <span class="pl-k">const</span> { <span class="pl-k">return</span> pos_args_.<span class="pl-c1">cend</span>();   }</td>
      </tr>
      <tr>
        <td id="L3343" class="blob-num js-line-number" data-line-number="3343"></td>
        <td id="LC3343" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3344" class="blob-num js-line-number" data-line-number="3344"></td>
        <td id="LC3344" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span>////////////////////////////////////////////////////////////////////////</span></td>
      </tr>
      <tr>
        <td id="L3345" class="blob-num js-line-number" data-line-number="3345"></td>
        <td id="LC3345" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> Accessors</span></td>
      </tr>
      <tr>
        <td id="L3346" class="blob-num js-line-number" data-line-number="3346"></td>
        <td id="LC3346" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3347" class="blob-num js-line-number" data-line-number="3347"></td>
        <td id="LC3347" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> flag (boolean) accessors: return true if the flag appeared, otherwise false.</span></td>
      </tr>
      <tr>
        <td id="L3348" class="blob-num js-line-number" data-line-number="3348"></td>
        <td id="LC3348" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">bool</span> <span class="pl-k">operator</span>[](std::string <span class="pl-k">const</span>&amp; name) <span class="pl-k">const</span>;</td>
      </tr>
      <tr>
        <td id="L3349" class="blob-num js-line-number" data-line-number="3349"></td>
        <td id="LC3349" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3350" class="blob-num js-line-number" data-line-number="3350"></td>
        <td id="LC3350" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> multiple flag (boolean) accessors: return true if at least one of the flag appeared, otherwise false.</span></td>
      </tr>
      <tr>
        <td id="L3351" class="blob-num js-line-number" data-line-number="3351"></td>
        <td id="LC3351" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">bool</span> <span class="pl-k">operator</span>[](std::initializer_list&lt;<span class="pl-k">char</span> <span class="pl-k">const</span>* <span class="pl-k">const</span>&gt; init_list) <span class="pl-k">const</span>;</td>
      </tr>
      <tr>
        <td id="L3352" class="blob-num js-line-number" data-line-number="3352"></td>
        <td id="LC3352" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3353" class="blob-num js-line-number" data-line-number="3353"></td>
        <td id="LC3353" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> returns positional arg string by order. Like argv[] but without the options</span></td>
      </tr>
      <tr>
        <td id="L3354" class="blob-num js-line-number" data-line-number="3354"></td>
        <td id="LC3354" class="blob-code blob-code-inner js-file-line">      std::string <span class="pl-k">const</span>&amp; <span class="pl-k">operator</span>[](<span class="pl-c1">size_t</span> ind) <span class="pl-k">const</span>;</td>
      </tr>
      <tr>
        <td id="L3355" class="blob-num js-line-number" data-line-number="3355"></td>
        <td id="LC3355" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3356" class="blob-num js-line-number" data-line-number="3356"></td>
        <td id="LC3356" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> returns a std::istream that can be used to convert a positional arg to a typed value.</span></td>
      </tr>
      <tr>
        <td id="L3357" class="blob-num js-line-number" data-line-number="3357"></td>
        <td id="LC3357" class="blob-code blob-code-inner js-file-line">      string_stream <span class="pl-en">operator</span>()(<span class="pl-c1">size_t</span> ind) <span class="pl-k">const</span>;</td>
      </tr>
      <tr>
        <td id="L3358" class="blob-num js-line-number" data-line-number="3358"></td>
        <td id="LC3358" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3359" class="blob-num js-line-number" data-line-number="3359"></td>
        <td id="LC3359" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> same as above, but with a default value in case the arg is missing (index out of range).</span></td>
      </tr>
      <tr>
        <td id="L3360" class="blob-num js-line-number" data-line-number="3360"></td>
        <td id="LC3360" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">template</span>&lt;<span class="pl-k">typename</span> T&gt;</td>
      </tr>
      <tr>
        <td id="L3361" class="blob-num js-line-number" data-line-number="3361"></td>
        <td id="LC3361" class="blob-code blob-code-inner js-file-line">      string_stream <span class="pl-en">operator</span>()(<span class="pl-c1">size_t</span> ind, T&amp;&amp; def_val) <span class="pl-k">const</span>;</td>
      </tr>
      <tr>
        <td id="L3362" class="blob-num js-line-number" data-line-number="3362"></td>
        <td id="LC3362" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3363" class="blob-num js-line-number" data-line-number="3363"></td>
        <td id="LC3363" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> parameter accessors, give a name get an std::istream that can be used to convert to a typed value.</span></td>
      </tr>
      <tr>
        <td id="L3364" class="blob-num js-line-number" data-line-number="3364"></td>
        <td id="LC3364" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> call .str() on result to get as string</span></td>
      </tr>
      <tr>
        <td id="L3365" class="blob-num js-line-number" data-line-number="3365"></td>
        <td id="LC3365" class="blob-code blob-code-inner js-file-line">      string_stream <span class="pl-en">operator</span>()(std::string <span class="pl-k">const</span>&amp; name) <span class="pl-k">const</span>;</td>
      </tr>
      <tr>
        <td id="L3366" class="blob-num js-line-number" data-line-number="3366"></td>
        <td id="LC3366" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3367" class="blob-num js-line-number" data-line-number="3367"></td>
        <td id="LC3367" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> accessor for a parameter with multiple names, give a list of names, get an std::istream that can be used to convert to a typed value.</span></td>
      </tr>
      <tr>
        <td id="L3368" class="blob-num js-line-number" data-line-number="3368"></td>
        <td id="LC3368" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> call .str() on result to get as string</span></td>
      </tr>
      <tr>
        <td id="L3369" class="blob-num js-line-number" data-line-number="3369"></td>
        <td id="LC3369" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> returns the first value in the list to be found.</span></td>
      </tr>
      <tr>
        <td id="L3370" class="blob-num js-line-number" data-line-number="3370"></td>
        <td id="LC3370" class="blob-code blob-code-inner js-file-line">      string_stream <span class="pl-en">operator</span>()(std::initializer_list&lt;<span class="pl-k">char</span> <span class="pl-k">const</span>* <span class="pl-k">const</span>&gt; init_list) <span class="pl-k">const</span>;</td>
      </tr>
      <tr>
        <td id="L3371" class="blob-num js-line-number" data-line-number="3371"></td>
        <td id="LC3371" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3372" class="blob-num js-line-number" data-line-number="3372"></td>
        <td id="LC3372" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> same as above, but with a default value in case the param was missing.</span></td>
      </tr>
      <tr>
        <td id="L3373" class="blob-num js-line-number" data-line-number="3373"></td>
        <td id="LC3373" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> Non-string def_val types must have an operator&lt;&lt;() (output stream operator)</span></td>
      </tr>
      <tr>
        <td id="L3374" class="blob-num js-line-number" data-line-number="3374"></td>
        <td id="LC3374" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> If T only has an input stream operator, pass the string version of the type as in &quot;3&quot; instead of 3.</span></td>
      </tr>
      <tr>
        <td id="L3375" class="blob-num js-line-number" data-line-number="3375"></td>
        <td id="LC3375" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">template</span>&lt;<span class="pl-k">typename</span> T&gt;</td>
      </tr>
      <tr>
        <td id="L3376" class="blob-num js-line-number" data-line-number="3376"></td>
        <td id="LC3376" class="blob-code blob-code-inner js-file-line">      string_stream <span class="pl-en">operator</span>()(std::string <span class="pl-k">const</span>&amp; name, T&amp;&amp; def_val) <span class="pl-k">const</span>;</td>
      </tr>
      <tr>
        <td id="L3377" class="blob-num js-line-number" data-line-number="3377"></td>
        <td id="LC3377" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3378" class="blob-num js-line-number" data-line-number="3378"></td>
        <td id="LC3378" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> same as above but for a list of names. returns the first value to be found.</span></td>
      </tr>
      <tr>
        <td id="L3379" class="blob-num js-line-number" data-line-number="3379"></td>
        <td id="LC3379" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">template</span>&lt;<span class="pl-k">typename</span> T&gt;</td>
      </tr>
      <tr>
        <td id="L3380" class="blob-num js-line-number" data-line-number="3380"></td>
        <td id="LC3380" class="blob-code blob-code-inner js-file-line">      string_stream <span class="pl-en">operator</span>()(std::initializer_list&lt;<span class="pl-k">char</span> <span class="pl-k">const</span>* <span class="pl-k">const</span>&gt; init_list, T&amp;&amp; def_val) <span class="pl-k">const</span>;</td>
      </tr>
      <tr>
        <td id="L3381" class="blob-num js-line-number" data-line-number="3381"></td>
        <td id="LC3381" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3382" class="blob-num js-line-number" data-line-number="3382"></td>
        <td id="LC3382" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L3383" class="blob-num js-line-number" data-line-number="3383"></td>
        <td id="LC3383" class="blob-code blob-code-inner js-file-line">      string_stream <span class="pl-en">bad_stream</span>() <span class="pl-k">const</span>;</td>
      </tr>
      <tr>
        <td id="L3384" class="blob-num js-line-number" data-line-number="3384"></td>
        <td id="LC3384" class="blob-code blob-code-inner js-file-line">      std::string <span class="pl-en">trim_leading_dashes</span>(std::string <span class="pl-k">const</span>&amp; name) <span class="pl-k">const</span>;</td>
      </tr>
      <tr>
        <td id="L3385" class="blob-num js-line-number" data-line-number="3385"></td>
        <td id="LC3385" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">bool</span> <span class="pl-en">is_number</span>(std::string <span class="pl-k">const</span>&amp; arg) <span class="pl-k">const</span>;</td>
      </tr>
      <tr>
        <td id="L3386" class="blob-num js-line-number" data-line-number="3386"></td>
        <td id="LC3386" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">bool</span> <span class="pl-en">is_option</span>(std::string <span class="pl-k">const</span>&amp; arg) <span class="pl-k">const</span>;</td>
      </tr>
      <tr>
        <td id="L3387" class="blob-num js-line-number" data-line-number="3387"></td>
        <td id="LC3387" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">bool</span> <span class="pl-en">got_flag</span>(std::string <span class="pl-k">const</span>&amp; name) <span class="pl-k">const</span>;</td>
      </tr>
      <tr>
        <td id="L3388" class="blob-num js-line-number" data-line-number="3388"></td>
        <td id="LC3388" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3389" class="blob-num js-line-number" data-line-number="3389"></td>
        <td id="LC3389" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L3390" class="blob-num js-line-number" data-line-number="3390"></td>
        <td id="LC3390" class="blob-code blob-code-inner js-file-line">      std::vector&lt;std::string&gt; args_;</td>
      </tr>
      <tr>
        <td id="L3391" class="blob-num js-line-number" data-line-number="3391"></td>
        <td id="LC3391" class="blob-code blob-code-inner js-file-line">      std::map&lt;std::string, std::string&gt; params_;</td>
      </tr>
      <tr>
        <td id="L3392" class="blob-num js-line-number" data-line-number="3392"></td>
        <td id="LC3392" class="blob-code blob-code-inner js-file-line">      std::vector&lt;std::string&gt; pos_args_;</td>
      </tr>
      <tr>
        <td id="L3393" class="blob-num js-line-number" data-line-number="3393"></td>
        <td id="LC3393" class="blob-code blob-code-inner js-file-line">      std::multiset&lt;std::string&gt; flags_;</td>
      </tr>
      <tr>
        <td id="L3394" class="blob-num js-line-number" data-line-number="3394"></td>
        <td id="LC3394" class="blob-code blob-code-inner js-file-line">      std::set&lt;std::string&gt; registeredParams_;</td>
      </tr>
      <tr>
        <td id="L3395" class="blob-num js-line-number" data-line-number="3395"></td>
        <td id="LC3395" class="blob-code blob-code-inner js-file-line">      std::string empty_;</td>
      </tr>
      <tr>
        <td id="L3396" class="blob-num js-line-number" data-line-number="3396"></td>
        <td id="LC3396" class="blob-code blob-code-inner js-file-line">   };</td>
      </tr>
      <tr>
        <td id="L3397" class="blob-num js-line-number" data-line-number="3397"></td>
        <td id="LC3397" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3398" class="blob-num js-line-number" data-line-number="3398"></td>
        <td id="LC3398" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3399" class="blob-num js-line-number" data-line-number="3399"></td>
        <td id="LC3399" class="blob-code blob-code-inner js-file-line">   <span class="pl-c"><span class="pl-c">//</span>////////////////////////////////////////////////////////////////////////</span></td>
      </tr>
      <tr>
        <td id="L3400" class="blob-num js-line-number" data-line-number="3400"></td>
        <td id="LC3400" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3401" class="blob-num js-line-number" data-line-number="3401"></td>
        <td id="LC3401" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">parser::parse</span>(<span class="pl-k">const</span> <span class="pl-k">char</span> * <span class="pl-k">const</span> argv[], <span class="pl-k">int</span> mode)</td>
      </tr>
      <tr>
        <td id="L3402" class="blob-num js-line-number" data-line-number="3402"></td>
        <td id="LC3402" class="blob-code blob-code-inner js-file-line">   {</td>
      </tr>
      <tr>
        <td id="L3403" class="blob-num js-line-number" data-line-number="3403"></td>
        <td id="LC3403" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">int</span> argc = <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L3404" class="blob-num js-line-number" data-line-number="3404"></td>
        <td id="LC3404" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">for</span> (<span class="pl-k">auto</span> argvp = argv; *argvp; ++argc, ++argvp);</td>
      </tr>
      <tr>
        <td id="L3405" class="blob-num js-line-number" data-line-number="3405"></td>
        <td id="LC3405" class="blob-code blob-code-inner js-file-line">      <span class="pl-c1">parse</span>(argc, argv, mode);</td>
      </tr>
      <tr>
        <td id="L3406" class="blob-num js-line-number" data-line-number="3406"></td>
        <td id="LC3406" class="blob-code blob-code-inner js-file-line">   }</td>
      </tr>
      <tr>
        <td id="L3407" class="blob-num js-line-number" data-line-number="3407"></td>
        <td id="LC3407" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3408" class="blob-num js-line-number" data-line-number="3408"></td>
        <td id="LC3408" class="blob-code blob-code-inner js-file-line">   <span class="pl-c"><span class="pl-c">//</span>////////////////////////////////////////////////////////////////////////</span></td>
      </tr>
      <tr>
        <td id="L3409" class="blob-num js-line-number" data-line-number="3409"></td>
        <td id="LC3409" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3410" class="blob-num js-line-number" data-line-number="3410"></td>
        <td id="LC3410" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">parser::parse</span>(<span class="pl-k">int</span> argc, <span class="pl-k">const</span> <span class="pl-k">char</span>* <span class="pl-k">const</span> argv[], <span class="pl-k">int</span> mode <span class="pl-c"><span class="pl-c">/*</span>= PREFER_FLAG_FOR_UNREG_OPTION<span class="pl-c">*/</span></span>)</td>
      </tr>
      <tr>
        <td id="L3411" class="blob-num js-line-number" data-line-number="3411"></td>
        <td id="LC3411" class="blob-code blob-code-inner js-file-line">   {</td>
      </tr>
      <tr>
        <td id="L3412" class="blob-num js-line-number" data-line-number="3412"></td>
        <td id="LC3412" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> convert to strings</span></td>
      </tr>
      <tr>
        <td id="L3413" class="blob-num js-line-number" data-line-number="3413"></td>
        <td id="LC3413" class="blob-code blob-code-inner js-file-line">      args_.<span class="pl-c1">resize</span>(argc);</td>
      </tr>
      <tr>
        <td id="L3414" class="blob-num js-line-number" data-line-number="3414"></td>
        <td id="LC3414" class="blob-code blob-code-inner js-file-line">      <span class="pl-c1">std::transform</span>(argv, argv + argc, args_.<span class="pl-c1">begin</span>(), [](<span class="pl-k">const</span> <span class="pl-k">char</span>* <span class="pl-k">const</span> arg) { <span class="pl-k">return</span> arg;  });</td>
      </tr>
      <tr>
        <td id="L3415" class="blob-num js-line-number" data-line-number="3415"></td>
        <td id="LC3415" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3416" class="blob-num js-line-number" data-line-number="3416"></td>
        <td id="LC3416" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> parse line</span></td>
      </tr>
      <tr>
        <td id="L3417" class="blob-num js-line-number" data-line-number="3417"></td>
        <td id="LC3417" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">for</span> (<span class="pl-k">auto</span> i = <span class="pl-c1">0u</span>; i &lt; args_.<span class="pl-c1">size</span>(); ++i)</td>
      </tr>
      <tr>
        <td id="L3418" class="blob-num js-line-number" data-line-number="3418"></td>
        <td id="LC3418" class="blob-code blob-code-inner js-file-line">      {</td>
      </tr>
      <tr>
        <td id="L3419" class="blob-num js-line-number" data-line-number="3419"></td>
        <td id="LC3419" class="blob-code blob-code-inner js-file-line">         <span class="pl-k">if</span> (!<span class="pl-c1">is_option</span>(args_[i]))</td>
      </tr>
      <tr>
        <td id="L3420" class="blob-num js-line-number" data-line-number="3420"></td>
        <td id="LC3420" class="blob-code blob-code-inner js-file-line">         {</td>
      </tr>
      <tr>
        <td id="L3421" class="blob-num js-line-number" data-line-number="3421"></td>
        <td id="LC3421" class="blob-code blob-code-inner js-file-line">            pos_args_.<span class="pl-c1">emplace_back</span>(args_[i]);</td>
      </tr>
      <tr>
        <td id="L3422" class="blob-num js-line-number" data-line-number="3422"></td>
        <td id="LC3422" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">continue</span>;</td>
      </tr>
      <tr>
        <td id="L3423" class="blob-num js-line-number" data-line-number="3423"></td>
        <td id="LC3423" class="blob-code blob-code-inner js-file-line">         }</td>
      </tr>
      <tr>
        <td id="L3424" class="blob-num js-line-number" data-line-number="3424"></td>
        <td id="LC3424" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3425" class="blob-num js-line-number" data-line-number="3425"></td>
        <td id="LC3425" class="blob-code blob-code-inner js-file-line">         <span class="pl-k">auto</span> name = <span class="pl-c1">trim_leading_dashes</span>(args_[i]);</td>
      </tr>
      <tr>
        <td id="L3426" class="blob-num js-line-number" data-line-number="3426"></td>
        <td id="LC3426" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3427" class="blob-num js-line-number" data-line-number="3427"></td>
        <td id="LC3427" class="blob-code blob-code-inner js-file-line">         <span class="pl-k">if</span> (!(mode &amp; NO_SPLIT_ON_EQUALSIGN))</td>
      </tr>
      <tr>
        <td id="L3428" class="blob-num js-line-number" data-line-number="3428"></td>
        <td id="LC3428" class="blob-code blob-code-inner js-file-line">         {</td>
      </tr>
      <tr>
        <td id="L3429" class="blob-num js-line-number" data-line-number="3429"></td>
        <td id="LC3429" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">auto</span> equalPos = name.<span class="pl-c1">find</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>=<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L3430" class="blob-num js-line-number" data-line-number="3430"></td>
        <td id="LC3430" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (equalPos != std::string::npos)</td>
      </tr>
      <tr>
        <td id="L3431" class="blob-num js-line-number" data-line-number="3431"></td>
        <td id="LC3431" class="blob-code blob-code-inner js-file-line">            {</td>
      </tr>
      <tr>
        <td id="L3432" class="blob-num js-line-number" data-line-number="3432"></td>
        <td id="LC3432" class="blob-code blob-code-inner js-file-line">               params_.<span class="pl-c1">insert</span>({ name.<span class="pl-c1">substr</span>(<span class="pl-c1">0</span>, equalPos), name.<span class="pl-c1">substr</span>(equalPos + <span class="pl-c1">1</span>) });</td>
      </tr>
      <tr>
        <td id="L3433" class="blob-num js-line-number" data-line-number="3433"></td>
        <td id="LC3433" class="blob-code blob-code-inner js-file-line">               <span class="pl-k">continue</span>;</td>
      </tr>
      <tr>
        <td id="L3434" class="blob-num js-line-number" data-line-number="3434"></td>
        <td id="LC3434" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L3435" class="blob-num js-line-number" data-line-number="3435"></td>
        <td id="LC3435" class="blob-code blob-code-inner js-file-line">         }</td>
      </tr>
      <tr>
        <td id="L3436" class="blob-num js-line-number" data-line-number="3436"></td>
        <td id="LC3436" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3437" class="blob-num js-line-number" data-line-number="3437"></td>
        <td id="LC3437" class="blob-code blob-code-inner js-file-line">         <span class="pl-c"><span class="pl-c">//</span> if the option is unregistered and should be a multi-flag</span></td>
      </tr>
      <tr>
        <td id="L3438" class="blob-num js-line-number" data-line-number="3438"></td>
        <td id="LC3438" class="blob-code blob-code-inner js-file-line">         <span class="pl-k">if</span> (<span class="pl-c1">1</span> == (args_[i].<span class="pl-c1">size</span>() - name.<span class="pl-c1">size</span>()) &amp;&amp;                  <span class="pl-c"><span class="pl-c">//</span> single dash</span></td>
      </tr>
      <tr>
        <td id="L3439" class="blob-num js-line-number" data-line-number="3439"></td>
        <td id="LC3439" class="blob-code blob-code-inner js-file-line">            argh::parser::SINGLE_DASH_IS_MULTIFLAG &amp; mode &amp;&amp;         <span class="pl-c"><span class="pl-c">//</span> multi-flag mode</span></td>
      </tr>
      <tr>
        <td id="L3440" class="blob-num js-line-number" data-line-number="3440"></td>
        <td id="LC3440" class="blob-code blob-code-inner js-file-line">            registeredParams_.<span class="pl-c1">find</span>(name) == registeredParams_.<span class="pl-c1">end</span>()) <span class="pl-c"><span class="pl-c">//</span> unregistered</span></td>
      </tr>
      <tr>
        <td id="L3441" class="blob-num js-line-number" data-line-number="3441"></td>
        <td id="LC3441" class="blob-code blob-code-inner js-file-line">         {</td>
      </tr>
      <tr>
        <td id="L3442" class="blob-num js-line-number" data-line-number="3442"></td>
        <td id="LC3442" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">for</span> (<span class="pl-k">auto</span> <span class="pl-k">const</span>&amp; c : name)</td>
      </tr>
      <tr>
        <td id="L3443" class="blob-num js-line-number" data-line-number="3443"></td>
        <td id="LC3443" class="blob-code blob-code-inner js-file-line">            {</td>
      </tr>
      <tr>
        <td id="L3444" class="blob-num js-line-number" data-line-number="3444"></td>
        <td id="LC3444" class="blob-code blob-code-inner js-file-line">               flags_.<span class="pl-c1">emplace</span>(std::string{ c });</td>
      </tr>
      <tr>
        <td id="L3445" class="blob-num js-line-number" data-line-number="3445"></td>
        <td id="LC3445" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L3446" class="blob-num js-line-number" data-line-number="3446"></td>
        <td id="LC3446" class="blob-code blob-code-inner js-file-line">         }</td>
      </tr>
      <tr>
        <td id="L3447" class="blob-num js-line-number" data-line-number="3447"></td>
        <td id="LC3447" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3448" class="blob-num js-line-number" data-line-number="3448"></td>
        <td id="LC3448" class="blob-code blob-code-inner js-file-line">         <span class="pl-c"><span class="pl-c">//</span> any potential option will get as its value the next arg, unless that arg is an option too</span></td>
      </tr>
      <tr>
        <td id="L3449" class="blob-num js-line-number" data-line-number="3449"></td>
        <td id="LC3449" class="blob-code blob-code-inner js-file-line">         <span class="pl-c"><span class="pl-c">//</span> in that case it will be determined a flag.</span></td>
      </tr>
      <tr>
        <td id="L3450" class="blob-num js-line-number" data-line-number="3450"></td>
        <td id="LC3450" class="blob-code blob-code-inner js-file-line">         <span class="pl-k">if</span> (i == args_.<span class="pl-c1">size</span>() - <span class="pl-c1">1</span> || <span class="pl-c1">is_option</span>(args_[i + <span class="pl-c1">1</span>]))</td>
      </tr>
      <tr>
        <td id="L3451" class="blob-num js-line-number" data-line-number="3451"></td>
        <td id="LC3451" class="blob-code blob-code-inner js-file-line">         {</td>
      </tr>
      <tr>
        <td id="L3452" class="blob-num js-line-number" data-line-number="3452"></td>
        <td id="LC3452" class="blob-code blob-code-inner js-file-line">            flags_.<span class="pl-c1">emplace</span>(name);</td>
      </tr>
      <tr>
        <td id="L3453" class="blob-num js-line-number" data-line-number="3453"></td>
        <td id="LC3453" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">continue</span>;</td>
      </tr>
      <tr>
        <td id="L3454" class="blob-num js-line-number" data-line-number="3454"></td>
        <td id="LC3454" class="blob-code blob-code-inner js-file-line">         }</td>
      </tr>
      <tr>
        <td id="L3455" class="blob-num js-line-number" data-line-number="3455"></td>
        <td id="LC3455" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3456" class="blob-num js-line-number" data-line-number="3456"></td>
        <td id="LC3456" class="blob-code blob-code-inner js-file-line">         <span class="pl-c"><span class="pl-c">//</span> if &#39;name&#39; is a pre-registered option, then the next arg cannot be a free parameter to it is skipped</span></td>
      </tr>
      <tr>
        <td id="L3457" class="blob-num js-line-number" data-line-number="3457"></td>
        <td id="LC3457" class="blob-code blob-code-inner js-file-line">         <span class="pl-c"><span class="pl-c">//</span> otherwise we have 2 modes:</span></td>
      </tr>
      <tr>
        <td id="L3458" class="blob-num js-line-number" data-line-number="3458"></td>
        <td id="LC3458" class="blob-code blob-code-inner js-file-line">         <span class="pl-c"><span class="pl-c">//</span> PREFER_FLAG_FOR_UNREG_OPTION: a non-registered &#39;name&#39; is determined a flag. </span></td>
      </tr>
      <tr>
        <td id="L3459" class="blob-num js-line-number" data-line-number="3459"></td>
        <td id="LC3459" class="blob-code blob-code-inner js-file-line">         <span class="pl-c"><span class="pl-c">//</span>                               The following value (the next arg) will be a free parameter.</span></td>
      </tr>
      <tr>
        <td id="L3460" class="blob-num js-line-number" data-line-number="3460"></td>
        <td id="LC3460" class="blob-code blob-code-inner js-file-line">         <span class="pl-c"><span class="pl-c">//</span></span></td>
      </tr>
      <tr>
        <td id="L3461" class="blob-num js-line-number" data-line-number="3461"></td>
        <td id="LC3461" class="blob-code blob-code-inner js-file-line">         <span class="pl-c"><span class="pl-c">//</span> PREFER_PARAM_FOR_UNREG_OPTION: a non-registered &#39;name&#39; is determined a parameter, the next arg</span></td>
      </tr>
      <tr>
        <td id="L3462" class="blob-num js-line-number" data-line-number="3462"></td>
        <td id="LC3462" class="blob-code blob-code-inner js-file-line">         <span class="pl-c"><span class="pl-c">//</span>                                will be the value of that option.</span></td>
      </tr>
      <tr>
        <td id="L3463" class="blob-num js-line-number" data-line-number="3463"></td>
        <td id="LC3463" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3464" class="blob-num js-line-number" data-line-number="3464"></td>
        <td id="LC3464" class="blob-code blob-code-inner js-file-line">         <span class="pl-k">if</span> (registeredParams_.<span class="pl-c1">find</span>(name) != registeredParams_.<span class="pl-c1">end</span>() ||</td>
      </tr>
      <tr>
        <td id="L3465" class="blob-num js-line-number" data-line-number="3465"></td>
        <td id="LC3465" class="blob-code blob-code-inner js-file-line">            argh::parser::PREFER_PARAM_FOR_UNREG_OPTION &amp; mode)</td>
      </tr>
      <tr>
        <td id="L3466" class="blob-num js-line-number" data-line-number="3466"></td>
        <td id="LC3466" class="blob-code blob-code-inner js-file-line">         {</td>
      </tr>
      <tr>
        <td id="L3467" class="blob-num js-line-number" data-line-number="3467"></td>
        <td id="LC3467" class="blob-code blob-code-inner js-file-line">            params_.<span class="pl-c1">insert</span>({ name, args_[i + <span class="pl-c1">1</span>] });</td>
      </tr>
      <tr>
        <td id="L3468" class="blob-num js-line-number" data-line-number="3468"></td>
        <td id="LC3468" class="blob-code blob-code-inner js-file-line">            ++i; <span class="pl-c"><span class="pl-c">//</span> skip next value, it is not a free parameter</span></td>
      </tr>
      <tr>
        <td id="L3469" class="blob-num js-line-number" data-line-number="3469"></td>
        <td id="LC3469" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">continue</span>;</td>
      </tr>
      <tr>
        <td id="L3470" class="blob-num js-line-number" data-line-number="3470"></td>
        <td id="LC3470" class="blob-code blob-code-inner js-file-line">         }</td>
      </tr>
      <tr>
        <td id="L3471" class="blob-num js-line-number" data-line-number="3471"></td>
        <td id="LC3471" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3472" class="blob-num js-line-number" data-line-number="3472"></td>
        <td id="LC3472" class="blob-code blob-code-inner js-file-line">         <span class="pl-k">if</span> (argh::parser::PREFER_FLAG_FOR_UNREG_OPTION &amp; mode)</td>
      </tr>
      <tr>
        <td id="L3473" class="blob-num js-line-number" data-line-number="3473"></td>
        <td id="LC3473" class="blob-code blob-code-inner js-file-line">            flags_.<span class="pl-c1">emplace</span>(name);</td>
      </tr>
      <tr>
        <td id="L3474" class="blob-num js-line-number" data-line-number="3474"></td>
        <td id="LC3474" class="blob-code blob-code-inner js-file-line">      };</td>
      </tr>
      <tr>
        <td id="L3475" class="blob-num js-line-number" data-line-number="3475"></td>
        <td id="LC3475" class="blob-code blob-code-inner js-file-line">   }</td>
      </tr>
      <tr>
        <td id="L3476" class="blob-num js-line-number" data-line-number="3476"></td>
        <td id="LC3476" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3477" class="blob-num js-line-number" data-line-number="3477"></td>
        <td id="LC3477" class="blob-code blob-code-inner js-file-line">   <span class="pl-c"><span class="pl-c">//</span>////////////////////////////////////////////////////////////////////////</span></td>
      </tr>
      <tr>
        <td id="L3478" class="blob-num js-line-number" data-line-number="3478"></td>
        <td id="LC3478" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3479" class="blob-num js-line-number" data-line-number="3479"></td>
        <td id="LC3479" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">inline</span> string_stream <span class="pl-en">parser::bad_stream</span>() <span class="pl-k">const</span></td>
      </tr>
      <tr>
        <td id="L3480" class="blob-num js-line-number" data-line-number="3480"></td>
        <td id="LC3480" class="blob-code blob-code-inner js-file-line">   {</td>
      </tr>
      <tr>
        <td id="L3481" class="blob-num js-line-number" data-line-number="3481"></td>
        <td id="LC3481" class="blob-code blob-code-inner js-file-line">      string_stream bad;</td>
      </tr>
      <tr>
        <td id="L3482" class="blob-num js-line-number" data-line-number="3482"></td>
        <td id="LC3482" class="blob-code blob-code-inner js-file-line">      bad.<span class="pl-c1">setstate</span>(std::ios_base::failbit);</td>
      </tr>
      <tr>
        <td id="L3483" class="blob-num js-line-number" data-line-number="3483"></td>
        <td id="LC3483" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> bad;</td>
      </tr>
      <tr>
        <td id="L3484" class="blob-num js-line-number" data-line-number="3484"></td>
        <td id="LC3484" class="blob-code blob-code-inner js-file-line">   }</td>
      </tr>
      <tr>
        <td id="L3485" class="blob-num js-line-number" data-line-number="3485"></td>
        <td id="LC3485" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3486" class="blob-num js-line-number" data-line-number="3486"></td>
        <td id="LC3486" class="blob-code blob-code-inner js-file-line">   <span class="pl-c"><span class="pl-c">//</span>////////////////////////////////////////////////////////////////////////</span></td>
      </tr>
      <tr>
        <td id="L3487" class="blob-num js-line-number" data-line-number="3487"></td>
        <td id="LC3487" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3488" class="blob-num js-line-number" data-line-number="3488"></td>
        <td id="LC3488" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">inline</span> <span class="pl-k">bool</span> <span class="pl-en">parser::is_number</span>(std::string <span class="pl-k">const</span>&amp; arg) <span class="pl-k">const</span></td>
      </tr>
      <tr>
        <td id="L3489" class="blob-num js-line-number" data-line-number="3489"></td>
        <td id="LC3489" class="blob-code blob-code-inner js-file-line">   {</td>
      </tr>
      <tr>
        <td id="L3490" class="blob-num js-line-number" data-line-number="3490"></td>
        <td id="LC3490" class="blob-code blob-code-inner js-file-line">      <span class="pl-c"><span class="pl-c">//</span> inefficient but simple way to determine if a string is a number (which can start with a &#39;-&#39;)</span></td>
      </tr>
      <tr>
        <td id="L3491" class="blob-num js-line-number" data-line-number="3491"></td>
        <td id="LC3491" class="blob-code blob-code-inner js-file-line">      std::istringstream <span class="pl-smi">istr</span>(arg);</td>
      </tr>
      <tr>
        <td id="L3492" class="blob-num js-line-number" data-line-number="3492"></td>
        <td id="LC3492" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">double</span> number;</td>
      </tr>
      <tr>
        <td id="L3493" class="blob-num js-line-number" data-line-number="3493"></td>
        <td id="LC3493" class="blob-code blob-code-inner js-file-line">      istr &gt;&gt; number;</td>
      </tr>
      <tr>
        <td id="L3494" class="blob-num js-line-number" data-line-number="3494"></td>
        <td id="LC3494" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> !(istr.<span class="pl-c1">fail</span>() || istr.<span class="pl-c1">bad</span>());</td>
      </tr>
      <tr>
        <td id="L3495" class="blob-num js-line-number" data-line-number="3495"></td>
        <td id="LC3495" class="blob-code blob-code-inner js-file-line">   }</td>
      </tr>
      <tr>
        <td id="L3496" class="blob-num js-line-number" data-line-number="3496"></td>
        <td id="LC3496" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3497" class="blob-num js-line-number" data-line-number="3497"></td>
        <td id="LC3497" class="blob-code blob-code-inner js-file-line">   <span class="pl-c"><span class="pl-c">//</span>////////////////////////////////////////////////////////////////////////</span></td>
      </tr>
      <tr>
        <td id="L3498" class="blob-num js-line-number" data-line-number="3498"></td>
        <td id="LC3498" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3499" class="blob-num js-line-number" data-line-number="3499"></td>
        <td id="LC3499" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">inline</span> <span class="pl-k">bool</span> <span class="pl-en">parser::is_option</span>(std::string <span class="pl-k">const</span>&amp; arg) <span class="pl-k">const</span></td>
      </tr>
      <tr>
        <td id="L3500" class="blob-num js-line-number" data-line-number="3500"></td>
        <td id="LC3500" class="blob-code blob-code-inner js-file-line">   {</td>
      </tr>
      <tr>
        <td id="L3501" class="blob-num js-line-number" data-line-number="3501"></td>
        <td id="LC3501" class="blob-code blob-code-inner js-file-line">      <span class="pl-c1">assert</span>(<span class="pl-c1">0</span> != arg.<span class="pl-c1">size</span>());</td>
      </tr>
      <tr>
        <td id="L3502" class="blob-num js-line-number" data-line-number="3502"></td>
        <td id="LC3502" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">if</span> (<span class="pl-c1">is_number</span>(arg))</td>
      </tr>
      <tr>
        <td id="L3503" class="blob-num js-line-number" data-line-number="3503"></td>
        <td id="LC3503" class="blob-code blob-code-inner js-file-line">         <span class="pl-k">return</span> <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L3504" class="blob-num js-line-number" data-line-number="3504"></td>
        <td id="LC3504" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> <span class="pl-s"><span class="pl-pds">&#39;</span>-<span class="pl-pds">&#39;</span></span> == arg[<span class="pl-c1">0</span>];</td>
      </tr>
      <tr>
        <td id="L3505" class="blob-num js-line-number" data-line-number="3505"></td>
        <td id="LC3505" class="blob-code blob-code-inner js-file-line">   }</td>
      </tr>
      <tr>
        <td id="L3506" class="blob-num js-line-number" data-line-number="3506"></td>
        <td id="LC3506" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3507" class="blob-num js-line-number" data-line-number="3507"></td>
        <td id="LC3507" class="blob-code blob-code-inner js-file-line">   <span class="pl-c"><span class="pl-c">//</span>////////////////////////////////////////////////////////////////////////</span></td>
      </tr>
      <tr>
        <td id="L3508" class="blob-num js-line-number" data-line-number="3508"></td>
        <td id="LC3508" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3509" class="blob-num js-line-number" data-line-number="3509"></td>
        <td id="LC3509" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">inline</span> std::string <span class="pl-en">parser::trim_leading_dashes</span>(std::string <span class="pl-k">const</span>&amp; name) <span class="pl-k">const</span></td>
      </tr>
      <tr>
        <td id="L3510" class="blob-num js-line-number" data-line-number="3510"></td>
        <td id="LC3510" class="blob-code blob-code-inner js-file-line">   {</td>
      </tr>
      <tr>
        <td id="L3511" class="blob-num js-line-number" data-line-number="3511"></td>
        <td id="LC3511" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">auto</span> pos = name.<span class="pl-c1">find_first_not_of</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>-<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L3512" class="blob-num js-line-number" data-line-number="3512"></td>
        <td id="LC3512" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> std::string::npos != pos ? name.<span class="pl-c1">substr</span>(pos) : name;</td>
      </tr>
      <tr>
        <td id="L3513" class="blob-num js-line-number" data-line-number="3513"></td>
        <td id="LC3513" class="blob-code blob-code-inner js-file-line">   }</td>
      </tr>
      <tr>
        <td id="L3514" class="blob-num js-line-number" data-line-number="3514"></td>
        <td id="LC3514" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3515" class="blob-num js-line-number" data-line-number="3515"></td>
        <td id="LC3515" class="blob-code blob-code-inner js-file-line">   <span class="pl-c"><span class="pl-c">//</span>////////////////////////////////////////////////////////////////////////</span></td>
      </tr>
      <tr>
        <td id="L3516" class="blob-num js-line-number" data-line-number="3516"></td>
        <td id="LC3516" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3517" class="blob-num js-line-number" data-line-number="3517"></td>
        <td id="LC3517" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">inline</span> <span class="pl-k">bool</span> <span class="pl-en">argh::parser::got_flag</span>(std::string <span class="pl-k">const</span>&amp; name) <span class="pl-k">const</span></td>
      </tr>
      <tr>
        <td id="L3518" class="blob-num js-line-number" data-line-number="3518"></td>
        <td id="LC3518" class="blob-code blob-code-inner js-file-line">   {</td>
      </tr>
      <tr>
        <td id="L3519" class="blob-num js-line-number" data-line-number="3519"></td>
        <td id="LC3519" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> flags_.<span class="pl-c1">end</span>() != flags_.<span class="pl-c1">find</span>(<span class="pl-c1">trim_leading_dashes</span>(name));</td>
      </tr>
      <tr>
        <td id="L3520" class="blob-num js-line-number" data-line-number="3520"></td>
        <td id="LC3520" class="blob-code blob-code-inner js-file-line">   }</td>
      </tr>
      <tr>
        <td id="L3521" class="blob-num js-line-number" data-line-number="3521"></td>
        <td id="LC3521" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3522" class="blob-num js-line-number" data-line-number="3522"></td>
        <td id="LC3522" class="blob-code blob-code-inner js-file-line">   <span class="pl-c"><span class="pl-c">//</span>////////////////////////////////////////////////////////////////////////</span></td>
      </tr>
      <tr>
        <td id="L3523" class="blob-num js-line-number" data-line-number="3523"></td>
        <td id="LC3523" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3524" class="blob-num js-line-number" data-line-number="3524"></td>
        <td id="LC3524" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">inline</span> <span class="pl-k">bool</span> parser::<span class="pl-k">operator</span>[](std::string <span class="pl-k">const</span>&amp; name) <span class="pl-k">const</span></td>
      </tr>
      <tr>
        <td id="L3525" class="blob-num js-line-number" data-line-number="3525"></td>
        <td id="LC3525" class="blob-code blob-code-inner js-file-line">   {</td>
      </tr>
      <tr>
        <td id="L3526" class="blob-num js-line-number" data-line-number="3526"></td>
        <td id="LC3526" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> <span class="pl-c1">got_flag</span>(name);</td>
      </tr>
      <tr>
        <td id="L3527" class="blob-num js-line-number" data-line-number="3527"></td>
        <td id="LC3527" class="blob-code blob-code-inner js-file-line">   }</td>
      </tr>
      <tr>
        <td id="L3528" class="blob-num js-line-number" data-line-number="3528"></td>
        <td id="LC3528" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3529" class="blob-num js-line-number" data-line-number="3529"></td>
        <td id="LC3529" class="blob-code blob-code-inner js-file-line">   <span class="pl-c"><span class="pl-c">//</span>////////////////////////////////////////////////////////////////////////</span></td>
      </tr>
      <tr>
        <td id="L3530" class="blob-num js-line-number" data-line-number="3530"></td>
        <td id="LC3530" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3531" class="blob-num js-line-number" data-line-number="3531"></td>
        <td id="LC3531" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">inline</span> <span class="pl-k">bool</span> parser::<span class="pl-k">operator</span>[](std::initializer_list&lt;<span class="pl-k">char</span> <span class="pl-k">const</span>* <span class="pl-k">const</span>&gt; init_list) <span class="pl-k">const</span></td>
      </tr>
      <tr>
        <td id="L3532" class="blob-num js-line-number" data-line-number="3532"></td>
        <td id="LC3532" class="blob-code blob-code-inner js-file-line">   {</td>
      </tr>
      <tr>
        <td id="L3533" class="blob-num js-line-number" data-line-number="3533"></td>
        <td id="LC3533" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> <span class="pl-c1">std::any_of</span>(init_list.<span class="pl-c1">begin</span>(), init_list.<span class="pl-c1">end</span>(), [&amp;](<span class="pl-k">char</span> <span class="pl-k">const</span>* <span class="pl-k">const</span> name) { <span class="pl-k">return</span> <span class="pl-c1">got_flag</span>(name); });</td>
      </tr>
      <tr>
        <td id="L3534" class="blob-num js-line-number" data-line-number="3534"></td>
        <td id="LC3534" class="blob-code blob-code-inner js-file-line">   }</td>
      </tr>
      <tr>
        <td id="L3535" class="blob-num js-line-number" data-line-number="3535"></td>
        <td id="LC3535" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3536" class="blob-num js-line-number" data-line-number="3536"></td>
        <td id="LC3536" class="blob-code blob-code-inner js-file-line">   <span class="pl-c"><span class="pl-c">//</span>////////////////////////////////////////////////////////////////////////</span></td>
      </tr>
      <tr>
        <td id="L3537" class="blob-num js-line-number" data-line-number="3537"></td>
        <td id="LC3537" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3538" class="blob-num js-line-number" data-line-number="3538"></td>
        <td id="LC3538" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">inline</span> std::string <span class="pl-k">const</span>&amp; parser::<span class="pl-k">operator</span>[](<span class="pl-c1">size_t</span> ind) <span class="pl-k">const</span></td>
      </tr>
      <tr>
        <td id="L3539" class="blob-num js-line-number" data-line-number="3539"></td>
        <td id="LC3539" class="blob-code blob-code-inner js-file-line">   {</td>
      </tr>
      <tr>
        <td id="L3540" class="blob-num js-line-number" data-line-number="3540"></td>
        <td id="LC3540" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">if</span> (ind &lt; pos_args_.<span class="pl-c1">size</span>())</td>
      </tr>
      <tr>
        <td id="L3541" class="blob-num js-line-number" data-line-number="3541"></td>
        <td id="LC3541" class="blob-code blob-code-inner js-file-line">         <span class="pl-k">return</span> pos_args_[ind];</td>
      </tr>
      <tr>
        <td id="L3542" class="blob-num js-line-number" data-line-number="3542"></td>
        <td id="LC3542" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> empty_;</td>
      </tr>
      <tr>
        <td id="L3543" class="blob-num js-line-number" data-line-number="3543"></td>
        <td id="LC3543" class="blob-code blob-code-inner js-file-line">   }</td>
      </tr>
      <tr>
        <td id="L3544" class="blob-num js-line-number" data-line-number="3544"></td>
        <td id="LC3544" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3545" class="blob-num js-line-number" data-line-number="3545"></td>
        <td id="LC3545" class="blob-code blob-code-inner js-file-line">   <span class="pl-c"><span class="pl-c">//</span>////////////////////////////////////////////////////////////////////////</span></td>
      </tr>
      <tr>
        <td id="L3546" class="blob-num js-line-number" data-line-number="3546"></td>
        <td id="LC3546" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3547" class="blob-num js-line-number" data-line-number="3547"></td>
        <td id="LC3547" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">inline</span> string_stream <span class="pl-en">parser::operator</span>()(std::string <span class="pl-k">const</span>&amp; name) <span class="pl-k">const</span></td>
      </tr>
      <tr>
        <td id="L3548" class="blob-num js-line-number" data-line-number="3548"></td>
        <td id="LC3548" class="blob-code blob-code-inner js-file-line">   {</td>
      </tr>
      <tr>
        <td id="L3549" class="blob-num js-line-number" data-line-number="3549"></td>
        <td id="LC3549" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">auto</span> optIt = params_.<span class="pl-c1">find</span>(<span class="pl-c1">trim_leading_dashes</span>(name));</td>
      </tr>
      <tr>
        <td id="L3550" class="blob-num js-line-number" data-line-number="3550"></td>
        <td id="LC3550" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">if</span> (params_.<span class="pl-c1">end</span>() != optIt)</td>
      </tr>
      <tr>
        <td id="L3551" class="blob-num js-line-number" data-line-number="3551"></td>
        <td id="LC3551" class="blob-code blob-code-inner js-file-line">         <span class="pl-k">return</span> <span class="pl-c1">string_stream</span>(optIt-&gt;second);</td>
      </tr>
      <tr>
        <td id="L3552" class="blob-num js-line-number" data-line-number="3552"></td>
        <td id="LC3552" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> <span class="pl-c1">bad_stream</span>();</td>
      </tr>
      <tr>
        <td id="L3553" class="blob-num js-line-number" data-line-number="3553"></td>
        <td id="LC3553" class="blob-code blob-code-inner js-file-line">   }</td>
      </tr>
      <tr>
        <td id="L3554" class="blob-num js-line-number" data-line-number="3554"></td>
        <td id="LC3554" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3555" class="blob-num js-line-number" data-line-number="3555"></td>
        <td id="LC3555" class="blob-code blob-code-inner js-file-line">   <span class="pl-c"><span class="pl-c">//</span>////////////////////////////////////////////////////////////////////////</span></td>
      </tr>
      <tr>
        <td id="L3556" class="blob-num js-line-number" data-line-number="3556"></td>
        <td id="LC3556" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3557" class="blob-num js-line-number" data-line-number="3557"></td>
        <td id="LC3557" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">inline</span> string_stream <span class="pl-en">parser::operator</span>()(std::initializer_list&lt;<span class="pl-k">char</span> <span class="pl-k">const</span>* <span class="pl-k">const</span>&gt; init_list) <span class="pl-k">const</span></td>
      </tr>
      <tr>
        <td id="L3558" class="blob-num js-line-number" data-line-number="3558"></td>
        <td id="LC3558" class="blob-code blob-code-inner js-file-line">   {</td>
      </tr>
      <tr>
        <td id="L3559" class="blob-num js-line-number" data-line-number="3559"></td>
        <td id="LC3559" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">for</span> (<span class="pl-k">auto</span>&amp; name : init_list)</td>
      </tr>
      <tr>
        <td id="L3560" class="blob-num js-line-number" data-line-number="3560"></td>
        <td id="LC3560" class="blob-code blob-code-inner js-file-line">      {</td>
      </tr>
      <tr>
        <td id="L3561" class="blob-num js-line-number" data-line-number="3561"></td>
        <td id="LC3561" class="blob-code blob-code-inner js-file-line">         <span class="pl-k">auto</span> optIt = params_.<span class="pl-c1">find</span>(<span class="pl-c1">trim_leading_dashes</span>(name));</td>
      </tr>
      <tr>
        <td id="L3562" class="blob-num js-line-number" data-line-number="3562"></td>
        <td id="LC3562" class="blob-code blob-code-inner js-file-line">         <span class="pl-k">if</span> (params_.<span class="pl-c1">end</span>() != optIt)</td>
      </tr>
      <tr>
        <td id="L3563" class="blob-num js-line-number" data-line-number="3563"></td>
        <td id="LC3563" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> <span class="pl-c1">string_stream</span>(optIt-&gt;second);</td>
      </tr>
      <tr>
        <td id="L3564" class="blob-num js-line-number" data-line-number="3564"></td>
        <td id="LC3564" class="blob-code blob-code-inner js-file-line">      }</td>
      </tr>
      <tr>
        <td id="L3565" class="blob-num js-line-number" data-line-number="3565"></td>
        <td id="LC3565" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> <span class="pl-c1">bad_stream</span>();</td>
      </tr>
      <tr>
        <td id="L3566" class="blob-num js-line-number" data-line-number="3566"></td>
        <td id="LC3566" class="blob-code blob-code-inner js-file-line">   }</td>
      </tr>
      <tr>
        <td id="L3567" class="blob-num js-line-number" data-line-number="3567"></td>
        <td id="LC3567" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3568" class="blob-num js-line-number" data-line-number="3568"></td>
        <td id="LC3568" class="blob-code blob-code-inner js-file-line">   <span class="pl-c"><span class="pl-c">//</span>////////////////////////////////////////////////////////////////////////</span></td>
      </tr>
      <tr>
        <td id="L3569" class="blob-num js-line-number" data-line-number="3569"></td>
        <td id="LC3569" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3570" class="blob-num js-line-number" data-line-number="3570"></td>
        <td id="LC3570" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">template</span>&lt;<span class="pl-k">typename</span> T&gt;</td>
      </tr>
      <tr>
        <td id="L3571" class="blob-num js-line-number" data-line-number="3571"></td>
        <td id="LC3571" class="blob-code blob-code-inner js-file-line">   string_stream <span class="pl-en">parser::operator</span>()(std::string <span class="pl-k">const</span>&amp; name, T&amp;&amp; def_val) <span class="pl-k">const</span></td>
      </tr>
      <tr>
        <td id="L3572" class="blob-num js-line-number" data-line-number="3572"></td>
        <td id="LC3572" class="blob-code blob-code-inner js-file-line">   {</td>
      </tr>
      <tr>
        <td id="L3573" class="blob-num js-line-number" data-line-number="3573"></td>
        <td id="LC3573" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">auto</span> optIt = params_.<span class="pl-c1">find</span>(<span class="pl-c1">trim_leading_dashes</span>(name));</td>
      </tr>
      <tr>
        <td id="L3574" class="blob-num js-line-number" data-line-number="3574"></td>
        <td id="LC3574" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">if</span> (params_.<span class="pl-c1">end</span>() != optIt)</td>
      </tr>
      <tr>
        <td id="L3575" class="blob-num js-line-number" data-line-number="3575"></td>
        <td id="LC3575" class="blob-code blob-code-inner js-file-line">         <span class="pl-k">return</span> <span class="pl-c1">string_stream</span>(optIt-&gt;second);</td>
      </tr>
      <tr>
        <td id="L3576" class="blob-num js-line-number" data-line-number="3576"></td>
        <td id="LC3576" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3577" class="blob-num js-line-number" data-line-number="3577"></td>
        <td id="LC3577" class="blob-code blob-code-inner js-file-line">      std::ostringstream ostr;</td>
      </tr>
      <tr>
        <td id="L3578" class="blob-num js-line-number" data-line-number="3578"></td>
        <td id="LC3578" class="blob-code blob-code-inner js-file-line">      ostr &lt;&lt; def_val;</td>
      </tr>
      <tr>
        <td id="L3579" class="blob-num js-line-number" data-line-number="3579"></td>
        <td id="LC3579" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> <span class="pl-c1">string_stream</span>(ostr.<span class="pl-c1">str</span>()); <span class="pl-c"><span class="pl-c">//</span> use default</span></td>
      </tr>
      <tr>
        <td id="L3580" class="blob-num js-line-number" data-line-number="3580"></td>
        <td id="LC3580" class="blob-code blob-code-inner js-file-line">   }</td>
      </tr>
      <tr>
        <td id="L3581" class="blob-num js-line-number" data-line-number="3581"></td>
        <td id="LC3581" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3582" class="blob-num js-line-number" data-line-number="3582"></td>
        <td id="LC3582" class="blob-code blob-code-inner js-file-line">   <span class="pl-c"><span class="pl-c">//</span>////////////////////////////////////////////////////////////////////////</span></td>
      </tr>
      <tr>
        <td id="L3583" class="blob-num js-line-number" data-line-number="3583"></td>
        <td id="LC3583" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3584" class="blob-num js-line-number" data-line-number="3584"></td>
        <td id="LC3584" class="blob-code blob-code-inner js-file-line">   <span class="pl-c"><span class="pl-c">//</span> same as above but for a list of names. returns the first value to be found.</span></td>
      </tr>
      <tr>
        <td id="L3585" class="blob-num js-line-number" data-line-number="3585"></td>
        <td id="LC3585" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">template</span>&lt;<span class="pl-k">typename</span> T&gt;</td>
      </tr>
      <tr>
        <td id="L3586" class="blob-num js-line-number" data-line-number="3586"></td>
        <td id="LC3586" class="blob-code blob-code-inner js-file-line">   string_stream <span class="pl-en">parser::operator</span>()(std::initializer_list&lt;<span class="pl-k">char</span> <span class="pl-k">const</span>* <span class="pl-k">const</span>&gt; init_list, T&amp;&amp; def_val) <span class="pl-k">const</span></td>
      </tr>
      <tr>
        <td id="L3587" class="blob-num js-line-number" data-line-number="3587"></td>
        <td id="LC3587" class="blob-code blob-code-inner js-file-line">   {</td>
      </tr>
      <tr>
        <td id="L3588" class="blob-num js-line-number" data-line-number="3588"></td>
        <td id="LC3588" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">for</span> (<span class="pl-k">auto</span>&amp; name : init_list)</td>
      </tr>
      <tr>
        <td id="L3589" class="blob-num js-line-number" data-line-number="3589"></td>
        <td id="LC3589" class="blob-code blob-code-inner js-file-line">      {</td>
      </tr>
      <tr>
        <td id="L3590" class="blob-num js-line-number" data-line-number="3590"></td>
        <td id="LC3590" class="blob-code blob-code-inner js-file-line">         <span class="pl-k">auto</span> optIt = params_.<span class="pl-c1">find</span>(<span class="pl-c1">trim_leading_dashes</span>(name));</td>
      </tr>
      <tr>
        <td id="L3591" class="blob-num js-line-number" data-line-number="3591"></td>
        <td id="LC3591" class="blob-code blob-code-inner js-file-line">         <span class="pl-k">if</span> (params_.<span class="pl-c1">end</span>() != optIt)</td>
      </tr>
      <tr>
        <td id="L3592" class="blob-num js-line-number" data-line-number="3592"></td>
        <td id="LC3592" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> <span class="pl-c1">string_stream</span>(optIt-&gt;second);</td>
      </tr>
      <tr>
        <td id="L3593" class="blob-num js-line-number" data-line-number="3593"></td>
        <td id="LC3593" class="blob-code blob-code-inner js-file-line">      }      </td>
      </tr>
      <tr>
        <td id="L3594" class="blob-num js-line-number" data-line-number="3594"></td>
        <td id="LC3594" class="blob-code blob-code-inner js-file-line">      std::ostringstream ostr;</td>
      </tr>
      <tr>
        <td id="L3595" class="blob-num js-line-number" data-line-number="3595"></td>
        <td id="LC3595" class="blob-code blob-code-inner js-file-line">      ostr &lt;&lt; def_val;</td>
      </tr>
      <tr>
        <td id="L3596" class="blob-num js-line-number" data-line-number="3596"></td>
        <td id="LC3596" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> <span class="pl-c1">string_stream</span>(ostr.<span class="pl-c1">str</span>()); <span class="pl-c"><span class="pl-c">//</span> use default</span></td>
      </tr>
      <tr>
        <td id="L3597" class="blob-num js-line-number" data-line-number="3597"></td>
        <td id="LC3597" class="blob-code blob-code-inner js-file-line">   }</td>
      </tr>
      <tr>
        <td id="L3598" class="blob-num js-line-number" data-line-number="3598"></td>
        <td id="LC3598" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3599" class="blob-num js-line-number" data-line-number="3599"></td>
        <td id="LC3599" class="blob-code blob-code-inner js-file-line">   <span class="pl-c"><span class="pl-c">//</span>////////////////////////////////////////////////////////////////////////</span></td>
      </tr>
      <tr>
        <td id="L3600" class="blob-num js-line-number" data-line-number="3600"></td>
        <td id="LC3600" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3601" class="blob-num js-line-number" data-line-number="3601"></td>
        <td id="LC3601" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">inline</span> string_stream <span class="pl-en">parser::operator</span>()(<span class="pl-c1">size_t</span> ind) <span class="pl-k">const</span></td>
      </tr>
      <tr>
        <td id="L3602" class="blob-num js-line-number" data-line-number="3602"></td>
        <td id="LC3602" class="blob-code blob-code-inner js-file-line">   {</td>
      </tr>
      <tr>
        <td id="L3603" class="blob-num js-line-number" data-line-number="3603"></td>
        <td id="LC3603" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">if</span> (pos_args_.<span class="pl-c1">size</span>() &lt;= ind)</td>
      </tr>
      <tr>
        <td id="L3604" class="blob-num js-line-number" data-line-number="3604"></td>
        <td id="LC3604" class="blob-code blob-code-inner js-file-line">         <span class="pl-k">return</span> <span class="pl-c1">bad_stream</span>();</td>
      </tr>
      <tr>
        <td id="L3605" class="blob-num js-line-number" data-line-number="3605"></td>
        <td id="LC3605" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3606" class="blob-num js-line-number" data-line-number="3606"></td>
        <td id="LC3606" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> <span class="pl-c1">string_stream</span>(pos_args_[ind]);</td>
      </tr>
      <tr>
        <td id="L3607" class="blob-num js-line-number" data-line-number="3607"></td>
        <td id="LC3607" class="blob-code blob-code-inner js-file-line">   }</td>
      </tr>
      <tr>
        <td id="L3608" class="blob-num js-line-number" data-line-number="3608"></td>
        <td id="LC3608" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3609" class="blob-num js-line-number" data-line-number="3609"></td>
        <td id="LC3609" class="blob-code blob-code-inner js-file-line">   <span class="pl-c"><span class="pl-c">//</span>////////////////////////////////////////////////////////////////////////</span></td>
      </tr>
      <tr>
        <td id="L3610" class="blob-num js-line-number" data-line-number="3610"></td>
        <td id="LC3610" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3611" class="blob-num js-line-number" data-line-number="3611"></td>
        <td id="LC3611" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">template</span>&lt;<span class="pl-k">typename</span> T&gt;</td>
      </tr>
      <tr>
        <td id="L3612" class="blob-num js-line-number" data-line-number="3612"></td>
        <td id="LC3612" class="blob-code blob-code-inner js-file-line">   string_stream <span class="pl-en">parser::operator</span>()(<span class="pl-c1">size_t</span> ind, T&amp;&amp; def_val) <span class="pl-k">const</span></td>
      </tr>
      <tr>
        <td id="L3613" class="blob-num js-line-number" data-line-number="3613"></td>
        <td id="LC3613" class="blob-code blob-code-inner js-file-line">   {</td>
      </tr>
      <tr>
        <td id="L3614" class="blob-num js-line-number" data-line-number="3614"></td>
        <td id="LC3614" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">if</span> (pos_args_.<span class="pl-c1">size</span>() &lt;= ind)</td>
      </tr>
      <tr>
        <td id="L3615" class="blob-num js-line-number" data-line-number="3615"></td>
        <td id="LC3615" class="blob-code blob-code-inner js-file-line">      {</td>
      </tr>
      <tr>
        <td id="L3616" class="blob-num js-line-number" data-line-number="3616"></td>
        <td id="LC3616" class="blob-code blob-code-inner js-file-line">         std::ostringstream ostr;</td>
      </tr>
      <tr>
        <td id="L3617" class="blob-num js-line-number" data-line-number="3617"></td>
        <td id="LC3617" class="blob-code blob-code-inner js-file-line">         ostr &lt;&lt; def_val;</td>
      </tr>
      <tr>
        <td id="L3618" class="blob-num js-line-number" data-line-number="3618"></td>
        <td id="LC3618" class="blob-code blob-code-inner js-file-line">         <span class="pl-k">return</span> <span class="pl-c1">string_stream</span>(ostr.<span class="pl-c1">str</span>());</td>
      </tr>
      <tr>
        <td id="L3619" class="blob-num js-line-number" data-line-number="3619"></td>
        <td id="LC3619" class="blob-code blob-code-inner js-file-line">      }</td>
      </tr>
      <tr>
        <td id="L3620" class="blob-num js-line-number" data-line-number="3620"></td>
        <td id="LC3620" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3621" class="blob-num js-line-number" data-line-number="3621"></td>
        <td id="LC3621" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">return</span> <span class="pl-c1">string_stream</span>(pos_args_[ind]);</td>
      </tr>
      <tr>
        <td id="L3622" class="blob-num js-line-number" data-line-number="3622"></td>
        <td id="LC3622" class="blob-code blob-code-inner js-file-line">   }</td>
      </tr>
      <tr>
        <td id="L3623" class="blob-num js-line-number" data-line-number="3623"></td>
        <td id="LC3623" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3624" class="blob-num js-line-number" data-line-number="3624"></td>
        <td id="LC3624" class="blob-code blob-code-inner js-file-line">   <span class="pl-c"><span class="pl-c">//</span>////////////////////////////////////////////////////////////////////////</span></td>
      </tr>
      <tr>
        <td id="L3625" class="blob-num js-line-number" data-line-number="3625"></td>
        <td id="LC3625" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3626" class="blob-num js-line-number" data-line-number="3626"></td>
        <td id="LC3626" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">parser::add_param</span>(std::string <span class="pl-k">const</span>&amp; name)</td>
      </tr>
      <tr>
        <td id="L3627" class="blob-num js-line-number" data-line-number="3627"></td>
        <td id="LC3627" class="blob-code blob-code-inner js-file-line">   {</td>
      </tr>
      <tr>
        <td id="L3628" class="blob-num js-line-number" data-line-number="3628"></td>
        <td id="LC3628" class="blob-code blob-code-inner js-file-line">      registeredParams_.<span class="pl-c1">insert</span>(<span class="pl-c1">trim_leading_dashes</span>(name));</td>
      </tr>
      <tr>
        <td id="L3629" class="blob-num js-line-number" data-line-number="3629"></td>
        <td id="LC3629" class="blob-code blob-code-inner js-file-line">   }</td>
      </tr>
      <tr>
        <td id="L3630" class="blob-num js-line-number" data-line-number="3630"></td>
        <td id="LC3630" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3631" class="blob-num js-line-number" data-line-number="3631"></td>
        <td id="LC3631" class="blob-code blob-code-inner js-file-line">   <span class="pl-c"><span class="pl-c">//</span>////////////////////////////////////////////////////////////////////////</span></td>
      </tr>
      <tr>
        <td id="L3632" class="blob-num js-line-number" data-line-number="3632"></td>
        <td id="LC3632" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3633" class="blob-num js-line-number" data-line-number="3633"></td>
        <td id="LC3633" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">parser::add_params</span>(std::initializer_list&lt;<span class="pl-k">char</span> <span class="pl-k">const</span>* <span class="pl-k">const</span>&gt; init_list)</td>
      </tr>
      <tr>
        <td id="L3634" class="blob-num js-line-number" data-line-number="3634"></td>
        <td id="LC3634" class="blob-code blob-code-inner js-file-line">   {</td>
      </tr>
      <tr>
        <td id="L3635" class="blob-num js-line-number" data-line-number="3635"></td>
        <td id="LC3635" class="blob-code blob-code-inner js-file-line">      <span class="pl-k">for</span> (<span class="pl-k">auto</span>&amp; name : init_list)</td>
      </tr>
      <tr>
        <td id="L3636" class="blob-num js-line-number" data-line-number="3636"></td>
        <td id="LC3636" class="blob-code blob-code-inner js-file-line">         registeredParams_.<span class="pl-c1">insert</span>(<span class="pl-c1">trim_leading_dashes</span>(name));</td>
      </tr>
      <tr>
        <td id="L3637" class="blob-num js-line-number" data-line-number="3637"></td>
        <td id="LC3637" class="blob-code blob-code-inner js-file-line">   }</td>
      </tr>
      <tr>
        <td id="L3638" class="blob-num js-line-number" data-line-number="3638"></td>
        <td id="LC3638" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L3639" class="blob-num js-line-number" data-line-number="3639"></td>
        <td id="LC3639" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3640" class="blob-num js-line-number" data-line-number="3640"></td>
        <td id="LC3640" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L3641" class="blob-num js-line-number" data-line-number="3641"></td>
        <td id="LC3641" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3642" class="blob-num js-line-number" data-line-number="3642"></td>
        <td id="LC3642" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L3643" class="blob-num js-line-number" data-line-number="3643"></td>
        <td id="LC3643" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * THIS IS AN AUTO-GENERATED FILE. DO NOT MODIFY AS CHANGES MIGHT BE OVERWRITTEN!</span></td>
      </tr>
      <tr>
        <td id="L3644" class="blob-num js-line-number" data-line-number="3644"></td>
        <td id="LC3644" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L3645" class="blob-num js-line-number" data-line-number="3645"></td>
        <td id="LC3645" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3646" class="blob-num js-line-number" data-line-number="3646"></td>
        <td id="LC3646" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifndef</span> VISITABLE_TYPE_TRAIT</td>
      </tr>
      <tr>
        <td id="L3647" class="blob-num js-line-number" data-line-number="3647"></td>
        <td id="LC3647" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">define</span> <span class="pl-en">VISITABLE_TYPE_TRAIT</span></td>
      </tr>
      <tr>
        <td id="L3648" class="blob-num js-line-number" data-line-number="3648"></td>
        <td id="LC3648" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>cstdint<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L3649" class="blob-num js-line-number" data-line-number="3649"></td>
        <td id="LC3649" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>string<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L3650" class="blob-num js-line-number" data-line-number="3650"></td>
        <td id="LC3650" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>utility<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L3651" class="blob-num js-line-number" data-line-number="3651"></td>
        <td id="LC3651" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3652" class="blob-num js-line-number" data-line-number="3652"></td>
        <td id="LC3652" class="blob-code blob-code-inner js-file-line"><span class="pl-k">template</span>&lt;<span class="pl-k">bool</span> b&gt;</td>
      </tr>
      <tr>
        <td id="L3653" class="blob-num js-line-number" data-line-number="3653"></td>
        <td id="LC3653" class="blob-code blob-code-inner js-file-line"><span class="pl-k">struct</span> <span class="pl-en">visitorSelector</span> {</td>
      </tr>
      <tr>
        <td id="L3654" class="blob-num js-line-number" data-line-number="3654"></td>
        <td id="LC3654" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template</span>&lt;<span class="pl-k">typename</span> T, <span class="pl-k">class</span> <span class="pl-en">Visitor</span>&gt;</td>
      </tr>
      <tr>
        <td id="L3655" class="blob-num js-line-number" data-line-number="3655"></td>
        <td id="LC3655" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">static</span> <span class="pl-k">void</span> <span class="pl-en">impl</span>(<span class="pl-c1">uint32_t</span> fieldIdentifier, std::string &amp;&amp;typeName, std::string &amp;&amp;name, T &amp;value, Visitor &amp;visitor) {</td>
      </tr>
      <tr>
        <td id="L3656" class="blob-num js-line-number" data-line-number="3656"></td>
        <td id="LC3656" class="blob-code blob-code-inner js-file-line">        visitor.<span class="pl-c1">visit</span>(fieldIdentifier, <span class="pl-c1">std::move</span>(typeName), <span class="pl-c1">std::move</span>(name), value);</td>
      </tr>
      <tr>
        <td id="L3657" class="blob-num js-line-number" data-line-number="3657"></td>
        <td id="LC3657" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L3658" class="blob-num js-line-number" data-line-number="3658"></td>
        <td id="LC3658" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L3659" class="blob-num js-line-number" data-line-number="3659"></td>
        <td id="LC3659" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3660" class="blob-num js-line-number" data-line-number="3660"></td>
        <td id="LC3660" class="blob-code blob-code-inner js-file-line"><span class="pl-k">template</span>&lt;&gt;</td>
      </tr>
      <tr>
        <td id="L3661" class="blob-num js-line-number" data-line-number="3661"></td>
        <td id="LC3661" class="blob-code blob-code-inner js-file-line"><span class="pl-k">struct</span> <span class="pl-en">visitorSelector</span>&lt;<span class="pl-c1">true</span>&gt; {</td>
      </tr>
      <tr>
        <td id="L3662" class="blob-num js-line-number" data-line-number="3662"></td>
        <td id="LC3662" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template</span>&lt;<span class="pl-k">typename</span> T, <span class="pl-k">class</span> <span class="pl-en">Visitor</span>&gt;</td>
      </tr>
      <tr>
        <td id="L3663" class="blob-num js-line-number" data-line-number="3663"></td>
        <td id="LC3663" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">static</span> <span class="pl-k">void</span> <span class="pl-en">impl</span>(<span class="pl-c1">uint32_t</span> fieldIdentifier, std::string &amp;&amp;typeName, std::string &amp;&amp;name, T &amp;value, Visitor &amp;visitor) {</td>
      </tr>
      <tr>
        <td id="L3664" class="blob-num js-line-number" data-line-number="3664"></td>
        <td id="LC3664" class="blob-code blob-code-inner js-file-line">        visitor.<span class="pl-c1">visit</span>(fieldIdentifier, <span class="pl-c1">std::move</span>(typeName), <span class="pl-c1">std::move</span>(name), value);</td>
      </tr>
      <tr>
        <td id="L3665" class="blob-num js-line-number" data-line-number="3665"></td>
        <td id="LC3665" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L3666" class="blob-num js-line-number" data-line-number="3666"></td>
        <td id="LC3666" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L3667" class="blob-num js-line-number" data-line-number="3667"></td>
        <td id="LC3667" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3668" class="blob-num js-line-number" data-line-number="3668"></td>
        <td id="LC3668" class="blob-code blob-code-inner js-file-line"><span class="pl-k">template</span>&lt;<span class="pl-k">typename</span> T&gt;</td>
      </tr>
      <tr>
        <td id="L3669" class="blob-num js-line-number" data-line-number="3669"></td>
        <td id="LC3669" class="blob-code blob-code-inner js-file-line"><span class="pl-k">struct</span> <span class="pl-en">isVisitable</span> {</td>
      </tr>
      <tr>
        <td id="L3670" class="blob-num js-line-number" data-line-number="3670"></td>
        <td id="LC3670" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">static</span> <span class="pl-k">const</span> <span class="pl-k">bool</span> value = <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L3671" class="blob-num js-line-number" data-line-number="3671"></td>
        <td id="LC3671" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L3672" class="blob-num js-line-number" data-line-number="3672"></td>
        <td id="LC3672" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3673" class="blob-num js-line-number" data-line-number="3673"></td>
        <td id="LC3673" class="blob-code blob-code-inner js-file-line"><span class="pl-k">template</span>&lt;<span class="pl-k">typename</span> T, <span class="pl-k">class</span> <span class="pl-en">Visitor</span>&gt;</td>
      </tr>
      <tr>
        <td id="L3674" class="blob-num js-line-number" data-line-number="3674"></td>
        <td id="LC3674" class="blob-code blob-code-inner js-file-line"><span class="pl-k">void</span> <span class="pl-en">doVisit</span>(<span class="pl-c1">uint32_t</span> fieldIdentifier, std::string &amp;&amp;typeName, std::string &amp;&amp;name, T &amp;value, Visitor &amp;visitor) {</td>
      </tr>
      <tr>
        <td id="L3675" class="blob-num js-line-number" data-line-number="3675"></td>
        <td id="LC3675" class="blob-code blob-code-inner js-file-line">    visitorSelector&lt;isVisitable&lt;T&gt;::value &gt;::<span class="pl-c1">impl</span>(fieldIdentifier, <span class="pl-c1">std::move</span>(typeName), <span class="pl-c1">std::move</span>(name), value, visitor);</td>
      </tr>
      <tr>
        <td id="L3676" class="blob-num js-line-number" data-line-number="3676"></td>
        <td id="LC3676" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L3677" class="blob-num js-line-number" data-line-number="3677"></td>
        <td id="LC3677" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L3678" class="blob-num js-line-number" data-line-number="3678"></td>
        <td id="LC3678" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3679" class="blob-num js-line-number" data-line-number="3679"></td>
        <td id="LC3679" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifndef</span> TRIPLET_FORWARD_VISITABLE_TYPE_TRAIT</td>
      </tr>
      <tr>
        <td id="L3680" class="blob-num js-line-number" data-line-number="3680"></td>
        <td id="LC3680" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">define</span> <span class="pl-en">TRIPLET_FORWARD_VISITABLE_TYPE_TRAIT</span></td>
      </tr>
      <tr>
        <td id="L3681" class="blob-num js-line-number" data-line-number="3681"></td>
        <td id="LC3681" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>cstdint<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L3682" class="blob-num js-line-number" data-line-number="3682"></td>
        <td id="LC3682" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>string<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L3683" class="blob-num js-line-number" data-line-number="3683"></td>
        <td id="LC3683" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>utility<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L3684" class="blob-num js-line-number" data-line-number="3684"></td>
        <td id="LC3684" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3685" class="blob-num js-line-number" data-line-number="3685"></td>
        <td id="LC3685" class="blob-code blob-code-inner js-file-line"><span class="pl-k">template</span>&lt;<span class="pl-k">bool</span> b&gt;</td>
      </tr>
      <tr>
        <td id="L3686" class="blob-num js-line-number" data-line-number="3686"></td>
        <td id="LC3686" class="blob-code blob-code-inner js-file-line"><span class="pl-k">struct</span> <span class="pl-en">tripletForwardVisitorSelector</span> {</td>
      </tr>
      <tr>
        <td id="L3687" class="blob-num js-line-number" data-line-number="3687"></td>
        <td id="LC3687" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template</span>&lt;<span class="pl-k">typename</span> T, <span class="pl-k">class</span> <span class="pl-en">PreVisitor</span>, <span class="pl-k">class</span> <span class="pl-en">Visitor</span>, <span class="pl-k">class</span> <span class="pl-en">PostVisitor</span>&gt;</td>
      </tr>
      <tr>
        <td id="L3688" class="blob-num js-line-number" data-line-number="3688"></td>
        <td id="LC3688" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">static</span> <span class="pl-k">void</span> <span class="pl-en">impl</span>(<span class="pl-c1">uint32_t</span> fieldIdentifier, std::string &amp;&amp;typeName, std::string &amp;&amp;name, T &amp;value, PreVisitor &amp;&amp;preVisit, Visitor &amp;&amp;visit, PostVisitor &amp;&amp;postVisit) {</td>
      </tr>
      <tr>
        <td id="L3689" class="blob-num js-line-number" data-line-number="3689"></td>
        <td id="LC3689" class="blob-code blob-code-inner js-file-line">        (<span class="pl-k">void</span>)preVisit;</td>
      </tr>
      <tr>
        <td id="L3690" class="blob-num js-line-number" data-line-number="3690"></td>
        <td id="LC3690" class="blob-code blob-code-inner js-file-line">        (<span class="pl-k">void</span>)postVisit;</td>
      </tr>
      <tr>
        <td id="L3691" class="blob-num js-line-number" data-line-number="3691"></td>
        <td id="LC3691" class="blob-code blob-code-inner js-file-line">        std::forward&lt;Visitor&gt;(visit)(fieldIdentifier, <span class="pl-c1">std::move</span>(typeName), <span class="pl-c1">std::move</span>(name), value);</td>
      </tr>
      <tr>
        <td id="L3692" class="blob-num js-line-number" data-line-number="3692"></td>
        <td id="LC3692" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L3693" class="blob-num js-line-number" data-line-number="3693"></td>
        <td id="LC3693" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L3694" class="blob-num js-line-number" data-line-number="3694"></td>
        <td id="LC3694" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3695" class="blob-num js-line-number" data-line-number="3695"></td>
        <td id="LC3695" class="blob-code blob-code-inner js-file-line"><span class="pl-k">template</span>&lt;&gt;</td>
      </tr>
      <tr>
        <td id="L3696" class="blob-num js-line-number" data-line-number="3696"></td>
        <td id="LC3696" class="blob-code blob-code-inner js-file-line"><span class="pl-k">struct</span> <span class="pl-en">tripletForwardVisitorSelector</span>&lt;<span class="pl-c1">true</span>&gt; {</td>
      </tr>
      <tr>
        <td id="L3697" class="blob-num js-line-number" data-line-number="3697"></td>
        <td id="LC3697" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template</span>&lt;<span class="pl-k">typename</span> T, <span class="pl-k">class</span> <span class="pl-en">PreVisitor</span>, <span class="pl-k">class</span> <span class="pl-en">Visitor</span>, <span class="pl-k">class</span> <span class="pl-en">PostVisitor</span>&gt;</td>
      </tr>
      <tr>
        <td id="L3698" class="blob-num js-line-number" data-line-number="3698"></td>
        <td id="LC3698" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">static</span> <span class="pl-k">void</span> <span class="pl-en">impl</span>(<span class="pl-c1">uint32_t</span> fieldIdentifier, std::string &amp;&amp;typeName, std::string &amp;&amp;name, T &amp;value, PreVisitor &amp;&amp;preVisit, Visitor &amp;&amp;visit, PostVisitor &amp;&amp;postVisit) {</td>
      </tr>
      <tr>
        <td id="L3699" class="blob-num js-line-number" data-line-number="3699"></td>
        <td id="LC3699" class="blob-code blob-code-inner js-file-line">        (<span class="pl-k">void</span>)fieldIdentifier;</td>
      </tr>
      <tr>
        <td id="L3700" class="blob-num js-line-number" data-line-number="3700"></td>
        <td id="LC3700" class="blob-code blob-code-inner js-file-line">        (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L3701" class="blob-num js-line-number" data-line-number="3701"></td>
        <td id="LC3701" class="blob-code blob-code-inner js-file-line">        (<span class="pl-k">void</span>)name;</td>
      </tr>
      <tr>
        <td id="L3702" class="blob-num js-line-number" data-line-number="3702"></td>
        <td id="LC3702" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> Apply preVisit, visit, and postVisit on value.</span></td>
      </tr>
      <tr>
        <td id="L3703" class="blob-num js-line-number" data-line-number="3703"></td>
        <td id="LC3703" class="blob-code blob-code-inner js-file-line">        value.<span class="pl-c1">accept</span>(preVisit, visit, postVisit);</td>
      </tr>
      <tr>
        <td id="L3704" class="blob-num js-line-number" data-line-number="3704"></td>
        <td id="LC3704" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L3705" class="blob-num js-line-number" data-line-number="3705"></td>
        <td id="LC3705" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L3706" class="blob-num js-line-number" data-line-number="3706"></td>
        <td id="LC3706" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3707" class="blob-num js-line-number" data-line-number="3707"></td>
        <td id="LC3707" class="blob-code blob-code-inner js-file-line"><span class="pl-k">template</span>&lt;<span class="pl-k">typename</span> T&gt;</td>
      </tr>
      <tr>
        <td id="L3708" class="blob-num js-line-number" data-line-number="3708"></td>
        <td id="LC3708" class="blob-code blob-code-inner js-file-line"><span class="pl-k">struct</span> <span class="pl-en">isTripletForwardVisitable</span> {</td>
      </tr>
      <tr>
        <td id="L3709" class="blob-num js-line-number" data-line-number="3709"></td>
        <td id="LC3709" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">static</span> <span class="pl-k">const</span> <span class="pl-k">bool</span> value = <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L3710" class="blob-num js-line-number" data-line-number="3710"></td>
        <td id="LC3710" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L3711" class="blob-num js-line-number" data-line-number="3711"></td>
        <td id="LC3711" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3712" class="blob-num js-line-number" data-line-number="3712"></td>
        <td id="LC3712" class="blob-code blob-code-inner js-file-line"><span class="pl-k">template</span>&lt; <span class="pl-k">typename</span> T, <span class="pl-k">class</span> <span class="pl-en">PreVisitor</span>, <span class="pl-k">class</span> <span class="pl-en">Visitor</span>, <span class="pl-k">class</span> <span class="pl-en">PostVisitor</span>&gt;</td>
      </tr>
      <tr>
        <td id="L3713" class="blob-num js-line-number" data-line-number="3713"></td>
        <td id="LC3713" class="blob-code blob-code-inner js-file-line"><span class="pl-k">void</span> <span class="pl-en">doTripletForwardVisit</span>(<span class="pl-c1">uint32_t</span> fieldIdentifier, std::string &amp;&amp;typeName, std::string &amp;&amp;name, T &amp;value, PreVisitor &amp;&amp;preVisit, Visitor &amp;&amp;visit, PostVisitor &amp;&amp;postVisit) {</td>
      </tr>
      <tr>
        <td id="L3714" class="blob-num js-line-number" data-line-number="3714"></td>
        <td id="LC3714" class="blob-code blob-code-inner js-file-line">    tripletForwardVisitorSelector&lt;isTripletForwardVisitable&lt;T&gt;::value &gt;::<span class="pl-c1">impl</span>(fieldIdentifier, <span class="pl-c1">std::move</span>(typeName), <span class="pl-c1">std::move</span>(name), value, <span class="pl-c1">std::move</span>(preVisit), <span class="pl-c1">std::move</span>(visit), <span class="pl-c1">std::move</span>(postVisit)); <span class="pl-c"><span class="pl-c">//</span> NOLINT</span></td>
      </tr>
      <tr>
        <td id="L3715" class="blob-num js-line-number" data-line-number="3715"></td>
        <td id="LC3715" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L3716" class="blob-num js-line-number" data-line-number="3716"></td>
        <td id="LC3716" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L3717" class="blob-num js-line-number" data-line-number="3717"></td>
        <td id="LC3717" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3718" class="blob-num js-line-number" data-line-number="3718"></td>
        <td id="LC3718" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3719" class="blob-num js-line-number" data-line-number="3719"></td>
        <td id="LC3719" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifndef</span> CLUON_DATA_TIMESTAMP_HPP</td>
      </tr>
      <tr>
        <td id="L3720" class="blob-num js-line-number" data-line-number="3720"></td>
        <td id="LC3720" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">define</span> <span class="pl-en">CLUON_DATA_TIMESTAMP_HPP</span></td>
      </tr>
      <tr>
        <td id="L3721" class="blob-num js-line-number" data-line-number="3721"></td>
        <td id="LC3721" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3722" class="blob-num js-line-number" data-line-number="3722"></td>
        <td id="LC3722" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifdef</span> WIN32</td>
      </tr>
      <tr>
        <td id="L3723" class="blob-num js-line-number" data-line-number="3723"></td>
        <td id="LC3723" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Export symbols if compile flags &quot;LIB_SHARED&quot; and &quot;LIB_EXPORTS&quot; are set on Windows.</span></td>
      </tr>
      <tr>
        <td id="L3724" class="blob-num js-line-number" data-line-number="3724"></td>
        <td id="LC3724" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">ifdef</span> LIB_SHARED</td>
      </tr>
      <tr>
        <td id="L3725" class="blob-num js-line-number" data-line-number="3725"></td>
        <td id="LC3725" class="blob-code blob-code-inner js-file-line">        #<span class="pl-k">ifdef</span> LIB_EXPORTS</td>
      </tr>
      <tr>
        <td id="L3726" class="blob-num js-line-number" data-line-number="3726"></td>
        <td id="LC3726" class="blob-code blob-code-inner js-file-line">            #<span class="pl-k">define</span> <span class="pl-en">LIB_API</span> <span class="pl-en">__declspec</span>(dllexport)</td>
      </tr>
      <tr>
        <td id="L3727" class="blob-num js-line-number" data-line-number="3727"></td>
        <td id="LC3727" class="blob-code blob-code-inner js-file-line">        #<span class="pl-k">else</span></td>
      </tr>
      <tr>
        <td id="L3728" class="blob-num js-line-number" data-line-number="3728"></td>
        <td id="LC3728" class="blob-code blob-code-inner js-file-line">            #<span class="pl-k">define</span> <span class="pl-en">LIB_API</span> <span class="pl-en">__declspec</span>(dllimport)</td>
      </tr>
      <tr>
        <td id="L3729" class="blob-num js-line-number" data-line-number="3729"></td>
        <td id="LC3729" class="blob-code blob-code-inner js-file-line">        #endif</td>
      </tr>
      <tr>
        <td id="L3730" class="blob-num js-line-number" data-line-number="3730"></td>
        <td id="LC3730" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">else</span></td>
      </tr>
      <tr>
        <td id="L3731" class="blob-num js-line-number" data-line-number="3731"></td>
        <td id="LC3731" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> Disable definition if linking statically.</span></td>
      </tr>
      <tr>
        <td id="L3732" class="blob-num js-line-number" data-line-number="3732"></td>
        <td id="LC3732" class="blob-code blob-code-inner js-file-line">        #<span class="pl-k">define</span> <span class="pl-en">LIB_API</span></td>
      </tr>
      <tr>
        <td id="L3733" class="blob-num js-line-number" data-line-number="3733"></td>
        <td id="LC3733" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L3734" class="blob-num js-line-number" data-line-number="3734"></td>
        <td id="LC3734" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">else</span></td>
      </tr>
      <tr>
        <td id="L3735" class="blob-num js-line-number" data-line-number="3735"></td>
        <td id="LC3735" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Disable definition for non-Win32 systems.</span></td>
      </tr>
      <tr>
        <td id="L3736" class="blob-num js-line-number" data-line-number="3736"></td>
        <td id="LC3736" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">define</span> <span class="pl-en">LIB_API</span></td>
      </tr>
      <tr>
        <td id="L3737" class="blob-num js-line-number" data-line-number="3737"></td>
        <td id="LC3737" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L3738" class="blob-num js-line-number" data-line-number="3738"></td>
        <td id="LC3738" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3739" class="blob-num js-line-number" data-line-number="3739"></td>
        <td id="LC3739" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>string<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L3740" class="blob-num js-line-number" data-line-number="3740"></td>
        <td id="LC3740" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>utility<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L3741" class="blob-num js-line-number" data-line-number="3741"></td>
        <td id="LC3741" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">cluon</span> { <span class="pl-k">namespace</span> <span class="pl-en">data</span> {</td>
      </tr>
      <tr>
        <td id="L3742" class="blob-num js-line-number" data-line-number="3742"></td>
        <td id="LC3742" class="blob-code blob-code-inner js-file-line"><span class="pl-k">using</span> <span class="pl-k">namespace</span> <span class="pl-en">std</span>::string_literals<span class="pl-k">;</span> <span class="pl-c"><span class="pl-c">//</span> NOLINT</span></td>
      </tr>
      <tr>
        <td id="L3743" class="blob-num js-line-number" data-line-number="3743"></td>
        <td id="LC3743" class="blob-code blob-code-inner js-file-line"><span class="pl-k">class</span> <span class="pl-en">LIB_API</span> TimeStamp {</td>
      </tr>
      <tr>
        <td id="L3744" class="blob-num js-line-number" data-line-number="3744"></td>
        <td id="LC3744" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L3745" class="blob-num js-line-number" data-line-number="3745"></td>
        <td id="LC3745" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">TimeStamp</span>() = <span class="pl-k">default</span>;</td>
      </tr>
      <tr>
        <td id="L3746" class="blob-num js-line-number" data-line-number="3746"></td>
        <td id="LC3746" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">TimeStamp</span>(<span class="pl-k">const</span> TimeStamp&amp;) = <span class="pl-k">default</span>;</td>
      </tr>
      <tr>
        <td id="L3747" class="blob-num js-line-number" data-line-number="3747"></td>
        <td id="LC3747" class="blob-code blob-code-inner js-file-line">        TimeStamp&amp; <span class="pl-k">operator</span>=(<span class="pl-k">const</span> TimeStamp&amp;) = <span class="pl-k">default</span>;</td>
      </tr>
      <tr>
        <td id="L3748" class="blob-num js-line-number" data-line-number="3748"></td>
        <td id="LC3748" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">TimeStamp</span>(TimeStamp&amp;&amp;) noexcept = <span class="pl-k">default</span>; <span class="pl-c"><span class="pl-c">//</span> NOLINT</span></td>
      </tr>
      <tr>
        <td id="L3749" class="blob-num js-line-number" data-line-number="3749"></td>
        <td id="LC3749" class="blob-code blob-code-inner js-file-line">        TimeStamp&amp; <span class="pl-k">operator</span>=(TimeStamp&amp;&amp;) noexcept = <span class="pl-k">default</span>; <span class="pl-c"><span class="pl-c">//</span> NOLINT</span></td>
      </tr>
      <tr>
        <td id="L3750" class="blob-num js-line-number" data-line-number="3750"></td>
        <td id="LC3750" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">~TimeStamp</span>() = <span class="pl-k">default</span>;</td>
      </tr>
      <tr>
        <td id="L3751" class="blob-num js-line-number" data-line-number="3751"></td>
        <td id="LC3751" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3752" class="blob-num js-line-number" data-line-number="3752"></td>
        <td id="LC3752" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L3753" class="blob-num js-line-number" data-line-number="3753"></td>
        <td id="LC3753" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">static</span> <span class="pl-c1">int32_t</span> <span class="pl-en">ID</span>();</td>
      </tr>
      <tr>
        <td id="L3754" class="blob-num js-line-number" data-line-number="3754"></td>
        <td id="LC3754" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">static</span> <span class="pl-k">const</span> std::string <span class="pl-en">ShortName</span>();</td>
      </tr>
      <tr>
        <td id="L3755" class="blob-num js-line-number" data-line-number="3755"></td>
        <td id="LC3755" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">static</span> <span class="pl-k">const</span> std::string <span class="pl-en">LongName</span>();</td>
      </tr>
      <tr>
        <td id="L3756" class="blob-num js-line-number" data-line-number="3756"></td>
        <td id="LC3756" class="blob-code blob-code-inner js-file-line">        </td>
      </tr>
      <tr>
        <td id="L3757" class="blob-num js-line-number" data-line-number="3757"></td>
        <td id="LC3757" class="blob-code blob-code-inner js-file-line">        TimeStamp&amp; <span class="pl-en">seconds</span>(<span class="pl-k">const</span> <span class="pl-c1">int32_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L3758" class="blob-num js-line-number" data-line-number="3758"></td>
        <td id="LC3758" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">int32_t</span> <span class="pl-en">seconds</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L3759" class="blob-num js-line-number" data-line-number="3759"></td>
        <td id="LC3759" class="blob-code blob-code-inner js-file-line">        </td>
      </tr>
      <tr>
        <td id="L3760" class="blob-num js-line-number" data-line-number="3760"></td>
        <td id="LC3760" class="blob-code blob-code-inner js-file-line">        TimeStamp&amp; <span class="pl-en">microseconds</span>(<span class="pl-k">const</span> <span class="pl-c1">int32_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L3761" class="blob-num js-line-number" data-line-number="3761"></td>
        <td id="LC3761" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">int32_t</span> <span class="pl-en">microseconds</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L3762" class="blob-num js-line-number" data-line-number="3762"></td>
        <td id="LC3762" class="blob-code blob-code-inner js-file-line">        </td>
      </tr>
      <tr>
        <td id="L3763" class="blob-num js-line-number" data-line-number="3763"></td>
        <td id="LC3763" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3764" class="blob-num js-line-number" data-line-number="3764"></td>
        <td id="LC3764" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">template</span>&lt;<span class="pl-k">class</span> <span class="pl-en">Visitor</span>&gt;</td>
      </tr>
      <tr>
        <td id="L3765" class="blob-num js-line-number" data-line-number="3765"></td>
        <td id="LC3765" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">void</span> <span class="pl-en">accept</span>(Visitor &amp;visitor) {</td>
      </tr>
      <tr>
        <td id="L3766" class="blob-num js-line-number" data-line-number="3766"></td>
        <td id="LC3766" class="blob-code blob-code-inner js-file-line">            visitor.<span class="pl-c1">preVisit</span>(<span class="pl-c1">ID</span>(), <span class="pl-c1">ShortName</span>(), <span class="pl-c1">LongName</span>());</td>
      </tr>
      <tr>
        <td id="L3767" class="blob-num js-line-number" data-line-number="3767"></td>
        <td id="LC3767" class="blob-code blob-code-inner js-file-line">            </td>
      </tr>
      <tr>
        <td id="L3768" class="blob-num js-line-number" data-line-number="3768"></td>
        <td id="LC3768" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">doVisit</span>(<span class="pl-c1">1</span>, <span class="pl-c1">std::move</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>int32_t<span class="pl-pds">&quot;</span></span>s), <span class="pl-c1">std::move</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>seconds<span class="pl-pds">&quot;</span></span>s), m_seconds, visitor);</td>
      </tr>
      <tr>
        <td id="L3769" class="blob-num js-line-number" data-line-number="3769"></td>
        <td id="LC3769" class="blob-code blob-code-inner js-file-line">            </td>
      </tr>
      <tr>
        <td id="L3770" class="blob-num js-line-number" data-line-number="3770"></td>
        <td id="LC3770" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">doVisit</span>(<span class="pl-c1">2</span>, <span class="pl-c1">std::move</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>int32_t<span class="pl-pds">&quot;</span></span>s), <span class="pl-c1">std::move</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>microseconds<span class="pl-pds">&quot;</span></span>s), m_microseconds, visitor);</td>
      </tr>
      <tr>
        <td id="L3771" class="blob-num js-line-number" data-line-number="3771"></td>
        <td id="LC3771" class="blob-code blob-code-inner js-file-line">            </td>
      </tr>
      <tr>
        <td id="L3772" class="blob-num js-line-number" data-line-number="3772"></td>
        <td id="LC3772" class="blob-code blob-code-inner js-file-line">            visitor.<span class="pl-c1">postVisit</span>();</td>
      </tr>
      <tr>
        <td id="L3773" class="blob-num js-line-number" data-line-number="3773"></td>
        <td id="LC3773" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L3774" class="blob-num js-line-number" data-line-number="3774"></td>
        <td id="LC3774" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3775" class="blob-num js-line-number" data-line-number="3775"></td>
        <td id="LC3775" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">template</span>&lt;<span class="pl-k">class</span> <span class="pl-en">PreVisitor</span>, <span class="pl-k">class</span> <span class="pl-en">Visitor</span>, <span class="pl-k">class</span> <span class="pl-en">PostVisitor</span>&gt;</td>
      </tr>
      <tr>
        <td id="L3776" class="blob-num js-line-number" data-line-number="3776"></td>
        <td id="LC3776" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">void</span> <span class="pl-en">accept</span>(PreVisitor &amp;&amp;preVisit, Visitor &amp;&amp;visit, PostVisitor &amp;&amp;postVisit) {</td>
      </tr>
      <tr>
        <td id="L3777" class="blob-num js-line-number" data-line-number="3777"></td>
        <td id="LC3777" class="blob-code blob-code-inner js-file-line">            std::forward&lt;PreVisitor&gt;(preVisit)(<span class="pl-c1">ID</span>(), <span class="pl-c1">ShortName</span>(), <span class="pl-c1">LongName</span>());</td>
      </tr>
      <tr>
        <td id="L3778" class="blob-num js-line-number" data-line-number="3778"></td>
        <td id="LC3778" class="blob-code blob-code-inner js-file-line">            </td>
      </tr>
      <tr>
        <td id="L3779" class="blob-num js-line-number" data-line-number="3779"></td>
        <td id="LC3779" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">doTripletForwardVisit</span>(<span class="pl-c1">1</span>, <span class="pl-c1">std::move</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>int32_t<span class="pl-pds">&quot;</span></span>s), <span class="pl-c1">std::move</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>seconds<span class="pl-pds">&quot;</span></span>s), m_seconds, preVisit, visit, postVisit);</td>
      </tr>
      <tr>
        <td id="L3780" class="blob-num js-line-number" data-line-number="3780"></td>
        <td id="LC3780" class="blob-code blob-code-inner js-file-line">            </td>
      </tr>
      <tr>
        <td id="L3781" class="blob-num js-line-number" data-line-number="3781"></td>
        <td id="LC3781" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">doTripletForwardVisit</span>(<span class="pl-c1">2</span>, <span class="pl-c1">std::move</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>int32_t<span class="pl-pds">&quot;</span></span>s), <span class="pl-c1">std::move</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>microseconds<span class="pl-pds">&quot;</span></span>s), m_microseconds, preVisit, visit, postVisit);</td>
      </tr>
      <tr>
        <td id="L3782" class="blob-num js-line-number" data-line-number="3782"></td>
        <td id="LC3782" class="blob-code blob-code-inner js-file-line">            </td>
      </tr>
      <tr>
        <td id="L3783" class="blob-num js-line-number" data-line-number="3783"></td>
        <td id="LC3783" class="blob-code blob-code-inner js-file-line">            std::forward&lt;PostVisitor&gt;(postVisit)();</td>
      </tr>
      <tr>
        <td id="L3784" class="blob-num js-line-number" data-line-number="3784"></td>
        <td id="LC3784" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L3785" class="blob-num js-line-number" data-line-number="3785"></td>
        <td id="LC3785" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3786" class="blob-num js-line-number" data-line-number="3786"></td>
        <td id="LC3786" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L3787" class="blob-num js-line-number" data-line-number="3787"></td>
        <td id="LC3787" class="blob-code blob-code-inner js-file-line">        </td>
      </tr>
      <tr>
        <td id="L3788" class="blob-num js-line-number" data-line-number="3788"></td>
        <td id="LC3788" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">int32_t</span> m_seconds{ <span class="pl-c1">0</span> }; <span class="pl-c"><span class="pl-c">//</span> field identifier = 1.</span></td>
      </tr>
      <tr>
        <td id="L3789" class="blob-num js-line-number" data-line-number="3789"></td>
        <td id="LC3789" class="blob-code blob-code-inner js-file-line">        </td>
      </tr>
      <tr>
        <td id="L3790" class="blob-num js-line-number" data-line-number="3790"></td>
        <td id="LC3790" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">int32_t</span> m_microseconds{ <span class="pl-c1">0</span> }; <span class="pl-c"><span class="pl-c">//</span> field identifier = 2.</span></td>
      </tr>
      <tr>
        <td id="L3791" class="blob-num js-line-number" data-line-number="3791"></td>
        <td id="LC3791" class="blob-code blob-code-inner js-file-line">        </td>
      </tr>
      <tr>
        <td id="L3792" class="blob-num js-line-number" data-line-number="3792"></td>
        <td id="LC3792" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L3793" class="blob-num js-line-number" data-line-number="3793"></td>
        <td id="LC3793" class="blob-code blob-code-inner js-file-line">}}</td>
      </tr>
      <tr>
        <td id="L3794" class="blob-num js-line-number" data-line-number="3794"></td>
        <td id="LC3794" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3795" class="blob-num js-line-number" data-line-number="3795"></td>
        <td id="LC3795" class="blob-code blob-code-inner js-file-line"><span class="pl-k">template</span>&lt;&gt;</td>
      </tr>
      <tr>
        <td id="L3796" class="blob-num js-line-number" data-line-number="3796"></td>
        <td id="LC3796" class="blob-code blob-code-inner js-file-line"><span class="pl-k">struct</span> <span class="pl-en">isVisitable</span>&lt;cluon::data::TimeStamp&gt; {</td>
      </tr>
      <tr>
        <td id="L3797" class="blob-num js-line-number" data-line-number="3797"></td>
        <td id="LC3797" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">static</span> <span class="pl-k">const</span> <span class="pl-k">bool</span> value = <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L3798" class="blob-num js-line-number" data-line-number="3798"></td>
        <td id="LC3798" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L3799" class="blob-num js-line-number" data-line-number="3799"></td>
        <td id="LC3799" class="blob-code blob-code-inner js-file-line"><span class="pl-k">template</span>&lt;&gt;</td>
      </tr>
      <tr>
        <td id="L3800" class="blob-num js-line-number" data-line-number="3800"></td>
        <td id="LC3800" class="blob-code blob-code-inner js-file-line"><span class="pl-k">struct</span> <span class="pl-en">isTripletForwardVisitable</span>&lt;cluon::data::TimeStamp&gt; {</td>
      </tr>
      <tr>
        <td id="L3801" class="blob-num js-line-number" data-line-number="3801"></td>
        <td id="LC3801" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">static</span> <span class="pl-k">const</span> <span class="pl-k">bool</span> value = <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L3802" class="blob-num js-line-number" data-line-number="3802"></td>
        <td id="LC3802" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L3803" class="blob-num js-line-number" data-line-number="3803"></td>
        <td id="LC3803" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L3804" class="blob-num js-line-number" data-line-number="3804"></td>
        <td id="LC3804" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3805" class="blob-num js-line-number" data-line-number="3805"></td>
        <td id="LC3805" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3806" class="blob-num js-line-number" data-line-number="3806"></td>
        <td id="LC3806" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L3807" class="blob-num js-line-number" data-line-number="3807"></td>
        <td id="LC3807" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * THIS IS AN AUTO-GENERATED FILE. DO NOT MODIFY AS CHANGES MIGHT BE OVERWRITTEN!</span></td>
      </tr>
      <tr>
        <td id="L3808" class="blob-num js-line-number" data-line-number="3808"></td>
        <td id="LC3808" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L3809" class="blob-num js-line-number" data-line-number="3809"></td>
        <td id="LC3809" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3810" class="blob-num js-line-number" data-line-number="3810"></td>
        <td id="LC3810" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifndef</span> VISITABLE_TYPE_TRAIT</td>
      </tr>
      <tr>
        <td id="L3811" class="blob-num js-line-number" data-line-number="3811"></td>
        <td id="LC3811" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">define</span> <span class="pl-en">VISITABLE_TYPE_TRAIT</span></td>
      </tr>
      <tr>
        <td id="L3812" class="blob-num js-line-number" data-line-number="3812"></td>
        <td id="LC3812" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>cstdint<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L3813" class="blob-num js-line-number" data-line-number="3813"></td>
        <td id="LC3813" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>string<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L3814" class="blob-num js-line-number" data-line-number="3814"></td>
        <td id="LC3814" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>utility<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L3815" class="blob-num js-line-number" data-line-number="3815"></td>
        <td id="LC3815" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3816" class="blob-num js-line-number" data-line-number="3816"></td>
        <td id="LC3816" class="blob-code blob-code-inner js-file-line"><span class="pl-k">template</span>&lt;<span class="pl-k">bool</span> b&gt;</td>
      </tr>
      <tr>
        <td id="L3817" class="blob-num js-line-number" data-line-number="3817"></td>
        <td id="LC3817" class="blob-code blob-code-inner js-file-line"><span class="pl-k">struct</span> <span class="pl-en">visitorSelector</span> {</td>
      </tr>
      <tr>
        <td id="L3818" class="blob-num js-line-number" data-line-number="3818"></td>
        <td id="LC3818" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template</span>&lt;<span class="pl-k">typename</span> T, <span class="pl-k">class</span> <span class="pl-en">Visitor</span>&gt;</td>
      </tr>
      <tr>
        <td id="L3819" class="blob-num js-line-number" data-line-number="3819"></td>
        <td id="LC3819" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">static</span> <span class="pl-k">void</span> <span class="pl-en">impl</span>(<span class="pl-c1">uint32_t</span> fieldIdentifier, std::string &amp;&amp;typeName, std::string &amp;&amp;name, T &amp;value, Visitor &amp;visitor) {</td>
      </tr>
      <tr>
        <td id="L3820" class="blob-num js-line-number" data-line-number="3820"></td>
        <td id="LC3820" class="blob-code blob-code-inner js-file-line">        visitor.<span class="pl-c1">visit</span>(fieldIdentifier, <span class="pl-c1">std::move</span>(typeName), <span class="pl-c1">std::move</span>(name), value);</td>
      </tr>
      <tr>
        <td id="L3821" class="blob-num js-line-number" data-line-number="3821"></td>
        <td id="LC3821" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L3822" class="blob-num js-line-number" data-line-number="3822"></td>
        <td id="LC3822" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L3823" class="blob-num js-line-number" data-line-number="3823"></td>
        <td id="LC3823" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3824" class="blob-num js-line-number" data-line-number="3824"></td>
        <td id="LC3824" class="blob-code blob-code-inner js-file-line"><span class="pl-k">template</span>&lt;&gt;</td>
      </tr>
      <tr>
        <td id="L3825" class="blob-num js-line-number" data-line-number="3825"></td>
        <td id="LC3825" class="blob-code blob-code-inner js-file-line"><span class="pl-k">struct</span> <span class="pl-en">visitorSelector</span>&lt;<span class="pl-c1">true</span>&gt; {</td>
      </tr>
      <tr>
        <td id="L3826" class="blob-num js-line-number" data-line-number="3826"></td>
        <td id="LC3826" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template</span>&lt;<span class="pl-k">typename</span> T, <span class="pl-k">class</span> <span class="pl-en">Visitor</span>&gt;</td>
      </tr>
      <tr>
        <td id="L3827" class="blob-num js-line-number" data-line-number="3827"></td>
        <td id="LC3827" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">static</span> <span class="pl-k">void</span> <span class="pl-en">impl</span>(<span class="pl-c1">uint32_t</span> fieldIdentifier, std::string &amp;&amp;typeName, std::string &amp;&amp;name, T &amp;value, Visitor &amp;visitor) {</td>
      </tr>
      <tr>
        <td id="L3828" class="blob-num js-line-number" data-line-number="3828"></td>
        <td id="LC3828" class="blob-code blob-code-inner js-file-line">        visitor.<span class="pl-c1">visit</span>(fieldIdentifier, <span class="pl-c1">std::move</span>(typeName), <span class="pl-c1">std::move</span>(name), value);</td>
      </tr>
      <tr>
        <td id="L3829" class="blob-num js-line-number" data-line-number="3829"></td>
        <td id="LC3829" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L3830" class="blob-num js-line-number" data-line-number="3830"></td>
        <td id="LC3830" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L3831" class="blob-num js-line-number" data-line-number="3831"></td>
        <td id="LC3831" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3832" class="blob-num js-line-number" data-line-number="3832"></td>
        <td id="LC3832" class="blob-code blob-code-inner js-file-line"><span class="pl-k">template</span>&lt;<span class="pl-k">typename</span> T&gt;</td>
      </tr>
      <tr>
        <td id="L3833" class="blob-num js-line-number" data-line-number="3833"></td>
        <td id="LC3833" class="blob-code blob-code-inner js-file-line"><span class="pl-k">struct</span> <span class="pl-en">isVisitable</span> {</td>
      </tr>
      <tr>
        <td id="L3834" class="blob-num js-line-number" data-line-number="3834"></td>
        <td id="LC3834" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">static</span> <span class="pl-k">const</span> <span class="pl-k">bool</span> value = <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L3835" class="blob-num js-line-number" data-line-number="3835"></td>
        <td id="LC3835" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L3836" class="blob-num js-line-number" data-line-number="3836"></td>
        <td id="LC3836" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3837" class="blob-num js-line-number" data-line-number="3837"></td>
        <td id="LC3837" class="blob-code blob-code-inner js-file-line"><span class="pl-k">template</span>&lt;<span class="pl-k">typename</span> T, <span class="pl-k">class</span> <span class="pl-en">Visitor</span>&gt;</td>
      </tr>
      <tr>
        <td id="L3838" class="blob-num js-line-number" data-line-number="3838"></td>
        <td id="LC3838" class="blob-code blob-code-inner js-file-line"><span class="pl-k">void</span> <span class="pl-en">doVisit</span>(<span class="pl-c1">uint32_t</span> fieldIdentifier, std::string &amp;&amp;typeName, std::string &amp;&amp;name, T &amp;value, Visitor &amp;visitor) {</td>
      </tr>
      <tr>
        <td id="L3839" class="blob-num js-line-number" data-line-number="3839"></td>
        <td id="LC3839" class="blob-code blob-code-inner js-file-line">    visitorSelector&lt;isVisitable&lt;T&gt;::value &gt;::<span class="pl-c1">impl</span>(fieldIdentifier, <span class="pl-c1">std::move</span>(typeName), <span class="pl-c1">std::move</span>(name), value, visitor);</td>
      </tr>
      <tr>
        <td id="L3840" class="blob-num js-line-number" data-line-number="3840"></td>
        <td id="LC3840" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L3841" class="blob-num js-line-number" data-line-number="3841"></td>
        <td id="LC3841" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L3842" class="blob-num js-line-number" data-line-number="3842"></td>
        <td id="LC3842" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3843" class="blob-num js-line-number" data-line-number="3843"></td>
        <td id="LC3843" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifndef</span> TRIPLET_FORWARD_VISITABLE_TYPE_TRAIT</td>
      </tr>
      <tr>
        <td id="L3844" class="blob-num js-line-number" data-line-number="3844"></td>
        <td id="LC3844" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">define</span> <span class="pl-en">TRIPLET_FORWARD_VISITABLE_TYPE_TRAIT</span></td>
      </tr>
      <tr>
        <td id="L3845" class="blob-num js-line-number" data-line-number="3845"></td>
        <td id="LC3845" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>cstdint<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L3846" class="blob-num js-line-number" data-line-number="3846"></td>
        <td id="LC3846" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>string<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L3847" class="blob-num js-line-number" data-line-number="3847"></td>
        <td id="LC3847" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>utility<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L3848" class="blob-num js-line-number" data-line-number="3848"></td>
        <td id="LC3848" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3849" class="blob-num js-line-number" data-line-number="3849"></td>
        <td id="LC3849" class="blob-code blob-code-inner js-file-line"><span class="pl-k">template</span>&lt;<span class="pl-k">bool</span> b&gt;</td>
      </tr>
      <tr>
        <td id="L3850" class="blob-num js-line-number" data-line-number="3850"></td>
        <td id="LC3850" class="blob-code blob-code-inner js-file-line"><span class="pl-k">struct</span> <span class="pl-en">tripletForwardVisitorSelector</span> {</td>
      </tr>
      <tr>
        <td id="L3851" class="blob-num js-line-number" data-line-number="3851"></td>
        <td id="LC3851" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template</span>&lt;<span class="pl-k">typename</span> T, <span class="pl-k">class</span> <span class="pl-en">PreVisitor</span>, <span class="pl-k">class</span> <span class="pl-en">Visitor</span>, <span class="pl-k">class</span> <span class="pl-en">PostVisitor</span>&gt;</td>
      </tr>
      <tr>
        <td id="L3852" class="blob-num js-line-number" data-line-number="3852"></td>
        <td id="LC3852" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">static</span> <span class="pl-k">void</span> <span class="pl-en">impl</span>(<span class="pl-c1">uint32_t</span> fieldIdentifier, std::string &amp;&amp;typeName, std::string &amp;&amp;name, T &amp;value, PreVisitor &amp;&amp;preVisit, Visitor &amp;&amp;visit, PostVisitor &amp;&amp;postVisit) {</td>
      </tr>
      <tr>
        <td id="L3853" class="blob-num js-line-number" data-line-number="3853"></td>
        <td id="LC3853" class="blob-code blob-code-inner js-file-line">        (<span class="pl-k">void</span>)preVisit;</td>
      </tr>
      <tr>
        <td id="L3854" class="blob-num js-line-number" data-line-number="3854"></td>
        <td id="LC3854" class="blob-code blob-code-inner js-file-line">        (<span class="pl-k">void</span>)postVisit;</td>
      </tr>
      <tr>
        <td id="L3855" class="blob-num js-line-number" data-line-number="3855"></td>
        <td id="LC3855" class="blob-code blob-code-inner js-file-line">        std::forward&lt;Visitor&gt;(visit)(fieldIdentifier, <span class="pl-c1">std::move</span>(typeName), <span class="pl-c1">std::move</span>(name), value);</td>
      </tr>
      <tr>
        <td id="L3856" class="blob-num js-line-number" data-line-number="3856"></td>
        <td id="LC3856" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L3857" class="blob-num js-line-number" data-line-number="3857"></td>
        <td id="LC3857" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L3858" class="blob-num js-line-number" data-line-number="3858"></td>
        <td id="LC3858" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3859" class="blob-num js-line-number" data-line-number="3859"></td>
        <td id="LC3859" class="blob-code blob-code-inner js-file-line"><span class="pl-k">template</span>&lt;&gt;</td>
      </tr>
      <tr>
        <td id="L3860" class="blob-num js-line-number" data-line-number="3860"></td>
        <td id="LC3860" class="blob-code blob-code-inner js-file-line"><span class="pl-k">struct</span> <span class="pl-en">tripletForwardVisitorSelector</span>&lt;<span class="pl-c1">true</span>&gt; {</td>
      </tr>
      <tr>
        <td id="L3861" class="blob-num js-line-number" data-line-number="3861"></td>
        <td id="LC3861" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template</span>&lt;<span class="pl-k">typename</span> T, <span class="pl-k">class</span> <span class="pl-en">PreVisitor</span>, <span class="pl-k">class</span> <span class="pl-en">Visitor</span>, <span class="pl-k">class</span> <span class="pl-en">PostVisitor</span>&gt;</td>
      </tr>
      <tr>
        <td id="L3862" class="blob-num js-line-number" data-line-number="3862"></td>
        <td id="LC3862" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">static</span> <span class="pl-k">void</span> <span class="pl-en">impl</span>(<span class="pl-c1">uint32_t</span> fieldIdentifier, std::string &amp;&amp;typeName, std::string &amp;&amp;name, T &amp;value, PreVisitor &amp;&amp;preVisit, Visitor &amp;&amp;visit, PostVisitor &amp;&amp;postVisit) {</td>
      </tr>
      <tr>
        <td id="L3863" class="blob-num js-line-number" data-line-number="3863"></td>
        <td id="LC3863" class="blob-code blob-code-inner js-file-line">        (<span class="pl-k">void</span>)fieldIdentifier;</td>
      </tr>
      <tr>
        <td id="L3864" class="blob-num js-line-number" data-line-number="3864"></td>
        <td id="LC3864" class="blob-code blob-code-inner js-file-line">        (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L3865" class="blob-num js-line-number" data-line-number="3865"></td>
        <td id="LC3865" class="blob-code blob-code-inner js-file-line">        (<span class="pl-k">void</span>)name;</td>
      </tr>
      <tr>
        <td id="L3866" class="blob-num js-line-number" data-line-number="3866"></td>
        <td id="LC3866" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> Apply preVisit, visit, and postVisit on value.</span></td>
      </tr>
      <tr>
        <td id="L3867" class="blob-num js-line-number" data-line-number="3867"></td>
        <td id="LC3867" class="blob-code blob-code-inner js-file-line">        value.<span class="pl-c1">accept</span>(preVisit, visit, postVisit);</td>
      </tr>
      <tr>
        <td id="L3868" class="blob-num js-line-number" data-line-number="3868"></td>
        <td id="LC3868" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L3869" class="blob-num js-line-number" data-line-number="3869"></td>
        <td id="LC3869" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L3870" class="blob-num js-line-number" data-line-number="3870"></td>
        <td id="LC3870" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3871" class="blob-num js-line-number" data-line-number="3871"></td>
        <td id="LC3871" class="blob-code blob-code-inner js-file-line"><span class="pl-k">template</span>&lt;<span class="pl-k">typename</span> T&gt;</td>
      </tr>
      <tr>
        <td id="L3872" class="blob-num js-line-number" data-line-number="3872"></td>
        <td id="LC3872" class="blob-code blob-code-inner js-file-line"><span class="pl-k">struct</span> <span class="pl-en">isTripletForwardVisitable</span> {</td>
      </tr>
      <tr>
        <td id="L3873" class="blob-num js-line-number" data-line-number="3873"></td>
        <td id="LC3873" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">static</span> <span class="pl-k">const</span> <span class="pl-k">bool</span> value = <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L3874" class="blob-num js-line-number" data-line-number="3874"></td>
        <td id="LC3874" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L3875" class="blob-num js-line-number" data-line-number="3875"></td>
        <td id="LC3875" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3876" class="blob-num js-line-number" data-line-number="3876"></td>
        <td id="LC3876" class="blob-code blob-code-inner js-file-line"><span class="pl-k">template</span>&lt; <span class="pl-k">typename</span> T, <span class="pl-k">class</span> <span class="pl-en">PreVisitor</span>, <span class="pl-k">class</span> <span class="pl-en">Visitor</span>, <span class="pl-k">class</span> <span class="pl-en">PostVisitor</span>&gt;</td>
      </tr>
      <tr>
        <td id="L3877" class="blob-num js-line-number" data-line-number="3877"></td>
        <td id="LC3877" class="blob-code blob-code-inner js-file-line"><span class="pl-k">void</span> <span class="pl-en">doTripletForwardVisit</span>(<span class="pl-c1">uint32_t</span> fieldIdentifier, std::string &amp;&amp;typeName, std::string &amp;&amp;name, T &amp;value, PreVisitor &amp;&amp;preVisit, Visitor &amp;&amp;visit, PostVisitor &amp;&amp;postVisit) {</td>
      </tr>
      <tr>
        <td id="L3878" class="blob-num js-line-number" data-line-number="3878"></td>
        <td id="LC3878" class="blob-code blob-code-inner js-file-line">    tripletForwardVisitorSelector&lt;isTripletForwardVisitable&lt;T&gt;::value &gt;::<span class="pl-c1">impl</span>(fieldIdentifier, <span class="pl-c1">std::move</span>(typeName), <span class="pl-c1">std::move</span>(name), value, <span class="pl-c1">std::move</span>(preVisit), <span class="pl-c1">std::move</span>(visit), <span class="pl-c1">std::move</span>(postVisit)); <span class="pl-c"><span class="pl-c">//</span> NOLINT</span></td>
      </tr>
      <tr>
        <td id="L3879" class="blob-num js-line-number" data-line-number="3879"></td>
        <td id="LC3879" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L3880" class="blob-num js-line-number" data-line-number="3880"></td>
        <td id="LC3880" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L3881" class="blob-num js-line-number" data-line-number="3881"></td>
        <td id="LC3881" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3882" class="blob-num js-line-number" data-line-number="3882"></td>
        <td id="LC3882" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3883" class="blob-num js-line-number" data-line-number="3883"></td>
        <td id="LC3883" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifndef</span> CLUON_DATA_ENVELOPE_HPP</td>
      </tr>
      <tr>
        <td id="L3884" class="blob-num js-line-number" data-line-number="3884"></td>
        <td id="LC3884" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">define</span> <span class="pl-en">CLUON_DATA_ENVELOPE_HPP</span></td>
      </tr>
      <tr>
        <td id="L3885" class="blob-num js-line-number" data-line-number="3885"></td>
        <td id="LC3885" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3886" class="blob-num js-line-number" data-line-number="3886"></td>
        <td id="LC3886" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifdef</span> WIN32</td>
      </tr>
      <tr>
        <td id="L3887" class="blob-num js-line-number" data-line-number="3887"></td>
        <td id="LC3887" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Export symbols if compile flags &quot;LIB_SHARED&quot; and &quot;LIB_EXPORTS&quot; are set on Windows.</span></td>
      </tr>
      <tr>
        <td id="L3888" class="blob-num js-line-number" data-line-number="3888"></td>
        <td id="LC3888" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">ifdef</span> LIB_SHARED</td>
      </tr>
      <tr>
        <td id="L3889" class="blob-num js-line-number" data-line-number="3889"></td>
        <td id="LC3889" class="blob-code blob-code-inner js-file-line">        #<span class="pl-k">ifdef</span> LIB_EXPORTS</td>
      </tr>
      <tr>
        <td id="L3890" class="blob-num js-line-number" data-line-number="3890"></td>
        <td id="LC3890" class="blob-code blob-code-inner js-file-line">            #<span class="pl-k">define</span> <span class="pl-en">LIB_API</span> <span class="pl-en">__declspec</span>(dllexport)</td>
      </tr>
      <tr>
        <td id="L3891" class="blob-num js-line-number" data-line-number="3891"></td>
        <td id="LC3891" class="blob-code blob-code-inner js-file-line">        #<span class="pl-k">else</span></td>
      </tr>
      <tr>
        <td id="L3892" class="blob-num js-line-number" data-line-number="3892"></td>
        <td id="LC3892" class="blob-code blob-code-inner js-file-line">            #<span class="pl-k">define</span> <span class="pl-en">LIB_API</span> <span class="pl-en">__declspec</span>(dllimport)</td>
      </tr>
      <tr>
        <td id="L3893" class="blob-num js-line-number" data-line-number="3893"></td>
        <td id="LC3893" class="blob-code blob-code-inner js-file-line">        #endif</td>
      </tr>
      <tr>
        <td id="L3894" class="blob-num js-line-number" data-line-number="3894"></td>
        <td id="LC3894" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">else</span></td>
      </tr>
      <tr>
        <td id="L3895" class="blob-num js-line-number" data-line-number="3895"></td>
        <td id="LC3895" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> Disable definition if linking statically.</span></td>
      </tr>
      <tr>
        <td id="L3896" class="blob-num js-line-number" data-line-number="3896"></td>
        <td id="LC3896" class="blob-code blob-code-inner js-file-line">        #<span class="pl-k">define</span> <span class="pl-en">LIB_API</span></td>
      </tr>
      <tr>
        <td id="L3897" class="blob-num js-line-number" data-line-number="3897"></td>
        <td id="LC3897" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L3898" class="blob-num js-line-number" data-line-number="3898"></td>
        <td id="LC3898" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">else</span></td>
      </tr>
      <tr>
        <td id="L3899" class="blob-num js-line-number" data-line-number="3899"></td>
        <td id="LC3899" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Disable definition for non-Win32 systems.</span></td>
      </tr>
      <tr>
        <td id="L3900" class="blob-num js-line-number" data-line-number="3900"></td>
        <td id="LC3900" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">define</span> <span class="pl-en">LIB_API</span></td>
      </tr>
      <tr>
        <td id="L3901" class="blob-num js-line-number" data-line-number="3901"></td>
        <td id="LC3901" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L3902" class="blob-num js-line-number" data-line-number="3902"></td>
        <td id="LC3902" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3903" class="blob-num js-line-number" data-line-number="3903"></td>
        <td id="LC3903" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>string<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L3904" class="blob-num js-line-number" data-line-number="3904"></td>
        <td id="LC3904" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>utility<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L3905" class="blob-num js-line-number" data-line-number="3905"></td>
        <td id="LC3905" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">cluon</span> { <span class="pl-k">namespace</span> <span class="pl-en">data</span> {</td>
      </tr>
      <tr>
        <td id="L3906" class="blob-num js-line-number" data-line-number="3906"></td>
        <td id="LC3906" class="blob-code blob-code-inner js-file-line"><span class="pl-k">using</span> <span class="pl-k">namespace</span> <span class="pl-en">std</span>::string_literals<span class="pl-k">;</span> <span class="pl-c"><span class="pl-c">//</span> NOLINT</span></td>
      </tr>
      <tr>
        <td id="L3907" class="blob-num js-line-number" data-line-number="3907"></td>
        <td id="LC3907" class="blob-code blob-code-inner js-file-line"><span class="pl-k">class</span> <span class="pl-en">LIB_API</span> Envelope {</td>
      </tr>
      <tr>
        <td id="L3908" class="blob-num js-line-number" data-line-number="3908"></td>
        <td id="LC3908" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L3909" class="blob-num js-line-number" data-line-number="3909"></td>
        <td id="LC3909" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">Envelope</span>() = <span class="pl-k">default</span>;</td>
      </tr>
      <tr>
        <td id="L3910" class="blob-num js-line-number" data-line-number="3910"></td>
        <td id="LC3910" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">Envelope</span>(<span class="pl-k">const</span> Envelope&amp;) = <span class="pl-k">default</span>;</td>
      </tr>
      <tr>
        <td id="L3911" class="blob-num js-line-number" data-line-number="3911"></td>
        <td id="LC3911" class="blob-code blob-code-inner js-file-line">        Envelope&amp; <span class="pl-k">operator</span>=(<span class="pl-k">const</span> Envelope&amp;) = <span class="pl-k">default</span>;</td>
      </tr>
      <tr>
        <td id="L3912" class="blob-num js-line-number" data-line-number="3912"></td>
        <td id="LC3912" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">Envelope</span>(Envelope&amp;&amp;) noexcept = <span class="pl-k">default</span>; <span class="pl-c"><span class="pl-c">//</span> NOLINT</span></td>
      </tr>
      <tr>
        <td id="L3913" class="blob-num js-line-number" data-line-number="3913"></td>
        <td id="LC3913" class="blob-code blob-code-inner js-file-line">        Envelope&amp; <span class="pl-k">operator</span>=(Envelope&amp;&amp;) noexcept = <span class="pl-k">default</span>; <span class="pl-c"><span class="pl-c">//</span> NOLINT</span></td>
      </tr>
      <tr>
        <td id="L3914" class="blob-num js-line-number" data-line-number="3914"></td>
        <td id="LC3914" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">~Envelope</span>() = <span class="pl-k">default</span>;</td>
      </tr>
      <tr>
        <td id="L3915" class="blob-num js-line-number" data-line-number="3915"></td>
        <td id="LC3915" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3916" class="blob-num js-line-number" data-line-number="3916"></td>
        <td id="LC3916" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L3917" class="blob-num js-line-number" data-line-number="3917"></td>
        <td id="LC3917" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">static</span> <span class="pl-c1">int32_t</span> <span class="pl-en">ID</span>();</td>
      </tr>
      <tr>
        <td id="L3918" class="blob-num js-line-number" data-line-number="3918"></td>
        <td id="LC3918" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">static</span> <span class="pl-k">const</span> std::string <span class="pl-en">ShortName</span>();</td>
      </tr>
      <tr>
        <td id="L3919" class="blob-num js-line-number" data-line-number="3919"></td>
        <td id="LC3919" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">static</span> <span class="pl-k">const</span> std::string <span class="pl-en">LongName</span>();</td>
      </tr>
      <tr>
        <td id="L3920" class="blob-num js-line-number" data-line-number="3920"></td>
        <td id="LC3920" class="blob-code blob-code-inner js-file-line">        </td>
      </tr>
      <tr>
        <td id="L3921" class="blob-num js-line-number" data-line-number="3921"></td>
        <td id="LC3921" class="blob-code blob-code-inner js-file-line">        Envelope&amp; <span class="pl-en">dataType</span>(<span class="pl-k">const</span> <span class="pl-c1">int32_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L3922" class="blob-num js-line-number" data-line-number="3922"></td>
        <td id="LC3922" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">int32_t</span> <span class="pl-en">dataType</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L3923" class="blob-num js-line-number" data-line-number="3923"></td>
        <td id="LC3923" class="blob-code blob-code-inner js-file-line">        </td>
      </tr>
      <tr>
        <td id="L3924" class="blob-num js-line-number" data-line-number="3924"></td>
        <td id="LC3924" class="blob-code blob-code-inner js-file-line">        Envelope&amp; <span class="pl-en">serializedData</span>(<span class="pl-k">const</span> std::string &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L3925" class="blob-num js-line-number" data-line-number="3925"></td>
        <td id="LC3925" class="blob-code blob-code-inner js-file-line">        std::string <span class="pl-en">serializedData</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L3926" class="blob-num js-line-number" data-line-number="3926"></td>
        <td id="LC3926" class="blob-code blob-code-inner js-file-line">        </td>
      </tr>
      <tr>
        <td id="L3927" class="blob-num js-line-number" data-line-number="3927"></td>
        <td id="LC3927" class="blob-code blob-code-inner js-file-line">        Envelope&amp; <span class="pl-en">sent</span>(<span class="pl-k">const</span> cluon::data::TimeStamp &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L3928" class="blob-num js-line-number" data-line-number="3928"></td>
        <td id="LC3928" class="blob-code blob-code-inner js-file-line">        cluon::data::TimeStamp <span class="pl-en">sent</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L3929" class="blob-num js-line-number" data-line-number="3929"></td>
        <td id="LC3929" class="blob-code blob-code-inner js-file-line">        </td>
      </tr>
      <tr>
        <td id="L3930" class="blob-num js-line-number" data-line-number="3930"></td>
        <td id="LC3930" class="blob-code blob-code-inner js-file-line">        Envelope&amp; <span class="pl-en">received</span>(<span class="pl-k">const</span> cluon::data::TimeStamp &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L3931" class="blob-num js-line-number" data-line-number="3931"></td>
        <td id="LC3931" class="blob-code blob-code-inner js-file-line">        cluon::data::TimeStamp <span class="pl-en">received</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L3932" class="blob-num js-line-number" data-line-number="3932"></td>
        <td id="LC3932" class="blob-code blob-code-inner js-file-line">        </td>
      </tr>
      <tr>
        <td id="L3933" class="blob-num js-line-number" data-line-number="3933"></td>
        <td id="LC3933" class="blob-code blob-code-inner js-file-line">        Envelope&amp; <span class="pl-en">sampleTimeStamp</span>(<span class="pl-k">const</span> cluon::data::TimeStamp &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L3934" class="blob-num js-line-number" data-line-number="3934"></td>
        <td id="LC3934" class="blob-code blob-code-inner js-file-line">        cluon::data::TimeStamp <span class="pl-en">sampleTimeStamp</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L3935" class="blob-num js-line-number" data-line-number="3935"></td>
        <td id="LC3935" class="blob-code blob-code-inner js-file-line">        </td>
      </tr>
      <tr>
        <td id="L3936" class="blob-num js-line-number" data-line-number="3936"></td>
        <td id="LC3936" class="blob-code blob-code-inner js-file-line">        Envelope&amp; <span class="pl-en">senderStamp</span>(<span class="pl-k">const</span> <span class="pl-c1">uint32_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L3937" class="blob-num js-line-number" data-line-number="3937"></td>
        <td id="LC3937" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">uint32_t</span> <span class="pl-en">senderStamp</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L3938" class="blob-num js-line-number" data-line-number="3938"></td>
        <td id="LC3938" class="blob-code blob-code-inner js-file-line">        </td>
      </tr>
      <tr>
        <td id="L3939" class="blob-num js-line-number" data-line-number="3939"></td>
        <td id="LC3939" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3940" class="blob-num js-line-number" data-line-number="3940"></td>
        <td id="LC3940" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">template</span>&lt;<span class="pl-k">class</span> <span class="pl-en">Visitor</span>&gt;</td>
      </tr>
      <tr>
        <td id="L3941" class="blob-num js-line-number" data-line-number="3941"></td>
        <td id="LC3941" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">void</span> <span class="pl-en">accept</span>(Visitor &amp;visitor) {</td>
      </tr>
      <tr>
        <td id="L3942" class="blob-num js-line-number" data-line-number="3942"></td>
        <td id="LC3942" class="blob-code blob-code-inner js-file-line">            visitor.<span class="pl-c1">preVisit</span>(<span class="pl-c1">ID</span>(), <span class="pl-c1">ShortName</span>(), <span class="pl-c1">LongName</span>());</td>
      </tr>
      <tr>
        <td id="L3943" class="blob-num js-line-number" data-line-number="3943"></td>
        <td id="LC3943" class="blob-code blob-code-inner js-file-line">            </td>
      </tr>
      <tr>
        <td id="L3944" class="blob-num js-line-number" data-line-number="3944"></td>
        <td id="LC3944" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">doVisit</span>(<span class="pl-c1">1</span>, <span class="pl-c1">std::move</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>int32_t<span class="pl-pds">&quot;</span></span>s), <span class="pl-c1">std::move</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>dataType<span class="pl-pds">&quot;</span></span>s), m_dataType, visitor);</td>
      </tr>
      <tr>
        <td id="L3945" class="blob-num js-line-number" data-line-number="3945"></td>
        <td id="LC3945" class="blob-code blob-code-inner js-file-line">            </td>
      </tr>
      <tr>
        <td id="L3946" class="blob-num js-line-number" data-line-number="3946"></td>
        <td id="LC3946" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">doVisit</span>(<span class="pl-c1">2</span>, <span class="pl-c1">std::move</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>std::string<span class="pl-pds">&quot;</span></span>s), <span class="pl-c1">std::move</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>serializedData<span class="pl-pds">&quot;</span></span>s), m_serializedData, visitor);</td>
      </tr>
      <tr>
        <td id="L3947" class="blob-num js-line-number" data-line-number="3947"></td>
        <td id="LC3947" class="blob-code blob-code-inner js-file-line">            </td>
      </tr>
      <tr>
        <td id="L3948" class="blob-num js-line-number" data-line-number="3948"></td>
        <td id="LC3948" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">doVisit</span>(<span class="pl-c1">3</span>, <span class="pl-c1">std::move</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>cluon::data::TimeStamp<span class="pl-pds">&quot;</span></span>s), <span class="pl-c1">std::move</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>sent<span class="pl-pds">&quot;</span></span>s), m_sent, visitor);</td>
      </tr>
      <tr>
        <td id="L3949" class="blob-num js-line-number" data-line-number="3949"></td>
        <td id="LC3949" class="blob-code blob-code-inner js-file-line">            </td>
      </tr>
      <tr>
        <td id="L3950" class="blob-num js-line-number" data-line-number="3950"></td>
        <td id="LC3950" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">doVisit</span>(<span class="pl-c1">4</span>, <span class="pl-c1">std::move</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>cluon::data::TimeStamp<span class="pl-pds">&quot;</span></span>s), <span class="pl-c1">std::move</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>received<span class="pl-pds">&quot;</span></span>s), m_received, visitor);</td>
      </tr>
      <tr>
        <td id="L3951" class="blob-num js-line-number" data-line-number="3951"></td>
        <td id="LC3951" class="blob-code blob-code-inner js-file-line">            </td>
      </tr>
      <tr>
        <td id="L3952" class="blob-num js-line-number" data-line-number="3952"></td>
        <td id="LC3952" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">doVisit</span>(<span class="pl-c1">5</span>, <span class="pl-c1">std::move</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>cluon::data::TimeStamp<span class="pl-pds">&quot;</span></span>s), <span class="pl-c1">std::move</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>sampleTimeStamp<span class="pl-pds">&quot;</span></span>s), m_sampleTimeStamp, visitor);</td>
      </tr>
      <tr>
        <td id="L3953" class="blob-num js-line-number" data-line-number="3953"></td>
        <td id="LC3953" class="blob-code blob-code-inner js-file-line">            </td>
      </tr>
      <tr>
        <td id="L3954" class="blob-num js-line-number" data-line-number="3954"></td>
        <td id="LC3954" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">doVisit</span>(<span class="pl-c1">6</span>, <span class="pl-c1">std::move</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>uint32_t<span class="pl-pds">&quot;</span></span>s), <span class="pl-c1">std::move</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>senderStamp<span class="pl-pds">&quot;</span></span>s), m_senderStamp, visitor);</td>
      </tr>
      <tr>
        <td id="L3955" class="blob-num js-line-number" data-line-number="3955"></td>
        <td id="LC3955" class="blob-code blob-code-inner js-file-line">            </td>
      </tr>
      <tr>
        <td id="L3956" class="blob-num js-line-number" data-line-number="3956"></td>
        <td id="LC3956" class="blob-code blob-code-inner js-file-line">            visitor.<span class="pl-c1">postVisit</span>();</td>
      </tr>
      <tr>
        <td id="L3957" class="blob-num js-line-number" data-line-number="3957"></td>
        <td id="LC3957" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L3958" class="blob-num js-line-number" data-line-number="3958"></td>
        <td id="LC3958" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3959" class="blob-num js-line-number" data-line-number="3959"></td>
        <td id="LC3959" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">template</span>&lt;<span class="pl-k">class</span> <span class="pl-en">PreVisitor</span>, <span class="pl-k">class</span> <span class="pl-en">Visitor</span>, <span class="pl-k">class</span> <span class="pl-en">PostVisitor</span>&gt;</td>
      </tr>
      <tr>
        <td id="L3960" class="blob-num js-line-number" data-line-number="3960"></td>
        <td id="LC3960" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">void</span> <span class="pl-en">accept</span>(PreVisitor &amp;&amp;preVisit, Visitor &amp;&amp;visit, PostVisitor &amp;&amp;postVisit) {</td>
      </tr>
      <tr>
        <td id="L3961" class="blob-num js-line-number" data-line-number="3961"></td>
        <td id="LC3961" class="blob-code blob-code-inner js-file-line">            std::forward&lt;PreVisitor&gt;(preVisit)(<span class="pl-c1">ID</span>(), <span class="pl-c1">ShortName</span>(), <span class="pl-c1">LongName</span>());</td>
      </tr>
      <tr>
        <td id="L3962" class="blob-num js-line-number" data-line-number="3962"></td>
        <td id="LC3962" class="blob-code blob-code-inner js-file-line">            </td>
      </tr>
      <tr>
        <td id="L3963" class="blob-num js-line-number" data-line-number="3963"></td>
        <td id="LC3963" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">doTripletForwardVisit</span>(<span class="pl-c1">1</span>, <span class="pl-c1">std::move</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>int32_t<span class="pl-pds">&quot;</span></span>s), <span class="pl-c1">std::move</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>dataType<span class="pl-pds">&quot;</span></span>s), m_dataType, preVisit, visit, postVisit);</td>
      </tr>
      <tr>
        <td id="L3964" class="blob-num js-line-number" data-line-number="3964"></td>
        <td id="LC3964" class="blob-code blob-code-inner js-file-line">            </td>
      </tr>
      <tr>
        <td id="L3965" class="blob-num js-line-number" data-line-number="3965"></td>
        <td id="LC3965" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">doTripletForwardVisit</span>(<span class="pl-c1">2</span>, <span class="pl-c1">std::move</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>std::string<span class="pl-pds">&quot;</span></span>s), <span class="pl-c1">std::move</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>serializedData<span class="pl-pds">&quot;</span></span>s), m_serializedData, preVisit, visit, postVisit);</td>
      </tr>
      <tr>
        <td id="L3966" class="blob-num js-line-number" data-line-number="3966"></td>
        <td id="LC3966" class="blob-code blob-code-inner js-file-line">            </td>
      </tr>
      <tr>
        <td id="L3967" class="blob-num js-line-number" data-line-number="3967"></td>
        <td id="LC3967" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">doTripletForwardVisit</span>(<span class="pl-c1">3</span>, <span class="pl-c1">std::move</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>cluon::data::TimeStamp<span class="pl-pds">&quot;</span></span>s), <span class="pl-c1">std::move</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>sent<span class="pl-pds">&quot;</span></span>s), m_sent, preVisit, visit, postVisit);</td>
      </tr>
      <tr>
        <td id="L3968" class="blob-num js-line-number" data-line-number="3968"></td>
        <td id="LC3968" class="blob-code blob-code-inner js-file-line">            </td>
      </tr>
      <tr>
        <td id="L3969" class="blob-num js-line-number" data-line-number="3969"></td>
        <td id="LC3969" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">doTripletForwardVisit</span>(<span class="pl-c1">4</span>, <span class="pl-c1">std::move</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>cluon::data::TimeStamp<span class="pl-pds">&quot;</span></span>s), <span class="pl-c1">std::move</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>received<span class="pl-pds">&quot;</span></span>s), m_received, preVisit, visit, postVisit);</td>
      </tr>
      <tr>
        <td id="L3970" class="blob-num js-line-number" data-line-number="3970"></td>
        <td id="LC3970" class="blob-code blob-code-inner js-file-line">            </td>
      </tr>
      <tr>
        <td id="L3971" class="blob-num js-line-number" data-line-number="3971"></td>
        <td id="LC3971" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">doTripletForwardVisit</span>(<span class="pl-c1">5</span>, <span class="pl-c1">std::move</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>cluon::data::TimeStamp<span class="pl-pds">&quot;</span></span>s), <span class="pl-c1">std::move</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>sampleTimeStamp<span class="pl-pds">&quot;</span></span>s), m_sampleTimeStamp, preVisit, visit, postVisit);</td>
      </tr>
      <tr>
        <td id="L3972" class="blob-num js-line-number" data-line-number="3972"></td>
        <td id="LC3972" class="blob-code blob-code-inner js-file-line">            </td>
      </tr>
      <tr>
        <td id="L3973" class="blob-num js-line-number" data-line-number="3973"></td>
        <td id="LC3973" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">doTripletForwardVisit</span>(<span class="pl-c1">6</span>, <span class="pl-c1">std::move</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>uint32_t<span class="pl-pds">&quot;</span></span>s), <span class="pl-c1">std::move</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>senderStamp<span class="pl-pds">&quot;</span></span>s), m_senderStamp, preVisit, visit, postVisit);</td>
      </tr>
      <tr>
        <td id="L3974" class="blob-num js-line-number" data-line-number="3974"></td>
        <td id="LC3974" class="blob-code blob-code-inner js-file-line">            </td>
      </tr>
      <tr>
        <td id="L3975" class="blob-num js-line-number" data-line-number="3975"></td>
        <td id="LC3975" class="blob-code blob-code-inner js-file-line">            std::forward&lt;PostVisitor&gt;(postVisit)();</td>
      </tr>
      <tr>
        <td id="L3976" class="blob-num js-line-number" data-line-number="3976"></td>
        <td id="LC3976" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L3977" class="blob-num js-line-number" data-line-number="3977"></td>
        <td id="LC3977" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3978" class="blob-num js-line-number" data-line-number="3978"></td>
        <td id="LC3978" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L3979" class="blob-num js-line-number" data-line-number="3979"></td>
        <td id="LC3979" class="blob-code blob-code-inner js-file-line">        </td>
      </tr>
      <tr>
        <td id="L3980" class="blob-num js-line-number" data-line-number="3980"></td>
        <td id="LC3980" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">int32_t</span> m_dataType{ <span class="pl-c1">0</span> }; <span class="pl-c"><span class="pl-c">//</span> field identifier = 1.</span></td>
      </tr>
      <tr>
        <td id="L3981" class="blob-num js-line-number" data-line-number="3981"></td>
        <td id="LC3981" class="blob-code blob-code-inner js-file-line">        </td>
      </tr>
      <tr>
        <td id="L3982" class="blob-num js-line-number" data-line-number="3982"></td>
        <td id="LC3982" class="blob-code blob-code-inner js-file-line">        std::string m_serializedData{ <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>s }; <span class="pl-c"><span class="pl-c">//</span> field identifier = 2.</span></td>
      </tr>
      <tr>
        <td id="L3983" class="blob-num js-line-number" data-line-number="3983"></td>
        <td id="LC3983" class="blob-code blob-code-inner js-file-line">        </td>
      </tr>
      <tr>
        <td id="L3984" class="blob-num js-line-number" data-line-number="3984"></td>
        <td id="LC3984" class="blob-code blob-code-inner js-file-line">        cluon::data::TimeStamp m_sent{  }; <span class="pl-c"><span class="pl-c">//</span> field identifier = 3.</span></td>
      </tr>
      <tr>
        <td id="L3985" class="blob-num js-line-number" data-line-number="3985"></td>
        <td id="LC3985" class="blob-code blob-code-inner js-file-line">        </td>
      </tr>
      <tr>
        <td id="L3986" class="blob-num js-line-number" data-line-number="3986"></td>
        <td id="LC3986" class="blob-code blob-code-inner js-file-line">        cluon::data::TimeStamp m_received{  }; <span class="pl-c"><span class="pl-c">//</span> field identifier = 4.</span></td>
      </tr>
      <tr>
        <td id="L3987" class="blob-num js-line-number" data-line-number="3987"></td>
        <td id="LC3987" class="blob-code blob-code-inner js-file-line">        </td>
      </tr>
      <tr>
        <td id="L3988" class="blob-num js-line-number" data-line-number="3988"></td>
        <td id="LC3988" class="blob-code blob-code-inner js-file-line">        cluon::data::TimeStamp m_sampleTimeStamp{  }; <span class="pl-c"><span class="pl-c">//</span> field identifier = 5.</span></td>
      </tr>
      <tr>
        <td id="L3989" class="blob-num js-line-number" data-line-number="3989"></td>
        <td id="LC3989" class="blob-code blob-code-inner js-file-line">        </td>
      </tr>
      <tr>
        <td id="L3990" class="blob-num js-line-number" data-line-number="3990"></td>
        <td id="LC3990" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">uint32_t</span> m_senderStamp{ <span class="pl-c1">0</span> }; <span class="pl-c"><span class="pl-c">//</span> field identifier = 6.</span></td>
      </tr>
      <tr>
        <td id="L3991" class="blob-num js-line-number" data-line-number="3991"></td>
        <td id="LC3991" class="blob-code blob-code-inner js-file-line">        </td>
      </tr>
      <tr>
        <td id="L3992" class="blob-num js-line-number" data-line-number="3992"></td>
        <td id="LC3992" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L3993" class="blob-num js-line-number" data-line-number="3993"></td>
        <td id="LC3993" class="blob-code blob-code-inner js-file-line">}}</td>
      </tr>
      <tr>
        <td id="L3994" class="blob-num js-line-number" data-line-number="3994"></td>
        <td id="LC3994" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L3995" class="blob-num js-line-number" data-line-number="3995"></td>
        <td id="LC3995" class="blob-code blob-code-inner js-file-line"><span class="pl-k">template</span>&lt;&gt;</td>
      </tr>
      <tr>
        <td id="L3996" class="blob-num js-line-number" data-line-number="3996"></td>
        <td id="LC3996" class="blob-code blob-code-inner js-file-line"><span class="pl-k">struct</span> <span class="pl-en">isVisitable</span>&lt;cluon::data::Envelope&gt; {</td>
      </tr>
      <tr>
        <td id="L3997" class="blob-num js-line-number" data-line-number="3997"></td>
        <td id="LC3997" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">static</span> <span class="pl-k">const</span> <span class="pl-k">bool</span> value = <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L3998" class="blob-num js-line-number" data-line-number="3998"></td>
        <td id="LC3998" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L3999" class="blob-num js-line-number" data-line-number="3999"></td>
        <td id="LC3999" class="blob-code blob-code-inner js-file-line"><span class="pl-k">template</span>&lt;&gt;</td>
      </tr>
      <tr>
        <td id="L4000" class="blob-num js-line-number" data-line-number="4000"></td>
        <td id="LC4000" class="blob-code blob-code-inner js-file-line"><span class="pl-k">struct</span> <span class="pl-en">isTripletForwardVisitable</span>&lt;cluon::data::Envelope&gt; {</td>
      </tr>
      <tr>
        <td id="L4001" class="blob-num js-line-number" data-line-number="4001"></td>
        <td id="LC4001" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">static</span> <span class="pl-k">const</span> <span class="pl-k">bool</span> value = <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L4002" class="blob-num js-line-number" data-line-number="4002"></td>
        <td id="LC4002" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L4003" class="blob-num js-line-number" data-line-number="4003"></td>
        <td id="LC4003" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L4004" class="blob-num js-line-number" data-line-number="4004"></td>
        <td id="LC4004" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4005" class="blob-num js-line-number" data-line-number="4005"></td>
        <td id="LC4005" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifndef</span> IMPLEMENTATIONS_FOR_MESSAGES</td>
      </tr>
      <tr>
        <td id="L4006" class="blob-num js-line-number" data-line-number="4006"></td>
        <td id="LC4006" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">define</span> <span class="pl-en">IMPLEMENTATIONS_FOR_MESSAGES</span></td>
      </tr>
      <tr>
        <td id="L4007" class="blob-num js-line-number" data-line-number="4007"></td>
        <td id="LC4007" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L4008" class="blob-num js-line-number" data-line-number="4008"></td>
        <td id="LC4008" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * MIT License</span></td>
      </tr>
      <tr>
        <td id="L4009" class="blob-num js-line-number" data-line-number="4009"></td>
        <td id="LC4009" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L4010" class="blob-num js-line-number" data-line-number="4010"></td>
        <td id="LC4010" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Copyright (c) 2018  Christian Berger</span></td>
      </tr>
      <tr>
        <td id="L4011" class="blob-num js-line-number" data-line-number="4011"></td>
        <td id="LC4011" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L4012" class="blob-num js-line-number" data-line-number="4012"></td>
        <td id="LC4012" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></td>
      </tr>
      <tr>
        <td id="L4013" class="blob-num js-line-number" data-line-number="4013"></td>
        <td id="LC4013" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * of this software and associated documentation files (the &quot;Software&quot;), to deal</span></td>
      </tr>
      <tr>
        <td id="L4014" class="blob-num js-line-number" data-line-number="4014"></td>
        <td id="LC4014" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * in the Software without restriction, including without limitation the rights</span></td>
      </tr>
      <tr>
        <td id="L4015" class="blob-num js-line-number" data-line-number="4015"></td>
        <td id="LC4015" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</span></td>
      </tr>
      <tr>
        <td id="L4016" class="blob-num js-line-number" data-line-number="4016"></td>
        <td id="LC4016" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * copies of the Software, and to permit persons to whom the Software is</span></td>
      </tr>
      <tr>
        <td id="L4017" class="blob-num js-line-number" data-line-number="4017"></td>
        <td id="LC4017" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * furnished to do so, subject to the following conditions:</span></td>
      </tr>
      <tr>
        <td id="L4018" class="blob-num js-line-number" data-line-number="4018"></td>
        <td id="LC4018" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L4019" class="blob-num js-line-number" data-line-number="4019"></td>
        <td id="LC4019" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * The above copyright notice and this permission notice shall be included in all</span></td>
      </tr>
      <tr>
        <td id="L4020" class="blob-num js-line-number" data-line-number="4020"></td>
        <td id="LC4020" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * copies or substantial portions of the Software.</span></td>
      </tr>
      <tr>
        <td id="L4021" class="blob-num js-line-number" data-line-number="4021"></td>
        <td id="LC4021" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L4022" class="blob-num js-line-number" data-line-number="4022"></td>
        <td id="LC4022" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></td>
      </tr>
      <tr>
        <td id="L4023" class="blob-num js-line-number" data-line-number="4023"></td>
        <td id="LC4023" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></td>
      </tr>
      <tr>
        <td id="L4024" class="blob-num js-line-number" data-line-number="4024"></td>
        <td id="LC4024" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></td>
      </tr>
      <tr>
        <td id="L4025" class="blob-num js-line-number" data-line-number="4025"></td>
        <td id="LC4025" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></td>
      </tr>
      <tr>
        <td id="L4026" class="blob-num js-line-number" data-line-number="4026"></td>
        <td id="LC4026" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></td>
      </tr>
      <tr>
        <td id="L4027" class="blob-num js-line-number" data-line-number="4027"></td>
        <td id="LC4027" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></td>
      </tr>
      <tr>
        <td id="L4028" class="blob-num js-line-number" data-line-number="4028"></td>
        <td id="LC4028" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * SOFTWARE.</span></td>
      </tr>
      <tr>
        <td id="L4029" class="blob-num js-line-number" data-line-number="4029"></td>
        <td id="LC4029" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L4030" class="blob-num js-line-number" data-line-number="4030"></td>
        <td id="LC4030" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4031" class="blob-num js-line-number" data-line-number="4031"></td>
        <td id="LC4031" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifndef</span> STRINGTOOLBOX_HPP</td>
      </tr>
      <tr>
        <td id="L4032" class="blob-num js-line-number" data-line-number="4032"></td>
        <td id="LC4032" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">define</span> <span class="pl-en">STRINGTOOLBOX_HPP</span></td>
      </tr>
      <tr>
        <td id="L4033" class="blob-num js-line-number" data-line-number="4033"></td>
        <td id="LC4033" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4034" class="blob-num js-line-number" data-line-number="4034"></td>
        <td id="LC4034" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>algorithm<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L4035" class="blob-num js-line-number" data-line-number="4035"></td>
        <td id="LC4035" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>string<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L4036" class="blob-num js-line-number" data-line-number="4036"></td>
        <td id="LC4036" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>vector<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L4037" class="blob-num js-line-number" data-line-number="4037"></td>
        <td id="LC4037" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4038" class="blob-num js-line-number" data-line-number="4038"></td>
        <td id="LC4038" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">stringtoolbox</span> {</td>
      </tr>
      <tr>
        <td id="L4039" class="blob-num js-line-number" data-line-number="4039"></td>
        <td id="LC4039" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4040" class="blob-num js-line-number" data-line-number="4040"></td>
        <td id="LC4040" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L4041" class="blob-num js-line-number" data-line-number="4041"></td>
        <td id="LC4041" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * @return std::string without trailing whitespace characters.</span></td>
      </tr>
      <tr>
        <td id="L4042" class="blob-num js-line-number" data-line-number="4042"></td>
        <td id="LC4042" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L4043" class="blob-num js-line-number" data-line-number="4043"></td>
        <td id="LC4043" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::string &amp;<span class="pl-en">rtrim</span>(std::string &amp;str) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L4044" class="blob-num js-line-number" data-line-number="4044"></td>
        <td id="LC4044" class="blob-code blob-code-inner js-file-line">  str.<span class="pl-c1">erase</span>(str.<span class="pl-c1">find_last_not_of</span>(<span class="pl-s"><span class="pl-pds">&quot;</span> <span class="pl-cce">\t</span><span class="pl-pds">&quot;</span></span>) + <span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L4045" class="blob-num js-line-number" data-line-number="4045"></td>
        <td id="LC4045" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> str;</td>
      </tr>
      <tr>
        <td id="L4046" class="blob-num js-line-number" data-line-number="4046"></td>
        <td id="LC4046" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L4047" class="blob-num js-line-number" data-line-number="4047"></td>
        <td id="LC4047" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4048" class="blob-num js-line-number" data-line-number="4048"></td>
        <td id="LC4048" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L4049" class="blob-num js-line-number" data-line-number="4049"></td>
        <td id="LC4049" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * @return std::tring without leading whitespace characters.</span></td>
      </tr>
      <tr>
        <td id="L4050" class="blob-num js-line-number" data-line-number="4050"></td>
        <td id="LC4050" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L4051" class="blob-num js-line-number" data-line-number="4051"></td>
        <td id="LC4051" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::string &amp;<span class="pl-en">ltrim</span>(std::string &amp;str) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L4052" class="blob-num js-line-number" data-line-number="4052"></td>
        <td id="LC4052" class="blob-code blob-code-inner js-file-line">  str.<span class="pl-c1">erase</span>(<span class="pl-c1">0</span>, str.<span class="pl-c1">find_first_not_of</span>(<span class="pl-s"><span class="pl-pds">&quot;</span> <span class="pl-cce">\t</span><span class="pl-pds">&quot;</span></span>));</td>
      </tr>
      <tr>
        <td id="L4053" class="blob-num js-line-number" data-line-number="4053"></td>
        <td id="LC4053" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> str;</td>
      </tr>
      <tr>
        <td id="L4054" class="blob-num js-line-number" data-line-number="4054"></td>
        <td id="LC4054" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L4055" class="blob-num js-line-number" data-line-number="4055"></td>
        <td id="LC4055" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4056" class="blob-num js-line-number" data-line-number="4056"></td>
        <td id="LC4056" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L4057" class="blob-num js-line-number" data-line-number="4057"></td>
        <td id="LC4057" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * @return std:string without leading and trailing whitespace characters.</span></td>
      </tr>
      <tr>
        <td id="L4058" class="blob-num js-line-number" data-line-number="4058"></td>
        <td id="LC4058" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L4059" class="blob-num js-line-number" data-line-number="4059"></td>
        <td id="LC4059" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::string &amp;<span class="pl-en">trim</span>(std::string &amp;str) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L4060" class="blob-num js-line-number" data-line-number="4060"></td>
        <td id="LC4060" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> <span class="pl-c1">ltrim</span>(<span class="pl-c1">rtrim</span>(str));</td>
      </tr>
      <tr>
        <td id="L4061" class="blob-num js-line-number" data-line-number="4061"></td>
        <td id="LC4061" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L4062" class="blob-num js-line-number" data-line-number="4062"></td>
        <td id="LC4062" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4063" class="blob-num js-line-number" data-line-number="4063"></td>
        <td id="LC4063" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L4064" class="blob-num js-line-number" data-line-number="4064"></td>
        <td id="LC4064" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * @return std:string where all occurrences of characters FROM are replaced with TO.</span></td>
      </tr>
      <tr>
        <td id="L4065" class="blob-num js-line-number" data-line-number="4065"></td>
        <td id="LC4065" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L4066" class="blob-num js-line-number" data-line-number="4066"></td>
        <td id="LC4066" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::string <span class="pl-en">replaceAll</span>(<span class="pl-k">const</span> std::string &amp;str,</td>
      </tr>
      <tr>
        <td id="L4067" class="blob-num js-line-number" data-line-number="4067"></td>
        <td id="LC4067" class="blob-code blob-code-inner js-file-line">                              <span class="pl-k">const</span> <span class="pl-k">char</span> &amp;FROM,</td>
      </tr>
      <tr>
        <td id="L4068" class="blob-num js-line-number" data-line-number="4068"></td>
        <td id="LC4068" class="blob-code blob-code-inner js-file-line">                              <span class="pl-k">const</span> <span class="pl-k">char</span> &amp;TO) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L4069" class="blob-num js-line-number" data-line-number="4069"></td>
        <td id="LC4069" class="blob-code blob-code-inner js-file-line">  std::string retVal{str};</td>
      </tr>
      <tr>
        <td id="L4070" class="blob-num js-line-number" data-line-number="4070"></td>
        <td id="LC4070" class="blob-code blob-code-inner js-file-line">  <span class="pl-c1">std::replace</span>(retVal.<span class="pl-c1">begin</span>(), retVal.<span class="pl-c1">end</span>(), FROM, TO);</td>
      </tr>
      <tr>
        <td id="L4071" class="blob-num js-line-number" data-line-number="4071"></td>
        <td id="LC4071" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> retVal;</td>
      </tr>
      <tr>
        <td id="L4072" class="blob-num js-line-number" data-line-number="4072"></td>
        <td id="LC4072" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L4073" class="blob-num js-line-number" data-line-number="4073"></td>
        <td id="LC4073" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4074" class="blob-num js-line-number" data-line-number="4074"></td>
        <td id="LC4074" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L4075" class="blob-num js-line-number" data-line-number="4075"></td>
        <td id="LC4075" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * @return std::vector&lt;std:string&gt; where the given string is split along delimiter.</span></td>
      </tr>
      <tr>
        <td id="L4076" class="blob-num js-line-number" data-line-number="4076"></td>
        <td id="LC4076" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L4077" class="blob-num js-line-number" data-line-number="4077"></td>
        <td id="LC4077" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::vector&lt;std::string&gt; <span class="pl-en">split</span>(<span class="pl-k">const</span> std::string &amp;str,</td>
      </tr>
      <tr>
        <td id="L4078" class="blob-num js-line-number" data-line-number="4078"></td>
        <td id="LC4078" class="blob-code blob-code-inner js-file-line">                               <span class="pl-k">const</span> <span class="pl-k">char</span> &amp;delimiter) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L4079" class="blob-num js-line-number" data-line-number="4079"></td>
        <td id="LC4079" class="blob-code blob-code-inner js-file-line">  std::vector&lt;std::string&gt; retVal{};</td>
      </tr>
      <tr>
        <td id="L4080" class="blob-num js-line-number" data-line-number="4080"></td>
        <td id="LC4080" class="blob-code blob-code-inner js-file-line">  std::string::size_type prev{<span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L4081" class="blob-num js-line-number" data-line-number="4081"></td>
        <td id="LC4081" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">for</span> (std::string::size_type i{str.<span class="pl-c1">find_first_of</span>(delimiter, prev)};</td>
      </tr>
      <tr>
        <td id="L4082" class="blob-num js-line-number" data-line-number="4082"></td>
        <td id="LC4082" class="blob-code blob-code-inner js-file-line">       i != std::string::npos;</td>
      </tr>
      <tr>
        <td id="L4083" class="blob-num js-line-number" data-line-number="4083"></td>
        <td id="LC4083" class="blob-code blob-code-inner js-file-line">       prev = i + <span class="pl-c1">1</span>, i = str.<span class="pl-c1">find_first_of</span>(delimiter, prev)) {</td>
      </tr>
      <tr>
        <td id="L4084" class="blob-num js-line-number" data-line-number="4084"></td>
        <td id="LC4084" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (i != prev) {</td>
      </tr>
      <tr>
        <td id="L4085" class="blob-num js-line-number" data-line-number="4085"></td>
        <td id="LC4085" class="blob-code blob-code-inner js-file-line">      retVal.<span class="pl-c1">emplace_back</span>(str.<span class="pl-c1">substr</span>(prev, i - prev));</td>
      </tr>
      <tr>
        <td id="L4086" class="blob-num js-line-number" data-line-number="4086"></td>
        <td id="LC4086" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L4087" class="blob-num js-line-number" data-line-number="4087"></td>
        <td id="LC4087" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L4088" class="blob-num js-line-number" data-line-number="4088"></td>
        <td id="LC4088" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">if</span> ((prev &gt; <span class="pl-c1">0</span>) &amp;&amp; (prev &lt; str.<span class="pl-c1">size</span>())) {</td>
      </tr>
      <tr>
        <td id="L4089" class="blob-num js-line-number" data-line-number="4089"></td>
        <td id="LC4089" class="blob-code blob-code-inner js-file-line">    retVal.<span class="pl-c1">emplace_back</span>(str.<span class="pl-c1">substr</span>(prev, str.<span class="pl-c1">size</span>() - prev));</td>
      </tr>
      <tr>
        <td id="L4090" class="blob-num js-line-number" data-line-number="4090"></td>
        <td id="LC4090" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="L4091" class="blob-num js-line-number" data-line-number="4091"></td>
        <td id="LC4091" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> retVal;</td>
      </tr>
      <tr>
        <td id="L4092" class="blob-num js-line-number" data-line-number="4092"></td>
        <td id="LC4092" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L4093" class="blob-num js-line-number" data-line-number="4093"></td>
        <td id="LC4093" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4094" class="blob-num js-line-number" data-line-number="4094"></td>
        <td id="LC4094" class="blob-code blob-code-inner js-file-line">} <span class="pl-c"><span class="pl-c">//</span> namespace stringtoolbox</span></td>
      </tr>
      <tr>
        <td id="L4095" class="blob-num js-line-number" data-line-number="4095"></td>
        <td id="LC4095" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4096" class="blob-num js-line-number" data-line-number="4096"></td>
        <td id="LC4096" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L4097" class="blob-num js-line-number" data-line-number="4097"></td>
        <td id="LC4097" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L4098" class="blob-num js-line-number" data-line-number="4098"></td>
        <td id="LC4098" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Copyright (C) 2018  Christian Berger</span></td>
      </tr>
      <tr>
        <td id="L4099" class="blob-num js-line-number" data-line-number="4099"></td>
        <td id="LC4099" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L4100" class="blob-num js-line-number" data-line-number="4100"></td>
        <td id="LC4100" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is free software: you can redistribute it and/or modify</span></td>
      </tr>
      <tr>
        <td id="L4101" class="blob-num js-line-number" data-line-number="4101"></td>
        <td id="LC4101" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * it under the terms of the GNU General Public License as published by</span></td>
      </tr>
      <tr>
        <td id="L4102" class="blob-num js-line-number" data-line-number="4102"></td>
        <td id="LC4102" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * the Free Software Foundation, either version 3 of the License, or</span></td>
      </tr>
      <tr>
        <td id="L4103" class="blob-num js-line-number" data-line-number="4103"></td>
        <td id="LC4103" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * (at your option) any later version.</span></td>
      </tr>
      <tr>
        <td id="L4104" class="blob-num js-line-number" data-line-number="4104"></td>
        <td id="LC4104" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L4105" class="blob-num js-line-number" data-line-number="4105"></td>
        <td id="LC4105" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is distributed in the hope that it will be useful,</span></td>
      </tr>
      <tr>
        <td id="L4106" class="blob-num js-line-number" data-line-number="4106"></td>
        <td id="LC4106" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></td>
      </tr>
      <tr>
        <td id="L4107" class="blob-num js-line-number" data-line-number="4107"></td>
        <td id="LC4107" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></td>
      </tr>
      <tr>
        <td id="L4108" class="blob-num js-line-number" data-line-number="4108"></td>
        <td id="LC4108" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * GNU General Public License for more details.</span></td>
      </tr>
      <tr>
        <td id="L4109" class="blob-num js-line-number" data-line-number="4109"></td>
        <td id="LC4109" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L4110" class="blob-num js-line-number" data-line-number="4110"></td>
        <td id="LC4110" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * You should have received a copy of the GNU General Public License</span></td>
      </tr>
      <tr>
        <td id="L4111" class="blob-num js-line-number" data-line-number="4111"></td>
        <td id="LC4111" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></td>
      </tr>
      <tr>
        <td id="L4112" class="blob-num js-line-number" data-line-number="4112"></td>
        <td id="LC4112" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L4113" class="blob-num js-line-number" data-line-number="4113"></td>
        <td id="LC4113" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4114" class="blob-num js-line-number" data-line-number="4114"></td>
        <td id="LC4114" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifndef</span> TIME_HPP</td>
      </tr>
      <tr>
        <td id="L4115" class="blob-num js-line-number" data-line-number="4115"></td>
        <td id="LC4115" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">define</span> <span class="pl-en">TIME_HPP</span></td>
      </tr>
      <tr>
        <td id="L4116" class="blob-num js-line-number" data-line-number="4116"></td>
        <td id="LC4116" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4117" class="blob-num js-line-number" data-line-number="4117"></td>
        <td id="LC4117" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/cluonDataStructures.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L4118" class="blob-num js-line-number" data-line-number="4118"></td>
        <td id="LC4118" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>chrono<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L4119" class="blob-num js-line-number" data-line-number="4119"></td>
        <td id="LC4119" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4120" class="blob-num js-line-number" data-line-number="4120"></td>
        <td id="LC4120" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">cluon</span> {</td>
      </tr>
      <tr>
        <td id="L4121" class="blob-num js-line-number" data-line-number="4121"></td>
        <td id="LC4121" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">time</span> {</td>
      </tr>
      <tr>
        <td id="L4122" class="blob-num js-line-number" data-line-number="4122"></td>
        <td id="LC4122" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4123" class="blob-num js-line-number" data-line-number="4123"></td>
        <td id="LC4123" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L4124" class="blob-num js-line-number" data-line-number="4124"></td>
        <td id="LC4124" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * @return TimeStamp of converted chrono::time_point.</span></td>
      </tr>
      <tr>
        <td id="L4125" class="blob-num js-line-number" data-line-number="4125"></td>
        <td id="LC4125" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L4126" class="blob-num js-line-number" data-line-number="4126"></td>
        <td id="LC4126" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> cluon::data::TimeStamp <span class="pl-en">convert</span>(<span class="pl-k">const</span> std::chrono::system_clock::time_point &amp;tp) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L4127" class="blob-num js-line-number" data-line-number="4127"></td>
        <td id="LC4127" class="blob-code blob-code-inner js-file-line">    cluon::data::TimeStamp timeStamp;</td>
      </tr>
      <tr>
        <td id="L4128" class="blob-num js-line-number" data-line-number="4128"></td>
        <td id="LC4128" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4129" class="blob-num js-line-number" data-line-number="4129"></td>
        <td id="LC4129" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Transform chrono time representation to same behavior as gettimeofday.</span></td>
      </tr>
      <tr>
        <td id="L4130" class="blob-num js-line-number" data-line-number="4130"></td>
        <td id="LC4130" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">typedef</span> std::chrono::duration&lt;<span class="pl-c1">int32_t</span>&gt; seconds_type;</td>
      </tr>
      <tr>
        <td id="L4131" class="blob-num js-line-number" data-line-number="4131"></td>
        <td id="LC4131" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">typedef</span> std::chrono::duration&lt;<span class="pl-c1">int64_t</span>, std::micro&gt; microseconds_type;</td>
      </tr>
      <tr>
        <td id="L4132" class="blob-num js-line-number" data-line-number="4132"></td>
        <td id="LC4132" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4133" class="blob-num js-line-number" data-line-number="4133"></td>
        <td id="LC4133" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">auto</span> duration                = tp.<span class="pl-c1">time_since_epoch</span>();</td>
      </tr>
      <tr>
        <td id="L4134" class="blob-num js-line-number" data-line-number="4134"></td>
        <td id="LC4134" class="blob-code blob-code-inner js-file-line">    seconds_type s               = std::chrono::duration_cast&lt;seconds_type&gt;(duration);</td>
      </tr>
      <tr>
        <td id="L4135" class="blob-num js-line-number" data-line-number="4135"></td>
        <td id="LC4135" class="blob-code blob-code-inner js-file-line">    microseconds_type us         = std::chrono::duration_cast&lt;microseconds_type&gt;(duration);</td>
      </tr>
      <tr>
        <td id="L4136" class="blob-num js-line-number" data-line-number="4136"></td>
        <td id="LC4136" class="blob-code blob-code-inner js-file-line">    microseconds_type partial_us = us - std::chrono::duration_cast&lt;microseconds_type&gt;(s);</td>
      </tr>
      <tr>
        <td id="L4137" class="blob-num js-line-number" data-line-number="4137"></td>
        <td id="LC4137" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4138" class="blob-num js-line-number" data-line-number="4138"></td>
        <td id="LC4138" class="blob-code blob-code-inner js-file-line">    timeStamp.<span class="pl-c1">seconds</span>(s.<span class="pl-c1">count</span>()).<span class="pl-c1">microseconds</span>(<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int32_t</span>&gt;(partial_us.<span class="pl-c1">count</span>()));</td>
      </tr>
      <tr>
        <td id="L4139" class="blob-num js-line-number" data-line-number="4139"></td>
        <td id="LC4139" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4140" class="blob-num js-line-number" data-line-number="4140"></td>
        <td id="LC4140" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> timeStamp;</td>
      </tr>
      <tr>
        <td id="L4141" class="blob-num js-line-number" data-line-number="4141"></td>
        <td id="LC4141" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L4142" class="blob-num js-line-number" data-line-number="4142"></td>
        <td id="LC4142" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4143" class="blob-num js-line-number" data-line-number="4143"></td>
        <td id="LC4143" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L4144" class="blob-num js-line-number" data-line-number="4144"></td>
        <td id="LC4144" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * @return TimeStamp of now.</span></td>
      </tr>
      <tr>
        <td id="L4145" class="blob-num js-line-number" data-line-number="4145"></td>
        <td id="LC4145" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L4146" class="blob-num js-line-number" data-line-number="4146"></td>
        <td id="LC4146" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> cluon::data::TimeStamp <span class="pl-en">now</span>() <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L4147" class="blob-num js-line-number" data-line-number="4147"></td>
        <td id="LC4147" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-c1">convert</span>(<span class="pl-c1">std::chrono::system_clock::now</span>());</td>
      </tr>
      <tr>
        <td id="L4148" class="blob-num js-line-number" data-line-number="4148"></td>
        <td id="LC4148" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L4149" class="blob-num js-line-number" data-line-number="4149"></td>
        <td id="LC4149" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4150" class="blob-num js-line-number" data-line-number="4150"></td>
        <td id="LC4150" class="blob-code blob-code-inner js-file-line">} <span class="pl-c"><span class="pl-c">//</span> namespace time</span></td>
      </tr>
      <tr>
        <td id="L4151" class="blob-num js-line-number" data-line-number="4151"></td>
        <td id="LC4151" class="blob-code blob-code-inner js-file-line">} <span class="pl-c"><span class="pl-c">//</span> namespace cluon</span></td>
      </tr>
      <tr>
        <td id="L4152" class="blob-num js-line-number" data-line-number="4152"></td>
        <td id="LC4152" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4153" class="blob-num js-line-number" data-line-number="4153"></td>
        <td id="LC4153" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L4154" class="blob-num js-line-number" data-line-number="4154"></td>
        <td id="LC4154" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> &quot;License&quot;: Public Domain</span></td>
      </tr>
      <tr>
        <td id="L4155" class="blob-num js-line-number" data-line-number="4155"></td>
        <td id="LC4155" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> I, Mathias Panzenböck, place this file hereby into the public domain. Use it at your own risk for whatever you like.</span></td>
      </tr>
      <tr>
        <td id="L4156" class="blob-num js-line-number" data-line-number="4156"></td>
        <td id="LC4156" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> In case there are jurisdictions that don&#39;t support putting things in the public domain you can also consider it to</span></td>
      </tr>
      <tr>
        <td id="L4157" class="blob-num js-line-number" data-line-number="4157"></td>
        <td id="LC4157" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> be &quot;dual licensed&quot; under the BSD, MIT and Apache licenses, if you want to. This code is trivial anyway. Consider it</span></td>
      </tr>
      <tr>
        <td id="L4158" class="blob-num js-line-number" data-line-number="4158"></td>
        <td id="LC4158" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> an example on how to get the endian conversion functions on different platforms.</span></td>
      </tr>
      <tr>
        <td id="L4159" class="blob-num js-line-number" data-line-number="4159"></td>
        <td id="LC4159" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4160" class="blob-num js-line-number" data-line-number="4160"></td>
        <td id="LC4160" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> Updated for FreeBSD 10.1+, DragonFly 4.2+, NetBSD 6.1.5+, fixes for Win32,</span></td>
      </tr>
      <tr>
        <td id="L4161" class="blob-num js-line-number" data-line-number="4161"></td>
        <td id="LC4161" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> and support for emscripten; Christian Berger.</span></td>
      </tr>
      <tr>
        <td id="L4162" class="blob-num js-line-number" data-line-number="4162"></td>
        <td id="LC4162" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4163" class="blob-num js-line-number" data-line-number="4163"></td>
        <td id="LC4163" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifndef</span> PORTABLEENDIAN_HPP</td>
      </tr>
      <tr>
        <td id="L4164" class="blob-num js-line-number" data-line-number="4164"></td>
        <td id="LC4164" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">define</span> <span class="pl-en">PORTABLEENDIAN_HPP</span></td>
      </tr>
      <tr>
        <td id="L4165" class="blob-num js-line-number" data-line-number="4165"></td>
        <td id="LC4165" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4166" class="blob-num js-line-number" data-line-number="4166"></td>
        <td id="LC4166" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> clang-format off</span></td>
      </tr>
      <tr>
        <td id="L4167" class="blob-num js-line-number" data-line-number="4167"></td>
        <td id="LC4167" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">if</span> defined(__linux__) || defined(__CYGWIN__)</td>
      </tr>
      <tr>
        <td id="L4168" class="blob-num js-line-number" data-line-number="4168"></td>
        <td id="LC4168" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>endian.h<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L4169" class="blob-num js-line-number" data-line-number="4169"></td>
        <td id="LC4169" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">elif</span> defined(__APPLE__)</td>
      </tr>
      <tr>
        <td id="L4170" class="blob-num js-line-number" data-line-number="4170"></td>
        <td id="LC4170" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>libkern/OSByteOrder.h<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L4171" class="blob-num js-line-number" data-line-number="4171"></td>
        <td id="LC4171" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">define</span> <span class="pl-en">htobe16</span>(<span class="pl-v">x</span>) OSSwapHostToBigInt16(x)</td>
      </tr>
      <tr>
        <td id="L4172" class="blob-num js-line-number" data-line-number="4172"></td>
        <td id="LC4172" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">define</span> <span class="pl-en">htole16</span>(<span class="pl-v">x</span>) OSSwapHostToLittleInt16(x)</td>
      </tr>
      <tr>
        <td id="L4173" class="blob-num js-line-number" data-line-number="4173"></td>
        <td id="LC4173" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">define</span> <span class="pl-en">be16toh</span>(<span class="pl-v">x</span>) OSSwapBigToHostInt16(x)</td>
      </tr>
      <tr>
        <td id="L4174" class="blob-num js-line-number" data-line-number="4174"></td>
        <td id="LC4174" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">define</span> <span class="pl-en">le16toh</span>(<span class="pl-v">x</span>) OSSwapLittleToHostInt16(x)</td>
      </tr>
      <tr>
        <td id="L4175" class="blob-num js-line-number" data-line-number="4175"></td>
        <td id="LC4175" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4176" class="blob-num js-line-number" data-line-number="4176"></td>
        <td id="LC4176" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">define</span> <span class="pl-en">htobe32</span>(<span class="pl-v">x</span>) OSSwapHostToBigInt32(x)</td>
      </tr>
      <tr>
        <td id="L4177" class="blob-num js-line-number" data-line-number="4177"></td>
        <td id="LC4177" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">define</span> <span class="pl-en">htole32</span>(<span class="pl-v">x</span>) OSSwapHostToLittleInt32(x)</td>
      </tr>
      <tr>
        <td id="L4178" class="blob-num js-line-number" data-line-number="4178"></td>
        <td id="LC4178" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">define</span> <span class="pl-en">be32toh</span>(<span class="pl-v">x</span>) OSSwapBigToHostInt32(x)</td>
      </tr>
      <tr>
        <td id="L4179" class="blob-num js-line-number" data-line-number="4179"></td>
        <td id="LC4179" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">define</span> <span class="pl-en">le32toh</span>(<span class="pl-v">x</span>) OSSwapLittleToHostInt32(x)</td>
      </tr>
      <tr>
        <td id="L4180" class="blob-num js-line-number" data-line-number="4180"></td>
        <td id="LC4180" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4181" class="blob-num js-line-number" data-line-number="4181"></td>
        <td id="LC4181" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">define</span> <span class="pl-en">htobe64</span>(<span class="pl-v">x</span>) OSSwapHostToBigInt64(x)</td>
      </tr>
      <tr>
        <td id="L4182" class="blob-num js-line-number" data-line-number="4182"></td>
        <td id="LC4182" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">define</span> <span class="pl-en">htole64</span>(<span class="pl-v">x</span>) OSSwapHostToLittleInt64(x)</td>
      </tr>
      <tr>
        <td id="L4183" class="blob-num js-line-number" data-line-number="4183"></td>
        <td id="LC4183" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">define</span> <span class="pl-en">be64toh</span>(<span class="pl-v">x</span>) OSSwapBigToHostInt64(x)</td>
      </tr>
      <tr>
        <td id="L4184" class="blob-num js-line-number" data-line-number="4184"></td>
        <td id="LC4184" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">define</span> <span class="pl-en">le64toh</span>(<span class="pl-v">x</span>) OSSwapLittleToHostInt64(x)</td>
      </tr>
      <tr>
        <td id="L4185" class="blob-num js-line-number" data-line-number="4185"></td>
        <td id="LC4185" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">elif</span> defined(__OpenBSD__) || defined(__FreeBSD__) || defined(__NetBSD__) || defined(__DragonFly__)</td>
      </tr>
      <tr>
        <td id="L4186" class="blob-num js-line-number" data-line-number="4186"></td>
        <td id="LC4186" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>sys/endian.h<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L4187" class="blob-num js-line-number" data-line-number="4187"></td>
        <td id="LC4187" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">elif</span> (defined(_WIN16) || defined(_WIN32) || defined(_WIN64))</td>
      </tr>
      <tr>
        <td id="L4188" class="blob-num js-line-number" data-line-number="4188"></td>
        <td id="LC4188" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">if</span> BYTE_ORDER == LITTLE_ENDIAN</td>
      </tr>
      <tr>
        <td id="L4189" class="blob-num js-line-number" data-line-number="4189"></td>
        <td id="LC4189" class="blob-code blob-code-inner js-file-line">        #<span class="pl-k">define</span> <span class="pl-en">htobe16</span>(<span class="pl-v">x</span>) htons(x)</td>
      </tr>
      <tr>
        <td id="L4190" class="blob-num js-line-number" data-line-number="4190"></td>
        <td id="LC4190" class="blob-code blob-code-inner js-file-line">        #<span class="pl-k">define</span> <span class="pl-en">htole16</span>(<span class="pl-v">x</span>) (x)</td>
      </tr>
      <tr>
        <td id="L4191" class="blob-num js-line-number" data-line-number="4191"></td>
        <td id="LC4191" class="blob-code blob-code-inner js-file-line">        #<span class="pl-k">define</span> <span class="pl-en">be16toh</span>(<span class="pl-v">x</span>) ntohs(x)</td>
      </tr>
      <tr>
        <td id="L4192" class="blob-num js-line-number" data-line-number="4192"></td>
        <td id="LC4192" class="blob-code blob-code-inner js-file-line">        #<span class="pl-k">define</span> <span class="pl-en">le16toh</span>(<span class="pl-v">x</span>) (x)</td>
      </tr>
      <tr>
        <td id="L4193" class="blob-num js-line-number" data-line-number="4193"></td>
        <td id="LC4193" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4194" class="blob-num js-line-number" data-line-number="4194"></td>
        <td id="LC4194" class="blob-code blob-code-inner js-file-line">        #<span class="pl-k">define</span> <span class="pl-en">htobe32</span>(<span class="pl-v">x</span>) htonl(x)</td>
      </tr>
      <tr>
        <td id="L4195" class="blob-num js-line-number" data-line-number="4195"></td>
        <td id="LC4195" class="blob-code blob-code-inner js-file-line">        #<span class="pl-k">define</span> <span class="pl-en">htole32</span>(<span class="pl-v">x</span>) (x)</td>
      </tr>
      <tr>
        <td id="L4196" class="blob-num js-line-number" data-line-number="4196"></td>
        <td id="LC4196" class="blob-code blob-code-inner js-file-line">        #<span class="pl-k">define</span> <span class="pl-en">be32toh</span>(<span class="pl-v">x</span>) ntohl(x)</td>
      </tr>
      <tr>
        <td id="L4197" class="blob-num js-line-number" data-line-number="4197"></td>
        <td id="LC4197" class="blob-code blob-code-inner js-file-line">        #<span class="pl-k">define</span> <span class="pl-en">le32toh</span>(<span class="pl-v">x</span>) (x)</td>
      </tr>
      <tr>
        <td id="L4198" class="blob-num js-line-number" data-line-number="4198"></td>
        <td id="LC4198" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4199" class="blob-num js-line-number" data-line-number="4199"></td>
        <td id="LC4199" class="blob-code blob-code-inner js-file-line">        #<span class="pl-k">define</span> <span class="pl-en">htobe64</span>(<span class="pl-v">x</span>) htonll(x)</td>
      </tr>
      <tr>
        <td id="L4200" class="blob-num js-line-number" data-line-number="4200"></td>
        <td id="LC4200" class="blob-code blob-code-inner js-file-line">        #<span class="pl-k">define</span> <span class="pl-en">htole64</span>(<span class="pl-v">x</span>) (x)</td>
      </tr>
      <tr>
        <td id="L4201" class="blob-num js-line-number" data-line-number="4201"></td>
        <td id="LC4201" class="blob-code blob-code-inner js-file-line">        #<span class="pl-k">define</span> <span class="pl-en">be64toh</span>(<span class="pl-v">x</span>) ntohll(x)</td>
      </tr>
      <tr>
        <td id="L4202" class="blob-num js-line-number" data-line-number="4202"></td>
        <td id="LC4202" class="blob-code blob-code-inner js-file-line">        #<span class="pl-k">define</span> <span class="pl-en">le64toh</span>(<span class="pl-v">x</span>) (x)</td>
      </tr>
      <tr>
        <td id="L4203" class="blob-num js-line-number" data-line-number="4203"></td>
        <td id="LC4203" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">elif</span> BYTE_ORDER == BIG_ENDIAN</td>
      </tr>
      <tr>
        <td id="L4204" class="blob-num js-line-number" data-line-number="4204"></td>
        <td id="LC4204" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">/*</span> that would be xbox 360 <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L4205" class="blob-num js-line-number" data-line-number="4205"></td>
        <td id="LC4205" class="blob-code blob-code-inner js-file-line">        #<span class="pl-k">define</span> <span class="pl-en">htobe16</span>(<span class="pl-v">x</span>) (x)</td>
      </tr>
      <tr>
        <td id="L4206" class="blob-num js-line-number" data-line-number="4206"></td>
        <td id="LC4206" class="blob-code blob-code-inner js-file-line">        #<span class="pl-k">define</span> <span class="pl-en">htole16</span>(<span class="pl-v">x</span>) __builtin_bswap16(x)</td>
      </tr>
      <tr>
        <td id="L4207" class="blob-num js-line-number" data-line-number="4207"></td>
        <td id="LC4207" class="blob-code blob-code-inner js-file-line">        #<span class="pl-k">define</span> <span class="pl-en">be16toh</span>(<span class="pl-v">x</span>) (x)</td>
      </tr>
      <tr>
        <td id="L4208" class="blob-num js-line-number" data-line-number="4208"></td>
        <td id="LC4208" class="blob-code blob-code-inner js-file-line">        #<span class="pl-k">define</span> <span class="pl-en">le16toh</span>(<span class="pl-v">x</span>) __builtin_bswap16(x)</td>
      </tr>
      <tr>
        <td id="L4209" class="blob-num js-line-number" data-line-number="4209"></td>
        <td id="LC4209" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4210" class="blob-num js-line-number" data-line-number="4210"></td>
        <td id="LC4210" class="blob-code blob-code-inner js-file-line">        #<span class="pl-k">define</span> <span class="pl-en">htobe32</span>(<span class="pl-v">x</span>) (x)</td>
      </tr>
      <tr>
        <td id="L4211" class="blob-num js-line-number" data-line-number="4211"></td>
        <td id="LC4211" class="blob-code blob-code-inner js-file-line">        #<span class="pl-k">define</span> <span class="pl-en">htole32</span>(<span class="pl-v">x</span>) __builtin_bswap32(x)</td>
      </tr>
      <tr>
        <td id="L4212" class="blob-num js-line-number" data-line-number="4212"></td>
        <td id="LC4212" class="blob-code blob-code-inner js-file-line">        #<span class="pl-k">define</span> <span class="pl-en">be32toh</span>(<span class="pl-v">x</span>) (x)</td>
      </tr>
      <tr>
        <td id="L4213" class="blob-num js-line-number" data-line-number="4213"></td>
        <td id="LC4213" class="blob-code blob-code-inner js-file-line">        #<span class="pl-k">define</span> <span class="pl-en">le32toh</span>(<span class="pl-v">x</span>) __builtin_bswap32(x)</td>
      </tr>
      <tr>
        <td id="L4214" class="blob-num js-line-number" data-line-number="4214"></td>
        <td id="LC4214" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4215" class="blob-num js-line-number" data-line-number="4215"></td>
        <td id="LC4215" class="blob-code blob-code-inner js-file-line">        #<span class="pl-k">define</span> <span class="pl-en">htobe64</span>(<span class="pl-v">x</span>) (x)</td>
      </tr>
      <tr>
        <td id="L4216" class="blob-num js-line-number" data-line-number="4216"></td>
        <td id="LC4216" class="blob-code blob-code-inner js-file-line">        #<span class="pl-k">define</span> <span class="pl-en">htole64</span>(<span class="pl-v">x</span>) __builtin_bswap64(x)</td>
      </tr>
      <tr>
        <td id="L4217" class="blob-num js-line-number" data-line-number="4217"></td>
        <td id="LC4217" class="blob-code blob-code-inner js-file-line">        #<span class="pl-k">define</span> <span class="pl-en">be64toh</span>(<span class="pl-v">x</span>) (x)</td>
      </tr>
      <tr>
        <td id="L4218" class="blob-num js-line-number" data-line-number="4218"></td>
        <td id="LC4218" class="blob-code blob-code-inner js-file-line">        #<span class="pl-k">define</span> <span class="pl-en">le64toh</span>(<span class="pl-v">x</span>) __builtin_bswap64(x)</td>
      </tr>
      <tr>
        <td id="L4219" class="blob-num js-line-number" data-line-number="4219"></td>
        <td id="LC4219" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">else</span></td>
      </tr>
      <tr>
        <td id="L4220" class="blob-num js-line-number" data-line-number="4220"></td>
        <td id="LC4220" class="blob-code blob-code-inner js-file-line">        #<span class="pl-k">error</span> byte order not supported</td>
      </tr>
      <tr>
        <td id="L4221" class="blob-num js-line-number" data-line-number="4221"></td>
        <td id="LC4221" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L4222" class="blob-num js-line-number" data-line-number="4222"></td>
        <td id="LC4222" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">else</span></td>
      </tr>
      <tr>
        <td id="L4223" class="blob-num js-line-number" data-line-number="4223"></td>
        <td id="LC4223" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">ifdef</span> __EMSCRIPTEN__</td>
      </tr>
      <tr>
        <td id="L4224" class="blob-num js-line-number" data-line-number="4224"></td>
        <td id="LC4224" class="blob-code blob-code-inner js-file-line">        #<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>endian.h<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L4225" class="blob-num js-line-number" data-line-number="4225"></td>
        <td id="LC4225" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">else</span></td>
      </tr>
      <tr>
        <td id="L4226" class="blob-num js-line-number" data-line-number="4226"></td>
        <td id="LC4226" class="blob-code blob-code-inner js-file-line">        #<span class="pl-k">warning</span> platform not supported</td>
      </tr>
      <tr>
        <td id="L4227" class="blob-num js-line-number" data-line-number="4227"></td>
        <td id="LC4227" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L4228" class="blob-num js-line-number" data-line-number="4228"></td>
        <td id="LC4228" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L4229" class="blob-num js-line-number" data-line-number="4229"></td>
        <td id="LC4229" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> clang-format on</span></td>
      </tr>
      <tr>
        <td id="L4230" class="blob-num js-line-number" data-line-number="4230"></td>
        <td id="LC4230" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L4231" class="blob-num js-line-number" data-line-number="4231"></td>
        <td id="LC4231" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L4232" class="blob-num js-line-number" data-line-number="4232"></td>
        <td id="LC4232" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Copyright (C) 2017-2018  Christian Berger</span></td>
      </tr>
      <tr>
        <td id="L4233" class="blob-num js-line-number" data-line-number="4233"></td>
        <td id="LC4233" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L4234" class="blob-num js-line-number" data-line-number="4234"></td>
        <td id="LC4234" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is free software: you can redistribute it and/or modify</span></td>
      </tr>
      <tr>
        <td id="L4235" class="blob-num js-line-number" data-line-number="4235"></td>
        <td id="LC4235" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * it under the terms of the GNU General Public License as published by</span></td>
      </tr>
      <tr>
        <td id="L4236" class="blob-num js-line-number" data-line-number="4236"></td>
        <td id="LC4236" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * the Free Software Foundation, either version 3 of the License, or</span></td>
      </tr>
      <tr>
        <td id="L4237" class="blob-num js-line-number" data-line-number="4237"></td>
        <td id="LC4237" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * (at your option) any later version.</span></td>
      </tr>
      <tr>
        <td id="L4238" class="blob-num js-line-number" data-line-number="4238"></td>
        <td id="LC4238" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L4239" class="blob-num js-line-number" data-line-number="4239"></td>
        <td id="LC4239" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is distributed in the hope that it will be useful,</span></td>
      </tr>
      <tr>
        <td id="L4240" class="blob-num js-line-number" data-line-number="4240"></td>
        <td id="LC4240" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></td>
      </tr>
      <tr>
        <td id="L4241" class="blob-num js-line-number" data-line-number="4241"></td>
        <td id="LC4241" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></td>
      </tr>
      <tr>
        <td id="L4242" class="blob-num js-line-number" data-line-number="4242"></td>
        <td id="LC4242" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * GNU General Public License for more details.</span></td>
      </tr>
      <tr>
        <td id="L4243" class="blob-num js-line-number" data-line-number="4243"></td>
        <td id="LC4243" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L4244" class="blob-num js-line-number" data-line-number="4244"></td>
        <td id="LC4244" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * You should have received a copy of the GNU General Public License</span></td>
      </tr>
      <tr>
        <td id="L4245" class="blob-num js-line-number" data-line-number="4245"></td>
        <td id="LC4245" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></td>
      </tr>
      <tr>
        <td id="L4246" class="blob-num js-line-number" data-line-number="4246"></td>
        <td id="LC4246" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L4247" class="blob-num js-line-number" data-line-number="4247"></td>
        <td id="LC4247" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4248" class="blob-num js-line-number" data-line-number="4248"></td>
        <td id="LC4248" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifndef</span> CLUON_HPP</td>
      </tr>
      <tr>
        <td id="L4249" class="blob-num js-line-number" data-line-number="4249"></td>
        <td id="LC4249" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">define</span> <span class="pl-en">CLUON_HPP</span></td>
      </tr>
      <tr>
        <td id="L4250" class="blob-num js-line-number" data-line-number="4250"></td>
        <td id="LC4250" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4251" class="blob-num js-line-number" data-line-number="4251"></td>
        <td id="LC4251" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> clang-format off</span></td>
      </tr>
      <tr>
        <td id="L4252" class="blob-num js-line-number" data-line-number="4252"></td>
        <td id="LC4252" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifdef</span> WIN32</td>
      </tr>
      <tr>
        <td id="L4253" class="blob-num js-line-number" data-line-number="4253"></td>
        <td id="LC4253" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">ifdef</span> _WIN64</td>
      </tr>
      <tr>
        <td id="L4254" class="blob-num js-line-number" data-line-number="4254"></td>
        <td id="LC4254" class="blob-code blob-code-inner js-file-line">        #<span class="pl-k">define</span> <span class="pl-en">ssize_t</span> __int64</td>
      </tr>
      <tr>
        <td id="L4255" class="blob-num js-line-number" data-line-number="4255"></td>
        <td id="LC4255" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">else</span></td>
      </tr>
      <tr>
        <td id="L4256" class="blob-num js-line-number" data-line-number="4256"></td>
        <td id="LC4256" class="blob-code blob-code-inner js-file-line">        #<span class="pl-k">define</span> <span class="pl-en">ssize_t</span> <span class="pl-k">long</span></td>
      </tr>
      <tr>
        <td id="L4257" class="blob-num js-line-number" data-line-number="4257"></td>
        <td id="LC4257" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L4258" class="blob-num js-line-number" data-line-number="4258"></td>
        <td id="LC4258" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4259" class="blob-num js-line-number" data-line-number="4259"></td>
        <td id="LC4259" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Disable warning &quot;&#39;&lt;&#39;: signed/unsigned mismatch&quot;.</span></td>
      </tr>
      <tr>
        <td id="L4260" class="blob-num js-line-number" data-line-number="4260"></td>
        <td id="LC4260" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">pragma</span> warning(disable : 4018)</td>
      </tr>
      <tr>
        <td id="L4261" class="blob-num js-line-number" data-line-number="4261"></td>
        <td id="LC4261" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Disable warning &quot;Unary minus operator applied to unsigned type, result still unsigned&quot;.</span></td>
      </tr>
      <tr>
        <td id="L4262" class="blob-num js-line-number" data-line-number="4262"></td>
        <td id="LC4262" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">pragma</span> warning(disable : 4146)</td>
      </tr>
      <tr>
        <td id="L4263" class="blob-num js-line-number" data-line-number="4263"></td>
        <td id="LC4263" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Disable warning &quot;Possible loss of precision&quot;.</span></td>
      </tr>
      <tr>
        <td id="L4264" class="blob-num js-line-number" data-line-number="4264"></td>
        <td id="LC4264" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">pragma</span> warning(disable : 4244)</td>
      </tr>
      <tr>
        <td id="L4265" class="blob-num js-line-number" data-line-number="4265"></td>
        <td id="LC4265" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Disable warning &quot;Conversion from &#39;size_t&#39; to &#39;type&#39;, possible loss of data&quot;.</span></td>
      </tr>
      <tr>
        <td id="L4266" class="blob-num js-line-number" data-line-number="4266"></td>
        <td id="LC4266" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">pragma</span> warning(disable : 4267)</td>
      </tr>
      <tr>
        <td id="L4267" class="blob-num js-line-number" data-line-number="4267"></td>
        <td id="LC4267" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Disable warning &quot;&#39;static_cast&#39;: truncation of constant value&quot;.</span></td>
      </tr>
      <tr>
        <td id="L4268" class="blob-num js-line-number" data-line-number="4268"></td>
        <td id="LC4268" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">pragma</span> warning(disable : 4309)</td>
      </tr>
      <tr>
        <td id="L4269" class="blob-num js-line-number" data-line-number="4269"></td>
        <td id="LC4269" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Disable warning &quot;&#39;operator &quot;&quot;s&#39;: literal suffix identifiers that do not start with an underscore are reserved&quot;.</span></td>
      </tr>
      <tr>
        <td id="L4270" class="blob-num js-line-number" data-line-number="4270"></td>
        <td id="LC4270" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">pragma</span> warning(disable : 4455)</td>
      </tr>
      <tr>
        <td id="L4271" class="blob-num js-line-number" data-line-number="4271"></td>
        <td id="LC4271" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Disable deprecated API warnings.</span></td>
      </tr>
      <tr>
        <td id="L4272" class="blob-num js-line-number" data-line-number="4272"></td>
        <td id="LC4272" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">pragma</span> warning(disable : 4996)</td>
      </tr>
      <tr>
        <td id="L4273" class="blob-num js-line-number" data-line-number="4273"></td>
        <td id="LC4273" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4274" class="blob-num js-line-number" data-line-number="4274"></td>
        <td id="LC4274" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Link against ws2_32.lib for networking.</span></td>
      </tr>
      <tr>
        <td id="L4275" class="blob-num js-line-number" data-line-number="4275"></td>
        <td id="LC4275" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">pragma</span> comment(lib, &quot;ws2_32.lib&quot;)</td>
      </tr>
      <tr>
        <td id="L4276" class="blob-num js-line-number" data-line-number="4276"></td>
        <td id="LC4276" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4277" class="blob-num js-line-number" data-line-number="4277"></td>
        <td id="LC4277" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Avoid include definitions from Winsock v1.</span></td>
      </tr>
      <tr>
        <td id="L4278" class="blob-num js-line-number" data-line-number="4278"></td>
        <td id="LC4278" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">define</span> <span class="pl-en">WIN32_LEAN_AND_MEAN</span></td>
      </tr>
      <tr>
        <td id="L4279" class="blob-num js-line-number" data-line-number="4279"></td>
        <td id="LC4279" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4280" class="blob-num js-line-number" data-line-number="4280"></td>
        <td id="LC4280" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Export symbols.</span></td>
      </tr>
      <tr>
        <td id="L4281" class="blob-num js-line-number" data-line-number="4281"></td>
        <td id="LC4281" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">ifdef</span> LIBCLUON_SHARED</td>
      </tr>
      <tr>
        <td id="L4282" class="blob-num js-line-number" data-line-number="4282"></td>
        <td id="LC4282" class="blob-code blob-code-inner js-file-line">        #<span class="pl-k">ifdef</span> LIBCLUON_EXPORTS</td>
      </tr>
      <tr>
        <td id="L4283" class="blob-num js-line-number" data-line-number="4283"></td>
        <td id="LC4283" class="blob-code blob-code-inner js-file-line">            #<span class="pl-k">define</span> <span class="pl-en">LIBCLUON_API</span> <span class="pl-en">__declspec</span>(dllexport)</td>
      </tr>
      <tr>
        <td id="L4284" class="blob-num js-line-number" data-line-number="4284"></td>
        <td id="LC4284" class="blob-code blob-code-inner js-file-line">        #<span class="pl-k">else</span></td>
      </tr>
      <tr>
        <td id="L4285" class="blob-num js-line-number" data-line-number="4285"></td>
        <td id="LC4285" class="blob-code blob-code-inner js-file-line">            #<span class="pl-k">define</span> <span class="pl-en">LIBCLUON_API</span> <span class="pl-en">__declspec</span>(dllimport)</td>
      </tr>
      <tr>
        <td id="L4286" class="blob-num js-line-number" data-line-number="4286"></td>
        <td id="LC4286" class="blob-code blob-code-inner js-file-line">        #endif</td>
      </tr>
      <tr>
        <td id="L4287" class="blob-num js-line-number" data-line-number="4287"></td>
        <td id="LC4287" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">else</span></td>
      </tr>
      <tr>
        <td id="L4288" class="blob-num js-line-number" data-line-number="4288"></td>
        <td id="LC4288" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> If linking statically:</span></td>
      </tr>
      <tr>
        <td id="L4289" class="blob-num js-line-number" data-line-number="4289"></td>
        <td id="LC4289" class="blob-code blob-code-inner js-file-line">        #<span class="pl-k">define</span> <span class="pl-en">LIBCLUON_API</span></td>
      </tr>
      <tr>
        <td id="L4290" class="blob-num js-line-number" data-line-number="4290"></td>
        <td id="LC4290" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L4291" class="blob-num js-line-number" data-line-number="4291"></td>
        <td id="LC4291" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">else</span></td>
      </tr>
      <tr>
        <td id="L4292" class="blob-num js-line-number" data-line-number="4292"></td>
        <td id="LC4292" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Undefine define for non-Win32 systems:</span></td>
      </tr>
      <tr>
        <td id="L4293" class="blob-num js-line-number" data-line-number="4293"></td>
        <td id="LC4293" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">define</span> <span class="pl-en">LIBCLUON_API</span></td>
      </tr>
      <tr>
        <td id="L4294" class="blob-num js-line-number" data-line-number="4294"></td>
        <td id="LC4294" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L4295" class="blob-num js-line-number" data-line-number="4295"></td>
        <td id="LC4295" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> clang-format on</span></td>
      </tr>
      <tr>
        <td id="L4296" class="blob-num js-line-number" data-line-number="4296"></td>
        <td id="LC4296" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4297" class="blob-num js-line-number" data-line-number="4297"></td>
        <td id="LC4297" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/PortableEndian.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L4298" class="blob-num js-line-number" data-line-number="4298"></td>
        <td id="LC4298" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>map<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L4299" class="blob-num js-line-number" data-line-number="4299"></td>
        <td id="LC4299" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>string<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L4300" class="blob-num js-line-number" data-line-number="4300"></td>
        <td id="LC4300" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4301" class="blob-num js-line-number" data-line-number="4301"></td>
        <td id="LC4301" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">cluon</span> {</td>
      </tr>
      <tr>
        <td id="L4302" class="blob-num js-line-number" data-line-number="4302"></td>
        <td id="LC4302" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4303" class="blob-num js-line-number" data-line-number="4303"></td>
        <td id="LC4303" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L4304" class="blob-num js-line-number" data-line-number="4304"></td>
        <td id="LC4304" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * @return Map for command line parameters passed as --key=value into key-&gt;values.</span></td>
      </tr>
      <tr>
        <td id="L4305" class="blob-num js-line-number" data-line-number="4305"></td>
        <td id="LC4305" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L4306" class="blob-num js-line-number" data-line-number="4306"></td>
        <td id="LC4306" class="blob-code blob-code-inner js-file-line">std::map&lt;std::string, std::string&gt; <span class="pl-en">getCommandlineArguments</span>(<span class="pl-c1">int32_t</span> argc, <span class="pl-k">char</span> **argv) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L4307" class="blob-num js-line-number" data-line-number="4307"></td>
        <td id="LC4307" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4308" class="blob-num js-line-number" data-line-number="4308"></td>
        <td id="LC4308" class="blob-code blob-code-inner js-file-line">} <span class="pl-c"><span class="pl-c">//</span> namespace cluon</span></td>
      </tr>
      <tr>
        <td id="L4309" class="blob-num js-line-number" data-line-number="4309"></td>
        <td id="LC4309" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4310" class="blob-num js-line-number" data-line-number="4310"></td>
        <td id="LC4310" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L4311" class="blob-num js-line-number" data-line-number="4311"></td>
        <td id="LC4311" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L4312" class="blob-num js-line-number" data-line-number="4312"></td>
        <td id="LC4312" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Copyright (C) 2017-2018  Christian Berger</span></td>
      </tr>
      <tr>
        <td id="L4313" class="blob-num js-line-number" data-line-number="4313"></td>
        <td id="LC4313" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L4314" class="blob-num js-line-number" data-line-number="4314"></td>
        <td id="LC4314" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is free software: you can redistribute it and/or modify</span></td>
      </tr>
      <tr>
        <td id="L4315" class="blob-num js-line-number" data-line-number="4315"></td>
        <td id="LC4315" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * it under the terms of the GNU General Public License as published by</span></td>
      </tr>
      <tr>
        <td id="L4316" class="blob-num js-line-number" data-line-number="4316"></td>
        <td id="LC4316" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * the Free Software Foundation, either version 3 of the License, or</span></td>
      </tr>
      <tr>
        <td id="L4317" class="blob-num js-line-number" data-line-number="4317"></td>
        <td id="LC4317" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * (at your option) any later version.</span></td>
      </tr>
      <tr>
        <td id="L4318" class="blob-num js-line-number" data-line-number="4318"></td>
        <td id="LC4318" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L4319" class="blob-num js-line-number" data-line-number="4319"></td>
        <td id="LC4319" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is distributed in the hope that it will be useful,</span></td>
      </tr>
      <tr>
        <td id="L4320" class="blob-num js-line-number" data-line-number="4320"></td>
        <td id="LC4320" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></td>
      </tr>
      <tr>
        <td id="L4321" class="blob-num js-line-number" data-line-number="4321"></td>
        <td id="LC4321" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></td>
      </tr>
      <tr>
        <td id="L4322" class="blob-num js-line-number" data-line-number="4322"></td>
        <td id="LC4322" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * GNU General Public License for more details.</span></td>
      </tr>
      <tr>
        <td id="L4323" class="blob-num js-line-number" data-line-number="4323"></td>
        <td id="LC4323" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L4324" class="blob-num js-line-number" data-line-number="4324"></td>
        <td id="LC4324" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * You should have received a copy of the GNU General Public License</span></td>
      </tr>
      <tr>
        <td id="L4325" class="blob-num js-line-number" data-line-number="4325"></td>
        <td id="LC4325" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></td>
      </tr>
      <tr>
        <td id="L4326" class="blob-num js-line-number" data-line-number="4326"></td>
        <td id="LC4326" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L4327" class="blob-num js-line-number" data-line-number="4327"></td>
        <td id="LC4327" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4328" class="blob-num js-line-number" data-line-number="4328"></td>
        <td id="LC4328" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifndef</span> METAMESSAGE_HPP</td>
      </tr>
      <tr>
        <td id="L4329" class="blob-num js-line-number" data-line-number="4329"></td>
        <td id="LC4329" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">define</span> <span class="pl-en">METAMESSAGE_HPP</span></td>
      </tr>
      <tr>
        <td id="L4330" class="blob-num js-line-number" data-line-number="4330"></td>
        <td id="LC4330" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4331" class="blob-num js-line-number" data-line-number="4331"></td>
        <td id="LC4331" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/cluon.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L4332" class="blob-num js-line-number" data-line-number="4332"></td>
        <td id="LC4332" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4333" class="blob-num js-line-number" data-line-number="4333"></td>
        <td id="LC4333" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>cstdint<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L4334" class="blob-num js-line-number" data-line-number="4334"></td>
        <td id="LC4334" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>functional<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L4335" class="blob-num js-line-number" data-line-number="4335"></td>
        <td id="LC4335" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>string<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L4336" class="blob-num js-line-number" data-line-number="4336"></td>
        <td id="LC4336" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>vector<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L4337" class="blob-num js-line-number" data-line-number="4337"></td>
        <td id="LC4337" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4338" class="blob-num js-line-number" data-line-number="4338"></td>
        <td id="LC4338" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">cluon</span> {</td>
      </tr>
      <tr>
        <td id="L4339" class="blob-num js-line-number" data-line-number="4339"></td>
        <td id="LC4339" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L4340" class="blob-num js-line-number" data-line-number="4340"></td>
        <td id="LC4340" class="blob-code blob-code-inner js-file-line"><span class="pl-c">This class provides a generic description for a message. It is internally</span></td>
      </tr>
      <tr>
        <td id="L4341" class="blob-num js-line-number" data-line-number="4341"></td>
        <td id="LC4341" class="blob-code blob-code-inner js-file-line"><span class="pl-c">used during the processing of message specifications to generate targets</span></td>
      </tr>
      <tr>
        <td id="L4342" class="blob-num js-line-number" data-line-number="4342"></td>
        <td id="LC4342" class="blob-code blob-code-inner js-file-line"><span class="pl-c">like C++ or .proto files.</span></td>
      </tr>
      <tr>
        <td id="L4343" class="blob-num js-line-number" data-line-number="4343"></td>
        <td id="LC4343" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L4344" class="blob-num js-line-number" data-line-number="4344"></td>
        <td id="LC4344" class="blob-code blob-code-inner js-file-line"><span class="pl-k">class</span> <span class="pl-en">LIBCLUON_API</span> MetaMessage {</td>
      </tr>
      <tr>
        <td id="L4345" class="blob-num js-line-number" data-line-number="4345"></td>
        <td id="LC4345" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L4346" class="blob-num js-line-number" data-line-number="4346"></td>
        <td id="LC4346" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L4347" class="blob-num js-line-number" data-line-number="4347"></td>
        <td id="LC4347" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * This inner class provides a generic description for a message&#39;s fields.</span></td>
      </tr>
      <tr>
        <td id="L4348" class="blob-num js-line-number" data-line-number="4348"></td>
        <td id="LC4348" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * It is internally used during the processing of message specifications.</span></td>
      </tr>
      <tr>
        <td id="L4349" class="blob-num js-line-number" data-line-number="4349"></td>
        <td id="LC4349" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L4350" class="blob-num js-line-number" data-line-number="4350"></td>
        <td id="LC4350" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">class</span> <span class="pl-en">MetaField</span> {</td>
      </tr>
      <tr>
        <td id="L4351" class="blob-num js-line-number" data-line-number="4351"></td>
        <td id="LC4351" class="blob-code blob-code-inner js-file-line">       <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L4352" class="blob-num js-line-number" data-line-number="4352"></td>
        <td id="LC4352" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">enum</span> MetaFieldDataTypes : <span class="pl-c1">uint16_t</span> {</td>
      </tr>
      <tr>
        <td id="L4353" class="blob-num js-line-number" data-line-number="4353"></td>
        <td id="LC4353" class="blob-code blob-code-inner js-file-line">            BOOL_T      = <span class="pl-c1">0</span>,</td>
      </tr>
      <tr>
        <td id="L4354" class="blob-num js-line-number" data-line-number="4354"></td>
        <td id="LC4354" class="blob-code blob-code-inner js-file-line">            UINT8_T     = <span class="pl-c1">2</span>,</td>
      </tr>
      <tr>
        <td id="L4355" class="blob-num js-line-number" data-line-number="4355"></td>
        <td id="LC4355" class="blob-code blob-code-inner js-file-line">            INT8_T      = <span class="pl-c1">3</span>,</td>
      </tr>
      <tr>
        <td id="L4356" class="blob-num js-line-number" data-line-number="4356"></td>
        <td id="LC4356" class="blob-code blob-code-inner js-file-line">            UINT16_T    = <span class="pl-c1">4</span>,</td>
      </tr>
      <tr>
        <td id="L4357" class="blob-num js-line-number" data-line-number="4357"></td>
        <td id="LC4357" class="blob-code blob-code-inner js-file-line">            INT16_T     = <span class="pl-c1">5</span>,</td>
      </tr>
      <tr>
        <td id="L4358" class="blob-num js-line-number" data-line-number="4358"></td>
        <td id="LC4358" class="blob-code blob-code-inner js-file-line">            UINT32_T    = <span class="pl-c1">6</span>,</td>
      </tr>
      <tr>
        <td id="L4359" class="blob-num js-line-number" data-line-number="4359"></td>
        <td id="LC4359" class="blob-code blob-code-inner js-file-line">            INT32_T     = <span class="pl-c1">7</span>,</td>
      </tr>
      <tr>
        <td id="L4360" class="blob-num js-line-number" data-line-number="4360"></td>
        <td id="LC4360" class="blob-code blob-code-inner js-file-line">            UINT64_T    = <span class="pl-c1">8</span>,</td>
      </tr>
      <tr>
        <td id="L4361" class="blob-num js-line-number" data-line-number="4361"></td>
        <td id="LC4361" class="blob-code blob-code-inner js-file-line">            INT64_T     = <span class="pl-c1">9</span>,</td>
      </tr>
      <tr>
        <td id="L4362" class="blob-num js-line-number" data-line-number="4362"></td>
        <td id="LC4362" class="blob-code blob-code-inner js-file-line">            CHAR_T      = <span class="pl-c1">11</span>,</td>
      </tr>
      <tr>
        <td id="L4363" class="blob-num js-line-number" data-line-number="4363"></td>
        <td id="LC4363" class="blob-code blob-code-inner js-file-line">            FLOAT_T     = <span class="pl-c1">13</span>,</td>
      </tr>
      <tr>
        <td id="L4364" class="blob-num js-line-number" data-line-number="4364"></td>
        <td id="LC4364" class="blob-code blob-code-inner js-file-line">            DOUBLE_T    = <span class="pl-c1">14</span>,</td>
      </tr>
      <tr>
        <td id="L4365" class="blob-num js-line-number" data-line-number="4365"></td>
        <td id="LC4365" class="blob-code blob-code-inner js-file-line">            BYTES_T     = <span class="pl-c1">49</span>,</td>
      </tr>
      <tr>
        <td id="L4366" class="blob-num js-line-number" data-line-number="4366"></td>
        <td id="LC4366" class="blob-code blob-code-inner js-file-line">            STRING_T    = <span class="pl-c1">51</span>,</td>
      </tr>
      <tr>
        <td id="L4367" class="blob-num js-line-number" data-line-number="4367"></td>
        <td id="LC4367" class="blob-code blob-code-inner js-file-line">            MESSAGE_T   = <span class="pl-c1">53</span>,</td>
      </tr>
      <tr>
        <td id="L4368" class="blob-num js-line-number" data-line-number="4368"></td>
        <td id="LC4368" class="blob-code blob-code-inner js-file-line">            UNDEFINED_T = <span class="pl-c1">0xFFFF</span>,</td>
      </tr>
      <tr>
        <td id="L4369" class="blob-num js-line-number" data-line-number="4369"></td>
        <td id="LC4369" class="blob-code blob-code-inner js-file-line">        };</td>
      </tr>
      <tr>
        <td id="L4370" class="blob-num js-line-number" data-line-number="4370"></td>
        <td id="LC4370" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4371" class="blob-num js-line-number" data-line-number="4371"></td>
        <td id="LC4371" class="blob-code blob-code-inner js-file-line">       <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L4372" class="blob-num js-line-number" data-line-number="4372"></td>
        <td id="LC4372" class="blob-code blob-code-inner js-file-line">        MetaField &amp;<span class="pl-k">operator</span>=(MetaField &amp;&amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L4373" class="blob-num js-line-number" data-line-number="4373"></td>
        <td id="LC4373" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4374" class="blob-num js-line-number" data-line-number="4374"></td>
        <td id="LC4374" class="blob-code blob-code-inner js-file-line">       <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L4375" class="blob-num js-line-number" data-line-number="4375"></td>
        <td id="LC4375" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">MetaField</span>()                  = <span class="pl-k">default</span>;</td>
      </tr>
      <tr>
        <td id="L4376" class="blob-num js-line-number" data-line-number="4376"></td>
        <td id="LC4376" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">MetaField</span>(<span class="pl-k">const</span> MetaField &amp;) = <span class="pl-k">default</span>;</td>
      </tr>
      <tr>
        <td id="L4377" class="blob-num js-line-number" data-line-number="4377"></td>
        <td id="LC4377" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">MetaField</span>(MetaField &amp;&amp;)      = <span class="pl-k">default</span>;</td>
      </tr>
      <tr>
        <td id="L4378" class="blob-num js-line-number" data-line-number="4378"></td>
        <td id="LC4378" class="blob-code blob-code-inner js-file-line">        MetaField &amp;<span class="pl-k">operator</span>=(<span class="pl-k">const</span> MetaField &amp;) = <span class="pl-k">default</span>;</td>
      </tr>
      <tr>
        <td id="L4379" class="blob-num js-line-number" data-line-number="4379"></td>
        <td id="LC4379" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4380" class="blob-num js-line-number" data-line-number="4380"></td>
        <td id="LC4380" class="blob-code blob-code-inner js-file-line">       <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L4381" class="blob-num js-line-number" data-line-number="4381"></td>
        <td id="LC4381" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L4382" class="blob-num js-line-number" data-line-number="4382"></td>
        <td id="LC4382" class="blob-code blob-code-inner js-file-line"><span class="pl-c">         * @return Type of this field.</span></td>
      </tr>
      <tr>
        <td id="L4383" class="blob-num js-line-number" data-line-number="4383"></td>
        <td id="LC4383" class="blob-code blob-code-inner js-file-line"><span class="pl-c">         <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L4384" class="blob-num js-line-number" data-line-number="4384"></td>
        <td id="LC4384" class="blob-code blob-code-inner js-file-line">        MetaFieldDataTypes <span class="pl-en">fieldDataType</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L4385" class="blob-num js-line-number" data-line-number="4385"></td>
        <td id="LC4385" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L4386" class="blob-num js-line-number" data-line-number="4386"></td>
        <td id="LC4386" class="blob-code blob-code-inner js-file-line"><span class="pl-c">         * This method sets the type for this field.</span></td>
      </tr>
      <tr>
        <td id="L4387" class="blob-num js-line-number" data-line-number="4387"></td>
        <td id="LC4387" class="blob-code blob-code-inner js-file-line"><span class="pl-c">         *</span></td>
      </tr>
      <tr>
        <td id="L4388" class="blob-num js-line-number" data-line-number="4388"></td>
        <td id="LC4388" class="blob-code blob-code-inner js-file-line"><span class="pl-c">         * @param v Type for this field.</span></td>
      </tr>
      <tr>
        <td id="L4389" class="blob-num js-line-number" data-line-number="4389"></td>
        <td id="LC4389" class="blob-code blob-code-inner js-file-line"><span class="pl-c">         * @return Reference to this instance.</span></td>
      </tr>
      <tr>
        <td id="L4390" class="blob-num js-line-number" data-line-number="4390"></td>
        <td id="LC4390" class="blob-code blob-code-inner js-file-line"><span class="pl-c">         <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L4391" class="blob-num js-line-number" data-line-number="4391"></td>
        <td id="LC4391" class="blob-code blob-code-inner js-file-line">        MetaField &amp;<span class="pl-en">fieldDataType</span>(<span class="pl-k">const</span> MetaFieldDataTypes &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L4392" class="blob-num js-line-number" data-line-number="4392"></td>
        <td id="LC4392" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4393" class="blob-num js-line-number" data-line-number="4393"></td>
        <td id="LC4393" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L4394" class="blob-num js-line-number" data-line-number="4394"></td>
        <td id="LC4394" class="blob-code blob-code-inner js-file-line"><span class="pl-c">         * @return Type name of this field.</span></td>
      </tr>
      <tr>
        <td id="L4395" class="blob-num js-line-number" data-line-number="4395"></td>
        <td id="LC4395" class="blob-code blob-code-inner js-file-line"><span class="pl-c">         <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L4396" class="blob-num js-line-number" data-line-number="4396"></td>
        <td id="LC4396" class="blob-code blob-code-inner js-file-line">        std::string <span class="pl-en">fieldDataTypeName</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L4397" class="blob-num js-line-number" data-line-number="4397"></td>
        <td id="LC4397" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L4398" class="blob-num js-line-number" data-line-number="4398"></td>
        <td id="LC4398" class="blob-code blob-code-inner js-file-line"><span class="pl-c">         * This method sets the type name for this field.</span></td>
      </tr>
      <tr>
        <td id="L4399" class="blob-num js-line-number" data-line-number="4399"></td>
        <td id="LC4399" class="blob-code blob-code-inner js-file-line"><span class="pl-c">         *</span></td>
      </tr>
      <tr>
        <td id="L4400" class="blob-num js-line-number" data-line-number="4400"></td>
        <td id="LC4400" class="blob-code blob-code-inner js-file-line"><span class="pl-c">         * @param v Type name for this field.</span></td>
      </tr>
      <tr>
        <td id="L4401" class="blob-num js-line-number" data-line-number="4401"></td>
        <td id="LC4401" class="blob-code blob-code-inner js-file-line"><span class="pl-c">         * @return Reference to this instance.</span></td>
      </tr>
      <tr>
        <td id="L4402" class="blob-num js-line-number" data-line-number="4402"></td>
        <td id="LC4402" class="blob-code blob-code-inner js-file-line"><span class="pl-c">         <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L4403" class="blob-num js-line-number" data-line-number="4403"></td>
        <td id="LC4403" class="blob-code blob-code-inner js-file-line">        MetaField &amp;<span class="pl-en">fieldDataTypeName</span>(<span class="pl-k">const</span> std::string &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L4404" class="blob-num js-line-number" data-line-number="4404"></td>
        <td id="LC4404" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4405" class="blob-num js-line-number" data-line-number="4405"></td>
        <td id="LC4405" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L4406" class="blob-num js-line-number" data-line-number="4406"></td>
        <td id="LC4406" class="blob-code blob-code-inner js-file-line"><span class="pl-c">         * @return Name of this field.</span></td>
      </tr>
      <tr>
        <td id="L4407" class="blob-num js-line-number" data-line-number="4407"></td>
        <td id="LC4407" class="blob-code blob-code-inner js-file-line"><span class="pl-c">         <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L4408" class="blob-num js-line-number" data-line-number="4408"></td>
        <td id="LC4408" class="blob-code blob-code-inner js-file-line">        std::string <span class="pl-en">fieldName</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L4409" class="blob-num js-line-number" data-line-number="4409"></td>
        <td id="LC4409" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L4410" class="blob-num js-line-number" data-line-number="4410"></td>
        <td id="LC4410" class="blob-code blob-code-inner js-file-line"><span class="pl-c">         * This method sets the name for this field.</span></td>
      </tr>
      <tr>
        <td id="L4411" class="blob-num js-line-number" data-line-number="4411"></td>
        <td id="LC4411" class="blob-code blob-code-inner js-file-line"><span class="pl-c">         *</span></td>
      </tr>
      <tr>
        <td id="L4412" class="blob-num js-line-number" data-line-number="4412"></td>
        <td id="LC4412" class="blob-code blob-code-inner js-file-line"><span class="pl-c">         * @param v Name for this field.</span></td>
      </tr>
      <tr>
        <td id="L4413" class="blob-num js-line-number" data-line-number="4413"></td>
        <td id="LC4413" class="blob-code blob-code-inner js-file-line"><span class="pl-c">         * @return Reference to this instance.</span></td>
      </tr>
      <tr>
        <td id="L4414" class="blob-num js-line-number" data-line-number="4414"></td>
        <td id="LC4414" class="blob-code blob-code-inner js-file-line"><span class="pl-c">         <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L4415" class="blob-num js-line-number" data-line-number="4415"></td>
        <td id="LC4415" class="blob-code blob-code-inner js-file-line">        MetaField &amp;<span class="pl-en">fieldName</span>(<span class="pl-k">const</span> std::string &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L4416" class="blob-num js-line-number" data-line-number="4416"></td>
        <td id="LC4416" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4417" class="blob-num js-line-number" data-line-number="4417"></td>
        <td id="LC4417" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L4418" class="blob-num js-line-number" data-line-number="4418"></td>
        <td id="LC4418" class="blob-code blob-code-inner js-file-line"><span class="pl-c">         * @return Identifier of this field.</span></td>
      </tr>
      <tr>
        <td id="L4419" class="blob-num js-line-number" data-line-number="4419"></td>
        <td id="LC4419" class="blob-code blob-code-inner js-file-line"><span class="pl-c">         <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L4420" class="blob-num js-line-number" data-line-number="4420"></td>
        <td id="LC4420" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">uint32_t</span> <span class="pl-en">fieldIdentifier</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L4421" class="blob-num js-line-number" data-line-number="4421"></td>
        <td id="LC4421" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L4422" class="blob-num js-line-number" data-line-number="4422"></td>
        <td id="LC4422" class="blob-code blob-code-inner js-file-line"><span class="pl-c">         * This method sets the identifier for this field.</span></td>
      </tr>
      <tr>
        <td id="L4423" class="blob-num js-line-number" data-line-number="4423"></td>
        <td id="LC4423" class="blob-code blob-code-inner js-file-line"><span class="pl-c">         *</span></td>
      </tr>
      <tr>
        <td id="L4424" class="blob-num js-line-number" data-line-number="4424"></td>
        <td id="LC4424" class="blob-code blob-code-inner js-file-line"><span class="pl-c">         * @param v Identifier for this field.</span></td>
      </tr>
      <tr>
        <td id="L4425" class="blob-num js-line-number" data-line-number="4425"></td>
        <td id="LC4425" class="blob-code blob-code-inner js-file-line"><span class="pl-c">         * @return Reference to this instance.</span></td>
      </tr>
      <tr>
        <td id="L4426" class="blob-num js-line-number" data-line-number="4426"></td>
        <td id="LC4426" class="blob-code blob-code-inner js-file-line"><span class="pl-c">         <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L4427" class="blob-num js-line-number" data-line-number="4427"></td>
        <td id="LC4427" class="blob-code blob-code-inner js-file-line">        MetaField &amp;<span class="pl-en">fieldIdentifier</span>(<span class="pl-c1">uint32_t</span> v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L4428" class="blob-num js-line-number" data-line-number="4428"></td>
        <td id="LC4428" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4429" class="blob-num js-line-number" data-line-number="4429"></td>
        <td id="LC4429" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L4430" class="blob-num js-line-number" data-line-number="4430"></td>
        <td id="LC4430" class="blob-code blob-code-inner js-file-line"><span class="pl-c">         * @return Field&#39;s default initialization value.</span></td>
      </tr>
      <tr>
        <td id="L4431" class="blob-num js-line-number" data-line-number="4431"></td>
        <td id="LC4431" class="blob-code blob-code-inner js-file-line"><span class="pl-c">         <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L4432" class="blob-num js-line-number" data-line-number="4432"></td>
        <td id="LC4432" class="blob-code blob-code-inner js-file-line">        std::string <span class="pl-en">defaultInitializationValue</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L4433" class="blob-num js-line-number" data-line-number="4433"></td>
        <td id="LC4433" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L4434" class="blob-num js-line-number" data-line-number="4434"></td>
        <td id="LC4434" class="blob-code blob-code-inner js-file-line"><span class="pl-c">         * This method sets the field&#39;s default initialization value for this field.</span></td>
      </tr>
      <tr>
        <td id="L4435" class="blob-num js-line-number" data-line-number="4435"></td>
        <td id="LC4435" class="blob-code blob-code-inner js-file-line"><span class="pl-c">         *</span></td>
      </tr>
      <tr>
        <td id="L4436" class="blob-num js-line-number" data-line-number="4436"></td>
        <td id="LC4436" class="blob-code blob-code-inner js-file-line"><span class="pl-c">         * @param v Field&#39;s default initialization value for this field.</span></td>
      </tr>
      <tr>
        <td id="L4437" class="blob-num js-line-number" data-line-number="4437"></td>
        <td id="LC4437" class="blob-code blob-code-inner js-file-line"><span class="pl-c">         * @return Reference to this instance.</span></td>
      </tr>
      <tr>
        <td id="L4438" class="blob-num js-line-number" data-line-number="4438"></td>
        <td id="LC4438" class="blob-code blob-code-inner js-file-line"><span class="pl-c">         <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L4439" class="blob-num js-line-number" data-line-number="4439"></td>
        <td id="LC4439" class="blob-code blob-code-inner js-file-line">        MetaField &amp;<span class="pl-en">defaultInitializationValue</span>(<span class="pl-k">const</span> std::string &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L4440" class="blob-num js-line-number" data-line-number="4440"></td>
        <td id="LC4440" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4441" class="blob-num js-line-number" data-line-number="4441"></td>
        <td id="LC4441" class="blob-code blob-code-inner js-file-line">       <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L4442" class="blob-num js-line-number" data-line-number="4442"></td>
        <td id="LC4442" class="blob-code blob-code-inner js-file-line">        MetaFieldDataTypes m_fieldDataType{UNDEFINED_T};</td>
      </tr>
      <tr>
        <td id="L4443" class="blob-num js-line-number" data-line-number="4443"></td>
        <td id="LC4443" class="blob-code blob-code-inner js-file-line">        std::string m_fieldDataTypeName{<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>};</td>
      </tr>
      <tr>
        <td id="L4444" class="blob-num js-line-number" data-line-number="4444"></td>
        <td id="LC4444" class="blob-code blob-code-inner js-file-line">        std::string m_fieldName{<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>};</td>
      </tr>
      <tr>
        <td id="L4445" class="blob-num js-line-number" data-line-number="4445"></td>
        <td id="LC4445" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">uint32_t</span> m_fieldIdentifier{<span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L4446" class="blob-num js-line-number" data-line-number="4446"></td>
        <td id="LC4446" class="blob-code blob-code-inner js-file-line">        std::string m_defaultInitializationValue{<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>};</td>
      </tr>
      <tr>
        <td id="L4447" class="blob-num js-line-number" data-line-number="4447"></td>
        <td id="LC4447" class="blob-code blob-code-inner js-file-line">    };</td>
      </tr>
      <tr>
        <td id="L4448" class="blob-num js-line-number" data-line-number="4448"></td>
        <td id="LC4448" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4449" class="blob-num js-line-number" data-line-number="4449"></td>
        <td id="LC4449" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L4450" class="blob-num js-line-number" data-line-number="4450"></td>
        <td id="LC4450" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">MetaMessage</span>()                    = <span class="pl-k">default</span>;</td>
      </tr>
      <tr>
        <td id="L4451" class="blob-num js-line-number" data-line-number="4451"></td>
        <td id="LC4451" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">MetaMessage</span>(<span class="pl-k">const</span> MetaMessage &amp;) = <span class="pl-k">default</span>;</td>
      </tr>
      <tr>
        <td id="L4452" class="blob-num js-line-number" data-line-number="4452"></td>
        <td id="LC4452" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">MetaMessage</span>(MetaMessage &amp;&amp;)      = <span class="pl-k">default</span>;</td>
      </tr>
      <tr>
        <td id="L4453" class="blob-num js-line-number" data-line-number="4453"></td>
        <td id="LC4453" class="blob-code blob-code-inner js-file-line">    MetaMessage &amp;<span class="pl-k">operator</span>=(<span class="pl-k">const</span> MetaMessage &amp;) = <span class="pl-k">default</span>;</td>
      </tr>
      <tr>
        <td id="L4454" class="blob-num js-line-number" data-line-number="4454"></td>
        <td id="LC4454" class="blob-code blob-code-inner js-file-line">    MetaMessage &amp;<span class="pl-k">operator</span>=(MetaMessage &amp;&amp;) = <span class="pl-k">default</span>;</td>
      </tr>
      <tr>
        <td id="L4455" class="blob-num js-line-number" data-line-number="4455"></td>
        <td id="LC4455" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4456" class="blob-num js-line-number" data-line-number="4456"></td>
        <td id="LC4456" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L4457" class="blob-num js-line-number" data-line-number="4457"></td>
        <td id="LC4457" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * This method adds a metafield to this meta message.</span></td>
      </tr>
      <tr>
        <td id="L4458" class="blob-num js-line-number" data-line-number="4458"></td>
        <td id="LC4458" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     *</span></td>
      </tr>
      <tr>
        <td id="L4459" class="blob-num js-line-number" data-line-number="4459"></td>
        <td id="LC4459" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param mf Meta field to be added.</span></td>
      </tr>
      <tr>
        <td id="L4460" class="blob-num js-line-number" data-line-number="4460"></td>
        <td id="LC4460" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @return Reference to this instance.</span></td>
      </tr>
      <tr>
        <td id="L4461" class="blob-num js-line-number" data-line-number="4461"></td>
        <td id="LC4461" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L4462" class="blob-num js-line-number" data-line-number="4462"></td>
        <td id="LC4462" class="blob-code blob-code-inner js-file-line">    MetaMessage &amp;<span class="pl-en">add</span>(MetaField &amp;&amp;mf) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L4463" class="blob-num js-line-number" data-line-number="4463"></td>
        <td id="LC4463" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4464" class="blob-num js-line-number" data-line-number="4464"></td>
        <td id="LC4464" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L4465" class="blob-num js-line-number" data-line-number="4465"></td>
        <td id="LC4465" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * This method returns a vector of current meta fields.</span></td>
      </tr>
      <tr>
        <td id="L4466" class="blob-num js-line-number" data-line-number="4466"></td>
        <td id="LC4466" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     *</span></td>
      </tr>
      <tr>
        <td id="L4467" class="blob-num js-line-number" data-line-number="4467"></td>
        <td id="LC4467" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @return Meta fields from this meta message.</span></td>
      </tr>
      <tr>
        <td id="L4468" class="blob-num js-line-number" data-line-number="4468"></td>
        <td id="LC4468" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L4469" class="blob-num js-line-number" data-line-number="4469"></td>
        <td id="LC4469" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> std::vector&lt;MetaField&gt; &amp;<span class="pl-en">listOfMetaFields</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L4470" class="blob-num js-line-number" data-line-number="4470"></td>
        <td id="LC4470" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4471" class="blob-num js-line-number" data-line-number="4471"></td>
        <td id="LC4471" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L4472" class="blob-num js-line-number" data-line-number="4472"></td>
        <td id="LC4472" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * This method can be used to visit this instance and propagate information</span></td>
      </tr>
      <tr>
        <td id="L4473" class="blob-num js-line-number" data-line-number="4473"></td>
        <td id="LC4473" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * details about the contained fields.</span></td>
      </tr>
      <tr>
        <td id="L4474" class="blob-num js-line-number" data-line-number="4474"></td>
        <td id="LC4474" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     *</span></td>
      </tr>
      <tr>
        <td id="L4475" class="blob-num js-line-number" data-line-number="4475"></td>
        <td id="LC4475" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param visit std::function object to be called to visit this MetaMessage.</span></td>
      </tr>
      <tr>
        <td id="L4476" class="blob-num js-line-number" data-line-number="4476"></td>
        <td id="LC4476" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L4477" class="blob-num js-line-number" data-line-number="4477"></td>
        <td id="LC4477" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">accept</span>(<span class="pl-k">const</span> std::function&lt;<span class="pl-k">void</span>(<span class="pl-k">const</span> MetaMessage &amp;)&gt; &amp;visit);</td>
      </tr>
      <tr>
        <td id="L4478" class="blob-num js-line-number" data-line-number="4478"></td>
        <td id="LC4478" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4479" class="blob-num js-line-number" data-line-number="4479"></td>
        <td id="LC4479" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L4480" class="blob-num js-line-number" data-line-number="4480"></td>
        <td id="LC4480" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @return Package name.</span></td>
      </tr>
      <tr>
        <td id="L4481" class="blob-num js-line-number" data-line-number="4481"></td>
        <td id="LC4481" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L4482" class="blob-num js-line-number" data-line-number="4482"></td>
        <td id="LC4482" class="blob-code blob-code-inner js-file-line">    std::string <span class="pl-en">packageName</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L4483" class="blob-num js-line-number" data-line-number="4483"></td>
        <td id="LC4483" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L4484" class="blob-num js-line-number" data-line-number="4484"></td>
        <td id="LC4484" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * This method sets the package name.</span></td>
      </tr>
      <tr>
        <td id="L4485" class="blob-num js-line-number" data-line-number="4485"></td>
        <td id="LC4485" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     *</span></td>
      </tr>
      <tr>
        <td id="L4486" class="blob-num js-line-number" data-line-number="4486"></td>
        <td id="LC4486" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param v Package name for this message.</span></td>
      </tr>
      <tr>
        <td id="L4487" class="blob-num js-line-number" data-line-number="4487"></td>
        <td id="LC4487" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @return Reference to this instance.</span></td>
      </tr>
      <tr>
        <td id="L4488" class="blob-num js-line-number" data-line-number="4488"></td>
        <td id="LC4488" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L4489" class="blob-num js-line-number" data-line-number="4489"></td>
        <td id="LC4489" class="blob-code blob-code-inner js-file-line">    MetaMessage &amp;<span class="pl-en">packageName</span>(<span class="pl-k">const</span> std::string &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L4490" class="blob-num js-line-number" data-line-number="4490"></td>
        <td id="LC4490" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4491" class="blob-num js-line-number" data-line-number="4491"></td>
        <td id="LC4491" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L4492" class="blob-num js-line-number" data-line-number="4492"></td>
        <td id="LC4492" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @return Message name.</span></td>
      </tr>
      <tr>
        <td id="L4493" class="blob-num js-line-number" data-line-number="4493"></td>
        <td id="LC4493" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L4494" class="blob-num js-line-number" data-line-number="4494"></td>
        <td id="LC4494" class="blob-code blob-code-inner js-file-line">    std::string <span class="pl-en">messageName</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L4495" class="blob-num js-line-number" data-line-number="4495"></td>
        <td id="LC4495" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L4496" class="blob-num js-line-number" data-line-number="4496"></td>
        <td id="LC4496" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * This method sets the message name.</span></td>
      </tr>
      <tr>
        <td id="L4497" class="blob-num js-line-number" data-line-number="4497"></td>
        <td id="LC4497" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     *</span></td>
      </tr>
      <tr>
        <td id="L4498" class="blob-num js-line-number" data-line-number="4498"></td>
        <td id="LC4498" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param v Message name for this message.</span></td>
      </tr>
      <tr>
        <td id="L4499" class="blob-num js-line-number" data-line-number="4499"></td>
        <td id="LC4499" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @return Reference to this instance.</span></td>
      </tr>
      <tr>
        <td id="L4500" class="blob-num js-line-number" data-line-number="4500"></td>
        <td id="LC4500" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L4501" class="blob-num js-line-number" data-line-number="4501"></td>
        <td id="LC4501" class="blob-code blob-code-inner js-file-line">    MetaMessage &amp;<span class="pl-en">messageName</span>(<span class="pl-k">const</span> std::string &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L4502" class="blob-num js-line-number" data-line-number="4502"></td>
        <td id="LC4502" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4503" class="blob-num js-line-number" data-line-number="4503"></td>
        <td id="LC4503" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L4504" class="blob-num js-line-number" data-line-number="4504"></td>
        <td id="LC4504" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @return Message identifier.</span></td>
      </tr>
      <tr>
        <td id="L4505" class="blob-num js-line-number" data-line-number="4505"></td>
        <td id="LC4505" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L4506" class="blob-num js-line-number" data-line-number="4506"></td>
        <td id="LC4506" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">int32_t</span> <span class="pl-en">messageIdentifier</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L4507" class="blob-num js-line-number" data-line-number="4507"></td>
        <td id="LC4507" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L4508" class="blob-num js-line-number" data-line-number="4508"></td>
        <td id="LC4508" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * This method sets the message identifier.</span></td>
      </tr>
      <tr>
        <td id="L4509" class="blob-num js-line-number" data-line-number="4509"></td>
        <td id="LC4509" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     *</span></td>
      </tr>
      <tr>
        <td id="L4510" class="blob-num js-line-number" data-line-number="4510"></td>
        <td id="LC4510" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param v Message identifier for this message.</span></td>
      </tr>
      <tr>
        <td id="L4511" class="blob-num js-line-number" data-line-number="4511"></td>
        <td id="LC4511" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @return Reference to this instance.</span></td>
      </tr>
      <tr>
        <td id="L4512" class="blob-num js-line-number" data-line-number="4512"></td>
        <td id="LC4512" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L4513" class="blob-num js-line-number" data-line-number="4513"></td>
        <td id="LC4513" class="blob-code blob-code-inner js-file-line">    MetaMessage &amp;<span class="pl-en">messageIdentifier</span>(<span class="pl-c1">int32_t</span> v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L4514" class="blob-num js-line-number" data-line-number="4514"></td>
        <td id="LC4514" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4515" class="blob-num js-line-number" data-line-number="4515"></td>
        <td id="LC4515" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L4516" class="blob-num js-line-number" data-line-number="4516"></td>
        <td id="LC4516" class="blob-code blob-code-inner js-file-line">    std::string m_packageName{<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>};</td>
      </tr>
      <tr>
        <td id="L4517" class="blob-num js-line-number" data-line-number="4517"></td>
        <td id="LC4517" class="blob-code blob-code-inner js-file-line">    std::string m_messageName{<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>};</td>
      </tr>
      <tr>
        <td id="L4518" class="blob-num js-line-number" data-line-number="4518"></td>
        <td id="LC4518" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">int32_t</span> m_messageIdentifier{<span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L4519" class="blob-num js-line-number" data-line-number="4519"></td>
        <td id="LC4519" class="blob-code blob-code-inner js-file-line">    std::vector&lt;MetaField&gt; m_listOfMetaFields{};</td>
      </tr>
      <tr>
        <td id="L4520" class="blob-num js-line-number" data-line-number="4520"></td>
        <td id="LC4520" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L4521" class="blob-num js-line-number" data-line-number="4521"></td>
        <td id="LC4521" class="blob-code blob-code-inner js-file-line">} <span class="pl-c"><span class="pl-c">//</span> namespace cluon</span></td>
      </tr>
      <tr>
        <td id="L4522" class="blob-num js-line-number" data-line-number="4522"></td>
        <td id="LC4522" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4523" class="blob-num js-line-number" data-line-number="4523"></td>
        <td id="LC4523" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L4524" class="blob-num js-line-number" data-line-number="4524"></td>
        <td id="LC4524" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L4525" class="blob-num js-line-number" data-line-number="4525"></td>
        <td id="LC4525" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Copyright (C) 2017-2018  Christian Berger</span></td>
      </tr>
      <tr>
        <td id="L4526" class="blob-num js-line-number" data-line-number="4526"></td>
        <td id="LC4526" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L4527" class="blob-num js-line-number" data-line-number="4527"></td>
        <td id="LC4527" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is free software: you can redistribute it and/or modify</span></td>
      </tr>
      <tr>
        <td id="L4528" class="blob-num js-line-number" data-line-number="4528"></td>
        <td id="LC4528" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * it under the terms of the GNU General Public License as published by</span></td>
      </tr>
      <tr>
        <td id="L4529" class="blob-num js-line-number" data-line-number="4529"></td>
        <td id="LC4529" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * the Free Software Foundation, either version 3 of the License, or</span></td>
      </tr>
      <tr>
        <td id="L4530" class="blob-num js-line-number" data-line-number="4530"></td>
        <td id="LC4530" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * (at your option) any later version.</span></td>
      </tr>
      <tr>
        <td id="L4531" class="blob-num js-line-number" data-line-number="4531"></td>
        <td id="LC4531" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L4532" class="blob-num js-line-number" data-line-number="4532"></td>
        <td id="LC4532" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is distributed in the hope that it will be useful,</span></td>
      </tr>
      <tr>
        <td id="L4533" class="blob-num js-line-number" data-line-number="4533"></td>
        <td id="LC4533" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></td>
      </tr>
      <tr>
        <td id="L4534" class="blob-num js-line-number" data-line-number="4534"></td>
        <td id="LC4534" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></td>
      </tr>
      <tr>
        <td id="L4535" class="blob-num js-line-number" data-line-number="4535"></td>
        <td id="LC4535" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * GNU General Public License for more details.</span></td>
      </tr>
      <tr>
        <td id="L4536" class="blob-num js-line-number" data-line-number="4536"></td>
        <td id="LC4536" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L4537" class="blob-num js-line-number" data-line-number="4537"></td>
        <td id="LC4537" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * You should have received a copy of the GNU General Public License</span></td>
      </tr>
      <tr>
        <td id="L4538" class="blob-num js-line-number" data-line-number="4538"></td>
        <td id="LC4538" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></td>
      </tr>
      <tr>
        <td id="L4539" class="blob-num js-line-number" data-line-number="4539"></td>
        <td id="LC4539" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L4540" class="blob-num js-line-number" data-line-number="4540"></td>
        <td id="LC4540" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4541" class="blob-num js-line-number" data-line-number="4541"></td>
        <td id="LC4541" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifndef</span> MESSAGEPARSER_HPP</td>
      </tr>
      <tr>
        <td id="L4542" class="blob-num js-line-number" data-line-number="4542"></td>
        <td id="LC4542" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">define</span> <span class="pl-en">MESSAGEPARSER_HPP</span></td>
      </tr>
      <tr>
        <td id="L4543" class="blob-num js-line-number" data-line-number="4543"></td>
        <td id="LC4543" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4544" class="blob-num js-line-number" data-line-number="4544"></td>
        <td id="LC4544" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/MetaMessage.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L4545" class="blob-num js-line-number" data-line-number="4545"></td>
        <td id="LC4545" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/cluon.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L4546" class="blob-num js-line-number" data-line-number="4546"></td>
        <td id="LC4546" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4547" class="blob-num js-line-number" data-line-number="4547"></td>
        <td id="LC4547" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>cstdint<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L4548" class="blob-num js-line-number" data-line-number="4548"></td>
        <td id="LC4548" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>string<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L4549" class="blob-num js-line-number" data-line-number="4549"></td>
        <td id="LC4549" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>utility<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L4550" class="blob-num js-line-number" data-line-number="4550"></td>
        <td id="LC4550" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>vector<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L4551" class="blob-num js-line-number" data-line-number="4551"></td>
        <td id="LC4551" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4552" class="blob-num js-line-number" data-line-number="4552"></td>
        <td id="LC4552" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">cluon</span> {</td>
      </tr>
      <tr>
        <td id="L4553" class="blob-num js-line-number" data-line-number="4553"></td>
        <td id="LC4553" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L4554" class="blob-num js-line-number" data-line-number="4554"></td>
        <td id="LC4554" class="blob-code blob-code-inner js-file-line"><span class="pl-c">This class provides a parser for message specifications in .odvd format. The</span></td>
      </tr>
      <tr>
        <td id="L4555" class="blob-num js-line-number" data-line-number="4555"></td>
        <td id="LC4555" class="blob-code blob-code-inner js-file-line"><span class="pl-c">format is inspired by Google Protobuf (https://developers.google.com/protocol-buffers/)</span></td>
      </tr>
      <tr>
        <td id="L4556" class="blob-num js-line-number" data-line-number="4556"></td>
        <td id="LC4556" class="blob-code blob-code-inner js-file-line"><span class="pl-c">but simplified to enforce backwards and forwards compatibility next to</span></td>
      </tr>
      <tr>
        <td id="L4557" class="blob-num js-line-number" data-line-number="4557"></td>
        <td id="LC4557" class="blob-code blob-code-inner js-file-line"><span class="pl-c">numerical message identifiers.</span></td>
      </tr>
      <tr>
        <td id="L4558" class="blob-num js-line-number" data-line-number="4558"></td>
        <td id="LC4558" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L4559" class="blob-num js-line-number" data-line-number="4559"></td>
        <td id="LC4559" class="blob-code blob-code-inner js-file-line"><span class="pl-c">This message specification format is also used by OpenDaVINCI (http://code.opendavinci.org).</span></td>
      </tr>
      <tr>
        <td id="L4560" class="blob-num js-line-number" data-line-number="4560"></td>
        <td id="LC4560" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L4561" class="blob-num js-line-number" data-line-number="4561"></td>
        <td id="LC4561" class="blob-code blob-code-inner js-file-line"><span class="pl-c">The parser is based on https://github.com/yhirose/cpp-peglib.</span></td>
      </tr>
      <tr>
        <td id="L4562" class="blob-num js-line-number" data-line-number="4562"></td>
        <td id="LC4562" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L4563" class="blob-num js-line-number" data-line-number="4563"></td>
        <td id="LC4563" class="blob-code blob-code-inner js-file-line"><span class="pl-c">An example for a .odvd compliant message is demonstrated in the following:</span></td>
      </tr>
      <tr>
        <td id="L4564" class="blob-num js-line-number" data-line-number="4564"></td>
        <td id="LC4564" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L4565" class="blob-num js-line-number" data-line-number="4565"></td>
        <td id="LC4565" class="blob-code blob-code-inner js-file-line"><span class="pl-c">\code{.cpp}</span></td>
      </tr>
      <tr>
        <td id="L4566" class="blob-num js-line-number" data-line-number="4566"></td>
        <td id="LC4566" class="blob-code blob-code-inner js-file-line"><span class="pl-c">const char *spec = R&quot;(</span></td>
      </tr>
      <tr>
        <td id="L4567" class="blob-num js-line-number" data-line-number="4567"></td>
        <td id="LC4567" class="blob-code blob-code-inner js-file-line"><span class="pl-c">message myMessage.SubName [id = 1] {</span></td>
      </tr>
      <tr>
        <td id="L4568" class="blob-num js-line-number" data-line-number="4568"></td>
        <td id="LC4568" class="blob-code blob-code-inner js-file-line"><span class="pl-c">    uint8 field1 [id = 1];</span></td>
      </tr>
      <tr>
        <td id="L4569" class="blob-num js-line-number" data-line-number="4569"></td>
        <td id="LC4569" class="blob-code blob-code-inner js-file-line"><span class="pl-c">    uint32 field2 [id = 2];</span></td>
      </tr>
      <tr>
        <td id="L4570" class="blob-num js-line-number" data-line-number="4570"></td>
        <td id="LC4570" class="blob-code blob-code-inner js-file-line"><span class="pl-c">    int64 field3 [id = 3];</span></td>
      </tr>
      <tr>
        <td id="L4571" class="blob-num js-line-number" data-line-number="4571"></td>
        <td id="LC4571" class="blob-code blob-code-inner js-file-line"><span class="pl-c">    string field4 [id = 4];</span></td>
      </tr>
      <tr>
        <td id="L4572" class="blob-num js-line-number" data-line-number="4572"></td>
        <td id="LC4572" class="blob-code blob-code-inner js-file-line"><span class="pl-c">}</span></td>
      </tr>
      <tr>
        <td id="L4573" class="blob-num js-line-number" data-line-number="4573"></td>
        <td id="LC4573" class="blob-code blob-code-inner js-file-line"><span class="pl-c">)&quot;;</span></td>
      </tr>
      <tr>
        <td id="L4574" class="blob-num js-line-number" data-line-number="4574"></td>
        <td id="LC4574" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L4575" class="blob-num js-line-number" data-line-number="4575"></td>
        <td id="LC4575" class="blob-code blob-code-inner js-file-line"><span class="pl-c">cluon::MessageParser mp;</span></td>
      </tr>
      <tr>
        <td id="L4576" class="blob-num js-line-number" data-line-number="4576"></td>
        <td id="LC4576" class="blob-code blob-code-inner js-file-line"><span class="pl-c">auto retVal = mp.parse(std::string(spec));</span></td>
      </tr>
      <tr>
        <td id="L4577" class="blob-num js-line-number" data-line-number="4577"></td>
        <td id="LC4577" class="blob-code blob-code-inner js-file-line"><span class="pl-c">if (retVal.second == cluon::MessageParser::MessageParserErrorCodes::NO_ERROR) {</span></td>
      </tr>
      <tr>
        <td id="L4578" class="blob-num js-line-number" data-line-number="4578"></td>
        <td id="LC4578" class="blob-code blob-code-inner js-file-line"><span class="pl-c">    auto listOfMessages = retVal.first;</span></td>
      </tr>
      <tr>
        <td id="L4579" class="blob-num js-line-number" data-line-number="4579"></td>
        <td id="LC4579" class="blob-code blob-code-inner js-file-line"><span class="pl-c">    for (auto message : listOfMessages) {</span></td>
      </tr>
      <tr>
        <td id="L4580" class="blob-num js-line-number" data-line-number="4580"></td>
        <td id="LC4580" class="blob-code blob-code-inner js-file-line"><span class="pl-c">        message.accept([](const cluon::MetaMessage &amp;mm){ std::cout &lt;&lt; &quot;Message name = &quot; &lt;&lt; mm.messageName() &lt;&lt;</span></td>
      </tr>
      <tr>
        <td id="L4581" class="blob-num js-line-number" data-line-number="4581"></td>
        <td id="LC4581" class="blob-code blob-code-inner js-file-line"><span class="pl-c">std::endl; });</span></td>
      </tr>
      <tr>
        <td id="L4582" class="blob-num js-line-number" data-line-number="4582"></td>
        <td id="LC4582" class="blob-code blob-code-inner js-file-line"><span class="pl-c">    }</span></td>
      </tr>
      <tr>
        <td id="L4583" class="blob-num js-line-number" data-line-number="4583"></td>
        <td id="LC4583" class="blob-code blob-code-inner js-file-line"><span class="pl-c">}</span></td>
      </tr>
      <tr>
        <td id="L4584" class="blob-num js-line-number" data-line-number="4584"></td>
        <td id="LC4584" class="blob-code blob-code-inner js-file-line"><span class="pl-c">\endcode</span></td>
      </tr>
      <tr>
        <td id="L4585" class="blob-num js-line-number" data-line-number="4585"></td>
        <td id="LC4585" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L4586" class="blob-num js-line-number" data-line-number="4586"></td>
        <td id="LC4586" class="blob-code blob-code-inner js-file-line"><span class="pl-k">class</span> <span class="pl-en">LIBCLUON_API</span> MessageParser {</td>
      </tr>
      <tr>
        <td id="L4587" class="blob-num js-line-number" data-line-number="4587"></td>
        <td id="LC4587" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L4588" class="blob-num js-line-number" data-line-number="4588"></td>
        <td id="LC4588" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">enum</span> MessageParserErrorCodes : <span class="pl-c1">uint8_t</span> { NO_ERROR = <span class="pl-c1">0</span>, SYNTAX_ERROR = <span class="pl-c1">1</span>, DUPLICATE_IDENTIFIERS = <span class="pl-c1">2</span> };</td>
      </tr>
      <tr>
        <td id="L4589" class="blob-num js-line-number" data-line-number="4589"></td>
        <td id="LC4589" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4590" class="blob-num js-line-number" data-line-number="4590"></td>
        <td id="LC4590" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L4591" class="blob-num js-line-number" data-line-number="4591"></td>
        <td id="LC4591" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">MessageParser</span>(<span class="pl-k">const</span> MessageParser &amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L4592" class="blob-num js-line-number" data-line-number="4592"></td>
        <td id="LC4592" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">MessageParser</span>(MessageParser &amp;&amp;)      = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L4593" class="blob-num js-line-number" data-line-number="4593"></td>
        <td id="LC4593" class="blob-code blob-code-inner js-file-line">    MessageParser &amp;<span class="pl-k">operator</span>=(<span class="pl-k">const</span> MessageParser &amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L4594" class="blob-num js-line-number" data-line-number="4594"></td>
        <td id="LC4594" class="blob-code blob-code-inner js-file-line">    MessageParser &amp;<span class="pl-k">operator</span>=(MessageParser &amp;&amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L4595" class="blob-num js-line-number" data-line-number="4595"></td>
        <td id="LC4595" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4596" class="blob-num js-line-number" data-line-number="4596"></td>
        <td id="LC4596" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L4597" class="blob-num js-line-number" data-line-number="4597"></td>
        <td id="LC4597" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">MessageParser</span>() = <span class="pl-k">default</span>;</td>
      </tr>
      <tr>
        <td id="L4598" class="blob-num js-line-number" data-line-number="4598"></td>
        <td id="LC4598" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4599" class="blob-num js-line-number" data-line-number="4599"></td>
        <td id="LC4599" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L4600" class="blob-num js-line-number" data-line-number="4600"></td>
        <td id="LC4600" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * This method tries to parse the given message specification.</span></td>
      </tr>
      <tr>
        <td id="L4601" class="blob-num js-line-number" data-line-number="4601"></td>
        <td id="LC4601" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     *</span></td>
      </tr>
      <tr>
        <td id="L4602" class="blob-num js-line-number" data-line-number="4602"></td>
        <td id="LC4602" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param input Message specification.</span></td>
      </tr>
      <tr>
        <td id="L4603" class="blob-num js-line-number" data-line-number="4603"></td>
        <td id="LC4603" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @return Pair: List of cluon::MetaMessages describing the specified messages and error code:</span></td>
      </tr>
      <tr>
        <td id="L4604" class="blob-num js-line-number" data-line-number="4604"></td>
        <td id="LC4604" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     *         NO_ERROR: The given specification could be parsed successfully (list moght be non-empty).</span></td>
      </tr>
      <tr>
        <td id="L4605" class="blob-num js-line-number" data-line-number="4605"></td>
        <td id="LC4605" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     *         SYNTAX_ERROR: The given specification could not be parsed successfully (list is empty).</span></td>
      </tr>
      <tr>
        <td id="L4606" class="blob-num js-line-number" data-line-number="4606"></td>
        <td id="LC4606" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     *         DUPLICATE_IDENTIFIERS: The given specification contains ambiguous names or identifiers (list is empty).</span></td>
      </tr>
      <tr>
        <td id="L4607" class="blob-num js-line-number" data-line-number="4607"></td>
        <td id="LC4607" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L4608" class="blob-num js-line-number" data-line-number="4608"></td>
        <td id="LC4608" class="blob-code blob-code-inner js-file-line">    std::pair&lt;std::vector&lt;MetaMessage&gt;, MessageParserErrorCodes&gt; <span class="pl-en">parse</span>(<span class="pl-k">const</span> std::string &amp;input);</td>
      </tr>
      <tr>
        <td id="L4609" class="blob-num js-line-number" data-line-number="4609"></td>
        <td id="LC4609" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L4610" class="blob-num js-line-number" data-line-number="4610"></td>
        <td id="LC4610" class="blob-code blob-code-inner js-file-line">} <span class="pl-c"><span class="pl-c">//</span> namespace cluon</span></td>
      </tr>
      <tr>
        <td id="L4611" class="blob-num js-line-number" data-line-number="4611"></td>
        <td id="LC4611" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4612" class="blob-num js-line-number" data-line-number="4612"></td>
        <td id="LC4612" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L4613" class="blob-num js-line-number" data-line-number="4613"></td>
        <td id="LC4613" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L4614" class="blob-num js-line-number" data-line-number="4614"></td>
        <td id="LC4614" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Copyright (C) 2017-2018  Christian Berger</span></td>
      </tr>
      <tr>
        <td id="L4615" class="blob-num js-line-number" data-line-number="4615"></td>
        <td id="LC4615" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L4616" class="blob-num js-line-number" data-line-number="4616"></td>
        <td id="LC4616" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is free software: you can redistribute it and/or modify</span></td>
      </tr>
      <tr>
        <td id="L4617" class="blob-num js-line-number" data-line-number="4617"></td>
        <td id="LC4617" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * it under the terms of the GNU General Public License as published by</span></td>
      </tr>
      <tr>
        <td id="L4618" class="blob-num js-line-number" data-line-number="4618"></td>
        <td id="LC4618" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * the Free Software Foundation, either version 3 of the License, or</span></td>
      </tr>
      <tr>
        <td id="L4619" class="blob-num js-line-number" data-line-number="4619"></td>
        <td id="LC4619" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * (at your option) any later version.</span></td>
      </tr>
      <tr>
        <td id="L4620" class="blob-num js-line-number" data-line-number="4620"></td>
        <td id="LC4620" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L4621" class="blob-num js-line-number" data-line-number="4621"></td>
        <td id="LC4621" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is distributed in the hope that it will be useful,</span></td>
      </tr>
      <tr>
        <td id="L4622" class="blob-num js-line-number" data-line-number="4622"></td>
        <td id="LC4622" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></td>
      </tr>
      <tr>
        <td id="L4623" class="blob-num js-line-number" data-line-number="4623"></td>
        <td id="LC4623" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></td>
      </tr>
      <tr>
        <td id="L4624" class="blob-num js-line-number" data-line-number="4624"></td>
        <td id="LC4624" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * GNU General Public License for more details.</span></td>
      </tr>
      <tr>
        <td id="L4625" class="blob-num js-line-number" data-line-number="4625"></td>
        <td id="LC4625" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L4626" class="blob-num js-line-number" data-line-number="4626"></td>
        <td id="LC4626" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * You should have received a copy of the GNU General Public License</span></td>
      </tr>
      <tr>
        <td id="L4627" class="blob-num js-line-number" data-line-number="4627"></td>
        <td id="LC4627" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></td>
      </tr>
      <tr>
        <td id="L4628" class="blob-num js-line-number" data-line-number="4628"></td>
        <td id="LC4628" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L4629" class="blob-num js-line-number" data-line-number="4629"></td>
        <td id="LC4629" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4630" class="blob-num js-line-number" data-line-number="4630"></td>
        <td id="LC4630" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifndef</span> UDPPACKETSIZECONSTRAINTS_H</td>
      </tr>
      <tr>
        <td id="L4631" class="blob-num js-line-number" data-line-number="4631"></td>
        <td id="LC4631" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">define</span> <span class="pl-en">UDPPACKETSIZECONSTRAINTS_H</span></td>
      </tr>
      <tr>
        <td id="L4632" class="blob-num js-line-number" data-line-number="4632"></td>
        <td id="LC4632" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4633" class="blob-num js-line-number" data-line-number="4633"></td>
        <td id="LC4633" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>cstdint<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L4634" class="blob-num js-line-number" data-line-number="4634"></td>
        <td id="LC4634" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4635" class="blob-num js-line-number" data-line-number="4635"></td>
        <td id="LC4635" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> clang-format off</span></td>
      </tr>
      <tr>
        <td id="L4636" class="blob-num js-line-number" data-line-number="4636"></td>
        <td id="LC4636" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">cluon</span> {</td>
      </tr>
      <tr>
        <td id="L4637" class="blob-num js-line-number" data-line-number="4637"></td>
        <td id="LC4637" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">enum</span> <span class="pl-k">class</span> <span class="pl-en">UDPPacketSizeConstraints</span> : <span class="pl-c1">uint16_t</span> {</td>
      </tr>
      <tr>
        <td id="L4638" class="blob-num js-line-number" data-line-number="4638"></td>
        <td id="LC4638" class="blob-code blob-code-inner js-file-line">        SIZE_IPv4_HEADER    = <span class="pl-c1">20</span>,</td>
      </tr>
      <tr>
        <td id="L4639" class="blob-num js-line-number" data-line-number="4639"></td>
        <td id="LC4639" class="blob-code blob-code-inner js-file-line">        SIZE_UDP_HEADER     = <span class="pl-c1">8</span>,</td>
      </tr>
      <tr>
        <td id="L4640" class="blob-num js-line-number" data-line-number="4640"></td>
        <td id="LC4640" class="blob-code blob-code-inner js-file-line">        MAX_SIZE_UDP_PACKET = <span class="pl-c1">0xFFFF</span>, };</td>
      </tr>
      <tr>
        <td id="L4641" class="blob-num js-line-number" data-line-number="4641"></td>
        <td id="LC4641" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L4642" class="blob-num js-line-number" data-line-number="4642"></td>
        <td id="LC4642" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> clang-format on</span></td>
      </tr>
      <tr>
        <td id="L4643" class="blob-num js-line-number" data-line-number="4643"></td>
        <td id="LC4643" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4644" class="blob-num js-line-number" data-line-number="4644"></td>
        <td id="LC4644" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L4645" class="blob-num js-line-number" data-line-number="4645"></td>
        <td id="LC4645" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L4646" class="blob-num js-line-number" data-line-number="4646"></td>
        <td id="LC4646" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Copyright (C) 2017-2018  Christian Berger</span></td>
      </tr>
      <tr>
        <td id="L4647" class="blob-num js-line-number" data-line-number="4647"></td>
        <td id="LC4647" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L4648" class="blob-num js-line-number" data-line-number="4648"></td>
        <td id="LC4648" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is free software: you can redistribute it and/or modify</span></td>
      </tr>
      <tr>
        <td id="L4649" class="blob-num js-line-number" data-line-number="4649"></td>
        <td id="LC4649" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * it under the terms of the GNU General Public License as published by</span></td>
      </tr>
      <tr>
        <td id="L4650" class="blob-num js-line-number" data-line-number="4650"></td>
        <td id="LC4650" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * the Free Software Foundation, either version 3 of the License, or</span></td>
      </tr>
      <tr>
        <td id="L4651" class="blob-num js-line-number" data-line-number="4651"></td>
        <td id="LC4651" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * (at your option) any later version.</span></td>
      </tr>
      <tr>
        <td id="L4652" class="blob-num js-line-number" data-line-number="4652"></td>
        <td id="LC4652" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L4653" class="blob-num js-line-number" data-line-number="4653"></td>
        <td id="LC4653" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is distributed in the hope that it will be useful,</span></td>
      </tr>
      <tr>
        <td id="L4654" class="blob-num js-line-number" data-line-number="4654"></td>
        <td id="LC4654" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></td>
      </tr>
      <tr>
        <td id="L4655" class="blob-num js-line-number" data-line-number="4655"></td>
        <td id="LC4655" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></td>
      </tr>
      <tr>
        <td id="L4656" class="blob-num js-line-number" data-line-number="4656"></td>
        <td id="LC4656" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * GNU General Public License for more details.</span></td>
      </tr>
      <tr>
        <td id="L4657" class="blob-num js-line-number" data-line-number="4657"></td>
        <td id="LC4657" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L4658" class="blob-num js-line-number" data-line-number="4658"></td>
        <td id="LC4658" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * You should have received a copy of the GNU General Public License</span></td>
      </tr>
      <tr>
        <td id="L4659" class="blob-num js-line-number" data-line-number="4659"></td>
        <td id="LC4659" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></td>
      </tr>
      <tr>
        <td id="L4660" class="blob-num js-line-number" data-line-number="4660"></td>
        <td id="LC4660" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L4661" class="blob-num js-line-number" data-line-number="4661"></td>
        <td id="LC4661" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4662" class="blob-num js-line-number" data-line-number="4662"></td>
        <td id="LC4662" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifndef</span> UDPSENDER_HPP</td>
      </tr>
      <tr>
        <td id="L4663" class="blob-num js-line-number" data-line-number="4663"></td>
        <td id="LC4663" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">define</span> <span class="pl-en">UDPSENDER_HPP</span></td>
      </tr>
      <tr>
        <td id="L4664" class="blob-num js-line-number" data-line-number="4664"></td>
        <td id="LC4664" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4665" class="blob-num js-line-number" data-line-number="4665"></td>
        <td id="LC4665" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/cluon.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L4666" class="blob-num js-line-number" data-line-number="4666"></td>
        <td id="LC4666" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4667" class="blob-num js-line-number" data-line-number="4667"></td>
        <td id="LC4667" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> clang-format off</span></td>
      </tr>
      <tr>
        <td id="L4668" class="blob-num js-line-number" data-line-number="4668"></td>
        <td id="LC4668" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifdef</span> WIN32</td>
      </tr>
      <tr>
        <td id="L4669" class="blob-num js-line-number" data-line-number="4669"></td>
        <td id="LC4669" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>Winsock2.h<span class="pl-pds">&gt;</span></span> <span class="pl-c"><span class="pl-c">//</span> for WSAStartUp</span></td>
      </tr>
      <tr>
        <td id="L4670" class="blob-num js-line-number" data-line-number="4670"></td>
        <td id="LC4670" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>Ws2def.h<span class="pl-pds">&gt;</span></span>   <span class="pl-c"><span class="pl-c">//</span> for struct sockaddr_in</span></td>
      </tr>
      <tr>
        <td id="L4671" class="blob-num js-line-number" data-line-number="4671"></td>
        <td id="LC4671" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>ws2tcpip.h<span class="pl-pds">&gt;</span></span> <span class="pl-c"><span class="pl-c">//</span> for SOCKET</span></td>
      </tr>
      <tr>
        <td id="L4672" class="blob-num js-line-number" data-line-number="4672"></td>
        <td id="LC4672" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">else</span></td>
      </tr>
      <tr>
        <td id="L4673" class="blob-num js-line-number" data-line-number="4673"></td>
        <td id="LC4673" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>netinet/in.h<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L4674" class="blob-num js-line-number" data-line-number="4674"></td>
        <td id="LC4674" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L4675" class="blob-num js-line-number" data-line-number="4675"></td>
        <td id="LC4675" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> clang-format on</span></td>
      </tr>
      <tr>
        <td id="L4676" class="blob-num js-line-number" data-line-number="4676"></td>
        <td id="LC4676" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4677" class="blob-num js-line-number" data-line-number="4677"></td>
        <td id="LC4677" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>cstdint<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L4678" class="blob-num js-line-number" data-line-number="4678"></td>
        <td id="LC4678" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>mutex<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L4679" class="blob-num js-line-number" data-line-number="4679"></td>
        <td id="LC4679" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>string<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L4680" class="blob-num js-line-number" data-line-number="4680"></td>
        <td id="LC4680" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>utility<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L4681" class="blob-num js-line-number" data-line-number="4681"></td>
        <td id="LC4681" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4682" class="blob-num js-line-number" data-line-number="4682"></td>
        <td id="LC4682" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">cluon</span> {</td>
      </tr>
      <tr>
        <td id="L4683" class="blob-num js-line-number" data-line-number="4683"></td>
        <td id="LC4683" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L4684" class="blob-num js-line-number" data-line-number="4684"></td>
        <td id="LC4684" class="blob-code blob-code-inner js-file-line"><span class="pl-c">To send data using a UDP socket, simply include the header</span></td>
      </tr>
      <tr>
        <td id="L4685" class="blob-num js-line-number" data-line-number="4685"></td>
        <td id="LC4685" class="blob-code blob-code-inner js-file-line"><span class="pl-c">`#include &lt;cluon/UDPSender.hpp&gt;`.</span></td>
      </tr>
      <tr>
        <td id="L4686" class="blob-num js-line-number" data-line-number="4686"></td>
        <td id="LC4686" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L4687" class="blob-num js-line-number" data-line-number="4687"></td>
        <td id="LC4687" class="blob-code blob-code-inner js-file-line"><span class="pl-c">Next, create an instance of class `cluon::UDPSender` as follows:</span></td>
      </tr>
      <tr>
        <td id="L4688" class="blob-num js-line-number" data-line-number="4688"></td>
        <td id="LC4688" class="blob-code blob-code-inner js-file-line"><span class="pl-c">`cluon::UDPSender sender(&quot;127.0.0.1&quot;, 1234);`. The first parameter is of type</span></td>
      </tr>
      <tr>
        <td id="L4689" class="blob-num js-line-number" data-line-number="4689"></td>
        <td id="LC4689" class="blob-code blob-code-inner js-file-line"><span class="pl-c">`std::string` expecting a numerical IPv4 address and the second parameter</span></td>
      </tr>
      <tr>
        <td id="L4690" class="blob-num js-line-number" data-line-number="4690"></td>
        <td id="LC4690" class="blob-code blob-code-inner js-file-line"><span class="pl-c">specifies the UDP port to which the data shall be sent to.</span></td>
      </tr>
      <tr>
        <td id="L4691" class="blob-num js-line-number" data-line-number="4691"></td>
        <td id="LC4691" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L4692" class="blob-num js-line-number" data-line-number="4692"></td>
        <td id="LC4692" class="blob-code blob-code-inner js-file-line"><span class="pl-c">To finally send data, simply call the method `send` supplying the data to be</span></td>
      </tr>
      <tr>
        <td id="L4693" class="blob-num js-line-number" data-line-number="4693"></td>
        <td id="LC4693" class="blob-code blob-code-inner js-file-line"><span class="pl-c">sent: `sender.send(std::move(&quot;Hello World!&quot;)`. Please note that the data is</span></td>
      </tr>
      <tr>
        <td id="L4694" class="blob-num js-line-number" data-line-number="4694"></td>
        <td id="LC4694" class="blob-code blob-code-inner js-file-line"><span class="pl-c">supplied using the _move_-semantics. The method `send` returns a</span></td>
      </tr>
      <tr>
        <td id="L4695" class="blob-num js-line-number" data-line-number="4695"></td>
        <td id="LC4695" class="blob-code blob-code-inner js-file-line"><span class="pl-c">`std::pair&lt;ssize_t, int32_t&gt;` where the first element returns the size of the</span></td>
      </tr>
      <tr>
        <td id="L4696" class="blob-num js-line-number" data-line-number="4696"></td>
        <td id="LC4696" class="blob-code blob-code-inner js-file-line"><span class="pl-c">successfully sent bytes and the second element contains the error code in case</span></td>
      </tr>
      <tr>
        <td id="L4697" class="blob-num js-line-number" data-line-number="4697"></td>
        <td id="LC4697" class="blob-code blob-code-inner js-file-line"><span class="pl-c">the transmission of the data failed.</span></td>
      </tr>
      <tr>
        <td id="L4698" class="blob-num js-line-number" data-line-number="4698"></td>
        <td id="LC4698" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L4699" class="blob-num js-line-number" data-line-number="4699"></td>
        <td id="LC4699" class="blob-code blob-code-inner js-file-line"><span class="pl-c">\code{.cpp}</span></td>
      </tr>
      <tr>
        <td id="L4700" class="blob-num js-line-number" data-line-number="4700"></td>
        <td id="LC4700" class="blob-code blob-code-inner js-file-line"><span class="pl-c">cluon::UDPSender sender(&quot;127.0.0.1&quot;, 1234);</span></td>
      </tr>
      <tr>
        <td id="L4701" class="blob-num js-line-number" data-line-number="4701"></td>
        <td id="LC4701" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L4702" class="blob-num js-line-number" data-line-number="4702"></td>
        <td id="LC4702" class="blob-code blob-code-inner js-file-line"><span class="pl-c">std::pair&lt;ssize_t, int32_t&gt; retVal = sender.send(std::move(&quot;Hello World!&quot;));</span></td>
      </tr>
      <tr>
        <td id="L4703" class="blob-num js-line-number" data-line-number="4703"></td>
        <td id="LC4703" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L4704" class="blob-num js-line-number" data-line-number="4704"></td>
        <td id="LC4704" class="blob-code blob-code-inner js-file-line"><span class="pl-c">std::cout &lt;&lt; &quot;Send &quot; &lt;&lt; retVal.first &lt;&lt; &quot; bytes, error code = &quot; &lt;&lt; retVal.second &lt;&lt; std::endl;</span></td>
      </tr>
      <tr>
        <td id="L4705" class="blob-num js-line-number" data-line-number="4705"></td>
        <td id="LC4705" class="blob-code blob-code-inner js-file-line"><span class="pl-c">\endcode</span></td>
      </tr>
      <tr>
        <td id="L4706" class="blob-num js-line-number" data-line-number="4706"></td>
        <td id="LC4706" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L4707" class="blob-num js-line-number" data-line-number="4707"></td>
        <td id="LC4707" class="blob-code blob-code-inner js-file-line"><span class="pl-c">A complete example is available</span></td>
      </tr>
      <tr>
        <td id="L4708" class="blob-num js-line-number" data-line-number="4708"></td>
        <td id="LC4708" class="blob-code blob-code-inner js-file-line"><span class="pl-c">[here](https://github.com/chrberger/libcluon/blob/master/libcluon/examples/cluon-UDPSender.cpp).</span></td>
      </tr>
      <tr>
        <td id="L4709" class="blob-num js-line-number" data-line-number="4709"></td>
        <td id="LC4709" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L4710" class="blob-num js-line-number" data-line-number="4710"></td>
        <td id="LC4710" class="blob-code blob-code-inner js-file-line"><span class="pl-k">class</span> <span class="pl-en">LIBCLUON_API</span> UDPSender {</td>
      </tr>
      <tr>
        <td id="L4711" class="blob-num js-line-number" data-line-number="4711"></td>
        <td id="LC4711" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L4712" class="blob-num js-line-number" data-line-number="4712"></td>
        <td id="LC4712" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">UDPSender</span>(<span class="pl-k">const</span> UDPSender &amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L4713" class="blob-num js-line-number" data-line-number="4713"></td>
        <td id="LC4713" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">UDPSender</span>(UDPSender &amp;&amp;)      = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L4714" class="blob-num js-line-number" data-line-number="4714"></td>
        <td id="LC4714" class="blob-code blob-code-inner js-file-line">    UDPSender &amp;<span class="pl-k">operator</span>=(<span class="pl-k">const</span> UDPSender &amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L4715" class="blob-num js-line-number" data-line-number="4715"></td>
        <td id="LC4715" class="blob-code blob-code-inner js-file-line">    UDPSender &amp;<span class="pl-k">operator</span>=(UDPSender &amp;&amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L4716" class="blob-num js-line-number" data-line-number="4716"></td>
        <td id="LC4716" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4717" class="blob-num js-line-number" data-line-number="4717"></td>
        <td id="LC4717" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L4718" class="blob-num js-line-number" data-line-number="4718"></td>
        <td id="LC4718" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L4719" class="blob-num js-line-number" data-line-number="4719"></td>
        <td id="LC4719" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * Constructor.</span></td>
      </tr>
      <tr>
        <td id="L4720" class="blob-num js-line-number" data-line-number="4720"></td>
        <td id="LC4720" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     *</span></td>
      </tr>
      <tr>
        <td id="L4721" class="blob-num js-line-number" data-line-number="4721"></td>
        <td id="LC4721" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param sendToAddress Numerical IPv4 address to send a UDP packet to.</span></td>
      </tr>
      <tr>
        <td id="L4722" class="blob-num js-line-number" data-line-number="4722"></td>
        <td id="LC4722" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param sendToPort Port to send a UDP packet to.</span></td>
      </tr>
      <tr>
        <td id="L4723" class="blob-num js-line-number" data-line-number="4723"></td>
        <td id="LC4723" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L4724" class="blob-num js-line-number" data-line-number="4724"></td>
        <td id="LC4724" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">UDPSender</span>(<span class="pl-k">const</span> std::string &amp;sendToAddress, <span class="pl-c1">uint16_t</span> sendToPort) noexcept;</td>
      </tr>
      <tr>
        <td id="L4725" class="blob-num js-line-number" data-line-number="4725"></td>
        <td id="LC4725" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">~UDPSender</span>() noexcept;</td>
      </tr>
      <tr>
        <td id="L4726" class="blob-num js-line-number" data-line-number="4726"></td>
        <td id="LC4726" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4727" class="blob-num js-line-number" data-line-number="4727"></td>
        <td id="LC4727" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L4728" class="blob-num js-line-number" data-line-number="4728"></td>
        <td id="LC4728" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * Send a given string.</span></td>
      </tr>
      <tr>
        <td id="L4729" class="blob-num js-line-number" data-line-number="4729"></td>
        <td id="LC4729" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     *</span></td>
      </tr>
      <tr>
        <td id="L4730" class="blob-num js-line-number" data-line-number="4730"></td>
        <td id="LC4730" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param data Data to send.</span></td>
      </tr>
      <tr>
        <td id="L4731" class="blob-num js-line-number" data-line-number="4731"></td>
        <td id="LC4731" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @return Pair: Number of bytes sent and errno.</span></td>
      </tr>
      <tr>
        <td id="L4732" class="blob-num js-line-number" data-line-number="4732"></td>
        <td id="LC4732" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L4733" class="blob-num js-line-number" data-line-number="4733"></td>
        <td id="LC4733" class="blob-code blob-code-inner js-file-line">    std::pair&lt;<span class="pl-c1">ssize_t</span>, <span class="pl-c1">int32_t</span>&gt; <span class="pl-en">send</span>(std::string &amp;&amp;data) <span class="pl-k">const</span> <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L4734" class="blob-num js-line-number" data-line-number="4734"></td>
        <td id="LC4734" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4735" class="blob-num js-line-number" data-line-number="4735"></td>
        <td id="LC4735" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L4736" class="blob-num js-line-number" data-line-number="4736"></td>
        <td id="LC4736" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">mutable</span> std::mutex m_socketMutex{};</td>
      </tr>
      <tr>
        <td id="L4737" class="blob-num js-line-number" data-line-number="4737"></td>
        <td id="LC4737" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">int32_t</span> m_socket{-<span class="pl-c1">1</span>};</td>
      </tr>
      <tr>
        <td id="L4738" class="blob-num js-line-number" data-line-number="4738"></td>
        <td id="LC4738" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">struct</span> <span class="pl-en">sockaddr_in</span> m_sendToAddress {};</td>
      </tr>
      <tr>
        <td id="L4739" class="blob-num js-line-number" data-line-number="4739"></td>
        <td id="LC4739" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L4740" class="blob-num js-line-number" data-line-number="4740"></td>
        <td id="LC4740" class="blob-code blob-code-inner js-file-line">} <span class="pl-c"><span class="pl-c">//</span> namespace cluon</span></td>
      </tr>
      <tr>
        <td id="L4741" class="blob-num js-line-number" data-line-number="4741"></td>
        <td id="LC4741" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4742" class="blob-num js-line-number" data-line-number="4742"></td>
        <td id="LC4742" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L4743" class="blob-num js-line-number" data-line-number="4743"></td>
        <td id="LC4743" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L4744" class="blob-num js-line-number" data-line-number="4744"></td>
        <td id="LC4744" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Copyright (C) 2017-2018  Christian Berger</span></td>
      </tr>
      <tr>
        <td id="L4745" class="blob-num js-line-number" data-line-number="4745"></td>
        <td id="LC4745" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L4746" class="blob-num js-line-number" data-line-number="4746"></td>
        <td id="LC4746" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is free software: you can redistribute it and/or modify</span></td>
      </tr>
      <tr>
        <td id="L4747" class="blob-num js-line-number" data-line-number="4747"></td>
        <td id="LC4747" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * it under the terms of the GNU General Public License as published by</span></td>
      </tr>
      <tr>
        <td id="L4748" class="blob-num js-line-number" data-line-number="4748"></td>
        <td id="LC4748" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * the Free Software Foundation, either version 3 of the License, or</span></td>
      </tr>
      <tr>
        <td id="L4749" class="blob-num js-line-number" data-line-number="4749"></td>
        <td id="LC4749" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * (at your option) any later version.</span></td>
      </tr>
      <tr>
        <td id="L4750" class="blob-num js-line-number" data-line-number="4750"></td>
        <td id="LC4750" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L4751" class="blob-num js-line-number" data-line-number="4751"></td>
        <td id="LC4751" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is distributed in the hope that it will be useful,</span></td>
      </tr>
      <tr>
        <td id="L4752" class="blob-num js-line-number" data-line-number="4752"></td>
        <td id="LC4752" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></td>
      </tr>
      <tr>
        <td id="L4753" class="blob-num js-line-number" data-line-number="4753"></td>
        <td id="LC4753" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></td>
      </tr>
      <tr>
        <td id="L4754" class="blob-num js-line-number" data-line-number="4754"></td>
        <td id="LC4754" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * GNU General Public License for more details.</span></td>
      </tr>
      <tr>
        <td id="L4755" class="blob-num js-line-number" data-line-number="4755"></td>
        <td id="LC4755" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L4756" class="blob-num js-line-number" data-line-number="4756"></td>
        <td id="LC4756" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * You should have received a copy of the GNU General Public License</span></td>
      </tr>
      <tr>
        <td id="L4757" class="blob-num js-line-number" data-line-number="4757"></td>
        <td id="LC4757" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></td>
      </tr>
      <tr>
        <td id="L4758" class="blob-num js-line-number" data-line-number="4758"></td>
        <td id="LC4758" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L4759" class="blob-num js-line-number" data-line-number="4759"></td>
        <td id="LC4759" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4760" class="blob-num js-line-number" data-line-number="4760"></td>
        <td id="LC4760" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifndef</span> UDPRECEIVER_HPP</td>
      </tr>
      <tr>
        <td id="L4761" class="blob-num js-line-number" data-line-number="4761"></td>
        <td id="LC4761" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">define</span> <span class="pl-en">UDPRECEIVER_HPP</span></td>
      </tr>
      <tr>
        <td id="L4762" class="blob-num js-line-number" data-line-number="4762"></td>
        <td id="LC4762" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4763" class="blob-num js-line-number" data-line-number="4763"></td>
        <td id="LC4763" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/cluon.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L4764" class="blob-num js-line-number" data-line-number="4764"></td>
        <td id="LC4764" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4765" class="blob-num js-line-number" data-line-number="4765"></td>
        <td id="LC4765" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> clang-format off</span></td>
      </tr>
      <tr>
        <td id="L4766" class="blob-num js-line-number" data-line-number="4766"></td>
        <td id="LC4766" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifdef</span> WIN32</td>
      </tr>
      <tr>
        <td id="L4767" class="blob-num js-line-number" data-line-number="4767"></td>
        <td id="LC4767" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>Winsock2.h<span class="pl-pds">&gt;</span></span> <span class="pl-c"><span class="pl-c">//</span> for WSAStartUp</span></td>
      </tr>
      <tr>
        <td id="L4768" class="blob-num js-line-number" data-line-number="4768"></td>
        <td id="LC4768" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>Ws2def.h<span class="pl-pds">&gt;</span></span>   <span class="pl-c"><span class="pl-c">//</span> for struct sockaddr_in</span></td>
      </tr>
      <tr>
        <td id="L4769" class="blob-num js-line-number" data-line-number="4769"></td>
        <td id="LC4769" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>ws2tcpip.h<span class="pl-pds">&gt;</span></span> <span class="pl-c"><span class="pl-c">//</span> for SOCKET</span></td>
      </tr>
      <tr>
        <td id="L4770" class="blob-num js-line-number" data-line-number="4770"></td>
        <td id="LC4770" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">else</span></td>
      </tr>
      <tr>
        <td id="L4771" class="blob-num js-line-number" data-line-number="4771"></td>
        <td id="LC4771" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>netinet/in.h<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L4772" class="blob-num js-line-number" data-line-number="4772"></td>
        <td id="LC4772" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L4773" class="blob-num js-line-number" data-line-number="4773"></td>
        <td id="LC4773" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> clang-format on</span></td>
      </tr>
      <tr>
        <td id="L4774" class="blob-num js-line-number" data-line-number="4774"></td>
        <td id="LC4774" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4775" class="blob-num js-line-number" data-line-number="4775"></td>
        <td id="LC4775" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>cstdint<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L4776" class="blob-num js-line-number" data-line-number="4776"></td>
        <td id="LC4776" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>atomic<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L4777" class="blob-num js-line-number" data-line-number="4777"></td>
        <td id="LC4777" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>chrono<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L4778" class="blob-num js-line-number" data-line-number="4778"></td>
        <td id="LC4778" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>functional<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L4779" class="blob-num js-line-number" data-line-number="4779"></td>
        <td id="LC4779" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>string<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L4780" class="blob-num js-line-number" data-line-number="4780"></td>
        <td id="LC4780" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>thread<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L4781" class="blob-num js-line-number" data-line-number="4781"></td>
        <td id="LC4781" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4782" class="blob-num js-line-number" data-line-number="4782"></td>
        <td id="LC4782" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">cluon</span> {</td>
      </tr>
      <tr>
        <td id="L4783" class="blob-num js-line-number" data-line-number="4783"></td>
        <td id="LC4783" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L4784" class="blob-num js-line-number" data-line-number="4784"></td>
        <td id="LC4784" class="blob-code blob-code-inner js-file-line"><span class="pl-c">To receive data from a UDP socket, simply include the header</span></td>
      </tr>
      <tr>
        <td id="L4785" class="blob-num js-line-number" data-line-number="4785"></td>
        <td id="LC4785" class="blob-code blob-code-inner js-file-line"><span class="pl-c">`#include &lt;cluon/UDPReceiver.hpp&gt;`.</span></td>
      </tr>
      <tr>
        <td id="L4786" class="blob-num js-line-number" data-line-number="4786"></td>
        <td id="LC4786" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L4787" class="blob-num js-line-number" data-line-number="4787"></td>
        <td id="LC4787" class="blob-code blob-code-inner js-file-line"><span class="pl-c">Next, create an instance of class `cluon::UDPReceiver` as follows:</span></td>
      </tr>
      <tr>
        <td id="L4788" class="blob-num js-line-number" data-line-number="4788"></td>
        <td id="LC4788" class="blob-code blob-code-inner js-file-line"><span class="pl-c">`cluon::UDPReceiver receiver(&quot;127.0.0.1&quot;, 1234, delegate);`.</span></td>
      </tr>
      <tr>
        <td id="L4789" class="blob-num js-line-number" data-line-number="4789"></td>
        <td id="LC4789" class="blob-code blob-code-inner js-file-line"><span class="pl-c">The first parameter is of type `std::string` expecting a numerical IPv4 address,</span></td>
      </tr>
      <tr>
        <td id="L4790" class="blob-num js-line-number" data-line-number="4790"></td>
        <td id="LC4790" class="blob-code blob-code-inner js-file-line"><span class="pl-c">the second parameter specifies the UDP port, from which data shall be received</span></td>
      </tr>
      <tr>
        <td id="L4791" class="blob-num js-line-number" data-line-number="4791"></td>
        <td id="LC4791" class="blob-code blob-code-inner js-file-line"><span class="pl-c">from, and the last parameter is of type `std::function` that is called whenever</span></td>
      </tr>
      <tr>
        <td id="L4792" class="blob-num js-line-number" data-line-number="4792"></td>
        <td id="LC4792" class="blob-code blob-code-inner js-file-line"><span class="pl-c">new bytes are available to be processed.</span></td>
      </tr>
      <tr>
        <td id="L4793" class="blob-num js-line-number" data-line-number="4793"></td>
        <td id="LC4793" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L4794" class="blob-num js-line-number" data-line-number="4794"></td>
        <td id="LC4794" class="blob-code blob-code-inner js-file-line"><span class="pl-c">The complete signature for the delegate function is</span></td>
      </tr>
      <tr>
        <td id="L4795" class="blob-num js-line-number" data-line-number="4795"></td>
        <td id="LC4795" class="blob-code blob-code-inner js-file-line"><span class="pl-c">`std::function&lt;void(std::string &amp;&amp;, std::string &amp;&amp;, std::chrono::system_clock::time_point &amp;&amp;) noexcept&gt;`:</span></td>
      </tr>
      <tr>
        <td id="L4796" class="blob-num js-line-number" data-line-number="4796"></td>
        <td id="LC4796" class="blob-code blob-code-inner js-file-line"><span class="pl-c">The first parameter contains the bytes that have been received, the second</span></td>
      </tr>
      <tr>
        <td id="L4797" class="blob-num js-line-number" data-line-number="4797"></td>
        <td id="LC4797" class="blob-code blob-code-inner js-file-line"><span class="pl-c">parameter containes the human-readable representation of the sender</span></td>
      </tr>
      <tr>
        <td id="L4798" class="blob-num js-line-number" data-line-number="4798"></td>
        <td id="LC4798" class="blob-code blob-code-inner js-file-line"><span class="pl-c">(X.Y.Z.W:ABCD), and the last parameter is the time stamp when the data has been</span></td>
      </tr>
      <tr>
        <td id="L4799" class="blob-num js-line-number" data-line-number="4799"></td>
        <td id="LC4799" class="blob-code blob-code-inner js-file-line"><span class="pl-c">received. An example using a C++ lambda expression would look as follows:</span></td>
      </tr>
      <tr>
        <td id="L4800" class="blob-num js-line-number" data-line-number="4800"></td>
        <td id="LC4800" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L4801" class="blob-num js-line-number" data-line-number="4801"></td>
        <td id="LC4801" class="blob-code blob-code-inner js-file-line"><span class="pl-c">\code{.cpp}</span></td>
      </tr>
      <tr>
        <td id="L4802" class="blob-num js-line-number" data-line-number="4802"></td>
        <td id="LC4802" class="blob-code blob-code-inner js-file-line"><span class="pl-c">cluon::UDPReceiver receiver(&quot;127.0.0.1&quot;, 1234,</span></td>
      </tr>
      <tr>
        <td id="L4803" class="blob-num js-line-number" data-line-number="4803"></td>
        <td id="LC4803" class="blob-code blob-code-inner js-file-line"><span class="pl-c">    [](std::string &amp;&amp;data, std::string &amp;&amp;sender, std::chrono::system_clock::time_point &amp;&amp;ts) noexcept {</span></td>
      </tr>
      <tr>
        <td id="L4804" class="blob-num js-line-number" data-line-number="4804"></td>
        <td id="LC4804" class="blob-code blob-code-inner js-file-line"><span class="pl-c">        const auto timestamp(std::chrono::system_clock::to_time_t(ts));</span></td>
      </tr>
      <tr>
        <td id="L4805" class="blob-num js-line-number" data-line-number="4805"></td>
        <td id="LC4805" class="blob-code blob-code-inner js-file-line"><span class="pl-c">        std::cout &lt;&lt; &quot;Received &quot; &lt;&lt; data.size() &lt;&lt; &quot; bytes&quot;</span></td>
      </tr>
      <tr>
        <td id="L4806" class="blob-num js-line-number" data-line-number="4806"></td>
        <td id="LC4806" class="blob-code blob-code-inner js-file-line"><span class="pl-c">                  &lt;&lt; &quot; from &quot; &lt;&lt; sender</span></td>
      </tr>
      <tr>
        <td id="L4807" class="blob-num js-line-number" data-line-number="4807"></td>
        <td id="LC4807" class="blob-code blob-code-inner js-file-line"><span class="pl-c">                  &lt;&lt; &quot; at &quot; &lt;&lt; std::put_time(std::localtime(&amp;timestamp), &quot;%Y-%m-%d %X&quot;)</span></td>
      </tr>
      <tr>
        <td id="L4808" class="blob-num js-line-number" data-line-number="4808"></td>
        <td id="LC4808" class="blob-code blob-code-inner js-file-line"><span class="pl-c">                  &lt;&lt; &quot;, containing &#39;&quot; &lt;&lt; data &lt;&lt; &quot;&#39;.&quot; &lt;&lt; std::endl;</span></td>
      </tr>
      <tr>
        <td id="L4809" class="blob-num js-line-number" data-line-number="4809"></td>
        <td id="LC4809" class="blob-code blob-code-inner js-file-line"><span class="pl-c">    });</span></td>
      </tr>
      <tr>
        <td id="L4810" class="blob-num js-line-number" data-line-number="4810"></td>
        <td id="LC4810" class="blob-code blob-code-inner js-file-line"><span class="pl-c">\endcode</span></td>
      </tr>
      <tr>
        <td id="L4811" class="blob-num js-line-number" data-line-number="4811"></td>
        <td id="LC4811" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L4812" class="blob-num js-line-number" data-line-number="4812"></td>
        <td id="LC4812" class="blob-code blob-code-inner js-file-line"><span class="pl-c">After creating an instance of class `cluon::UDPReceiver`, it is immediately</span></td>
      </tr>
      <tr>
        <td id="L4813" class="blob-num js-line-number" data-line-number="4813"></td>
        <td id="LC4813" class="blob-code blob-code-inner js-file-line"><span class="pl-c">activated and concurrently waiting for data in a separate thread. To check</span></td>
      </tr>
      <tr>
        <td id="L4814" class="blob-num js-line-number" data-line-number="4814"></td>
        <td id="LC4814" class="blob-code blob-code-inner js-file-line"><span class="pl-c">whether the instance was created successfully and running, the method</span></td>
      </tr>
      <tr>
        <td id="L4815" class="blob-num js-line-number" data-line-number="4815"></td>
        <td id="LC4815" class="blob-code blob-code-inner js-file-line"><span class="pl-c">`isRunning()` should be called.</span></td>
      </tr>
      <tr>
        <td id="L4816" class="blob-num js-line-number" data-line-number="4816"></td>
        <td id="LC4816" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L4817" class="blob-num js-line-number" data-line-number="4817"></td>
        <td id="LC4817" class="blob-code blob-code-inner js-file-line"><span class="pl-c">A complete example is available</span></td>
      </tr>
      <tr>
        <td id="L4818" class="blob-num js-line-number" data-line-number="4818"></td>
        <td id="LC4818" class="blob-code blob-code-inner js-file-line"><span class="pl-c">[here](https://github.com/chrberger/libcluon/blob/master/libcluon/examples/cluon-UDPReceiver.cpp).</span></td>
      </tr>
      <tr>
        <td id="L4819" class="blob-num js-line-number" data-line-number="4819"></td>
        <td id="LC4819" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L4820" class="blob-num js-line-number" data-line-number="4820"></td>
        <td id="LC4820" class="blob-code blob-code-inner js-file-line"><span class="pl-k">class</span> <span class="pl-en">LIBCLUON_API</span> UDPReceiver {</td>
      </tr>
      <tr>
        <td id="L4821" class="blob-num js-line-number" data-line-number="4821"></td>
        <td id="LC4821" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L4822" class="blob-num js-line-number" data-line-number="4822"></td>
        <td id="LC4822" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">UDPReceiver</span>(<span class="pl-k">const</span> UDPReceiver &amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L4823" class="blob-num js-line-number" data-line-number="4823"></td>
        <td id="LC4823" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">UDPReceiver</span>(UDPReceiver &amp;&amp;)      = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L4824" class="blob-num js-line-number" data-line-number="4824"></td>
        <td id="LC4824" class="blob-code blob-code-inner js-file-line">    UDPReceiver &amp;<span class="pl-k">operator</span>=(<span class="pl-k">const</span> UDPReceiver &amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L4825" class="blob-num js-line-number" data-line-number="4825"></td>
        <td id="LC4825" class="blob-code blob-code-inner js-file-line">    UDPReceiver &amp;<span class="pl-k">operator</span>=(UDPReceiver &amp;&amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L4826" class="blob-num js-line-number" data-line-number="4826"></td>
        <td id="LC4826" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4827" class="blob-num js-line-number" data-line-number="4827"></td>
        <td id="LC4827" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L4828" class="blob-num js-line-number" data-line-number="4828"></td>
        <td id="LC4828" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L4829" class="blob-num js-line-number" data-line-number="4829"></td>
        <td id="LC4829" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * Constructor.</span></td>
      </tr>
      <tr>
        <td id="L4830" class="blob-num js-line-number" data-line-number="4830"></td>
        <td id="LC4830" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     *</span></td>
      </tr>
      <tr>
        <td id="L4831" class="blob-num js-line-number" data-line-number="4831"></td>
        <td id="LC4831" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param receiveFromAddress Numerical IPv4 address to receive UDP packets from.</span></td>
      </tr>
      <tr>
        <td id="L4832" class="blob-num js-line-number" data-line-number="4832"></td>
        <td id="LC4832" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param receiveFromPort Port to receive UDP packets from.</span></td>
      </tr>
      <tr>
        <td id="L4833" class="blob-num js-line-number" data-line-number="4833"></td>
        <td id="LC4833" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param delegate Functional (noexcept) to handle received bytes; parameters are received data, sender, timestamp.</span></td>
      </tr>
      <tr>
        <td id="L4834" class="blob-num js-line-number" data-line-number="4834"></td>
        <td id="LC4834" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L4835" class="blob-num js-line-number" data-line-number="4835"></td>
        <td id="LC4835" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">UDPReceiver</span>(<span class="pl-k">const</span> std::string &amp;receiveFromAddress,</td>
      </tr>
      <tr>
        <td id="L4836" class="blob-num js-line-number" data-line-number="4836"></td>
        <td id="LC4836" class="blob-code blob-code-inner js-file-line">                <span class="pl-c1">uint16_t</span> receiveFromPort,</td>
      </tr>
      <tr>
        <td id="L4837" class="blob-num js-line-number" data-line-number="4837"></td>
        <td id="LC4837" class="blob-code blob-code-inner js-file-line">                std::function&lt;<span class="pl-k">void</span>(std::string &amp;&amp;, std::string &amp;&amp;, std::chrono::system_clock::time_point &amp;&amp;)&gt; delegate) noexcept;</td>
      </tr>
      <tr>
        <td id="L4838" class="blob-num js-line-number" data-line-number="4838"></td>
        <td id="LC4838" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">~UDPReceiver</span>() noexcept;</td>
      </tr>
      <tr>
        <td id="L4839" class="blob-num js-line-number" data-line-number="4839"></td>
        <td id="LC4839" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4840" class="blob-num js-line-number" data-line-number="4840"></td>
        <td id="LC4840" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L4841" class="blob-num js-line-number" data-line-number="4841"></td>
        <td id="LC4841" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @return true if the UDPReceiver could successfully be created and is able to receive data.</span></td>
      </tr>
      <tr>
        <td id="L4842" class="blob-num js-line-number" data-line-number="4842"></td>
        <td id="LC4842" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L4843" class="blob-num js-line-number" data-line-number="4843"></td>
        <td id="LC4843" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">bool</span> <span class="pl-en">isRunning</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L4844" class="blob-num js-line-number" data-line-number="4844"></td>
        <td id="LC4844" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4845" class="blob-num js-line-number" data-line-number="4845"></td>
        <td id="LC4845" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L4846" class="blob-num js-line-number" data-line-number="4846"></td>
        <td id="LC4846" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L4847" class="blob-num js-line-number" data-line-number="4847"></td>
        <td id="LC4847" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * This method closes the socket.</span></td>
      </tr>
      <tr>
        <td id="L4848" class="blob-num js-line-number" data-line-number="4848"></td>
        <td id="LC4848" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     *</span></td>
      </tr>
      <tr>
        <td id="L4849" class="blob-num js-line-number" data-line-number="4849"></td>
        <td id="LC4849" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param errorCode Error code that caused this closing.</span></td>
      </tr>
      <tr>
        <td id="L4850" class="blob-num js-line-number" data-line-number="4850"></td>
        <td id="LC4850" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L4851" class="blob-num js-line-number" data-line-number="4851"></td>
        <td id="LC4851" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">closeSocket</span>(<span class="pl-k">int</span> errorCode) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L4852" class="blob-num js-line-number" data-line-number="4852"></td>
        <td id="LC4852" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">readFromSocket</span>() <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L4853" class="blob-num js-line-number" data-line-number="4853"></td>
        <td id="LC4853" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4854" class="blob-num js-line-number" data-line-number="4854"></td>
        <td id="LC4854" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L4855" class="blob-num js-line-number" data-line-number="4855"></td>
        <td id="LC4855" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">int32_t</span> m_socket{-<span class="pl-c1">1</span>};</td>
      </tr>
      <tr>
        <td id="L4856" class="blob-num js-line-number" data-line-number="4856"></td>
        <td id="LC4856" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">struct</span> <span class="pl-en">sockaddr_in</span> m_receiveFromAddress {};</td>
      </tr>
      <tr>
        <td id="L4857" class="blob-num js-line-number" data-line-number="4857"></td>
        <td id="LC4857" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">struct</span> <span class="pl-en">ip_mreq</span> m_mreq {};</td>
      </tr>
      <tr>
        <td id="L4858" class="blob-num js-line-number" data-line-number="4858"></td>
        <td id="LC4858" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">bool</span> m_isMulticast{<span class="pl-c1">false</span>};</td>
      </tr>
      <tr>
        <td id="L4859" class="blob-num js-line-number" data-line-number="4859"></td>
        <td id="LC4859" class="blob-code blob-code-inner js-file-line">    std::atomic&lt;<span class="pl-k">bool</span>&gt; m_readFromSocketThreadRunning{<span class="pl-c1">false</span>};</td>
      </tr>
      <tr>
        <td id="L4860" class="blob-num js-line-number" data-line-number="4860"></td>
        <td id="LC4860" class="blob-code blob-code-inner js-file-line">    std::thread m_readFromSocketThread{};</td>
      </tr>
      <tr>
        <td id="L4861" class="blob-num js-line-number" data-line-number="4861"></td>
        <td id="LC4861" class="blob-code blob-code-inner js-file-line">    std::function&lt;<span class="pl-k">void</span>(std::string &amp;&amp;, std::string &amp;&amp;, std::chrono::system_clock::time_point)&gt; m_delegate{};</td>
      </tr>
      <tr>
        <td id="L4862" class="blob-num js-line-number" data-line-number="4862"></td>
        <td id="LC4862" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L4863" class="blob-num js-line-number" data-line-number="4863"></td>
        <td id="LC4863" class="blob-code blob-code-inner js-file-line">} <span class="pl-c"><span class="pl-c">//</span> namespace cluon</span></td>
      </tr>
      <tr>
        <td id="L4864" class="blob-num js-line-number" data-line-number="4864"></td>
        <td id="LC4864" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4865" class="blob-num js-line-number" data-line-number="4865"></td>
        <td id="LC4865" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L4866" class="blob-num js-line-number" data-line-number="4866"></td>
        <td id="LC4866" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L4867" class="blob-num js-line-number" data-line-number="4867"></td>
        <td id="LC4867" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Copyright (C) 2018  Christian Berger</span></td>
      </tr>
      <tr>
        <td id="L4868" class="blob-num js-line-number" data-line-number="4868"></td>
        <td id="LC4868" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L4869" class="blob-num js-line-number" data-line-number="4869"></td>
        <td id="LC4869" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is free software: you can redistribute it and/or modify</span></td>
      </tr>
      <tr>
        <td id="L4870" class="blob-num js-line-number" data-line-number="4870"></td>
        <td id="LC4870" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * it under the terms of the GNU General Public License as published by</span></td>
      </tr>
      <tr>
        <td id="L4871" class="blob-num js-line-number" data-line-number="4871"></td>
        <td id="LC4871" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * the Free Software Foundation, either version 3 of the License, or</span></td>
      </tr>
      <tr>
        <td id="L4872" class="blob-num js-line-number" data-line-number="4872"></td>
        <td id="LC4872" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * (at your option) any later version.</span></td>
      </tr>
      <tr>
        <td id="L4873" class="blob-num js-line-number" data-line-number="4873"></td>
        <td id="LC4873" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L4874" class="blob-num js-line-number" data-line-number="4874"></td>
        <td id="LC4874" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is distributed in the hope that it will be useful,</span></td>
      </tr>
      <tr>
        <td id="L4875" class="blob-num js-line-number" data-line-number="4875"></td>
        <td id="LC4875" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></td>
      </tr>
      <tr>
        <td id="L4876" class="blob-num js-line-number" data-line-number="4876"></td>
        <td id="LC4876" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></td>
      </tr>
      <tr>
        <td id="L4877" class="blob-num js-line-number" data-line-number="4877"></td>
        <td id="LC4877" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * GNU General Public License for more details.</span></td>
      </tr>
      <tr>
        <td id="L4878" class="blob-num js-line-number" data-line-number="4878"></td>
        <td id="LC4878" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L4879" class="blob-num js-line-number" data-line-number="4879"></td>
        <td id="LC4879" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * You should have received a copy of the GNU General Public License</span></td>
      </tr>
      <tr>
        <td id="L4880" class="blob-num js-line-number" data-line-number="4880"></td>
        <td id="LC4880" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></td>
      </tr>
      <tr>
        <td id="L4881" class="blob-num js-line-number" data-line-number="4881"></td>
        <td id="LC4881" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L4882" class="blob-num js-line-number" data-line-number="4882"></td>
        <td id="LC4882" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4883" class="blob-num js-line-number" data-line-number="4883"></td>
        <td id="LC4883" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifndef</span> TCPCONNECTION_HPP</td>
      </tr>
      <tr>
        <td id="L4884" class="blob-num js-line-number" data-line-number="4884"></td>
        <td id="LC4884" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">define</span> <span class="pl-en">TCPCONNECTION_HPP</span></td>
      </tr>
      <tr>
        <td id="L4885" class="blob-num js-line-number" data-line-number="4885"></td>
        <td id="LC4885" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4886" class="blob-num js-line-number" data-line-number="4886"></td>
        <td id="LC4886" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/cluon.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L4887" class="blob-num js-line-number" data-line-number="4887"></td>
        <td id="LC4887" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4888" class="blob-num js-line-number" data-line-number="4888"></td>
        <td id="LC4888" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> clang-format off</span></td>
      </tr>
      <tr>
        <td id="L4889" class="blob-num js-line-number" data-line-number="4889"></td>
        <td id="LC4889" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifdef</span> WIN32</td>
      </tr>
      <tr>
        <td id="L4890" class="blob-num js-line-number" data-line-number="4890"></td>
        <td id="LC4890" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>Winsock2.h<span class="pl-pds">&gt;</span></span> <span class="pl-c"><span class="pl-c">//</span> for WSAStartUp</span></td>
      </tr>
      <tr>
        <td id="L4891" class="blob-num js-line-number" data-line-number="4891"></td>
        <td id="LC4891" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>Ws2def.h<span class="pl-pds">&gt;</span></span>   <span class="pl-c"><span class="pl-c">//</span> for struct sockaddr_in</span></td>
      </tr>
      <tr>
        <td id="L4892" class="blob-num js-line-number" data-line-number="4892"></td>
        <td id="LC4892" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>ws2tcpip.h<span class="pl-pds">&gt;</span></span> <span class="pl-c"><span class="pl-c">//</span> for SOCKET</span></td>
      </tr>
      <tr>
        <td id="L4893" class="blob-num js-line-number" data-line-number="4893"></td>
        <td id="LC4893" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">else</span></td>
      </tr>
      <tr>
        <td id="L4894" class="blob-num js-line-number" data-line-number="4894"></td>
        <td id="LC4894" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>netinet/in.h<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L4895" class="blob-num js-line-number" data-line-number="4895"></td>
        <td id="LC4895" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L4896" class="blob-num js-line-number" data-line-number="4896"></td>
        <td id="LC4896" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> clang-format on</span></td>
      </tr>
      <tr>
        <td id="L4897" class="blob-num js-line-number" data-line-number="4897"></td>
        <td id="LC4897" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4898" class="blob-num js-line-number" data-line-number="4898"></td>
        <td id="LC4898" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>cstdint<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L4899" class="blob-num js-line-number" data-line-number="4899"></td>
        <td id="LC4899" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>atomic<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L4900" class="blob-num js-line-number" data-line-number="4900"></td>
        <td id="LC4900" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>chrono<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L4901" class="blob-num js-line-number" data-line-number="4901"></td>
        <td id="LC4901" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>functional<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L4902" class="blob-num js-line-number" data-line-number="4902"></td>
        <td id="LC4902" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>mutex<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L4903" class="blob-num js-line-number" data-line-number="4903"></td>
        <td id="LC4903" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>string<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L4904" class="blob-num js-line-number" data-line-number="4904"></td>
        <td id="LC4904" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>thread<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L4905" class="blob-num js-line-number" data-line-number="4905"></td>
        <td id="LC4905" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4906" class="blob-num js-line-number" data-line-number="4906"></td>
        <td id="LC4906" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">cluon</span> {</td>
      </tr>
      <tr>
        <td id="L4907" class="blob-num js-line-number" data-line-number="4907"></td>
        <td id="LC4907" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L4908" class="blob-num js-line-number" data-line-number="4908"></td>
        <td id="LC4908" class="blob-code blob-code-inner js-file-line"><span class="pl-c">To exchange data via TCP, simply include the header</span></td>
      </tr>
      <tr>
        <td id="L4909" class="blob-num js-line-number" data-line-number="4909"></td>
        <td id="LC4909" class="blob-code blob-code-inner js-file-line"><span class="pl-c">`#include &lt;cluon/TCPConnection.hpp&gt;`.</span></td>
      </tr>
      <tr>
        <td id="L4910" class="blob-num js-line-number" data-line-number="4910"></td>
        <td id="LC4910" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L4911" class="blob-num js-line-number" data-line-number="4911"></td>
        <td id="LC4911" class="blob-code blob-code-inner js-file-line"><span class="pl-c">Next, create an instance of class `cluon::TCPConnection` as follows:</span></td>
      </tr>
      <tr>
        <td id="L4912" class="blob-num js-line-number" data-line-number="4912"></td>
        <td id="LC4912" class="blob-code blob-code-inner js-file-line"><span class="pl-c">`cluon::TCPConnection connection(&quot;127.0.0.1&quot;, 1234, newDataDelegate, connectionLostDelegate);`.</span></td>
      </tr>
      <tr>
        <td id="L4913" class="blob-num js-line-number" data-line-number="4913"></td>
        <td id="LC4913" class="blob-code blob-code-inner js-file-line"><span class="pl-c">The first parameter is of type `std::string` expecting a numerical IPv4 address,</span></td>
      </tr>
      <tr>
        <td id="L4914" class="blob-num js-line-number" data-line-number="4914"></td>
        <td id="LC4914" class="blob-code blob-code-inner js-file-line"><span class="pl-c">the second parameter specifies the TCP port, from which data shall be received</span></td>
      </tr>
      <tr>
        <td id="L4915" class="blob-num js-line-number" data-line-number="4915"></td>
        <td id="LC4915" class="blob-code blob-code-inner js-file-line"><span class="pl-c">from, the third paraemter is of type `std::function` that is called whenever</span></td>
      </tr>
      <tr>
        <td id="L4916" class="blob-num js-line-number" data-line-number="4916"></td>
        <td id="LC4916" class="blob-code blob-code-inner js-file-line"><span class="pl-c">new bytes are available to be processed, and the last parameter is of type</span></td>
      </tr>
      <tr>
        <td id="L4917" class="blob-num js-line-number" data-line-number="4917"></td>
        <td id="LC4917" class="blob-code blob-code-inner js-file-line"><span class="pl-c">`std::function` that is called when the connection is lost.</span></td>
      </tr>
      <tr>
        <td id="L4918" class="blob-num js-line-number" data-line-number="4918"></td>
        <td id="LC4918" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L4919" class="blob-num js-line-number" data-line-number="4919"></td>
        <td id="LC4919" class="blob-code blob-code-inner js-file-line"><span class="pl-c">The complete signature for the newDataDelegate function is</span></td>
      </tr>
      <tr>
        <td id="L4920" class="blob-num js-line-number" data-line-number="4920"></td>
        <td id="LC4920" class="blob-code blob-code-inner js-file-line"><span class="pl-c">`std::function&lt;void(std::string &amp;&amp;, std::string &amp;&amp;, std::chrono::system_clock::time_point &amp;&amp;) noexcept&gt;`:</span></td>
      </tr>
      <tr>
        <td id="L4921" class="blob-num js-line-number" data-line-number="4921"></td>
        <td id="LC4921" class="blob-code blob-code-inner js-file-line"><span class="pl-c">The first parameter contains the bytes that have been received, the second</span></td>
      </tr>
      <tr>
        <td id="L4922" class="blob-num js-line-number" data-line-number="4922"></td>
        <td id="LC4922" class="blob-code blob-code-inner js-file-line"><span class="pl-c">parameter containes the human-readable representation of the sender</span></td>
      </tr>
      <tr>
        <td id="L4923" class="blob-num js-line-number" data-line-number="4923"></td>
        <td id="LC4923" class="blob-code blob-code-inner js-file-line"><span class="pl-c">(X.Y.Z.W:ABCD), and the last parameter is the time stamp when the data has been</span></td>
      </tr>
      <tr>
        <td id="L4924" class="blob-num js-line-number" data-line-number="4924"></td>
        <td id="LC4924" class="blob-code blob-code-inner js-file-line"><span class="pl-c">received.</span></td>
      </tr>
      <tr>
        <td id="L4925" class="blob-num js-line-number" data-line-number="4925"></td>
        <td id="LC4925" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L4926" class="blob-num js-line-number" data-line-number="4926"></td>
        <td id="LC4926" class="blob-code blob-code-inner js-file-line"><span class="pl-c">The complete signature for the connectionLostDelegate function is</span></td>
      </tr>
      <tr>
        <td id="L4927" class="blob-num js-line-number" data-line-number="4927"></td>
        <td id="LC4927" class="blob-code blob-code-inner js-file-line"><span class="pl-c">`std::function&lt;void() noexcept&gt;`.</span></td>
      </tr>
      <tr>
        <td id="L4928" class="blob-num js-line-number" data-line-number="4928"></td>
        <td id="LC4928" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L4929" class="blob-num js-line-number" data-line-number="4929"></td>
        <td id="LC4929" class="blob-code blob-code-inner js-file-line"><span class="pl-c">To finally send data, simply call the method `send` supplying the data to be</span></td>
      </tr>
      <tr>
        <td id="L4930" class="blob-num js-line-number" data-line-number="4930"></td>
        <td id="LC4930" class="blob-code blob-code-inner js-file-line"><span class="pl-c">sent: `connection.send(std::move(&quot;Hello World!&quot;)`. Please note that the data is</span></td>
      </tr>
      <tr>
        <td id="L4931" class="blob-num js-line-number" data-line-number="4931"></td>
        <td id="LC4931" class="blob-code blob-code-inner js-file-line"><span class="pl-c">supplied using the _move_-semantics. The method `send` returns a</span></td>
      </tr>
      <tr>
        <td id="L4932" class="blob-num js-line-number" data-line-number="4932"></td>
        <td id="LC4932" class="blob-code blob-code-inner js-file-line"><span class="pl-c">`std::pair&lt;ssize_t, int32_t&gt;` where the first element returns the size of the</span></td>
      </tr>
      <tr>
        <td id="L4933" class="blob-num js-line-number" data-line-number="4933"></td>
        <td id="LC4933" class="blob-code blob-code-inner js-file-line"><span class="pl-c">successfully sent bytes and the second element contains the error code in case</span></td>
      </tr>
      <tr>
        <td id="L4934" class="blob-num js-line-number" data-line-number="4934"></td>
        <td id="LC4934" class="blob-code blob-code-inner js-file-line"><span class="pl-c">the transmission of the data failed.</span></td>
      </tr>
      <tr>
        <td id="L4935" class="blob-num js-line-number" data-line-number="4935"></td>
        <td id="LC4935" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L4936" class="blob-num js-line-number" data-line-number="4936"></td>
        <td id="LC4936" class="blob-code blob-code-inner js-file-line"><span class="pl-c">An example using a C++ lambda expression would look as follows:</span></td>
      </tr>
      <tr>
        <td id="L4937" class="blob-num js-line-number" data-line-number="4937"></td>
        <td id="LC4937" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L4938" class="blob-num js-line-number" data-line-number="4938"></td>
        <td id="LC4938" class="blob-code blob-code-inner js-file-line"><span class="pl-c">\code{.cpp}</span></td>
      </tr>
      <tr>
        <td id="L4939" class="blob-num js-line-number" data-line-number="4939"></td>
        <td id="LC4939" class="blob-code blob-code-inner js-file-line"><span class="pl-c">cluon::TCPConnection connection(&quot;127.0.0.1&quot;, 1234,</span></td>
      </tr>
      <tr>
        <td id="L4940" class="blob-num js-line-number" data-line-number="4940"></td>
        <td id="LC4940" class="blob-code blob-code-inner js-file-line"><span class="pl-c">    [](std::string &amp;&amp;data, std::string &amp;&amp;sender, std::chrono::system_clock::time_point &amp;&amp;ts) noexcept {</span></td>
      </tr>
      <tr>
        <td id="L4941" class="blob-num js-line-number" data-line-number="4941"></td>
        <td id="LC4941" class="blob-code blob-code-inner js-file-line"><span class="pl-c">        const auto timestamp(std::chrono::system_clock::to_time_t(ts));</span></td>
      </tr>
      <tr>
        <td id="L4942" class="blob-num js-line-number" data-line-number="4942"></td>
        <td id="LC4942" class="blob-code blob-code-inner js-file-line"><span class="pl-c">        std::cout &lt;&lt; &quot;Received &quot; &lt;&lt; data.size() &lt;&lt; &quot; bytes&quot;</span></td>
      </tr>
      <tr>
        <td id="L4943" class="blob-num js-line-number" data-line-number="4943"></td>
        <td id="LC4943" class="blob-code blob-code-inner js-file-line"><span class="pl-c">                  &lt;&lt; &quot; from &quot; &lt;&lt; sender</span></td>
      </tr>
      <tr>
        <td id="L4944" class="blob-num js-line-number" data-line-number="4944"></td>
        <td id="LC4944" class="blob-code blob-code-inner js-file-line"><span class="pl-c">                  &lt;&lt; &quot; at &quot; &lt;&lt; std::put_time(std::localtime(&amp;timestamp), &quot;%Y-%m-%d %X&quot;)</span></td>
      </tr>
      <tr>
        <td id="L4945" class="blob-num js-line-number" data-line-number="4945"></td>
        <td id="LC4945" class="blob-code blob-code-inner js-file-line"><span class="pl-c">                  &lt;&lt; &quot;, containing &#39;&quot; &lt;&lt; data &lt;&lt; &quot;&#39;.&quot; &lt;&lt; std::endl;</span></td>
      </tr>
      <tr>
        <td id="L4946" class="blob-num js-line-number" data-line-number="4946"></td>
        <td id="LC4946" class="blob-code blob-code-inner js-file-line"><span class="pl-c">    },</span></td>
      </tr>
      <tr>
        <td id="L4947" class="blob-num js-line-number" data-line-number="4947"></td>
        <td id="LC4947" class="blob-code blob-code-inner js-file-line"><span class="pl-c">    [](){ std::cout &lt;&lt; &quot;Connection lost.&quot; &lt;&lt; std::endl; });</span></td>
      </tr>
      <tr>
        <td id="L4948" class="blob-num js-line-number" data-line-number="4948"></td>
        <td id="LC4948" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L4949" class="blob-num js-line-number" data-line-number="4949"></td>
        <td id="LC4949" class="blob-code blob-code-inner js-file-line"><span class="pl-c">std::pair&lt;ssize_t, int32_t&gt; retVal = connection.send(std::move(&quot;Hello World!&quot;));</span></td>
      </tr>
      <tr>
        <td id="L4950" class="blob-num js-line-number" data-line-number="4950"></td>
        <td id="LC4950" class="blob-code blob-code-inner js-file-line"><span class="pl-c">\endcode</span></td>
      </tr>
      <tr>
        <td id="L4951" class="blob-num js-line-number" data-line-number="4951"></td>
        <td id="LC4951" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L4952" class="blob-num js-line-number" data-line-number="4952"></td>
        <td id="LC4952" class="blob-code blob-code-inner js-file-line"><span class="pl-c">After creating an instance of class `cluon::TCPConnection`, it is immediately</span></td>
      </tr>
      <tr>
        <td id="L4953" class="blob-num js-line-number" data-line-number="4953"></td>
        <td id="LC4953" class="blob-code blob-code-inner js-file-line"><span class="pl-c">activated and concurrently waiting for data in a separate thread. To check</span></td>
      </tr>
      <tr>
        <td id="L4954" class="blob-num js-line-number" data-line-number="4954"></td>
        <td id="LC4954" class="blob-code blob-code-inner js-file-line"><span class="pl-c">whether the instance was created successfully and running, the method</span></td>
      </tr>
      <tr>
        <td id="L4955" class="blob-num js-line-number" data-line-number="4955"></td>
        <td id="LC4955" class="blob-code blob-code-inner js-file-line"><span class="pl-c">`isRunning()` should be called.</span></td>
      </tr>
      <tr>
        <td id="L4956" class="blob-num js-line-number" data-line-number="4956"></td>
        <td id="LC4956" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L4957" class="blob-num js-line-number" data-line-number="4957"></td>
        <td id="LC4957" class="blob-code blob-code-inner js-file-line"><span class="pl-k">class</span> <span class="pl-en">LIBCLUON_API</span> TCPConnection {</td>
      </tr>
      <tr>
        <td id="L4958" class="blob-num js-line-number" data-line-number="4958"></td>
        <td id="LC4958" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L4959" class="blob-num js-line-number" data-line-number="4959"></td>
        <td id="LC4959" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">TCPConnection</span>(<span class="pl-k">const</span> TCPConnection &amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L4960" class="blob-num js-line-number" data-line-number="4960"></td>
        <td id="LC4960" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">TCPConnection</span>(TCPConnection &amp;&amp;)      = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L4961" class="blob-num js-line-number" data-line-number="4961"></td>
        <td id="LC4961" class="blob-code blob-code-inner js-file-line">    TCPConnection &amp;<span class="pl-k">operator</span>=(<span class="pl-k">const</span> TCPConnection &amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L4962" class="blob-num js-line-number" data-line-number="4962"></td>
        <td id="LC4962" class="blob-code blob-code-inner js-file-line">    TCPConnection &amp;<span class="pl-k">operator</span>=(TCPConnection &amp;&amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L4963" class="blob-num js-line-number" data-line-number="4963"></td>
        <td id="LC4963" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4964" class="blob-num js-line-number" data-line-number="4964"></td>
        <td id="LC4964" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L4965" class="blob-num js-line-number" data-line-number="4965"></td>
        <td id="LC4965" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L4966" class="blob-num js-line-number" data-line-number="4966"></td>
        <td id="LC4966" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * Constructor.</span></td>
      </tr>
      <tr>
        <td id="L4967" class="blob-num js-line-number" data-line-number="4967"></td>
        <td id="LC4967" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     *</span></td>
      </tr>
      <tr>
        <td id="L4968" class="blob-num js-line-number" data-line-number="4968"></td>
        <td id="LC4968" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param address Numerical IPv4 address to receive UDP packets from.</span></td>
      </tr>
      <tr>
        <td id="L4969" class="blob-num js-line-number" data-line-number="4969"></td>
        <td id="LC4969" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param port Port to receive UDP packets from.</span></td>
      </tr>
      <tr>
        <td id="L4970" class="blob-num js-line-number" data-line-number="4970"></td>
        <td id="LC4970" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param newDataDelegate Functional (noexcept) to handle received bytes; parameters are received data, timestamp.</span></td>
      </tr>
      <tr>
        <td id="L4971" class="blob-num js-line-number" data-line-number="4971"></td>
        <td id="LC4971" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param connectionLostDelegate Functional (noexcept) to handle a lost connection.</span></td>
      </tr>
      <tr>
        <td id="L4972" class="blob-num js-line-number" data-line-number="4972"></td>
        <td id="LC4972" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L4973" class="blob-num js-line-number" data-line-number="4973"></td>
        <td id="LC4973" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">TCPConnection</span>(<span class="pl-k">const</span> std::string &amp;address,</td>
      </tr>
      <tr>
        <td id="L4974" class="blob-num js-line-number" data-line-number="4974"></td>
        <td id="LC4974" class="blob-code blob-code-inner js-file-line">                  <span class="pl-c1">uint16_t</span> port,</td>
      </tr>
      <tr>
        <td id="L4975" class="blob-num js-line-number" data-line-number="4975"></td>
        <td id="LC4975" class="blob-code blob-code-inner js-file-line">                  std::function&lt;<span class="pl-k">void</span>(std::string &amp;&amp;, std::chrono::system_clock::time_point &amp;&amp;)&gt; newDataDelegate,</td>
      </tr>
      <tr>
        <td id="L4976" class="blob-num js-line-number" data-line-number="4976"></td>
        <td id="LC4976" class="blob-code blob-code-inner js-file-line">                  std::function&lt;<span class="pl-k">void</span>()&gt; connectionLostDelegate) noexcept;</td>
      </tr>
      <tr>
        <td id="L4977" class="blob-num js-line-number" data-line-number="4977"></td>
        <td id="LC4977" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">~TCPConnection</span>() noexcept;</td>
      </tr>
      <tr>
        <td id="L4978" class="blob-num js-line-number" data-line-number="4978"></td>
        <td id="LC4978" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4979" class="blob-num js-line-number" data-line-number="4979"></td>
        <td id="LC4979" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L4980" class="blob-num js-line-number" data-line-number="4980"></td>
        <td id="LC4980" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @return true if the TCPConnection could successfully be created and is able to receive data.</span></td>
      </tr>
      <tr>
        <td id="L4981" class="blob-num js-line-number" data-line-number="4981"></td>
        <td id="LC4981" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L4982" class="blob-num js-line-number" data-line-number="4982"></td>
        <td id="LC4982" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">bool</span> <span class="pl-en">isRunning</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L4983" class="blob-num js-line-number" data-line-number="4983"></td>
        <td id="LC4983" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4984" class="blob-num js-line-number" data-line-number="4984"></td>
        <td id="LC4984" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L4985" class="blob-num js-line-number" data-line-number="4985"></td>
        <td id="LC4985" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * Send a given string.</span></td>
      </tr>
      <tr>
        <td id="L4986" class="blob-num js-line-number" data-line-number="4986"></td>
        <td id="LC4986" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     *</span></td>
      </tr>
      <tr>
        <td id="L4987" class="blob-num js-line-number" data-line-number="4987"></td>
        <td id="LC4987" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param data Data to send.</span></td>
      </tr>
      <tr>
        <td id="L4988" class="blob-num js-line-number" data-line-number="4988"></td>
        <td id="LC4988" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @return Pair: Number of bytes sent and errno.</span></td>
      </tr>
      <tr>
        <td id="L4989" class="blob-num js-line-number" data-line-number="4989"></td>
        <td id="LC4989" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L4990" class="blob-num js-line-number" data-line-number="4990"></td>
        <td id="LC4990" class="blob-code blob-code-inner js-file-line">    std::pair&lt;<span class="pl-c1">ssize_t</span>, <span class="pl-c1">int32_t</span>&gt; <span class="pl-en">send</span>(std::string &amp;&amp;data) <span class="pl-k">const</span> <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L4991" class="blob-num js-line-number" data-line-number="4991"></td>
        <td id="LC4991" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L4992" class="blob-num js-line-number" data-line-number="4992"></td>
        <td id="LC4992" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L4993" class="blob-num js-line-number" data-line-number="4993"></td>
        <td id="LC4993" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L4994" class="blob-num js-line-number" data-line-number="4994"></td>
        <td id="LC4994" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * This method closes the socket.</span></td>
      </tr>
      <tr>
        <td id="L4995" class="blob-num js-line-number" data-line-number="4995"></td>
        <td id="LC4995" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     *</span></td>
      </tr>
      <tr>
        <td id="L4996" class="blob-num js-line-number" data-line-number="4996"></td>
        <td id="LC4996" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param errorCode Error code that caused this closing.</span></td>
      </tr>
      <tr>
        <td id="L4997" class="blob-num js-line-number" data-line-number="4997"></td>
        <td id="LC4997" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L4998" class="blob-num js-line-number" data-line-number="4998"></td>
        <td id="LC4998" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">closeSocket</span>(<span class="pl-k">int</span> errorCode) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L4999" class="blob-num js-line-number" data-line-number="4999"></td>
        <td id="LC4999" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">readFromSocket</span>() <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5000" class="blob-num js-line-number" data-line-number="5000"></td>
        <td id="LC5000" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5001" class="blob-num js-line-number" data-line-number="5001"></td>
        <td id="LC5001" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L5002" class="blob-num js-line-number" data-line-number="5002"></td>
        <td id="LC5002" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">mutable</span> std::mutex m_socketMutex{};</td>
      </tr>
      <tr>
        <td id="L5003" class="blob-num js-line-number" data-line-number="5003"></td>
        <td id="LC5003" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">int32_t</span> m_socket{-<span class="pl-c1">1</span>};</td>
      </tr>
      <tr>
        <td id="L5004" class="blob-num js-line-number" data-line-number="5004"></td>
        <td id="LC5004" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">struct</span> <span class="pl-en">sockaddr_in</span> m_address {};</td>
      </tr>
      <tr>
        <td id="L5005" class="blob-num js-line-number" data-line-number="5005"></td>
        <td id="LC5005" class="blob-code blob-code-inner js-file-line">    std::atomic&lt;<span class="pl-k">bool</span>&gt; m_readFromSocketThreadRunning{<span class="pl-c1">false</span>};</td>
      </tr>
      <tr>
        <td id="L5006" class="blob-num js-line-number" data-line-number="5006"></td>
        <td id="LC5006" class="blob-code blob-code-inner js-file-line">    std::thread m_readFromSocketThread{};</td>
      </tr>
      <tr>
        <td id="L5007" class="blob-num js-line-number" data-line-number="5007"></td>
        <td id="LC5007" class="blob-code blob-code-inner js-file-line">    std::function&lt;<span class="pl-k">void</span>(std::string &amp;&amp;, std::chrono::system_clock::time_point)&gt; m_newDataDelegate{};</td>
      </tr>
      <tr>
        <td id="L5008" class="blob-num js-line-number" data-line-number="5008"></td>
        <td id="LC5008" class="blob-code blob-code-inner js-file-line">    std::function&lt;<span class="pl-k">void</span>()&gt; m_connectionLostDelegate{};</td>
      </tr>
      <tr>
        <td id="L5009" class="blob-num js-line-number" data-line-number="5009"></td>
        <td id="LC5009" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L5010" class="blob-num js-line-number" data-line-number="5010"></td>
        <td id="LC5010" class="blob-code blob-code-inner js-file-line">} <span class="pl-c"><span class="pl-c">//</span> namespace cluon</span></td>
      </tr>
      <tr>
        <td id="L5011" class="blob-num js-line-number" data-line-number="5011"></td>
        <td id="LC5011" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5012" class="blob-num js-line-number" data-line-number="5012"></td>
        <td id="LC5012" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L5013" class="blob-num js-line-number" data-line-number="5013"></td>
        <td id="LC5013" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L5014" class="blob-num js-line-number" data-line-number="5014"></td>
        <td id="LC5014" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Copyright (C) 2017-2018  Christian Berger</span></td>
      </tr>
      <tr>
        <td id="L5015" class="blob-num js-line-number" data-line-number="5015"></td>
        <td id="LC5015" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L5016" class="blob-num js-line-number" data-line-number="5016"></td>
        <td id="LC5016" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is free software: you can redistribute it and/or modify</span></td>
      </tr>
      <tr>
        <td id="L5017" class="blob-num js-line-number" data-line-number="5017"></td>
        <td id="LC5017" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * it under the terms of the GNU General Public License as published by</span></td>
      </tr>
      <tr>
        <td id="L5018" class="blob-num js-line-number" data-line-number="5018"></td>
        <td id="LC5018" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * the Free Software Foundation, either version 3 of the License, or</span></td>
      </tr>
      <tr>
        <td id="L5019" class="blob-num js-line-number" data-line-number="5019"></td>
        <td id="LC5019" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * (at your option) any later version.</span></td>
      </tr>
      <tr>
        <td id="L5020" class="blob-num js-line-number" data-line-number="5020"></td>
        <td id="LC5020" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L5021" class="blob-num js-line-number" data-line-number="5021"></td>
        <td id="LC5021" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is distributed in the hope that it will be useful,</span></td>
      </tr>
      <tr>
        <td id="L5022" class="blob-num js-line-number" data-line-number="5022"></td>
        <td id="LC5022" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></td>
      </tr>
      <tr>
        <td id="L5023" class="blob-num js-line-number" data-line-number="5023"></td>
        <td id="LC5023" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></td>
      </tr>
      <tr>
        <td id="L5024" class="blob-num js-line-number" data-line-number="5024"></td>
        <td id="LC5024" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * GNU General Public License for more details.</span></td>
      </tr>
      <tr>
        <td id="L5025" class="blob-num js-line-number" data-line-number="5025"></td>
        <td id="LC5025" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L5026" class="blob-num js-line-number" data-line-number="5026"></td>
        <td id="LC5026" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * You should have received a copy of the GNU General Public License</span></td>
      </tr>
      <tr>
        <td id="L5027" class="blob-num js-line-number" data-line-number="5027"></td>
        <td id="LC5027" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></td>
      </tr>
      <tr>
        <td id="L5028" class="blob-num js-line-number" data-line-number="5028"></td>
        <td id="LC5028" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L5029" class="blob-num js-line-number" data-line-number="5029"></td>
        <td id="LC5029" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5030" class="blob-num js-line-number" data-line-number="5030"></td>
        <td id="LC5030" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifndef</span> PROTOCONSTANTS_HPP</td>
      </tr>
      <tr>
        <td id="L5031" class="blob-num js-line-number" data-line-number="5031"></td>
        <td id="LC5031" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">define</span> <span class="pl-en">PROTOCONSTANTS_HPP</span></td>
      </tr>
      <tr>
        <td id="L5032" class="blob-num js-line-number" data-line-number="5032"></td>
        <td id="LC5032" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5033" class="blob-num js-line-number" data-line-number="5033"></td>
        <td id="LC5033" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>cstdint<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L5034" class="blob-num js-line-number" data-line-number="5034"></td>
        <td id="LC5034" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5035" class="blob-num js-line-number" data-line-number="5035"></td>
        <td id="LC5035" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> clang-format off</span></td>
      </tr>
      <tr>
        <td id="L5036" class="blob-num js-line-number" data-line-number="5036"></td>
        <td id="LC5036" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">cluon</span> {</td>
      </tr>
      <tr>
        <td id="L5037" class="blob-num js-line-number" data-line-number="5037"></td>
        <td id="LC5037" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">enum</span> <span class="pl-k">class</span> <span class="pl-en">ProtoConstants</span> : <span class="pl-c1">uint8_t</span> {</td>
      </tr>
      <tr>
        <td id="L5038" class="blob-num js-line-number" data-line-number="5038"></td>
        <td id="LC5038" class="blob-code blob-code-inner js-file-line">        VARINT           = <span class="pl-c1">0</span>,</td>
      </tr>
      <tr>
        <td id="L5039" class="blob-num js-line-number" data-line-number="5039"></td>
        <td id="LC5039" class="blob-code blob-code-inner js-file-line">        EIGHT_BYTES      = <span class="pl-c1">1</span>,</td>
      </tr>
      <tr>
        <td id="L5040" class="blob-num js-line-number" data-line-number="5040"></td>
        <td id="LC5040" class="blob-code blob-code-inner js-file-line">        LENGTH_DELIMITED = <span class="pl-c1">2</span>,</td>
      </tr>
      <tr>
        <td id="L5041" class="blob-num js-line-number" data-line-number="5041"></td>
        <td id="LC5041" class="blob-code blob-code-inner js-file-line">        FOUR_BYTES       = <span class="pl-c1">5</span>, };</td>
      </tr>
      <tr>
        <td id="L5042" class="blob-num js-line-number" data-line-number="5042"></td>
        <td id="LC5042" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L5043" class="blob-num js-line-number" data-line-number="5043"></td>
        <td id="LC5043" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> clang-format on</span></td>
      </tr>
      <tr>
        <td id="L5044" class="blob-num js-line-number" data-line-number="5044"></td>
        <td id="LC5044" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5045" class="blob-num js-line-number" data-line-number="5045"></td>
        <td id="LC5045" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L5046" class="blob-num js-line-number" data-line-number="5046"></td>
        <td id="LC5046" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L5047" class="blob-num js-line-number" data-line-number="5047"></td>
        <td id="LC5047" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Copyright (C) 2017-2018  Christian Berger</span></td>
      </tr>
      <tr>
        <td id="L5048" class="blob-num js-line-number" data-line-number="5048"></td>
        <td id="LC5048" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L5049" class="blob-num js-line-number" data-line-number="5049"></td>
        <td id="LC5049" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is free software: you can redistribute it and/or modify</span></td>
      </tr>
      <tr>
        <td id="L5050" class="blob-num js-line-number" data-line-number="5050"></td>
        <td id="LC5050" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * it under the terms of the GNU General Public License as published by</span></td>
      </tr>
      <tr>
        <td id="L5051" class="blob-num js-line-number" data-line-number="5051"></td>
        <td id="LC5051" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * the Free Software Foundation, either version 3 of the License, or</span></td>
      </tr>
      <tr>
        <td id="L5052" class="blob-num js-line-number" data-line-number="5052"></td>
        <td id="LC5052" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * (at your option) any later version.</span></td>
      </tr>
      <tr>
        <td id="L5053" class="blob-num js-line-number" data-line-number="5053"></td>
        <td id="LC5053" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L5054" class="blob-num js-line-number" data-line-number="5054"></td>
        <td id="LC5054" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is distributed in the hope that it will be useful,</span></td>
      </tr>
      <tr>
        <td id="L5055" class="blob-num js-line-number" data-line-number="5055"></td>
        <td id="LC5055" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></td>
      </tr>
      <tr>
        <td id="L5056" class="blob-num js-line-number" data-line-number="5056"></td>
        <td id="LC5056" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></td>
      </tr>
      <tr>
        <td id="L5057" class="blob-num js-line-number" data-line-number="5057"></td>
        <td id="LC5057" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * GNU General Public License for more details.</span></td>
      </tr>
      <tr>
        <td id="L5058" class="blob-num js-line-number" data-line-number="5058"></td>
        <td id="LC5058" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L5059" class="blob-num js-line-number" data-line-number="5059"></td>
        <td id="LC5059" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * You should have received a copy of the GNU General Public License</span></td>
      </tr>
      <tr>
        <td id="L5060" class="blob-num js-line-number" data-line-number="5060"></td>
        <td id="LC5060" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></td>
      </tr>
      <tr>
        <td id="L5061" class="blob-num js-line-number" data-line-number="5061"></td>
        <td id="LC5061" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L5062" class="blob-num js-line-number" data-line-number="5062"></td>
        <td id="LC5062" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5063" class="blob-num js-line-number" data-line-number="5063"></td>
        <td id="LC5063" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifndef</span> TOPROTOVISITOR_HPP</td>
      </tr>
      <tr>
        <td id="L5064" class="blob-num js-line-number" data-line-number="5064"></td>
        <td id="LC5064" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">define</span> <span class="pl-en">TOPROTOVISITOR_HPP</span></td>
      </tr>
      <tr>
        <td id="L5065" class="blob-num js-line-number" data-line-number="5065"></td>
        <td id="LC5065" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5066" class="blob-num js-line-number" data-line-number="5066"></td>
        <td id="LC5066" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/ProtoConstants.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L5067" class="blob-num js-line-number" data-line-number="5067"></td>
        <td id="LC5067" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/cluon.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L5068" class="blob-num js-line-number" data-line-number="5068"></td>
        <td id="LC5068" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5069" class="blob-num js-line-number" data-line-number="5069"></td>
        <td id="LC5069" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>cstdint<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L5070" class="blob-num js-line-number" data-line-number="5070"></td>
        <td id="LC5070" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>sstream<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L5071" class="blob-num js-line-number" data-line-number="5071"></td>
        <td id="LC5071" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>string<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L5072" class="blob-num js-line-number" data-line-number="5072"></td>
        <td id="LC5072" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5073" class="blob-num js-line-number" data-line-number="5073"></td>
        <td id="LC5073" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">cluon</span> {</td>
      </tr>
      <tr>
        <td id="L5074" class="blob-num js-line-number" data-line-number="5074"></td>
        <td id="LC5074" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L5075" class="blob-num js-line-number" data-line-number="5075"></td>
        <td id="LC5075" class="blob-code blob-code-inner js-file-line"><span class="pl-c">This class encodes a given message in Proto format.</span></td>
      </tr>
      <tr>
        <td id="L5076" class="blob-num js-line-number" data-line-number="5076"></td>
        <td id="LC5076" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L5077" class="blob-num js-line-number" data-line-number="5077"></td>
        <td id="LC5077" class="blob-code blob-code-inner js-file-line"><span class="pl-k">class</span> <span class="pl-en">LIBCLUON_API</span> ToProtoVisitor {</td>
      </tr>
      <tr>
        <td id="L5078" class="blob-num js-line-number" data-line-number="5078"></td>
        <td id="LC5078" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L5079" class="blob-num js-line-number" data-line-number="5079"></td>
        <td id="LC5079" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">ToProtoVisitor</span>(<span class="pl-k">const</span> ToProtoVisitor &amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L5080" class="blob-num js-line-number" data-line-number="5080"></td>
        <td id="LC5080" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">ToProtoVisitor</span>(ToProtoVisitor &amp;&amp;)      = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L5081" class="blob-num js-line-number" data-line-number="5081"></td>
        <td id="LC5081" class="blob-code blob-code-inner js-file-line">    ToProtoVisitor &amp;<span class="pl-k">operator</span>=(<span class="pl-k">const</span> ToProtoVisitor &amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L5082" class="blob-num js-line-number" data-line-number="5082"></td>
        <td id="LC5082" class="blob-code blob-code-inner js-file-line">    ToProtoVisitor &amp;<span class="pl-k">operator</span>=(ToProtoVisitor &amp;&amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L5083" class="blob-num js-line-number" data-line-number="5083"></td>
        <td id="LC5083" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5084" class="blob-num js-line-number" data-line-number="5084"></td>
        <td id="LC5084" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L5085" class="blob-num js-line-number" data-line-number="5085"></td>
        <td id="LC5085" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">ToProtoVisitor</span>()  = <span class="pl-k">default</span>;</td>
      </tr>
      <tr>
        <td id="L5086" class="blob-num js-line-number" data-line-number="5086"></td>
        <td id="LC5086" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">~ToProtoVisitor</span>() = <span class="pl-k">default</span>;</td>
      </tr>
      <tr>
        <td id="L5087" class="blob-num js-line-number" data-line-number="5087"></td>
        <td id="LC5087" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5088" class="blob-num js-line-number" data-line-number="5088"></td>
        <td id="LC5088" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L5089" class="blob-num js-line-number" data-line-number="5089"></td>
        <td id="LC5089" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @return Encoded data in Proto format.</span></td>
      </tr>
      <tr>
        <td id="L5090" class="blob-num js-line-number" data-line-number="5090"></td>
        <td id="LC5090" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L5091" class="blob-num js-line-number" data-line-number="5091"></td>
        <td id="LC5091" class="blob-code blob-code-inner js-file-line">    std::string <span class="pl-en">encodedData</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5092" class="blob-num js-line-number" data-line-number="5092"></td>
        <td id="LC5092" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5093" class="blob-num js-line-number" data-line-number="5093"></td>
        <td id="LC5093" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L5094" class="blob-num js-line-number" data-line-number="5094"></td>
        <td id="LC5094" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> The following methods are provided to allow an instance of this class to</span></td>
      </tr>
      <tr>
        <td id="L5095" class="blob-num js-line-number" data-line-number="5095"></td>
        <td id="LC5095" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> be used as visitor for an instance with the method signature void accept&lt;T&gt;(T&amp;);</span></td>
      </tr>
      <tr>
        <td id="L5096" class="blob-num js-line-number" data-line-number="5096"></td>
        <td id="LC5096" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5097" class="blob-num js-line-number" data-line-number="5097"></td>
        <td id="LC5097" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">preVisit</span>(<span class="pl-c1">int32_t</span> id, <span class="pl-k">const</span> std::string &amp;shortName, <span class="pl-k">const</span> std::string &amp;longName) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5098" class="blob-num js-line-number" data-line-number="5098"></td>
        <td id="LC5098" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">postVisit</span>() <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5099" class="blob-num js-line-number" data-line-number="5099"></td>
        <td id="LC5099" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5100" class="blob-num js-line-number" data-line-number="5100"></td>
        <td id="LC5100" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">bool</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5101" class="blob-num js-line-number" data-line-number="5101"></td>
        <td id="LC5101" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">char</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5102" class="blob-num js-line-number" data-line-number="5102"></td>
        <td id="LC5102" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int8_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5103" class="blob-num js-line-number" data-line-number="5103"></td>
        <td id="LC5103" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint8_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5104" class="blob-num js-line-number" data-line-number="5104"></td>
        <td id="LC5104" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int16_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5105" class="blob-num js-line-number" data-line-number="5105"></td>
        <td id="LC5105" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint16_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5106" class="blob-num js-line-number" data-line-number="5106"></td>
        <td id="LC5106" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int32_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5107" class="blob-num js-line-number" data-line-number="5107"></td>
        <td id="LC5107" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint32_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5108" class="blob-num js-line-number" data-line-number="5108"></td>
        <td id="LC5108" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int64_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5109" class="blob-num js-line-number" data-line-number="5109"></td>
        <td id="LC5109" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint64_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5110" class="blob-num js-line-number" data-line-number="5110"></td>
        <td id="LC5110" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">float</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5111" class="blob-num js-line-number" data-line-number="5111"></td>
        <td id="LC5111" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">double</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5112" class="blob-num js-line-number" data-line-number="5112"></td>
        <td id="LC5112" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, std::string &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5113" class="blob-num js-line-number" data-line-number="5113"></td>
        <td id="LC5113" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5114" class="blob-num js-line-number" data-line-number="5114"></td>
        <td id="LC5114" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> T&gt;</td>
      </tr>
      <tr>
        <td id="L5115" class="blob-num js-line-number" data-line-number="5115"></td>
        <td id="LC5115" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> &amp;id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, T &amp;value) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L5116" class="blob-num js-line-number" data-line-number="5116"></td>
        <td id="LC5116" class="blob-code blob-code-inner js-file-line">        (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L5117" class="blob-num js-line-number" data-line-number="5117"></td>
        <td id="LC5117" class="blob-code blob-code-inner js-file-line">        (<span class="pl-k">void</span>)name;</td>
      </tr>
      <tr>
        <td id="L5118" class="blob-num js-line-number" data-line-number="5118"></td>
        <td id="LC5118" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5119" class="blob-num js-line-number" data-line-number="5119"></td>
        <td id="LC5119" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">toVarInt</span>(m_buffer, <span class="pl-c1">std::move</span>(<span class="pl-c1">encodeKey</span>(id, <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(ProtoConstants::LENGTH_DELIMITED))));</td>
      </tr>
      <tr>
        <td id="L5120" class="blob-num js-line-number" data-line-number="5120"></td>
        <td id="LC5120" class="blob-code blob-code-inner js-file-line">        cluon::ToProtoVisitor nestedProtoEncoder;</td>
      </tr>
      <tr>
        <td id="L5121" class="blob-num js-line-number" data-line-number="5121"></td>
        <td id="LC5121" class="blob-code blob-code-inner js-file-line">        value.<span class="pl-c1">accept</span>(nestedProtoEncoder);</td>
      </tr>
      <tr>
        <td id="L5122" class="blob-num js-line-number" data-line-number="5122"></td>
        <td id="LC5122" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">encode</span>(m_buffer, <span class="pl-c1">std::move</span>(nestedProtoEncoder.<span class="pl-c1">encodedData</span>()));</td>
      </tr>
      <tr>
        <td id="L5123" class="blob-num js-line-number" data-line-number="5123"></td>
        <td id="LC5123" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L5124" class="blob-num js-line-number" data-line-number="5124"></td>
        <td id="LC5124" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5125" class="blob-num js-line-number" data-line-number="5125"></td>
        <td id="LC5125" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L5126" class="blob-num js-line-number" data-line-number="5126"></td>
        <td id="LC5126" class="blob-code blob-code-inner js-file-line">    std::<span class="pl-c1">size_t</span> <span class="pl-en">encode</span>(std::ostream &amp;o, <span class="pl-k">bool</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5127" class="blob-num js-line-number" data-line-number="5127"></td>
        <td id="LC5127" class="blob-code blob-code-inner js-file-line">    std::<span class="pl-c1">size_t</span> <span class="pl-en">encode</span>(std::ostream &amp;o, <span class="pl-c1">int8_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5128" class="blob-num js-line-number" data-line-number="5128"></td>
        <td id="LC5128" class="blob-code blob-code-inner js-file-line">    std::<span class="pl-c1">size_t</span> <span class="pl-en">encode</span>(std::ostream &amp;o, <span class="pl-c1">uint8_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5129" class="blob-num js-line-number" data-line-number="5129"></td>
        <td id="LC5129" class="blob-code blob-code-inner js-file-line">    std::<span class="pl-c1">size_t</span> <span class="pl-en">encode</span>(std::ostream &amp;o, <span class="pl-c1">int16_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5130" class="blob-num js-line-number" data-line-number="5130"></td>
        <td id="LC5130" class="blob-code blob-code-inner js-file-line">    std::<span class="pl-c1">size_t</span> <span class="pl-en">encode</span>(std::ostream &amp;o, <span class="pl-c1">uint16_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5131" class="blob-num js-line-number" data-line-number="5131"></td>
        <td id="LC5131" class="blob-code blob-code-inner js-file-line">    std::<span class="pl-c1">size_t</span> <span class="pl-en">encode</span>(std::ostream &amp;o, <span class="pl-c1">int32_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5132" class="blob-num js-line-number" data-line-number="5132"></td>
        <td id="LC5132" class="blob-code blob-code-inner js-file-line">    std::<span class="pl-c1">size_t</span> <span class="pl-en">encode</span>(std::ostream &amp;o, <span class="pl-c1">uint32_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5133" class="blob-num js-line-number" data-line-number="5133"></td>
        <td id="LC5133" class="blob-code blob-code-inner js-file-line">    std::<span class="pl-c1">size_t</span> <span class="pl-en">encode</span>(std::ostream &amp;o, <span class="pl-c1">int64_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5134" class="blob-num js-line-number" data-line-number="5134"></td>
        <td id="LC5134" class="blob-code blob-code-inner js-file-line">    std::<span class="pl-c1">size_t</span> <span class="pl-en">encode</span>(std::ostream &amp;o, <span class="pl-c1">uint64_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5135" class="blob-num js-line-number" data-line-number="5135"></td>
        <td id="LC5135" class="blob-code blob-code-inner js-file-line">    std::<span class="pl-c1">size_t</span> <span class="pl-en">encode</span>(std::ostream &amp;o, <span class="pl-k">float</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5136" class="blob-num js-line-number" data-line-number="5136"></td>
        <td id="LC5136" class="blob-code blob-code-inner js-file-line">    std::<span class="pl-c1">size_t</span> <span class="pl-en">encode</span>(std::ostream &amp;o, <span class="pl-k">double</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5137" class="blob-num js-line-number" data-line-number="5137"></td>
        <td id="LC5137" class="blob-code blob-code-inner js-file-line">    std::<span class="pl-c1">size_t</span> <span class="pl-en">encode</span>(std::ostream &amp;o, <span class="pl-k">const</span> std::string &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5138" class="blob-num js-line-number" data-line-number="5138"></td>
        <td id="LC5138" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5139" class="blob-num js-line-number" data-line-number="5139"></td>
        <td id="LC5139" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L5140" class="blob-num js-line-number" data-line-number="5140"></td>
        <td id="LC5140" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">uint8_t</span> <span class="pl-en">toZigZag8</span>(<span class="pl-c1">int8_t</span> v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5141" class="blob-num js-line-number" data-line-number="5141"></td>
        <td id="LC5141" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">uint16_t</span> <span class="pl-en">toZigZag16</span>(<span class="pl-c1">int16_t</span> v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5142" class="blob-num js-line-number" data-line-number="5142"></td>
        <td id="LC5142" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">uint32_t</span> <span class="pl-en">toZigZag32</span>(<span class="pl-c1">int32_t</span> v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5143" class="blob-num js-line-number" data-line-number="5143"></td>
        <td id="LC5143" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">uint64_t</span> <span class="pl-en">toZigZag64</span>(<span class="pl-c1">int64_t</span> v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5144" class="blob-num js-line-number" data-line-number="5144"></td>
        <td id="LC5144" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5145" class="blob-num js-line-number" data-line-number="5145"></td>
        <td id="LC5145" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L5146" class="blob-num js-line-number" data-line-number="5146"></td>
        <td id="LC5146" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * This method encodes a given value in VarInt.</span></td>
      </tr>
      <tr>
        <td id="L5147" class="blob-num js-line-number" data-line-number="5147"></td>
        <td id="LC5147" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     *</span></td>
      </tr>
      <tr>
        <td id="L5148" class="blob-num js-line-number" data-line-number="5148"></td>
        <td id="LC5148" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param out std::ostream to encode to.</span></td>
      </tr>
      <tr>
        <td id="L5149" class="blob-num js-line-number" data-line-number="5149"></td>
        <td id="LC5149" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param v Value to encode.</span></td>
      </tr>
      <tr>
        <td id="L5150" class="blob-num js-line-number" data-line-number="5150"></td>
        <td id="LC5150" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @return Bytes written.</span></td>
      </tr>
      <tr>
        <td id="L5151" class="blob-num js-line-number" data-line-number="5151"></td>
        <td id="LC5151" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L5152" class="blob-num js-line-number" data-line-number="5152"></td>
        <td id="LC5152" class="blob-code blob-code-inner js-file-line">    std::<span class="pl-c1">size_t</span> <span class="pl-en">toVarInt</span>(std::ostream &amp;out, <span class="pl-c1">uint64_t</span> v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5153" class="blob-num js-line-number" data-line-number="5153"></td>
        <td id="LC5153" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5154" class="blob-num js-line-number" data-line-number="5154"></td>
        <td id="LC5154" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L5155" class="blob-num js-line-number" data-line-number="5155"></td>
        <td id="LC5155" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * This method creates a key/value pair encoded in Proto format.</span></td>
      </tr>
      <tr>
        <td id="L5156" class="blob-num js-line-number" data-line-number="5156"></td>
        <td id="LC5156" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     *</span></td>
      </tr>
      <tr>
        <td id="L5157" class="blob-num js-line-number" data-line-number="5157"></td>
        <td id="LC5157" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param fieldIdentifier Field identifier.</span></td>
      </tr>
      <tr>
        <td id="L5158" class="blob-num js-line-number" data-line-number="5158"></td>
        <td id="LC5158" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param v Value to encode.</span></td>
      </tr>
      <tr>
        <td id="L5159" class="blob-num js-line-number" data-line-number="5159"></td>
        <td id="LC5159" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @return Bytes written.</span></td>
      </tr>
      <tr>
        <td id="L5160" class="blob-num js-line-number" data-line-number="5160"></td>
        <td id="LC5160" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L5161" class="blob-num js-line-number" data-line-number="5161"></td>
        <td id="LC5161" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> T&gt;</td>
      </tr>
      <tr>
        <td id="L5162" class="blob-num js-line-number" data-line-number="5162"></td>
        <td id="LC5162" class="blob-code blob-code-inner js-file-line">    std::<span class="pl-c1">size_t</span> <span class="pl-en">toKeyValue</span>(<span class="pl-c1">uint32_t</span> fieldIdentifier, T &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L5163" class="blob-num js-line-number" data-line-number="5163"></td>
        <td id="LC5163" class="blob-code blob-code-inner js-file-line">        std::<span class="pl-c1">size_t</span> size{<span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L5164" class="blob-num js-line-number" data-line-number="5164"></td>
        <td id="LC5164" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">uint64_t</span> key = <span class="pl-c1">encodeKey</span>(fieldIdentifier, <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(ProtoConstants::VARINT));</td>
      </tr>
      <tr>
        <td id="L5165" class="blob-num js-line-number" data-line-number="5165"></td>
        <td id="LC5165" class="blob-code blob-code-inner js-file-line">        size += <span class="pl-c1">toVarInt</span>(m_buffer, key);</td>
      </tr>
      <tr>
        <td id="L5166" class="blob-num js-line-number" data-line-number="5166"></td>
        <td id="LC5166" class="blob-code blob-code-inner js-file-line">        size += <span class="pl-c1">encode</span>(m_buffer, v);</td>
      </tr>
      <tr>
        <td id="L5167" class="blob-num js-line-number" data-line-number="5167"></td>
        <td id="LC5167" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> size;</td>
      </tr>
      <tr>
        <td id="L5168" class="blob-num js-line-number" data-line-number="5168"></td>
        <td id="LC5168" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L5169" class="blob-num js-line-number" data-line-number="5169"></td>
        <td id="LC5169" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5170" class="blob-num js-line-number" data-line-number="5170"></td>
        <td id="LC5170" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L5171" class="blob-num js-line-number" data-line-number="5171"></td>
        <td id="LC5171" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * This method creates the key for the key/value pair in Protobuf format.</span></td>
      </tr>
      <tr>
        <td id="L5172" class="blob-num js-line-number" data-line-number="5172"></td>
        <td id="LC5172" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     *</span></td>
      </tr>
      <tr>
        <td id="L5173" class="blob-num js-line-number" data-line-number="5173"></td>
        <td id="LC5173" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param fieldIdentifier Field identifier.</span></td>
      </tr>
      <tr>
        <td id="L5174" class="blob-num js-line-number" data-line-number="5174"></td>
        <td id="LC5174" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param protoType Protobuf type identifier.</span></td>
      </tr>
      <tr>
        <td id="L5175" class="blob-num js-line-number" data-line-number="5175"></td>
        <td id="LC5175" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @return Protobuf fieldIdentifier/key pair.</span></td>
      </tr>
      <tr>
        <td id="L5176" class="blob-num js-line-number" data-line-number="5176"></td>
        <td id="LC5176" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L5177" class="blob-num js-line-number" data-line-number="5177"></td>
        <td id="LC5177" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">uint64_t</span> <span class="pl-en">encodeKey</span>(<span class="pl-c1">uint32_t</span> fieldIdentifier, <span class="pl-c1">uint8_t</span> protoType) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5178" class="blob-num js-line-number" data-line-number="5178"></td>
        <td id="LC5178" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5179" class="blob-num js-line-number" data-line-number="5179"></td>
        <td id="LC5179" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L5180" class="blob-num js-line-number" data-line-number="5180"></td>
        <td id="LC5180" class="blob-code blob-code-inner js-file-line">    std::stringstream m_buffer{<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>};</td>
      </tr>
      <tr>
        <td id="L5181" class="blob-num js-line-number" data-line-number="5181"></td>
        <td id="LC5181" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L5182" class="blob-num js-line-number" data-line-number="5182"></td>
        <td id="LC5182" class="blob-code blob-code-inner js-file-line">} <span class="pl-c"><span class="pl-c">//</span> namespace cluon</span></td>
      </tr>
      <tr>
        <td id="L5183" class="blob-num js-line-number" data-line-number="5183"></td>
        <td id="LC5183" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5184" class="blob-num js-line-number" data-line-number="5184"></td>
        <td id="LC5184" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L5185" class="blob-num js-line-number" data-line-number="5185"></td>
        <td id="LC5185" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L5186" class="blob-num js-line-number" data-line-number="5186"></td>
        <td id="LC5186" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Copyright (C) 2017-2018  Christian Berger</span></td>
      </tr>
      <tr>
        <td id="L5187" class="blob-num js-line-number" data-line-number="5187"></td>
        <td id="LC5187" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L5188" class="blob-num js-line-number" data-line-number="5188"></td>
        <td id="LC5188" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is free software: you can redistribute it and/or modify</span></td>
      </tr>
      <tr>
        <td id="L5189" class="blob-num js-line-number" data-line-number="5189"></td>
        <td id="LC5189" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * it under the terms of the GNU General Public License as published by</span></td>
      </tr>
      <tr>
        <td id="L5190" class="blob-num js-line-number" data-line-number="5190"></td>
        <td id="LC5190" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * the Free Software Foundation, either version 3 of the License, or</span></td>
      </tr>
      <tr>
        <td id="L5191" class="blob-num js-line-number" data-line-number="5191"></td>
        <td id="LC5191" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * (at your option) any later version.</span></td>
      </tr>
      <tr>
        <td id="L5192" class="blob-num js-line-number" data-line-number="5192"></td>
        <td id="LC5192" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L5193" class="blob-num js-line-number" data-line-number="5193"></td>
        <td id="LC5193" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is distributed in the hope that it will be useful,</span></td>
      </tr>
      <tr>
        <td id="L5194" class="blob-num js-line-number" data-line-number="5194"></td>
        <td id="LC5194" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></td>
      </tr>
      <tr>
        <td id="L5195" class="blob-num js-line-number" data-line-number="5195"></td>
        <td id="LC5195" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></td>
      </tr>
      <tr>
        <td id="L5196" class="blob-num js-line-number" data-line-number="5196"></td>
        <td id="LC5196" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * GNU General Public License for more details.</span></td>
      </tr>
      <tr>
        <td id="L5197" class="blob-num js-line-number" data-line-number="5197"></td>
        <td id="LC5197" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L5198" class="blob-num js-line-number" data-line-number="5198"></td>
        <td id="LC5198" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * You should have received a copy of the GNU General Public License</span></td>
      </tr>
      <tr>
        <td id="L5199" class="blob-num js-line-number" data-line-number="5199"></td>
        <td id="LC5199" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></td>
      </tr>
      <tr>
        <td id="L5200" class="blob-num js-line-number" data-line-number="5200"></td>
        <td id="LC5200" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L5201" class="blob-num js-line-number" data-line-number="5201"></td>
        <td id="LC5201" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5202" class="blob-num js-line-number" data-line-number="5202"></td>
        <td id="LC5202" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifndef</span> FROMPROTOVISITOR_HPP</td>
      </tr>
      <tr>
        <td id="L5203" class="blob-num js-line-number" data-line-number="5203"></td>
        <td id="LC5203" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">define</span> <span class="pl-en">FROMPROTOVISITOR_HPP</span></td>
      </tr>
      <tr>
        <td id="L5204" class="blob-num js-line-number" data-line-number="5204"></td>
        <td id="LC5204" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5205" class="blob-num js-line-number" data-line-number="5205"></td>
        <td id="LC5205" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/ProtoConstants.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L5206" class="blob-num js-line-number" data-line-number="5206"></td>
        <td id="LC5206" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/cluon.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L5207" class="blob-num js-line-number" data-line-number="5207"></td>
        <td id="LC5207" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5208" class="blob-num js-line-number" data-line-number="5208"></td>
        <td id="LC5208" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>cstdint<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L5209" class="blob-num js-line-number" data-line-number="5209"></td>
        <td id="LC5209" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>map<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L5210" class="blob-num js-line-number" data-line-number="5210"></td>
        <td id="LC5210" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>sstream<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L5211" class="blob-num js-line-number" data-line-number="5211"></td>
        <td id="LC5211" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>string<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L5212" class="blob-num js-line-number" data-line-number="5212"></td>
        <td id="LC5212" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>vector<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L5213" class="blob-num js-line-number" data-line-number="5213"></td>
        <td id="LC5213" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5214" class="blob-num js-line-number" data-line-number="5214"></td>
        <td id="LC5214" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">cluon</span> {</td>
      </tr>
      <tr>
        <td id="L5215" class="blob-num js-line-number" data-line-number="5215"></td>
        <td id="LC5215" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L5216" class="blob-num js-line-number" data-line-number="5216"></td>
        <td id="LC5216" class="blob-code blob-code-inner js-file-line"><span class="pl-c">This class decodes a given message from Proto format.</span></td>
      </tr>
      <tr>
        <td id="L5217" class="blob-num js-line-number" data-line-number="5217"></td>
        <td id="LC5217" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L5218" class="blob-num js-line-number" data-line-number="5218"></td>
        <td id="LC5218" class="blob-code blob-code-inner js-file-line"><span class="pl-k">class</span> <span class="pl-en">LIBCLUON_API</span> FromProtoVisitor {</td>
      </tr>
      <tr>
        <td id="L5219" class="blob-num js-line-number" data-line-number="5219"></td>
        <td id="LC5219" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L5220" class="blob-num js-line-number" data-line-number="5220"></td>
        <td id="LC5220" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * This class represents an entry in a Proto payload stream.</span></td>
      </tr>
      <tr>
        <td id="L5221" class="blob-num js-line-number" data-line-number="5221"></td>
        <td id="LC5221" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L5222" class="blob-num js-line-number" data-line-number="5222"></td>
        <td id="LC5222" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">class</span> <span class="pl-en">ProtoKeyValue</span> {</td>
      </tr>
      <tr>
        <td id="L5223" class="blob-num js-line-number" data-line-number="5223"></td>
        <td id="LC5223" class="blob-code blob-code-inner js-file-line">       <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L5224" class="blob-num js-line-number" data-line-number="5224"></td>
        <td id="LC5224" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">ProtoKeyValue</span>(ProtoKeyValue &amp;&amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L5225" class="blob-num js-line-number" data-line-number="5225"></td>
        <td id="LC5225" class="blob-code blob-code-inner js-file-line">        ProtoKeyValue &amp;<span class="pl-k">operator</span>=(<span class="pl-k">const</span> ProtoKeyValue &amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L5226" class="blob-num js-line-number" data-line-number="5226"></td>
        <td id="LC5226" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5227" class="blob-num js-line-number" data-line-number="5227"></td>
        <td id="LC5227" class="blob-code blob-code-inner js-file-line">       <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L5228" class="blob-num js-line-number" data-line-number="5228"></td>
        <td id="LC5228" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">ProtoKeyValue</span>() noexcept;</td>
      </tr>
      <tr>
        <td id="L5229" class="blob-num js-line-number" data-line-number="5229"></td>
        <td id="LC5229" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">ProtoKeyValue</span>(<span class="pl-k">const</span> ProtoKeyValue &amp;) = <span class="pl-k">default</span>; <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L5230" class="blob-num js-line-number" data-line-number="5230"></td>
        <td id="LC5230" class="blob-code blob-code-inner js-file-line">        ProtoKeyValue &amp;<span class="pl-k">operator</span>=(ProtoKeyValue &amp;&amp;) = <span class="pl-k">default</span>;</td>
      </tr>
      <tr>
        <td id="L5231" class="blob-num js-line-number" data-line-number="5231"></td>
        <td id="LC5231" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">~ProtoKeyValue</span>()                           = <span class="pl-k">default</span>;</td>
      </tr>
      <tr>
        <td id="L5232" class="blob-num js-line-number" data-line-number="5232"></td>
        <td id="LC5232" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5233" class="blob-num js-line-number" data-line-number="5233"></td>
        <td id="LC5233" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L5234" class="blob-num js-line-number" data-line-number="5234"></td>
        <td id="LC5234" class="blob-code blob-code-inner js-file-line"><span class="pl-c">         * Constructor to pre-allocate the vector&lt;char&gt; for length-delimited types.</span></td>
      </tr>
      <tr>
        <td id="L5235" class="blob-num js-line-number" data-line-number="5235"></td>
        <td id="LC5235" class="blob-code blob-code-inner js-file-line"><span class="pl-c">         *</span></td>
      </tr>
      <tr>
        <td id="L5236" class="blob-num js-line-number" data-line-number="5236"></td>
        <td id="LC5236" class="blob-code blob-code-inner js-file-line"><span class="pl-c">         * @param key Proto key.</span></td>
      </tr>
      <tr>
        <td id="L5237" class="blob-num js-line-number" data-line-number="5237"></td>
        <td id="LC5237" class="blob-code blob-code-inner js-file-line"><span class="pl-c">         * @param type Proto type.</span></td>
      </tr>
      <tr>
        <td id="L5238" class="blob-num js-line-number" data-line-number="5238"></td>
        <td id="LC5238" class="blob-code blob-code-inner js-file-line"><span class="pl-c">         * @param length Length of the contained value.</span></td>
      </tr>
      <tr>
        <td id="L5239" class="blob-num js-line-number" data-line-number="5239"></td>
        <td id="LC5239" class="blob-code blob-code-inner js-file-line"><span class="pl-c">         <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L5240" class="blob-num js-line-number" data-line-number="5240"></td>
        <td id="LC5240" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">ProtoKeyValue</span>(<span class="pl-c1">uint32_t</span> key, ProtoConstants type, <span class="pl-c1">uint64_t</span> length) noexcept;</td>
      </tr>
      <tr>
        <td id="L5241" class="blob-num js-line-number" data-line-number="5241"></td>
        <td id="LC5241" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5242" class="blob-num js-line-number" data-line-number="5242"></td>
        <td id="LC5242" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L5243" class="blob-num js-line-number" data-line-number="5243"></td>
        <td id="LC5243" class="blob-code blob-code-inner js-file-line"><span class="pl-c">         * Constructor for cases when a VARINT value is encoded.</span></td>
      </tr>
      <tr>
        <td id="L5244" class="blob-num js-line-number" data-line-number="5244"></td>
        <td id="LC5244" class="blob-code blob-code-inner js-file-line"><span class="pl-c">         *</span></td>
      </tr>
      <tr>
        <td id="L5245" class="blob-num js-line-number" data-line-number="5245"></td>
        <td id="LC5245" class="blob-code blob-code-inner js-file-line"><span class="pl-c">         * @param key Proto key.</span></td>
      </tr>
      <tr>
        <td id="L5246" class="blob-num js-line-number" data-line-number="5246"></td>
        <td id="LC5246" class="blob-code blob-code-inner js-file-line"><span class="pl-c">         * @param value Actual VarInt value.</span></td>
      </tr>
      <tr>
        <td id="L5247" class="blob-num js-line-number" data-line-number="5247"></td>
        <td id="LC5247" class="blob-code blob-code-inner js-file-line"><span class="pl-c">         <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L5248" class="blob-num js-line-number" data-line-number="5248"></td>
        <td id="LC5248" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">ProtoKeyValue</span>(<span class="pl-c1">uint32_t</span> key, <span class="pl-c1">uint64_t</span> value) noexcept;</td>
      </tr>
      <tr>
        <td id="L5249" class="blob-num js-line-number" data-line-number="5249"></td>
        <td id="LC5249" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5250" class="blob-num js-line-number" data-line-number="5250"></td>
        <td id="LC5250" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">uint32_t</span> <span class="pl-en">key</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5251" class="blob-num js-line-number" data-line-number="5251"></td>
        <td id="LC5251" class="blob-code blob-code-inner js-file-line">        ProtoConstants <span class="pl-en">type</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5252" class="blob-num js-line-number" data-line-number="5252"></td>
        <td id="LC5252" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">uint64_t</span> <span class="pl-en">length</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5253" class="blob-num js-line-number" data-line-number="5253"></td>
        <td id="LC5253" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5254" class="blob-num js-line-number" data-line-number="5254"></td>
        <td id="LC5254" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">uint64_t</span> <span class="pl-en">valueAsVarInt</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5255" class="blob-num js-line-number" data-line-number="5255"></td>
        <td id="LC5255" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">float</span> <span class="pl-en">valueAsFloat</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5256" class="blob-num js-line-number" data-line-number="5256"></td>
        <td id="LC5256" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">double</span> <span class="pl-en">valueAsDouble</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5257" class="blob-num js-line-number" data-line-number="5257"></td>
        <td id="LC5257" class="blob-code blob-code-inner js-file-line">        std::string <span class="pl-en">valueAsString</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5258" class="blob-num js-line-number" data-line-number="5258"></td>
        <td id="LC5258" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5259" class="blob-num js-line-number" data-line-number="5259"></td>
        <td id="LC5259" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L5260" class="blob-num js-line-number" data-line-number="5260"></td>
        <td id="LC5260" class="blob-code blob-code-inner js-file-line"><span class="pl-c">         * @return Raw value as reference.</span></td>
      </tr>
      <tr>
        <td id="L5261" class="blob-num js-line-number" data-line-number="5261"></td>
        <td id="LC5261" class="blob-code blob-code-inner js-file-line"><span class="pl-c">         <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L5262" class="blob-num js-line-number" data-line-number="5262"></td>
        <td id="LC5262" class="blob-code blob-code-inner js-file-line">        std::vector&lt;<span class="pl-k">char</span>&gt; &amp;<span class="pl-en">rawBuffer</span>() <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5263" class="blob-num js-line-number" data-line-number="5263"></td>
        <td id="LC5263" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5264" class="blob-num js-line-number" data-line-number="5264"></td>
        <td id="LC5264" class="blob-code blob-code-inner js-file-line">       <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L5265" class="blob-num js-line-number" data-line-number="5265"></td>
        <td id="LC5265" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">uint32_t</span> m_key{<span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L5266" class="blob-num js-line-number" data-line-number="5266"></td>
        <td id="LC5266" class="blob-code blob-code-inner js-file-line">        ProtoConstants m_type{ProtoConstants::VARINT};</td>
      </tr>
      <tr>
        <td id="L5267" class="blob-num js-line-number" data-line-number="5267"></td>
        <td id="LC5267" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">uint64_t</span> m_length{<span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L5268" class="blob-num js-line-number" data-line-number="5268"></td>
        <td id="LC5268" class="blob-code blob-code-inner js-file-line">        std::vector&lt;<span class="pl-k">char</span>&gt; m_value{};</td>
      </tr>
      <tr>
        <td id="L5269" class="blob-num js-line-number" data-line-number="5269"></td>
        <td id="LC5269" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">uint64_t</span> m_varIntValue{<span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L5270" class="blob-num js-line-number" data-line-number="5270"></td>
        <td id="LC5270" class="blob-code blob-code-inner js-file-line">    };</td>
      </tr>
      <tr>
        <td id="L5271" class="blob-num js-line-number" data-line-number="5271"></td>
        <td id="LC5271" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5272" class="blob-num js-line-number" data-line-number="5272"></td>
        <td id="LC5272" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L5273" class="blob-num js-line-number" data-line-number="5273"></td>
        <td id="LC5273" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">FromProtoVisitor</span>(<span class="pl-k">const</span> FromProtoVisitor &amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L5274" class="blob-num js-line-number" data-line-number="5274"></td>
        <td id="LC5274" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">FromProtoVisitor</span>(FromProtoVisitor &amp;&amp;)      = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L5275" class="blob-num js-line-number" data-line-number="5275"></td>
        <td id="LC5275" class="blob-code blob-code-inner js-file-line">    FromProtoVisitor &amp;<span class="pl-k">operator</span>=(FromProtoVisitor &amp;&amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L5276" class="blob-num js-line-number" data-line-number="5276"></td>
        <td id="LC5276" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5277" class="blob-num js-line-number" data-line-number="5277"></td>
        <td id="LC5277" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L5278" class="blob-num js-line-number" data-line-number="5278"></td>
        <td id="LC5278" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">FromProtoVisitor</span>()  = <span class="pl-k">default</span>;</td>
      </tr>
      <tr>
        <td id="L5279" class="blob-num js-line-number" data-line-number="5279"></td>
        <td id="LC5279" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">~FromProtoVisitor</span>() = <span class="pl-k">default</span>;</td>
      </tr>
      <tr>
        <td id="L5280" class="blob-num js-line-number" data-line-number="5280"></td>
        <td id="LC5280" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5281" class="blob-num js-line-number" data-line-number="5281"></td>
        <td id="LC5281" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L5282" class="blob-num js-line-number" data-line-number="5282"></td>
        <td id="LC5282" class="blob-code blob-code-inner js-file-line">    FromProtoVisitor &amp;<span class="pl-k">operator</span>=(<span class="pl-k">const</span> FromProtoVisitor &amp;other) noexcept;</td>
      </tr>
      <tr>
        <td id="L5283" class="blob-num js-line-number" data-line-number="5283"></td>
        <td id="LC5283" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5284" class="blob-num js-line-number" data-line-number="5284"></td>
        <td id="LC5284" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L5285" class="blob-num js-line-number" data-line-number="5285"></td>
        <td id="LC5285" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * This method decodes a given istream into Proto.</span></td>
      </tr>
      <tr>
        <td id="L5286" class="blob-num js-line-number" data-line-number="5286"></td>
        <td id="LC5286" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     *</span></td>
      </tr>
      <tr>
        <td id="L5287" class="blob-num js-line-number" data-line-number="5287"></td>
        <td id="LC5287" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param in istream to decode.</span></td>
      </tr>
      <tr>
        <td id="L5288" class="blob-num js-line-number" data-line-number="5288"></td>
        <td id="LC5288" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L5289" class="blob-num js-line-number" data-line-number="5289"></td>
        <td id="LC5289" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">decodeFrom</span>(std::istream &amp;in) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5290" class="blob-num js-line-number" data-line-number="5290"></td>
        <td id="LC5290" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5291" class="blob-num js-line-number" data-line-number="5291"></td>
        <td id="LC5291" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L5292" class="blob-num js-line-number" data-line-number="5292"></td>
        <td id="LC5292" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> The following methods are provided to allow an instance of this class to</span></td>
      </tr>
      <tr>
        <td id="L5293" class="blob-num js-line-number" data-line-number="5293"></td>
        <td id="LC5293" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> be used as visitor for an instance with the method signature void accept&lt;T&gt;(T&amp;);</span></td>
      </tr>
      <tr>
        <td id="L5294" class="blob-num js-line-number" data-line-number="5294"></td>
        <td id="LC5294" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5295" class="blob-num js-line-number" data-line-number="5295"></td>
        <td id="LC5295" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">preVisit</span>(<span class="pl-c1">int32_t</span> id, <span class="pl-k">const</span> std::string &amp;shortName, <span class="pl-k">const</span> std::string &amp;longName) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5296" class="blob-num js-line-number" data-line-number="5296"></td>
        <td id="LC5296" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">postVisit</span>() <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5297" class="blob-num js-line-number" data-line-number="5297"></td>
        <td id="LC5297" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5298" class="blob-num js-line-number" data-line-number="5298"></td>
        <td id="LC5298" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">bool</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5299" class="blob-num js-line-number" data-line-number="5299"></td>
        <td id="LC5299" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">char</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5300" class="blob-num js-line-number" data-line-number="5300"></td>
        <td id="LC5300" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int8_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5301" class="blob-num js-line-number" data-line-number="5301"></td>
        <td id="LC5301" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint8_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5302" class="blob-num js-line-number" data-line-number="5302"></td>
        <td id="LC5302" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int16_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5303" class="blob-num js-line-number" data-line-number="5303"></td>
        <td id="LC5303" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint16_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5304" class="blob-num js-line-number" data-line-number="5304"></td>
        <td id="LC5304" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int32_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5305" class="blob-num js-line-number" data-line-number="5305"></td>
        <td id="LC5305" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint32_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5306" class="blob-num js-line-number" data-line-number="5306"></td>
        <td id="LC5306" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int64_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5307" class="blob-num js-line-number" data-line-number="5307"></td>
        <td id="LC5307" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint64_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5308" class="blob-num js-line-number" data-line-number="5308"></td>
        <td id="LC5308" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">float</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5309" class="blob-num js-line-number" data-line-number="5309"></td>
        <td id="LC5309" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">double</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5310" class="blob-num js-line-number" data-line-number="5310"></td>
        <td id="LC5310" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, std::string &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5311" class="blob-num js-line-number" data-line-number="5311"></td>
        <td id="LC5311" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5312" class="blob-num js-line-number" data-line-number="5312"></td>
        <td id="LC5312" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> T&gt;</td>
      </tr>
      <tr>
        <td id="L5313" class="blob-num js-line-number" data-line-number="5313"></td>
        <td id="LC5313" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> &amp;id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, T &amp;value) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L5314" class="blob-num js-line-number" data-line-number="5314"></td>
        <td id="LC5314" class="blob-code blob-code-inner js-file-line">        (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L5315" class="blob-num js-line-number" data-line-number="5315"></td>
        <td id="LC5315" class="blob-code blob-code-inner js-file-line">        (<span class="pl-k">void</span>)name;</td>
      </tr>
      <tr>
        <td id="L5316" class="blob-num js-line-number" data-line-number="5316"></td>
        <td id="LC5316" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5317" class="blob-num js-line-number" data-line-number="5317"></td>
        <td id="LC5317" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-c1">0</span> &lt; m_mapOfKeyValues.<span class="pl-c1">count</span>(id)) {</td>
      </tr>
      <tr>
        <td id="L5318" class="blob-num js-line-number" data-line-number="5318"></td>
        <td id="LC5318" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">const</span> std::string s{m_mapOfKeyValues[id].<span class="pl-c1">valueAsString</span>()};</td>
      </tr>
      <tr>
        <td id="L5319" class="blob-num js-line-number" data-line-number="5319"></td>
        <td id="LC5319" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5320" class="blob-num js-line-number" data-line-number="5320"></td>
        <td id="LC5320" class="blob-code blob-code-inner js-file-line">            std::stringstream sstr{s};</td>
      </tr>
      <tr>
        <td id="L5321" class="blob-num js-line-number" data-line-number="5321"></td>
        <td id="LC5321" class="blob-code blob-code-inner js-file-line">            cluon::FromProtoVisitor nestedProtoDecoder;</td>
      </tr>
      <tr>
        <td id="L5322" class="blob-num js-line-number" data-line-number="5322"></td>
        <td id="LC5322" class="blob-code blob-code-inner js-file-line">            nestedProtoDecoder.<span class="pl-c1">decodeFrom</span>(sstr);</td>
      </tr>
      <tr>
        <td id="L5323" class="blob-num js-line-number" data-line-number="5323"></td>
        <td id="LC5323" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5324" class="blob-num js-line-number" data-line-number="5324"></td>
        <td id="LC5324" class="blob-code blob-code-inner js-file-line">            value.<span class="pl-c1">accept</span>(nestedProtoDecoder);</td>
      </tr>
      <tr>
        <td id="L5325" class="blob-num js-line-number" data-line-number="5325"></td>
        <td id="LC5325" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5326" class="blob-num js-line-number" data-line-number="5326"></td>
        <td id="LC5326" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L5327" class="blob-num js-line-number" data-line-number="5327"></td>
        <td id="LC5327" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5328" class="blob-num js-line-number" data-line-number="5328"></td>
        <td id="LC5328" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L5329" class="blob-num js-line-number" data-line-number="5329"></td>
        <td id="LC5329" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">int8_t</span> <span class="pl-en">fromZigZag8</span>(<span class="pl-c1">uint8_t</span> v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5330" class="blob-num js-line-number" data-line-number="5330"></td>
        <td id="LC5330" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">int16_t</span> <span class="pl-en">fromZigZag16</span>(<span class="pl-c1">uint16_t</span> v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5331" class="blob-num js-line-number" data-line-number="5331"></td>
        <td id="LC5331" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">int32_t</span> <span class="pl-en">fromZigZag32</span>(<span class="pl-c1">uint32_t</span> v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5332" class="blob-num js-line-number" data-line-number="5332"></td>
        <td id="LC5332" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">int64_t</span> <span class="pl-en">fromZigZag64</span>(<span class="pl-c1">uint64_t</span> v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5333" class="blob-num js-line-number" data-line-number="5333"></td>
        <td id="LC5333" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5334" class="blob-num js-line-number" data-line-number="5334"></td>
        <td id="LC5334" class="blob-code blob-code-inner js-file-line">    std::<span class="pl-c1">size_t</span> <span class="pl-en">fromVarInt</span>(std::istream &amp;in, <span class="pl-c1">uint64_t</span> &amp;value) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5335" class="blob-num js-line-number" data-line-number="5335"></td>
        <td id="LC5335" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5336" class="blob-num js-line-number" data-line-number="5336"></td>
        <td id="LC5336" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">readBytesFromStream</span>(std::istream &amp;in, std::<span class="pl-c1">size_t</span> bytesToReadFromStream, std::vector&lt;<span class="pl-k">char</span>&gt; &amp;buffer) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5337" class="blob-num js-line-number" data-line-number="5337"></td>
        <td id="LC5337" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5338" class="blob-num js-line-number" data-line-number="5338"></td>
        <td id="LC5338" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L5339" class="blob-num js-line-number" data-line-number="5339"></td>
        <td id="LC5339" class="blob-code blob-code-inner js-file-line">    std::stringstream m_buffer{<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>};</td>
      </tr>
      <tr>
        <td id="L5340" class="blob-num js-line-number" data-line-number="5340"></td>
        <td id="LC5340" class="blob-code blob-code-inner js-file-line">    std::map&lt;<span class="pl-c1">uint32_t</span>, ProtoKeyValue&gt; m_mapOfKeyValues{};</td>
      </tr>
      <tr>
        <td id="L5341" class="blob-num js-line-number" data-line-number="5341"></td>
        <td id="LC5341" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L5342" class="blob-num js-line-number" data-line-number="5342"></td>
        <td id="LC5342" class="blob-code blob-code-inner js-file-line">} <span class="pl-c"><span class="pl-c">//</span> namespace cluon</span></td>
      </tr>
      <tr>
        <td id="L5343" class="blob-num js-line-number" data-line-number="5343"></td>
        <td id="LC5343" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5344" class="blob-num js-line-number" data-line-number="5344"></td>
        <td id="LC5344" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L5345" class="blob-num js-line-number" data-line-number="5345"></td>
        <td id="LC5345" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L5346" class="blob-num js-line-number" data-line-number="5346"></td>
        <td id="LC5346" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Copyright (C) 2017-2018  Christian Berger</span></td>
      </tr>
      <tr>
        <td id="L5347" class="blob-num js-line-number" data-line-number="5347"></td>
        <td id="LC5347" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L5348" class="blob-num js-line-number" data-line-number="5348"></td>
        <td id="LC5348" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is free software: you can redistribute it and/or modify</span></td>
      </tr>
      <tr>
        <td id="L5349" class="blob-num js-line-number" data-line-number="5349"></td>
        <td id="LC5349" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * it under the terms of the GNU General Public License as published by</span></td>
      </tr>
      <tr>
        <td id="L5350" class="blob-num js-line-number" data-line-number="5350"></td>
        <td id="LC5350" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * the Free Software Foundation, either version 3 of the License, or</span></td>
      </tr>
      <tr>
        <td id="L5351" class="blob-num js-line-number" data-line-number="5351"></td>
        <td id="LC5351" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * (at your option) any later version.</span></td>
      </tr>
      <tr>
        <td id="L5352" class="blob-num js-line-number" data-line-number="5352"></td>
        <td id="LC5352" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L5353" class="blob-num js-line-number" data-line-number="5353"></td>
        <td id="LC5353" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is distributed in the hope that it will be useful,</span></td>
      </tr>
      <tr>
        <td id="L5354" class="blob-num js-line-number" data-line-number="5354"></td>
        <td id="LC5354" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></td>
      </tr>
      <tr>
        <td id="L5355" class="blob-num js-line-number" data-line-number="5355"></td>
        <td id="LC5355" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></td>
      </tr>
      <tr>
        <td id="L5356" class="blob-num js-line-number" data-line-number="5356"></td>
        <td id="LC5356" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * GNU General Public License for more details.</span></td>
      </tr>
      <tr>
        <td id="L5357" class="blob-num js-line-number" data-line-number="5357"></td>
        <td id="LC5357" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L5358" class="blob-num js-line-number" data-line-number="5358"></td>
        <td id="LC5358" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * You should have received a copy of the GNU General Public License</span></td>
      </tr>
      <tr>
        <td id="L5359" class="blob-num js-line-number" data-line-number="5359"></td>
        <td id="LC5359" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></td>
      </tr>
      <tr>
        <td id="L5360" class="blob-num js-line-number" data-line-number="5360"></td>
        <td id="LC5360" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L5361" class="blob-num js-line-number" data-line-number="5361"></td>
        <td id="LC5361" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5362" class="blob-num js-line-number" data-line-number="5362"></td>
        <td id="LC5362" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifndef</span> FROMLCMVISITOR_HPP</td>
      </tr>
      <tr>
        <td id="L5363" class="blob-num js-line-number" data-line-number="5363"></td>
        <td id="LC5363" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">define</span> <span class="pl-en">FROMLCMVISITOR_HPP</span></td>
      </tr>
      <tr>
        <td id="L5364" class="blob-num js-line-number" data-line-number="5364"></td>
        <td id="LC5364" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5365" class="blob-num js-line-number" data-line-number="5365"></td>
        <td id="LC5365" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/cluon.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L5366" class="blob-num js-line-number" data-line-number="5366"></td>
        <td id="LC5366" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5367" class="blob-num js-line-number" data-line-number="5367"></td>
        <td id="LC5367" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>cstdint<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L5368" class="blob-num js-line-number" data-line-number="5368"></td>
        <td id="LC5368" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>istream<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L5369" class="blob-num js-line-number" data-line-number="5369"></td>
        <td id="LC5369" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>sstream<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L5370" class="blob-num js-line-number" data-line-number="5370"></td>
        <td id="LC5370" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>string<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L5371" class="blob-num js-line-number" data-line-number="5371"></td>
        <td id="LC5371" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>vector<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L5372" class="blob-num js-line-number" data-line-number="5372"></td>
        <td id="LC5372" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5373" class="blob-num js-line-number" data-line-number="5373"></td>
        <td id="LC5373" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">cluon</span> {</td>
      </tr>
      <tr>
        <td id="L5374" class="blob-num js-line-number" data-line-number="5374"></td>
        <td id="LC5374" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L5375" class="blob-num js-line-number" data-line-number="5375"></td>
        <td id="LC5375" class="blob-code blob-code-inner js-file-line"><span class="pl-c">This class decodes a given message from LCM format.</span></td>
      </tr>
      <tr>
        <td id="L5376" class="blob-num js-line-number" data-line-number="5376"></td>
        <td id="LC5376" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L5377" class="blob-num js-line-number" data-line-number="5377"></td>
        <td id="LC5377" class="blob-code blob-code-inner js-file-line"><span class="pl-k">class</span> <span class="pl-en">LIBCLUON_API</span> FromLCMVisitor {</td>
      </tr>
      <tr>
        <td id="L5378" class="blob-num js-line-number" data-line-number="5378"></td>
        <td id="LC5378" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L5379" class="blob-num js-line-number" data-line-number="5379"></td>
        <td id="LC5379" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">FromLCMVisitor</span>(std::stringstream &amp;in) noexcept;</td>
      </tr>
      <tr>
        <td id="L5380" class="blob-num js-line-number" data-line-number="5380"></td>
        <td id="LC5380" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">FromLCMVisitor</span>(<span class="pl-k">const</span> FromLCMVisitor &amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L5381" class="blob-num js-line-number" data-line-number="5381"></td>
        <td id="LC5381" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">FromLCMVisitor</span>(FromLCMVisitor &amp;&amp;)      = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L5382" class="blob-num js-line-number" data-line-number="5382"></td>
        <td id="LC5382" class="blob-code blob-code-inner js-file-line">    FromLCMVisitor &amp;<span class="pl-k">operator</span>=(<span class="pl-k">const</span> FromLCMVisitor &amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L5383" class="blob-num js-line-number" data-line-number="5383"></td>
        <td id="LC5383" class="blob-code blob-code-inner js-file-line">    FromLCMVisitor &amp;<span class="pl-k">operator</span>=(FromLCMVisitor &amp;&amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L5384" class="blob-num js-line-number" data-line-number="5384"></td>
        <td id="LC5384" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5385" class="blob-num js-line-number" data-line-number="5385"></td>
        <td id="LC5385" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L5386" class="blob-num js-line-number" data-line-number="5386"></td>
        <td id="LC5386" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">FromLCMVisitor</span>() noexcept;</td>
      </tr>
      <tr>
        <td id="L5387" class="blob-num js-line-number" data-line-number="5387"></td>
        <td id="LC5387" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">~FromLCMVisitor</span>() = <span class="pl-k">default</span>;</td>
      </tr>
      <tr>
        <td id="L5388" class="blob-num js-line-number" data-line-number="5388"></td>
        <td id="LC5388" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5389" class="blob-num js-line-number" data-line-number="5389"></td>
        <td id="LC5389" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L5390" class="blob-num js-line-number" data-line-number="5390"></td>
        <td id="LC5390" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L5391" class="blob-num js-line-number" data-line-number="5391"></td>
        <td id="LC5391" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * This method decodes a given istream into LCM.</span></td>
      </tr>
      <tr>
        <td id="L5392" class="blob-num js-line-number" data-line-number="5392"></td>
        <td id="LC5392" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     *</span></td>
      </tr>
      <tr>
        <td id="L5393" class="blob-num js-line-number" data-line-number="5393"></td>
        <td id="LC5393" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param in istream to decode.</span></td>
      </tr>
      <tr>
        <td id="L5394" class="blob-num js-line-number" data-line-number="5394"></td>
        <td id="LC5394" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L5395" class="blob-num js-line-number" data-line-number="5395"></td>
        <td id="LC5395" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">decodeFrom</span>(std::istream &amp;in) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5396" class="blob-num js-line-number" data-line-number="5396"></td>
        <td id="LC5396" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5397" class="blob-num js-line-number" data-line-number="5397"></td>
        <td id="LC5397" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L5398" class="blob-num js-line-number" data-line-number="5398"></td>
        <td id="LC5398" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> The following methods are provided to allow an instance of this class to</span></td>
      </tr>
      <tr>
        <td id="L5399" class="blob-num js-line-number" data-line-number="5399"></td>
        <td id="LC5399" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> be used as visitor for an instance with the method signature void accept&lt;T&gt;(T&amp;);</span></td>
      </tr>
      <tr>
        <td id="L5400" class="blob-num js-line-number" data-line-number="5400"></td>
        <td id="LC5400" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5401" class="blob-num js-line-number" data-line-number="5401"></td>
        <td id="LC5401" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">preVisit</span>(<span class="pl-c1">int32_t</span> id, <span class="pl-k">const</span> std::string &amp;shortName, <span class="pl-k">const</span> std::string &amp;longName) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5402" class="blob-num js-line-number" data-line-number="5402"></td>
        <td id="LC5402" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">postVisit</span>() <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5403" class="blob-num js-line-number" data-line-number="5403"></td>
        <td id="LC5403" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5404" class="blob-num js-line-number" data-line-number="5404"></td>
        <td id="LC5404" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">bool</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5405" class="blob-num js-line-number" data-line-number="5405"></td>
        <td id="LC5405" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">char</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5406" class="blob-num js-line-number" data-line-number="5406"></td>
        <td id="LC5406" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int8_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5407" class="blob-num js-line-number" data-line-number="5407"></td>
        <td id="LC5407" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint8_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5408" class="blob-num js-line-number" data-line-number="5408"></td>
        <td id="LC5408" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int16_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5409" class="blob-num js-line-number" data-line-number="5409"></td>
        <td id="LC5409" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint16_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5410" class="blob-num js-line-number" data-line-number="5410"></td>
        <td id="LC5410" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int32_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5411" class="blob-num js-line-number" data-line-number="5411"></td>
        <td id="LC5411" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint32_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5412" class="blob-num js-line-number" data-line-number="5412"></td>
        <td id="LC5412" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int64_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5413" class="blob-num js-line-number" data-line-number="5413"></td>
        <td id="LC5413" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint64_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5414" class="blob-num js-line-number" data-line-number="5414"></td>
        <td id="LC5414" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">float</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5415" class="blob-num js-line-number" data-line-number="5415"></td>
        <td id="LC5415" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">double</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5416" class="blob-num js-line-number" data-line-number="5416"></td>
        <td id="LC5416" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, std::string &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5417" class="blob-num js-line-number" data-line-number="5417"></td>
        <td id="LC5417" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5418" class="blob-num js-line-number" data-line-number="5418"></td>
        <td id="LC5418" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> T&gt;</td>
      </tr>
      <tr>
        <td id="L5419" class="blob-num js-line-number" data-line-number="5419"></td>
        <td id="LC5419" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> &amp;id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, T &amp;value) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L5420" class="blob-num js-line-number" data-line-number="5420"></td>
        <td id="LC5420" class="blob-code blob-code-inner js-file-line">        (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L5421" class="blob-num js-line-number" data-line-number="5421"></td>
        <td id="LC5421" class="blob-code blob-code-inner js-file-line">        (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L5422" class="blob-num js-line-number" data-line-number="5422"></td>
        <td id="LC5422" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> No hash for the type but for name and dimension.</span></td>
      </tr>
      <tr>
        <td id="L5423" class="blob-num js-line-number" data-line-number="5423"></td>
        <td id="LC5423" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">calculateHash</span>(name);</td>
      </tr>
      <tr>
        <td id="L5424" class="blob-num js-line-number" data-line-number="5424"></td>
        <td id="LC5424" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">calculateHash</span>(<span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L5425" class="blob-num js-line-number" data-line-number="5425"></td>
        <td id="LC5425" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5426" class="blob-num js-line-number" data-line-number="5426"></td>
        <td id="LC5426" class="blob-code blob-code-inner js-file-line">        cluon::FromLCMVisitor <span class="pl-smi">nestedLCMDecoder</span>(m_buffer);</td>
      </tr>
      <tr>
        <td id="L5427" class="blob-num js-line-number" data-line-number="5427"></td>
        <td id="LC5427" class="blob-code blob-code-inner js-file-line">        value.<span class="pl-c1">accept</span>(nestedLCMDecoder);</td>
      </tr>
      <tr>
        <td id="L5428" class="blob-num js-line-number" data-line-number="5428"></td>
        <td id="LC5428" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5429" class="blob-num js-line-number" data-line-number="5429"></td>
        <td id="LC5429" class="blob-code blob-code-inner js-file-line">        m_hashes.<span class="pl-c1">push_back</span>(nestedLCMDecoder.<span class="pl-c1">hash</span>());</td>
      </tr>
      <tr>
        <td id="L5430" class="blob-num js-line-number" data-line-number="5430"></td>
        <td id="LC5430" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L5431" class="blob-num js-line-number" data-line-number="5431"></td>
        <td id="LC5431" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5432" class="blob-num js-line-number" data-line-number="5432"></td>
        <td id="LC5432" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L5433" class="blob-num js-line-number" data-line-number="5433"></td>
        <td id="LC5433" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">int64_t</span> <span class="pl-en">hash</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5434" class="blob-num js-line-number" data-line-number="5434"></td>
        <td id="LC5434" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">calculateHash</span>(<span class="pl-k">char</span> c) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5435" class="blob-num js-line-number" data-line-number="5435"></td>
        <td id="LC5435" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">calculateHash</span>(<span class="pl-k">const</span> std::string &amp;s) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5436" class="blob-num js-line-number" data-line-number="5436"></td>
        <td id="LC5436" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5437" class="blob-num js-line-number" data-line-number="5437"></td>
        <td id="LC5437" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L5438" class="blob-num js-line-number" data-line-number="5438"></td>
        <td id="LC5438" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">int64_t</span> m_calculatedHash{<span class="pl-c1">0x12345678</span>};</td>
      </tr>
      <tr>
        <td id="L5439" class="blob-num js-line-number" data-line-number="5439"></td>
        <td id="LC5439" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">int64_t</span> m_expectedHash{<span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L5440" class="blob-num js-line-number" data-line-number="5440"></td>
        <td id="LC5440" class="blob-code blob-code-inner js-file-line">    std::stringstream m_internalBuffer{<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>};</td>
      </tr>
      <tr>
        <td id="L5441" class="blob-num js-line-number" data-line-number="5441"></td>
        <td id="LC5441" class="blob-code blob-code-inner js-file-line">    std::stringstream &amp;m_buffer;</td>
      </tr>
      <tr>
        <td id="L5442" class="blob-num js-line-number" data-line-number="5442"></td>
        <td id="LC5442" class="blob-code blob-code-inner js-file-line">    std::vector&lt;<span class="pl-c1">int64_t</span>&gt; m_hashes{};</td>
      </tr>
      <tr>
        <td id="L5443" class="blob-num js-line-number" data-line-number="5443"></td>
        <td id="LC5443" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L5444" class="blob-num js-line-number" data-line-number="5444"></td>
        <td id="LC5444" class="blob-code blob-code-inner js-file-line">} <span class="pl-c"><span class="pl-c">//</span> namespace cluon</span></td>
      </tr>
      <tr>
        <td id="L5445" class="blob-num js-line-number" data-line-number="5445"></td>
        <td id="LC5445" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5446" class="blob-num js-line-number" data-line-number="5446"></td>
        <td id="LC5446" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L5447" class="blob-num js-line-number" data-line-number="5447"></td>
        <td id="LC5447" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L5448" class="blob-num js-line-number" data-line-number="5448"></td>
        <td id="LC5448" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Copyright (C) 2017-2018  Christian Berger</span></td>
      </tr>
      <tr>
        <td id="L5449" class="blob-num js-line-number" data-line-number="5449"></td>
        <td id="LC5449" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L5450" class="blob-num js-line-number" data-line-number="5450"></td>
        <td id="LC5450" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is free software: you can redistribute it and/or modify</span></td>
      </tr>
      <tr>
        <td id="L5451" class="blob-num js-line-number" data-line-number="5451"></td>
        <td id="LC5451" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * it under the terms of the GNU General Public License as published by</span></td>
      </tr>
      <tr>
        <td id="L5452" class="blob-num js-line-number" data-line-number="5452"></td>
        <td id="LC5452" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * the Free Software Foundation, either version 3 of the License, or</span></td>
      </tr>
      <tr>
        <td id="L5453" class="blob-num js-line-number" data-line-number="5453"></td>
        <td id="LC5453" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * (at your option) any later version.</span></td>
      </tr>
      <tr>
        <td id="L5454" class="blob-num js-line-number" data-line-number="5454"></td>
        <td id="LC5454" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L5455" class="blob-num js-line-number" data-line-number="5455"></td>
        <td id="LC5455" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is distributed in the hope that it will be useful,</span></td>
      </tr>
      <tr>
        <td id="L5456" class="blob-num js-line-number" data-line-number="5456"></td>
        <td id="LC5456" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></td>
      </tr>
      <tr>
        <td id="L5457" class="blob-num js-line-number" data-line-number="5457"></td>
        <td id="LC5457" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></td>
      </tr>
      <tr>
        <td id="L5458" class="blob-num js-line-number" data-line-number="5458"></td>
        <td id="LC5458" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * GNU General Public License for more details.</span></td>
      </tr>
      <tr>
        <td id="L5459" class="blob-num js-line-number" data-line-number="5459"></td>
        <td id="LC5459" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L5460" class="blob-num js-line-number" data-line-number="5460"></td>
        <td id="LC5460" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * You should have received a copy of the GNU General Public License</span></td>
      </tr>
      <tr>
        <td id="L5461" class="blob-num js-line-number" data-line-number="5461"></td>
        <td id="LC5461" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></td>
      </tr>
      <tr>
        <td id="L5462" class="blob-num js-line-number" data-line-number="5462"></td>
        <td id="LC5462" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L5463" class="blob-num js-line-number" data-line-number="5463"></td>
        <td id="LC5463" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5464" class="blob-num js-line-number" data-line-number="5464"></td>
        <td id="LC5464" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifndef</span> MSGPACKCONSTANTS_HPP</td>
      </tr>
      <tr>
        <td id="L5465" class="blob-num js-line-number" data-line-number="5465"></td>
        <td id="LC5465" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">define</span> <span class="pl-en">MSGPACKCONSTANTS_HPP</span></td>
      </tr>
      <tr>
        <td id="L5466" class="blob-num js-line-number" data-line-number="5466"></td>
        <td id="LC5466" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5467" class="blob-num js-line-number" data-line-number="5467"></td>
        <td id="LC5467" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>cstdint<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L5468" class="blob-num js-line-number" data-line-number="5468"></td>
        <td id="LC5468" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5469" class="blob-num js-line-number" data-line-number="5469"></td>
        <td id="LC5469" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> clang-format off</span></td>
      </tr>
      <tr>
        <td id="L5470" class="blob-num js-line-number" data-line-number="5470"></td>
        <td id="LC5470" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">cluon</span> {</td>
      </tr>
      <tr>
        <td id="L5471" class="blob-num js-line-number" data-line-number="5471"></td>
        <td id="LC5471" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">enum</span> <span class="pl-k">class</span> <span class="pl-en">MsgPackConstants</span> : <span class="pl-c1">uint16_t</span> {</td>
      </tr>
      <tr>
        <td id="L5472" class="blob-num js-line-number" data-line-number="5472"></td>
        <td id="LC5472" class="blob-code blob-code-inner js-file-line">        IS_FALSE        = <span class="pl-c1">0xC2</span>,</td>
      </tr>
      <tr>
        <td id="L5473" class="blob-num js-line-number" data-line-number="5473"></td>
        <td id="LC5473" class="blob-code blob-code-inner js-file-line">        IS_TRUE         = <span class="pl-c1">0xC3</span>,</td>
      </tr>
      <tr>
        <td id="L5474" class="blob-num js-line-number" data-line-number="5474"></td>
        <td id="LC5474" class="blob-code blob-code-inner js-file-line">        FLOAT           = <span class="pl-c1">0xCA</span>,</td>
      </tr>
      <tr>
        <td id="L5475" class="blob-num js-line-number" data-line-number="5475"></td>
        <td id="LC5475" class="blob-code blob-code-inner js-file-line">        DOUBLE          = <span class="pl-c1">0xCB</span>,</td>
      </tr>
      <tr>
        <td id="L5476" class="blob-num js-line-number" data-line-number="5476"></td>
        <td id="LC5476" class="blob-code blob-code-inner js-file-line">        UINT8           = <span class="pl-c1">0xCC</span>,</td>
      </tr>
      <tr>
        <td id="L5477" class="blob-num js-line-number" data-line-number="5477"></td>
        <td id="LC5477" class="blob-code blob-code-inner js-file-line">        UINT16          = <span class="pl-c1">0xCD</span>,</td>
      </tr>
      <tr>
        <td id="L5478" class="blob-num js-line-number" data-line-number="5478"></td>
        <td id="LC5478" class="blob-code blob-code-inner js-file-line">        UINT32          = <span class="pl-c1">0xCE</span>,</td>
      </tr>
      <tr>
        <td id="L5479" class="blob-num js-line-number" data-line-number="5479"></td>
        <td id="LC5479" class="blob-code blob-code-inner js-file-line">        UINT64          = <span class="pl-c1">0xCF</span>,</td>
      </tr>
      <tr>
        <td id="L5480" class="blob-num js-line-number" data-line-number="5480"></td>
        <td id="LC5480" class="blob-code blob-code-inner js-file-line">        NEGFIXINT       = <span class="pl-c1">0xE0</span>,</td>
      </tr>
      <tr>
        <td id="L5481" class="blob-num js-line-number" data-line-number="5481"></td>
        <td id="LC5481" class="blob-code blob-code-inner js-file-line">        INT8            = <span class="pl-c1">0xD0</span>,</td>
      </tr>
      <tr>
        <td id="L5482" class="blob-num js-line-number" data-line-number="5482"></td>
        <td id="LC5482" class="blob-code blob-code-inner js-file-line">        INT16           = <span class="pl-c1">0xD1</span>,</td>
      </tr>
      <tr>
        <td id="L5483" class="blob-num js-line-number" data-line-number="5483"></td>
        <td id="LC5483" class="blob-code blob-code-inner js-file-line">        INT32           = <span class="pl-c1">0xD2</span>,</td>
      </tr>
      <tr>
        <td id="L5484" class="blob-num js-line-number" data-line-number="5484"></td>
        <td id="LC5484" class="blob-code blob-code-inner js-file-line">        INT64           = <span class="pl-c1">0xD3</span>,</td>
      </tr>
      <tr>
        <td id="L5485" class="blob-num js-line-number" data-line-number="5485"></td>
        <td id="LC5485" class="blob-code blob-code-inner js-file-line">        FIXSTR          = <span class="pl-c1">0xA0</span>,</td>
      </tr>
      <tr>
        <td id="L5486" class="blob-num js-line-number" data-line-number="5486"></td>
        <td id="LC5486" class="blob-code blob-code-inner js-file-line">        FIXSTR_END      = <span class="pl-c1">0xBF</span>,</td>
      </tr>
      <tr>
        <td id="L5487" class="blob-num js-line-number" data-line-number="5487"></td>
        <td id="LC5487" class="blob-code blob-code-inner js-file-line">        STR8            = <span class="pl-c1">0xD9</span>,</td>
      </tr>
      <tr>
        <td id="L5488" class="blob-num js-line-number" data-line-number="5488"></td>
        <td id="LC5488" class="blob-code blob-code-inner js-file-line">        STR16           = <span class="pl-c1">0xDA</span>,</td>
      </tr>
      <tr>
        <td id="L5489" class="blob-num js-line-number" data-line-number="5489"></td>
        <td id="LC5489" class="blob-code blob-code-inner js-file-line">        STR32           = <span class="pl-c1">0xDB</span>,</td>
      </tr>
      <tr>
        <td id="L5490" class="blob-num js-line-number" data-line-number="5490"></td>
        <td id="LC5490" class="blob-code blob-code-inner js-file-line">        FIXMAP          = <span class="pl-c1">0x80</span>,</td>
      </tr>
      <tr>
        <td id="L5491" class="blob-num js-line-number" data-line-number="5491"></td>
        <td id="LC5491" class="blob-code blob-code-inner js-file-line">        FIXMAP_END      = <span class="pl-c1">0x8F</span>,</td>
      </tr>
      <tr>
        <td id="L5492" class="blob-num js-line-number" data-line-number="5492"></td>
        <td id="LC5492" class="blob-code blob-code-inner js-file-line">        MAP16           = <span class="pl-c1">0xDE</span>,</td>
      </tr>
      <tr>
        <td id="L5493" class="blob-num js-line-number" data-line-number="5493"></td>
        <td id="LC5493" class="blob-code blob-code-inner js-file-line">        MAP32           = <span class="pl-c1">0xDF</span>,</td>
      </tr>
      <tr>
        <td id="L5494" class="blob-num js-line-number" data-line-number="5494"></td>
        <td id="LC5494" class="blob-code blob-code-inner js-file-line">        UNKNOWN_FORMAT  = <span class="pl-c1">0xFF00</span>,</td>
      </tr>
      <tr>
        <td id="L5495" class="blob-num js-line-number" data-line-number="5495"></td>
        <td id="LC5495" class="blob-code blob-code-inner js-file-line">        BOOL_FORMAT     = <span class="pl-c1">0xFF01</span>,</td>
      </tr>
      <tr>
        <td id="L5496" class="blob-num js-line-number" data-line-number="5496"></td>
        <td id="LC5496" class="blob-code blob-code-inner js-file-line">        UINT_FORMAT     = <span class="pl-c1">0xFF02</span>,</td>
      </tr>
      <tr>
        <td id="L5497" class="blob-num js-line-number" data-line-number="5497"></td>
        <td id="LC5497" class="blob-code blob-code-inner js-file-line">        INT_FORMAT      = <span class="pl-c1">0xFF03</span>,</td>
      </tr>
      <tr>
        <td id="L5498" class="blob-num js-line-number" data-line-number="5498"></td>
        <td id="LC5498" class="blob-code blob-code-inner js-file-line">        FLOAT_FORMAT    = <span class="pl-c1">0xFF04</span>,</td>
      </tr>
      <tr>
        <td id="L5499" class="blob-num js-line-number" data-line-number="5499"></td>
        <td id="LC5499" class="blob-code blob-code-inner js-file-line">        STR_FORMAT      = <span class="pl-c1">0xFF05</span>,</td>
      </tr>
      <tr>
        <td id="L5500" class="blob-num js-line-number" data-line-number="5500"></td>
        <td id="LC5500" class="blob-code blob-code-inner js-file-line">        MAP_FORMAT      = <span class="pl-c1">0xFF06</span>, <span class="pl-c"><span class="pl-c">//</span> Indicating also nested types.</span></td>
      </tr>
      <tr>
        <td id="L5501" class="blob-num js-line-number" data-line-number="5501"></td>
        <td id="LC5501" class="blob-code blob-code-inner js-file-line">   };</td>
      </tr>
      <tr>
        <td id="L5502" class="blob-num js-line-number" data-line-number="5502"></td>
        <td id="LC5502" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L5503" class="blob-num js-line-number" data-line-number="5503"></td>
        <td id="LC5503" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> clang-format on</span></td>
      </tr>
      <tr>
        <td id="L5504" class="blob-num js-line-number" data-line-number="5504"></td>
        <td id="LC5504" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5505" class="blob-num js-line-number" data-line-number="5505"></td>
        <td id="LC5505" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L5506" class="blob-num js-line-number" data-line-number="5506"></td>
        <td id="LC5506" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L5507" class="blob-num js-line-number" data-line-number="5507"></td>
        <td id="LC5507" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Copyright (C) 2017-2018  Christian Berger</span></td>
      </tr>
      <tr>
        <td id="L5508" class="blob-num js-line-number" data-line-number="5508"></td>
        <td id="LC5508" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L5509" class="blob-num js-line-number" data-line-number="5509"></td>
        <td id="LC5509" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is free software: you can redistribute it and/or modify</span></td>
      </tr>
      <tr>
        <td id="L5510" class="blob-num js-line-number" data-line-number="5510"></td>
        <td id="LC5510" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * it under the terms of the GNU General Public License as published by</span></td>
      </tr>
      <tr>
        <td id="L5511" class="blob-num js-line-number" data-line-number="5511"></td>
        <td id="LC5511" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * the Free Software Foundation, either version 3 of the License, or</span></td>
      </tr>
      <tr>
        <td id="L5512" class="blob-num js-line-number" data-line-number="5512"></td>
        <td id="LC5512" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * (at your option) any later version.</span></td>
      </tr>
      <tr>
        <td id="L5513" class="blob-num js-line-number" data-line-number="5513"></td>
        <td id="LC5513" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L5514" class="blob-num js-line-number" data-line-number="5514"></td>
        <td id="LC5514" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is distributed in the hope that it will be useful,</span></td>
      </tr>
      <tr>
        <td id="L5515" class="blob-num js-line-number" data-line-number="5515"></td>
        <td id="LC5515" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></td>
      </tr>
      <tr>
        <td id="L5516" class="blob-num js-line-number" data-line-number="5516"></td>
        <td id="LC5516" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></td>
      </tr>
      <tr>
        <td id="L5517" class="blob-num js-line-number" data-line-number="5517"></td>
        <td id="LC5517" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * GNU General Public License for more details.</span></td>
      </tr>
      <tr>
        <td id="L5518" class="blob-num js-line-number" data-line-number="5518"></td>
        <td id="LC5518" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L5519" class="blob-num js-line-number" data-line-number="5519"></td>
        <td id="LC5519" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * You should have received a copy of the GNU General Public License</span></td>
      </tr>
      <tr>
        <td id="L5520" class="blob-num js-line-number" data-line-number="5520"></td>
        <td id="LC5520" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></td>
      </tr>
      <tr>
        <td id="L5521" class="blob-num js-line-number" data-line-number="5521"></td>
        <td id="LC5521" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L5522" class="blob-num js-line-number" data-line-number="5522"></td>
        <td id="LC5522" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5523" class="blob-num js-line-number" data-line-number="5523"></td>
        <td id="LC5523" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifndef</span> FROMMSGPACKVISITOR_HPP</td>
      </tr>
      <tr>
        <td id="L5524" class="blob-num js-line-number" data-line-number="5524"></td>
        <td id="LC5524" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">define</span> <span class="pl-en">FROMMSGPACKVISITOR_HPP</span></td>
      </tr>
      <tr>
        <td id="L5525" class="blob-num js-line-number" data-line-number="5525"></td>
        <td id="LC5525" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5526" class="blob-num js-line-number" data-line-number="5526"></td>
        <td id="LC5526" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/MsgPackConstants.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L5527" class="blob-num js-line-number" data-line-number="5527"></td>
        <td id="LC5527" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/any/any.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L5528" class="blob-num js-line-number" data-line-number="5528"></td>
        <td id="LC5528" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/cluon.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L5529" class="blob-num js-line-number" data-line-number="5529"></td>
        <td id="LC5529" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5530" class="blob-num js-line-number" data-line-number="5530"></td>
        <td id="LC5530" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>cstdint<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L5531" class="blob-num js-line-number" data-line-number="5531"></td>
        <td id="LC5531" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>istream<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L5532" class="blob-num js-line-number" data-line-number="5532"></td>
        <td id="LC5532" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>map<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L5533" class="blob-num js-line-number" data-line-number="5533"></td>
        <td id="LC5533" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>string<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L5534" class="blob-num js-line-number" data-line-number="5534"></td>
        <td id="LC5534" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5535" class="blob-num js-line-number" data-line-number="5535"></td>
        <td id="LC5535" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">cluon</span> {</td>
      </tr>
      <tr>
        <td id="L5536" class="blob-num js-line-number" data-line-number="5536"></td>
        <td id="LC5536" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L5537" class="blob-num js-line-number" data-line-number="5537"></td>
        <td id="LC5537" class="blob-code blob-code-inner js-file-line"><span class="pl-c">This class decodes a given message from MsgPack format.</span></td>
      </tr>
      <tr>
        <td id="L5538" class="blob-num js-line-number" data-line-number="5538"></td>
        <td id="LC5538" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L5539" class="blob-num js-line-number" data-line-number="5539"></td>
        <td id="LC5539" class="blob-code blob-code-inner js-file-line"><span class="pl-k">class</span> <span class="pl-en">LIBCLUON_API</span> FromMsgPackVisitor {</td>
      </tr>
      <tr>
        <td id="L5540" class="blob-num js-line-number" data-line-number="5540"></td>
        <td id="LC5540" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L5541" class="blob-num js-line-number" data-line-number="5541"></td>
        <td id="LC5541" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * This class represents a key/value in a MsgPack payload stream of key/values.</span></td>
      </tr>
      <tr>
        <td id="L5542" class="blob-num js-line-number" data-line-number="5542"></td>
        <td id="LC5542" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L5543" class="blob-num js-line-number" data-line-number="5543"></td>
        <td id="LC5543" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">class</span> <span class="pl-en">MsgPackKeyValue</span> {</td>
      </tr>
      <tr>
        <td id="L5544" class="blob-num js-line-number" data-line-number="5544"></td>
        <td id="LC5544" class="blob-code blob-code-inner js-file-line">       <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L5545" class="blob-num js-line-number" data-line-number="5545"></td>
        <td id="LC5545" class="blob-code blob-code-inner js-file-line">        MsgPackKeyValue &amp;<span class="pl-k">operator</span>=(MsgPackKeyValue &amp;&amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L5546" class="blob-num js-line-number" data-line-number="5546"></td>
        <td id="LC5546" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5547" class="blob-num js-line-number" data-line-number="5547"></td>
        <td id="LC5547" class="blob-code blob-code-inner js-file-line">       <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L5548" class="blob-num js-line-number" data-line-number="5548"></td>
        <td id="LC5548" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">MsgPackKeyValue</span>()                        = <span class="pl-k">default</span>;</td>
      </tr>
      <tr>
        <td id="L5549" class="blob-num js-line-number" data-line-number="5549"></td>
        <td id="LC5549" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">MsgPackKeyValue</span>(<span class="pl-k">const</span> MsgPackKeyValue &amp;) = <span class="pl-k">default</span>;</td>
      </tr>
      <tr>
        <td id="L5550" class="blob-num js-line-number" data-line-number="5550"></td>
        <td id="LC5550" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">MsgPackKeyValue</span>(MsgPackKeyValue &amp;&amp;)      = <span class="pl-k">default</span>;</td>
      </tr>
      <tr>
        <td id="L5551" class="blob-num js-line-number" data-line-number="5551"></td>
        <td id="LC5551" class="blob-code blob-code-inner js-file-line">        MsgPackKeyValue &amp;<span class="pl-k">operator</span>=(<span class="pl-k">const</span> MsgPackKeyValue &amp;) = <span class="pl-k">default</span>;</td>
      </tr>
      <tr>
        <td id="L5552" class="blob-num js-line-number" data-line-number="5552"></td>
        <td id="LC5552" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">~MsgPackKeyValue</span>()                                  = <span class="pl-k">default</span>;</td>
      </tr>
      <tr>
        <td id="L5553" class="blob-num js-line-number" data-line-number="5553"></td>
        <td id="LC5553" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5554" class="blob-num js-line-number" data-line-number="5554"></td>
        <td id="LC5554" class="blob-code blob-code-inner js-file-line">       <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L5555" class="blob-num js-line-number" data-line-number="5555"></td>
        <td id="LC5555" class="blob-code blob-code-inner js-file-line">        std::string m_key{<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>};</td>
      </tr>
      <tr>
        <td id="L5556" class="blob-num js-line-number" data-line-number="5556"></td>
        <td id="LC5556" class="blob-code blob-code-inner js-file-line">        MsgPackConstants m_formatFamily{MsgPackConstants::BOOL_FORMAT};</td>
      </tr>
      <tr>
        <td id="L5557" class="blob-num js-line-number" data-line-number="5557"></td>
        <td id="LC5557" class="blob-code blob-code-inner js-file-line">        linb::any m_value;</td>
      </tr>
      <tr>
        <td id="L5558" class="blob-num js-line-number" data-line-number="5558"></td>
        <td id="LC5558" class="blob-code blob-code-inner js-file-line">    };</td>
      </tr>
      <tr>
        <td id="L5559" class="blob-num js-line-number" data-line-number="5559"></td>
        <td id="LC5559" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5560" class="blob-num js-line-number" data-line-number="5560"></td>
        <td id="LC5560" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L5561" class="blob-num js-line-number" data-line-number="5561"></td>
        <td id="LC5561" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">FromMsgPackVisitor</span>(<span class="pl-k">const</span> FromMsgPackVisitor &amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L5562" class="blob-num js-line-number" data-line-number="5562"></td>
        <td id="LC5562" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">FromMsgPackVisitor</span>(FromMsgPackVisitor &amp;&amp;)      = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L5563" class="blob-num js-line-number" data-line-number="5563"></td>
        <td id="LC5563" class="blob-code blob-code-inner js-file-line">    FromMsgPackVisitor &amp;<span class="pl-k">operator</span>=(FromMsgPackVisitor &amp;&amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L5564" class="blob-num js-line-number" data-line-number="5564"></td>
        <td id="LC5564" class="blob-code blob-code-inner js-file-line">    FromMsgPackVisitor &amp;<span class="pl-k">operator</span>=(<span class="pl-k">const</span> FromMsgPackVisitor &amp;other) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L5565" class="blob-num js-line-number" data-line-number="5565"></td>
        <td id="LC5565" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5566" class="blob-num js-line-number" data-line-number="5566"></td>
        <td id="LC5566" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L5567" class="blob-num js-line-number" data-line-number="5567"></td>
        <td id="LC5567" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * Internal constructor to pass reference to preset key/values.</span></td>
      </tr>
      <tr>
        <td id="L5568" class="blob-num js-line-number" data-line-number="5568"></td>
        <td id="LC5568" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     *</span></td>
      </tr>
      <tr>
        <td id="L5569" class="blob-num js-line-number" data-line-number="5569"></td>
        <td id="LC5569" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param preset Pre-filled key/value map to handle nested fields.</span></td>
      </tr>
      <tr>
        <td id="L5570" class="blob-num js-line-number" data-line-number="5570"></td>
        <td id="LC5570" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L5571" class="blob-num js-line-number" data-line-number="5571"></td>
        <td id="LC5571" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">FromMsgPackVisitor</span>(std::map&lt;std::string, FromMsgPackVisitor::MsgPackKeyValue&gt; &amp;preset) noexcept;</td>
      </tr>
      <tr>
        <td id="L5572" class="blob-num js-line-number" data-line-number="5572"></td>
        <td id="LC5572" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5573" class="blob-num js-line-number" data-line-number="5573"></td>
        <td id="LC5573" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L5574" class="blob-num js-line-number" data-line-number="5574"></td>
        <td id="LC5574" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">FromMsgPackVisitor</span>() noexcept;</td>
      </tr>
      <tr>
        <td id="L5575" class="blob-num js-line-number" data-line-number="5575"></td>
        <td id="LC5575" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">~FromMsgPackVisitor</span>() = <span class="pl-k">default</span>;</td>
      </tr>
      <tr>
        <td id="L5576" class="blob-num js-line-number" data-line-number="5576"></td>
        <td id="LC5576" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5577" class="blob-num js-line-number" data-line-number="5577"></td>
        <td id="LC5577" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L5578" class="blob-num js-line-number" data-line-number="5578"></td>
        <td id="LC5578" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L5579" class="blob-num js-line-number" data-line-number="5579"></td>
        <td id="LC5579" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * This method decodes a given istream into an internal key/value representation.</span></td>
      </tr>
      <tr>
        <td id="L5580" class="blob-num js-line-number" data-line-number="5580"></td>
        <td id="LC5580" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     *</span></td>
      </tr>
      <tr>
        <td id="L5581" class="blob-num js-line-number" data-line-number="5581"></td>
        <td id="LC5581" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param in istream to decode.</span></td>
      </tr>
      <tr>
        <td id="L5582" class="blob-num js-line-number" data-line-number="5582"></td>
        <td id="LC5582" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L5583" class="blob-num js-line-number" data-line-number="5583"></td>
        <td id="LC5583" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">decodeFrom</span>(std::istream &amp;in) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5584" class="blob-num js-line-number" data-line-number="5584"></td>
        <td id="LC5584" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5585" class="blob-num js-line-number" data-line-number="5585"></td>
        <td id="LC5585" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L5586" class="blob-num js-line-number" data-line-number="5586"></td>
        <td id="LC5586" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> The following methods are provided to allow an instance of this class to</span></td>
      </tr>
      <tr>
        <td id="L5587" class="blob-num js-line-number" data-line-number="5587"></td>
        <td id="LC5587" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> be used as visitor for an instance with the method signature void accept&lt;T&gt;(T&amp;);</span></td>
      </tr>
      <tr>
        <td id="L5588" class="blob-num js-line-number" data-line-number="5588"></td>
        <td id="LC5588" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5589" class="blob-num js-line-number" data-line-number="5589"></td>
        <td id="LC5589" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">preVisit</span>(<span class="pl-c1">int32_t</span> id, <span class="pl-k">const</span> std::string &amp;shortName, <span class="pl-k">const</span> std::string &amp;longName) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5590" class="blob-num js-line-number" data-line-number="5590"></td>
        <td id="LC5590" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">postVisit</span>() <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5591" class="blob-num js-line-number" data-line-number="5591"></td>
        <td id="LC5591" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5592" class="blob-num js-line-number" data-line-number="5592"></td>
        <td id="LC5592" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">bool</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5593" class="blob-num js-line-number" data-line-number="5593"></td>
        <td id="LC5593" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">char</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5594" class="blob-num js-line-number" data-line-number="5594"></td>
        <td id="LC5594" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int8_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5595" class="blob-num js-line-number" data-line-number="5595"></td>
        <td id="LC5595" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint8_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5596" class="blob-num js-line-number" data-line-number="5596"></td>
        <td id="LC5596" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int16_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5597" class="blob-num js-line-number" data-line-number="5597"></td>
        <td id="LC5597" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint16_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5598" class="blob-num js-line-number" data-line-number="5598"></td>
        <td id="LC5598" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int32_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5599" class="blob-num js-line-number" data-line-number="5599"></td>
        <td id="LC5599" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint32_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5600" class="blob-num js-line-number" data-line-number="5600"></td>
        <td id="LC5600" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int64_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5601" class="blob-num js-line-number" data-line-number="5601"></td>
        <td id="LC5601" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint64_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5602" class="blob-num js-line-number" data-line-number="5602"></td>
        <td id="LC5602" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">float</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5603" class="blob-num js-line-number" data-line-number="5603"></td>
        <td id="LC5603" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">double</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5604" class="blob-num js-line-number" data-line-number="5604"></td>
        <td id="LC5604" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, std::string &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5605" class="blob-num js-line-number" data-line-number="5605"></td>
        <td id="LC5605" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5606" class="blob-num js-line-number" data-line-number="5606"></td>
        <td id="LC5606" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> T&gt;</td>
      </tr>
      <tr>
        <td id="L5607" class="blob-num js-line-number" data-line-number="5607"></td>
        <td id="LC5607" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> &amp;id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, T &amp;value) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L5608" class="blob-num js-line-number" data-line-number="5608"></td>
        <td id="LC5608" class="blob-code blob-code-inner js-file-line">        (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L5609" class="blob-num js-line-number" data-line-number="5609"></td>
        <td id="LC5609" class="blob-code blob-code-inner js-file-line">        (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L5610" class="blob-num js-line-number" data-line-number="5610"></td>
        <td id="LC5610" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5611" class="blob-num js-line-number" data-line-number="5611"></td>
        <td id="LC5611" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-c1">0</span> &lt; m_keyValues.<span class="pl-c1">count</span>(name)) {</td>
      </tr>
      <tr>
        <td id="L5612" class="blob-num js-line-number" data-line-number="5612"></td>
        <td id="LC5612" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L5613" class="blob-num js-line-number" data-line-number="5613"></td>
        <td id="LC5613" class="blob-code blob-code-inner js-file-line">                std::map&lt;std::string, FromMsgPackVisitor::MsgPackKeyValue&gt; v</td>
      </tr>
      <tr>
        <td id="L5614" class="blob-num js-line-number" data-line-number="5614"></td>
        <td id="LC5614" class="blob-code blob-code-inner js-file-line">                    = linb::any_cast&lt;std::map&lt;std::string, FromMsgPackVisitor::MsgPackKeyValue&gt;&gt;(m_keyValues[name].<span class="pl-smi">m_value</span>);</td>
      </tr>
      <tr>
        <td id="L5615" class="blob-num js-line-number" data-line-number="5615"></td>
        <td id="LC5615" class="blob-code blob-code-inner js-file-line">                cluon::FromMsgPackVisitor <span class="pl-smi">nestedMsgPackDecoder</span>(v);</td>
      </tr>
      <tr>
        <td id="L5616" class="blob-num js-line-number" data-line-number="5616"></td>
        <td id="LC5616" class="blob-code blob-code-inner js-file-line">                value.<span class="pl-c1">accept</span>(nestedMsgPackDecoder);</td>
      </tr>
      <tr>
        <td id="L5617" class="blob-num js-line-number" data-line-number="5617"></td>
        <td id="LC5617" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L5618" class="blob-num js-line-number" data-line-number="5618"></td>
        <td id="LC5618" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L5619" class="blob-num js-line-number" data-line-number="5619"></td>
        <td id="LC5619" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5620" class="blob-num js-line-number" data-line-number="5620"></td>
        <td id="LC5620" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L5621" class="blob-num js-line-number" data-line-number="5621"></td>
        <td id="LC5621" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5622" class="blob-num js-line-number" data-line-number="5622"></td>
        <td id="LC5622" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L5623" class="blob-num js-line-number" data-line-number="5623"></td>
        <td id="LC5623" class="blob-code blob-code-inner js-file-line">    MsgPackConstants <span class="pl-en">getFormatFamily</span>(<span class="pl-c1">uint8_t</span> T) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5624" class="blob-num js-line-number" data-line-number="5624"></td>
        <td id="LC5624" class="blob-code blob-code-inner js-file-line">    std::map&lt;std::string, FromMsgPackVisitor::MsgPackKeyValue&gt; <span class="pl-en">readKeyValues</span>(std::istream &amp;in) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5625" class="blob-num js-line-number" data-line-number="5625"></td>
        <td id="LC5625" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">uint64_t</span> <span class="pl-en">readUint</span>(std::istream &amp;in) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5626" class="blob-num js-line-number" data-line-number="5626"></td>
        <td id="LC5626" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">int64_t</span> <span class="pl-en">readInt</span>(std::istream &amp;in) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5627" class="blob-num js-line-number" data-line-number="5627"></td>
        <td id="LC5627" class="blob-code blob-code-inner js-file-line">    std::string <span class="pl-en">readString</span>(std::istream &amp;in) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5628" class="blob-num js-line-number" data-line-number="5628"></td>
        <td id="LC5628" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5629" class="blob-num js-line-number" data-line-number="5629"></td>
        <td id="LC5629" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L5630" class="blob-num js-line-number" data-line-number="5630"></td>
        <td id="LC5630" class="blob-code blob-code-inner js-file-line">    std::map&lt;std::string, FromMsgPackVisitor::MsgPackKeyValue&gt; m_data{};</td>
      </tr>
      <tr>
        <td id="L5631" class="blob-num js-line-number" data-line-number="5631"></td>
        <td id="LC5631" class="blob-code blob-code-inner js-file-line">    std::map&lt;std::string, FromMsgPackVisitor::MsgPackKeyValue&gt; &amp;m_keyValues;</td>
      </tr>
      <tr>
        <td id="L5632" class="blob-num js-line-number" data-line-number="5632"></td>
        <td id="LC5632" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L5633" class="blob-num js-line-number" data-line-number="5633"></td>
        <td id="LC5633" class="blob-code blob-code-inner js-file-line">} <span class="pl-c"><span class="pl-c">//</span> namespace cluon</span></td>
      </tr>
      <tr>
        <td id="L5634" class="blob-num js-line-number" data-line-number="5634"></td>
        <td id="LC5634" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5635" class="blob-num js-line-number" data-line-number="5635"></td>
        <td id="LC5635" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L5636" class="blob-num js-line-number" data-line-number="5636"></td>
        <td id="LC5636" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L5637" class="blob-num js-line-number" data-line-number="5637"></td>
        <td id="LC5637" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Copyright (C) 2018  Christian Berger</span></td>
      </tr>
      <tr>
        <td id="L5638" class="blob-num js-line-number" data-line-number="5638"></td>
        <td id="LC5638" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L5639" class="blob-num js-line-number" data-line-number="5639"></td>
        <td id="LC5639" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is free software: you can redistribute it and/or modify</span></td>
      </tr>
      <tr>
        <td id="L5640" class="blob-num js-line-number" data-line-number="5640"></td>
        <td id="LC5640" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * it under the terms of the GNU General Public License as published by</span></td>
      </tr>
      <tr>
        <td id="L5641" class="blob-num js-line-number" data-line-number="5641"></td>
        <td id="LC5641" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * the Free Software Foundation, either version 3 of the License, or</span></td>
      </tr>
      <tr>
        <td id="L5642" class="blob-num js-line-number" data-line-number="5642"></td>
        <td id="LC5642" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * (at your option) any later version.</span></td>
      </tr>
      <tr>
        <td id="L5643" class="blob-num js-line-number" data-line-number="5643"></td>
        <td id="LC5643" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L5644" class="blob-num js-line-number" data-line-number="5644"></td>
        <td id="LC5644" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is distributed in the hope that it will be useful,</span></td>
      </tr>
      <tr>
        <td id="L5645" class="blob-num js-line-number" data-line-number="5645"></td>
        <td id="LC5645" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></td>
      </tr>
      <tr>
        <td id="L5646" class="blob-num js-line-number" data-line-number="5646"></td>
        <td id="LC5646" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></td>
      </tr>
      <tr>
        <td id="L5647" class="blob-num js-line-number" data-line-number="5647"></td>
        <td id="LC5647" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * GNU General Public License for more details.</span></td>
      </tr>
      <tr>
        <td id="L5648" class="blob-num js-line-number" data-line-number="5648"></td>
        <td id="LC5648" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L5649" class="blob-num js-line-number" data-line-number="5649"></td>
        <td id="LC5649" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * You should have received a copy of the GNU General Public License</span></td>
      </tr>
      <tr>
        <td id="L5650" class="blob-num js-line-number" data-line-number="5650"></td>
        <td id="LC5650" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></td>
      </tr>
      <tr>
        <td id="L5651" class="blob-num js-line-number" data-line-number="5651"></td>
        <td id="LC5651" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L5652" class="blob-num js-line-number" data-line-number="5652"></td>
        <td id="LC5652" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5653" class="blob-num js-line-number" data-line-number="5653"></td>
        <td id="LC5653" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifndef</span> JSONCONSTANTS_HPP</td>
      </tr>
      <tr>
        <td id="L5654" class="blob-num js-line-number" data-line-number="5654"></td>
        <td id="LC5654" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">define</span> <span class="pl-en">JSONCONSTANTS_HPP</span></td>
      </tr>
      <tr>
        <td id="L5655" class="blob-num js-line-number" data-line-number="5655"></td>
        <td id="LC5655" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5656" class="blob-num js-line-number" data-line-number="5656"></td>
        <td id="LC5656" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>cstdint<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L5657" class="blob-num js-line-number" data-line-number="5657"></td>
        <td id="LC5657" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5658" class="blob-num js-line-number" data-line-number="5658"></td>
        <td id="LC5658" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> clang-format off</span></td>
      </tr>
      <tr>
        <td id="L5659" class="blob-num js-line-number" data-line-number="5659"></td>
        <td id="LC5659" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">cluon</span> {</td>
      </tr>
      <tr>
        <td id="L5660" class="blob-num js-line-number" data-line-number="5660"></td>
        <td id="LC5660" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">enum</span> <span class="pl-k">class</span> <span class="pl-en">JSONConstants</span> : <span class="pl-c1">uint16_t</span> {</td>
      </tr>
      <tr>
        <td id="L5661" class="blob-num js-line-number" data-line-number="5661"></td>
        <td id="LC5661" class="blob-code blob-code-inner js-file-line">        IS_FALSE    = <span class="pl-c1">0</span>,</td>
      </tr>
      <tr>
        <td id="L5662" class="blob-num js-line-number" data-line-number="5662"></td>
        <td id="LC5662" class="blob-code blob-code-inner js-file-line">        IS_TRUE     = <span class="pl-c1">1</span>,</td>
      </tr>
      <tr>
        <td id="L5663" class="blob-num js-line-number" data-line-number="5663"></td>
        <td id="LC5663" class="blob-code blob-code-inner js-file-line">        NUMBER      = <span class="pl-c1">2</span>,</td>
      </tr>
      <tr>
        <td id="L5664" class="blob-num js-line-number" data-line-number="5664"></td>
        <td id="LC5664" class="blob-code blob-code-inner js-file-line">        STRING      = <span class="pl-c1">3</span>,</td>
      </tr>
      <tr>
        <td id="L5665" class="blob-num js-line-number" data-line-number="5665"></td>
        <td id="LC5665" class="blob-code blob-code-inner js-file-line">        OBJECT      = <span class="pl-c1">4</span>, <span class="pl-c"><span class="pl-c">//</span> Indicating nested types.</span></td>
      </tr>
      <tr>
        <td id="L5666" class="blob-num js-line-number" data-line-number="5666"></td>
        <td id="LC5666" class="blob-code blob-code-inner js-file-line">        UNDEFINED   = <span class="pl-c1">99</span>,</td>
      </tr>
      <tr>
        <td id="L5667" class="blob-num js-line-number" data-line-number="5667"></td>
        <td id="LC5667" class="blob-code blob-code-inner js-file-line">   };</td>
      </tr>
      <tr>
        <td id="L5668" class="blob-num js-line-number" data-line-number="5668"></td>
        <td id="LC5668" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L5669" class="blob-num js-line-number" data-line-number="5669"></td>
        <td id="LC5669" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> clang-format on</span></td>
      </tr>
      <tr>
        <td id="L5670" class="blob-num js-line-number" data-line-number="5670"></td>
        <td id="LC5670" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5671" class="blob-num js-line-number" data-line-number="5671"></td>
        <td id="LC5671" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L5672" class="blob-num js-line-number" data-line-number="5672"></td>
        <td id="LC5672" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L5673" class="blob-num js-line-number" data-line-number="5673"></td>
        <td id="LC5673" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Copyright (C) 2018  Christian Berger</span></td>
      </tr>
      <tr>
        <td id="L5674" class="blob-num js-line-number" data-line-number="5674"></td>
        <td id="LC5674" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L5675" class="blob-num js-line-number" data-line-number="5675"></td>
        <td id="LC5675" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is free software: you can redistribute it and/or modify</span></td>
      </tr>
      <tr>
        <td id="L5676" class="blob-num js-line-number" data-line-number="5676"></td>
        <td id="LC5676" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * it under the terms of the GNU General Public License as published by</span></td>
      </tr>
      <tr>
        <td id="L5677" class="blob-num js-line-number" data-line-number="5677"></td>
        <td id="LC5677" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * the Free Software Foundation, either version 3 of the License, or</span></td>
      </tr>
      <tr>
        <td id="L5678" class="blob-num js-line-number" data-line-number="5678"></td>
        <td id="LC5678" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * (at your option) any later version.</span></td>
      </tr>
      <tr>
        <td id="L5679" class="blob-num js-line-number" data-line-number="5679"></td>
        <td id="LC5679" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L5680" class="blob-num js-line-number" data-line-number="5680"></td>
        <td id="LC5680" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is distributed in the hope that it will be useful,</span></td>
      </tr>
      <tr>
        <td id="L5681" class="blob-num js-line-number" data-line-number="5681"></td>
        <td id="LC5681" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></td>
      </tr>
      <tr>
        <td id="L5682" class="blob-num js-line-number" data-line-number="5682"></td>
        <td id="LC5682" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></td>
      </tr>
      <tr>
        <td id="L5683" class="blob-num js-line-number" data-line-number="5683"></td>
        <td id="LC5683" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * GNU General Public License for more details.</span></td>
      </tr>
      <tr>
        <td id="L5684" class="blob-num js-line-number" data-line-number="5684"></td>
        <td id="LC5684" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L5685" class="blob-num js-line-number" data-line-number="5685"></td>
        <td id="LC5685" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * You should have received a copy of the GNU General Public License</span></td>
      </tr>
      <tr>
        <td id="L5686" class="blob-num js-line-number" data-line-number="5686"></td>
        <td id="LC5686" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></td>
      </tr>
      <tr>
        <td id="L5687" class="blob-num js-line-number" data-line-number="5687"></td>
        <td id="LC5687" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L5688" class="blob-num js-line-number" data-line-number="5688"></td>
        <td id="LC5688" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5689" class="blob-num js-line-number" data-line-number="5689"></td>
        <td id="LC5689" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifndef</span> FROMJSONVISITOR_HPP</td>
      </tr>
      <tr>
        <td id="L5690" class="blob-num js-line-number" data-line-number="5690"></td>
        <td id="LC5690" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">define</span> <span class="pl-en">FROMJSONVISITOR_HPP</span></td>
      </tr>
      <tr>
        <td id="L5691" class="blob-num js-line-number" data-line-number="5691"></td>
        <td id="LC5691" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5692" class="blob-num js-line-number" data-line-number="5692"></td>
        <td id="LC5692" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/JSONConstants.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L5693" class="blob-num js-line-number" data-line-number="5693"></td>
        <td id="LC5693" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/any/any.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L5694" class="blob-num js-line-number" data-line-number="5694"></td>
        <td id="LC5694" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/cluon.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L5695" class="blob-num js-line-number" data-line-number="5695"></td>
        <td id="LC5695" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5696" class="blob-num js-line-number" data-line-number="5696"></td>
        <td id="LC5696" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>cstdint<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L5697" class="blob-num js-line-number" data-line-number="5697"></td>
        <td id="LC5697" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>istream<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L5698" class="blob-num js-line-number" data-line-number="5698"></td>
        <td id="LC5698" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>map<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L5699" class="blob-num js-line-number" data-line-number="5699"></td>
        <td id="LC5699" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>string<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L5700" class="blob-num js-line-number" data-line-number="5700"></td>
        <td id="LC5700" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5701" class="blob-num js-line-number" data-line-number="5701"></td>
        <td id="LC5701" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">cluon</span> {</td>
      </tr>
      <tr>
        <td id="L5702" class="blob-num js-line-number" data-line-number="5702"></td>
        <td id="LC5702" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L5703" class="blob-num js-line-number" data-line-number="5703"></td>
        <td id="LC5703" class="blob-code blob-code-inner js-file-line"><span class="pl-c">This class decodes a given message from JSON format.</span></td>
      </tr>
      <tr>
        <td id="L5704" class="blob-num js-line-number" data-line-number="5704"></td>
        <td id="LC5704" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L5705" class="blob-num js-line-number" data-line-number="5705"></td>
        <td id="LC5705" class="blob-code blob-code-inner js-file-line"><span class="pl-k">class</span> <span class="pl-en">LIBCLUON_API</span> FromJSONVisitor {</td>
      </tr>
      <tr>
        <td id="L5706" class="blob-num js-line-number" data-line-number="5706"></td>
        <td id="LC5706" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L5707" class="blob-num js-line-number" data-line-number="5707"></td>
        <td id="LC5707" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * This class represents a key/value in a JSON list of key/values.</span></td>
      </tr>
      <tr>
        <td id="L5708" class="blob-num js-line-number" data-line-number="5708"></td>
        <td id="LC5708" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L5709" class="blob-num js-line-number" data-line-number="5709"></td>
        <td id="LC5709" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">class</span> <span class="pl-en">JSONKeyValue</span> {</td>
      </tr>
      <tr>
        <td id="L5710" class="blob-num js-line-number" data-line-number="5710"></td>
        <td id="LC5710" class="blob-code blob-code-inner js-file-line">       <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L5711" class="blob-num js-line-number" data-line-number="5711"></td>
        <td id="LC5711" class="blob-code blob-code-inner js-file-line">        JSONKeyValue &amp;<span class="pl-k">operator</span>=(JSONKeyValue &amp;&amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L5712" class="blob-num js-line-number" data-line-number="5712"></td>
        <td id="LC5712" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5713" class="blob-num js-line-number" data-line-number="5713"></td>
        <td id="LC5713" class="blob-code blob-code-inner js-file-line">       <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L5714" class="blob-num js-line-number" data-line-number="5714"></td>
        <td id="LC5714" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">JSONKeyValue</span>()                     = <span class="pl-k">default</span>;</td>
      </tr>
      <tr>
        <td id="L5715" class="blob-num js-line-number" data-line-number="5715"></td>
        <td id="LC5715" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">JSONKeyValue</span>(<span class="pl-k">const</span> JSONKeyValue &amp;) = <span class="pl-k">default</span>;</td>
      </tr>
      <tr>
        <td id="L5716" class="blob-num js-line-number" data-line-number="5716"></td>
        <td id="LC5716" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">JSONKeyValue</span>(JSONKeyValue &amp;&amp;)      = <span class="pl-k">default</span>;</td>
      </tr>
      <tr>
        <td id="L5717" class="blob-num js-line-number" data-line-number="5717"></td>
        <td id="LC5717" class="blob-code blob-code-inner js-file-line">        JSONKeyValue &amp;<span class="pl-k">operator</span>=(<span class="pl-k">const</span> JSONKeyValue &amp;) = <span class="pl-k">default</span>;</td>
      </tr>
      <tr>
        <td id="L5718" class="blob-num js-line-number" data-line-number="5718"></td>
        <td id="LC5718" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">~JSONKeyValue</span>()                               = <span class="pl-k">default</span>;</td>
      </tr>
      <tr>
        <td id="L5719" class="blob-num js-line-number" data-line-number="5719"></td>
        <td id="LC5719" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5720" class="blob-num js-line-number" data-line-number="5720"></td>
        <td id="LC5720" class="blob-code blob-code-inner js-file-line">       <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L5721" class="blob-num js-line-number" data-line-number="5721"></td>
        <td id="LC5721" class="blob-code blob-code-inner js-file-line">        std::string m_key{<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>};</td>
      </tr>
      <tr>
        <td id="L5722" class="blob-num js-line-number" data-line-number="5722"></td>
        <td id="LC5722" class="blob-code blob-code-inner js-file-line">        JSONConstants m_type{JSONConstants::UNDEFINED};</td>
      </tr>
      <tr>
        <td id="L5723" class="blob-num js-line-number" data-line-number="5723"></td>
        <td id="LC5723" class="blob-code blob-code-inner js-file-line">        linb::any m_value;</td>
      </tr>
      <tr>
        <td id="L5724" class="blob-num js-line-number" data-line-number="5724"></td>
        <td id="LC5724" class="blob-code blob-code-inner js-file-line">    };</td>
      </tr>
      <tr>
        <td id="L5725" class="blob-num js-line-number" data-line-number="5725"></td>
        <td id="LC5725" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5726" class="blob-num js-line-number" data-line-number="5726"></td>
        <td id="LC5726" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L5727" class="blob-num js-line-number" data-line-number="5727"></td>
        <td id="LC5727" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">FromJSONVisitor</span>(<span class="pl-k">const</span> FromJSONVisitor &amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L5728" class="blob-num js-line-number" data-line-number="5728"></td>
        <td id="LC5728" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">FromJSONVisitor</span>(FromJSONVisitor &amp;&amp;)      = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L5729" class="blob-num js-line-number" data-line-number="5729"></td>
        <td id="LC5729" class="blob-code blob-code-inner js-file-line">    FromJSONVisitor &amp;<span class="pl-k">operator</span>=(FromJSONVisitor &amp;&amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L5730" class="blob-num js-line-number" data-line-number="5730"></td>
        <td id="LC5730" class="blob-code blob-code-inner js-file-line">    FromJSONVisitor &amp;<span class="pl-k">operator</span>=(<span class="pl-k">const</span> FromJSONVisitor &amp;other) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L5731" class="blob-num js-line-number" data-line-number="5731"></td>
        <td id="LC5731" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5732" class="blob-num js-line-number" data-line-number="5732"></td>
        <td id="LC5732" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L5733" class="blob-num js-line-number" data-line-number="5733"></td>
        <td id="LC5733" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * Internal constructor to pass reference to preset key/values.</span></td>
      </tr>
      <tr>
        <td id="L5734" class="blob-num js-line-number" data-line-number="5734"></td>
        <td id="LC5734" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     *</span></td>
      </tr>
      <tr>
        <td id="L5735" class="blob-num js-line-number" data-line-number="5735"></td>
        <td id="LC5735" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param preset Pre-filled key/value map to handle nested fields.</span></td>
      </tr>
      <tr>
        <td id="L5736" class="blob-num js-line-number" data-line-number="5736"></td>
        <td id="LC5736" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L5737" class="blob-num js-line-number" data-line-number="5737"></td>
        <td id="LC5737" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">FromJSONVisitor</span>(std::map&lt;std::string, FromJSONVisitor::JSONKeyValue&gt; &amp;preset) noexcept;</td>
      </tr>
      <tr>
        <td id="L5738" class="blob-num js-line-number" data-line-number="5738"></td>
        <td id="LC5738" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5739" class="blob-num js-line-number" data-line-number="5739"></td>
        <td id="LC5739" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L5740" class="blob-num js-line-number" data-line-number="5740"></td>
        <td id="LC5740" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">FromJSONVisitor</span>() noexcept;</td>
      </tr>
      <tr>
        <td id="L5741" class="blob-num js-line-number" data-line-number="5741"></td>
        <td id="LC5741" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">~FromJSONVisitor</span>() = <span class="pl-k">default</span>;</td>
      </tr>
      <tr>
        <td id="L5742" class="blob-num js-line-number" data-line-number="5742"></td>
        <td id="LC5742" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5743" class="blob-num js-line-number" data-line-number="5743"></td>
        <td id="LC5743" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L5744" class="blob-num js-line-number" data-line-number="5744"></td>
        <td id="LC5744" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L5745" class="blob-num js-line-number" data-line-number="5745"></td>
        <td id="LC5745" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * This method decodes a given istream into an internal key/value representation.</span></td>
      </tr>
      <tr>
        <td id="L5746" class="blob-num js-line-number" data-line-number="5746"></td>
        <td id="LC5746" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     *</span></td>
      </tr>
      <tr>
        <td id="L5747" class="blob-num js-line-number" data-line-number="5747"></td>
        <td id="LC5747" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param in istream to decode.</span></td>
      </tr>
      <tr>
        <td id="L5748" class="blob-num js-line-number" data-line-number="5748"></td>
        <td id="LC5748" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L5749" class="blob-num js-line-number" data-line-number="5749"></td>
        <td id="LC5749" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">decodeFrom</span>(std::istream &amp;in) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5750" class="blob-num js-line-number" data-line-number="5750"></td>
        <td id="LC5750" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5751" class="blob-num js-line-number" data-line-number="5751"></td>
        <td id="LC5751" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L5752" class="blob-num js-line-number" data-line-number="5752"></td>
        <td id="LC5752" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> The following methods are provided to allow an instance of this class to</span></td>
      </tr>
      <tr>
        <td id="L5753" class="blob-num js-line-number" data-line-number="5753"></td>
        <td id="LC5753" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> be used as visitor for an instance with the method signature void accept&lt;T&gt;(T&amp;);</span></td>
      </tr>
      <tr>
        <td id="L5754" class="blob-num js-line-number" data-line-number="5754"></td>
        <td id="LC5754" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5755" class="blob-num js-line-number" data-line-number="5755"></td>
        <td id="LC5755" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">preVisit</span>(<span class="pl-c1">int32_t</span> id, <span class="pl-k">const</span> std::string &amp;shortName, <span class="pl-k">const</span> std::string &amp;longName) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5756" class="blob-num js-line-number" data-line-number="5756"></td>
        <td id="LC5756" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">postVisit</span>() <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5757" class="blob-num js-line-number" data-line-number="5757"></td>
        <td id="LC5757" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5758" class="blob-num js-line-number" data-line-number="5758"></td>
        <td id="LC5758" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">bool</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5759" class="blob-num js-line-number" data-line-number="5759"></td>
        <td id="LC5759" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">char</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5760" class="blob-num js-line-number" data-line-number="5760"></td>
        <td id="LC5760" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int8_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5761" class="blob-num js-line-number" data-line-number="5761"></td>
        <td id="LC5761" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint8_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5762" class="blob-num js-line-number" data-line-number="5762"></td>
        <td id="LC5762" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int16_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5763" class="blob-num js-line-number" data-line-number="5763"></td>
        <td id="LC5763" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint16_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5764" class="blob-num js-line-number" data-line-number="5764"></td>
        <td id="LC5764" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int32_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5765" class="blob-num js-line-number" data-line-number="5765"></td>
        <td id="LC5765" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint32_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5766" class="blob-num js-line-number" data-line-number="5766"></td>
        <td id="LC5766" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int64_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5767" class="blob-num js-line-number" data-line-number="5767"></td>
        <td id="LC5767" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint64_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5768" class="blob-num js-line-number" data-line-number="5768"></td>
        <td id="LC5768" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">float</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5769" class="blob-num js-line-number" data-line-number="5769"></td>
        <td id="LC5769" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">double</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5770" class="blob-num js-line-number" data-line-number="5770"></td>
        <td id="LC5770" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, std::string &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5771" class="blob-num js-line-number" data-line-number="5771"></td>
        <td id="LC5771" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5772" class="blob-num js-line-number" data-line-number="5772"></td>
        <td id="LC5772" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> T&gt;</td>
      </tr>
      <tr>
        <td id="L5773" class="blob-num js-line-number" data-line-number="5773"></td>
        <td id="LC5773" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> &amp;id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, T &amp;value) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L5774" class="blob-num js-line-number" data-line-number="5774"></td>
        <td id="LC5774" class="blob-code blob-code-inner js-file-line">        (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L5775" class="blob-num js-line-number" data-line-number="5775"></td>
        <td id="LC5775" class="blob-code blob-code-inner js-file-line">        (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L5776" class="blob-num js-line-number" data-line-number="5776"></td>
        <td id="LC5776" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5777" class="blob-num js-line-number" data-line-number="5777"></td>
        <td id="LC5777" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-c1">0</span> &lt; m_keyValues.<span class="pl-c1">count</span>(name)) {</td>
      </tr>
      <tr>
        <td id="L5778" class="blob-num js-line-number" data-line-number="5778"></td>
        <td id="LC5778" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L5779" class="blob-num js-line-number" data-line-number="5779"></td>
        <td id="LC5779" class="blob-code blob-code-inner js-file-line">                std::map&lt;std::string, FromJSONVisitor::JSONKeyValue&gt; v</td>
      </tr>
      <tr>
        <td id="L5780" class="blob-num js-line-number" data-line-number="5780"></td>
        <td id="LC5780" class="blob-code blob-code-inner js-file-line">                    = linb::any_cast&lt;std::map&lt;std::string, FromJSONVisitor::JSONKeyValue&gt;&gt;(m_keyValues[name].<span class="pl-smi">m_value</span>);</td>
      </tr>
      <tr>
        <td id="L5781" class="blob-num js-line-number" data-line-number="5781"></td>
        <td id="LC5781" class="blob-code blob-code-inner js-file-line">                cluon::FromJSONVisitor <span class="pl-smi">nestedJSONDecoder</span>(v);</td>
      </tr>
      <tr>
        <td id="L5782" class="blob-num js-line-number" data-line-number="5782"></td>
        <td id="LC5782" class="blob-code blob-code-inner js-file-line">                value.<span class="pl-c1">accept</span>(nestedJSONDecoder);</td>
      </tr>
      <tr>
        <td id="L5783" class="blob-num js-line-number" data-line-number="5783"></td>
        <td id="LC5783" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L5784" class="blob-num js-line-number" data-line-number="5784"></td>
        <td id="LC5784" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L5785" class="blob-num js-line-number" data-line-number="5785"></td>
        <td id="LC5785" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5786" class="blob-num js-line-number" data-line-number="5786"></td>
        <td id="LC5786" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L5787" class="blob-num js-line-number" data-line-number="5787"></td>
        <td id="LC5787" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5788" class="blob-num js-line-number" data-line-number="5788"></td>
        <td id="LC5788" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L5789" class="blob-num js-line-number" data-line-number="5789"></td>
        <td id="LC5789" class="blob-code blob-code-inner js-file-line">    std::string <span class="pl-en">decodeBase64</span>(<span class="pl-k">const</span> std::string &amp;input) <span class="pl-k">const</span> <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5790" class="blob-num js-line-number" data-line-number="5790"></td>
        <td id="LC5790" class="blob-code blob-code-inner js-file-line">    std::map&lt;std::string, FromJSONVisitor::JSONKeyValue&gt; <span class="pl-en">readKeyValues</span>(std::string &amp;input) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5791" class="blob-num js-line-number" data-line-number="5791"></td>
        <td id="LC5791" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5792" class="blob-num js-line-number" data-line-number="5792"></td>
        <td id="LC5792" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L5793" class="blob-num js-line-number" data-line-number="5793"></td>
        <td id="LC5793" class="blob-code blob-code-inner js-file-line">    std::map&lt;std::string, FromJSONVisitor::JSONKeyValue&gt; m_data{};</td>
      </tr>
      <tr>
        <td id="L5794" class="blob-num js-line-number" data-line-number="5794"></td>
        <td id="LC5794" class="blob-code blob-code-inner js-file-line">    std::map&lt;std::string, FromJSONVisitor::JSONKeyValue&gt; &amp;m_keyValues;</td>
      </tr>
      <tr>
        <td id="L5795" class="blob-num js-line-number" data-line-number="5795"></td>
        <td id="LC5795" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L5796" class="blob-num js-line-number" data-line-number="5796"></td>
        <td id="LC5796" class="blob-code blob-code-inner js-file-line">} <span class="pl-c"><span class="pl-c">//</span> namespace cluon</span></td>
      </tr>
      <tr>
        <td id="L5797" class="blob-num js-line-number" data-line-number="5797"></td>
        <td id="LC5797" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5798" class="blob-num js-line-number" data-line-number="5798"></td>
        <td id="LC5798" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L5799" class="blob-num js-line-number" data-line-number="5799"></td>
        <td id="LC5799" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L5800" class="blob-num js-line-number" data-line-number="5800"></td>
        <td id="LC5800" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Copyright (C) 2017-2018  Christian Berger</span></td>
      </tr>
      <tr>
        <td id="L5801" class="blob-num js-line-number" data-line-number="5801"></td>
        <td id="LC5801" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L5802" class="blob-num js-line-number" data-line-number="5802"></td>
        <td id="LC5802" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is free software: you can redistribute it and/or modify</span></td>
      </tr>
      <tr>
        <td id="L5803" class="blob-num js-line-number" data-line-number="5803"></td>
        <td id="LC5803" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * it under the terms of the GNU General Public License as published by</span></td>
      </tr>
      <tr>
        <td id="L5804" class="blob-num js-line-number" data-line-number="5804"></td>
        <td id="LC5804" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * the Free Software Foundation, either version 3 of the License, or</span></td>
      </tr>
      <tr>
        <td id="L5805" class="blob-num js-line-number" data-line-number="5805"></td>
        <td id="LC5805" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * (at your option) any later version.</span></td>
      </tr>
      <tr>
        <td id="L5806" class="blob-num js-line-number" data-line-number="5806"></td>
        <td id="LC5806" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L5807" class="blob-num js-line-number" data-line-number="5807"></td>
        <td id="LC5807" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is distributed in the hope that it will be useful,</span></td>
      </tr>
      <tr>
        <td id="L5808" class="blob-num js-line-number" data-line-number="5808"></td>
        <td id="LC5808" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></td>
      </tr>
      <tr>
        <td id="L5809" class="blob-num js-line-number" data-line-number="5809"></td>
        <td id="LC5809" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></td>
      </tr>
      <tr>
        <td id="L5810" class="blob-num js-line-number" data-line-number="5810"></td>
        <td id="LC5810" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * GNU General Public License for more details.</span></td>
      </tr>
      <tr>
        <td id="L5811" class="blob-num js-line-number" data-line-number="5811"></td>
        <td id="LC5811" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L5812" class="blob-num js-line-number" data-line-number="5812"></td>
        <td id="LC5812" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * You should have received a copy of the GNU General Public License</span></td>
      </tr>
      <tr>
        <td id="L5813" class="blob-num js-line-number" data-line-number="5813"></td>
        <td id="LC5813" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></td>
      </tr>
      <tr>
        <td id="L5814" class="blob-num js-line-number" data-line-number="5814"></td>
        <td id="LC5814" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L5815" class="blob-num js-line-number" data-line-number="5815"></td>
        <td id="LC5815" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5816" class="blob-num js-line-number" data-line-number="5816"></td>
        <td id="LC5816" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifndef</span> TOJSONVISITOR_HPP</td>
      </tr>
      <tr>
        <td id="L5817" class="blob-num js-line-number" data-line-number="5817"></td>
        <td id="LC5817" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">define</span> <span class="pl-en">TOJSONVISITOR_HPP</span></td>
      </tr>
      <tr>
        <td id="L5818" class="blob-num js-line-number" data-line-number="5818"></td>
        <td id="LC5818" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5819" class="blob-num js-line-number" data-line-number="5819"></td>
        <td id="LC5819" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/cluon.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L5820" class="blob-num js-line-number" data-line-number="5820"></td>
        <td id="LC5820" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5821" class="blob-num js-line-number" data-line-number="5821"></td>
        <td id="LC5821" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>cstdint<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L5822" class="blob-num js-line-number" data-line-number="5822"></td>
        <td id="LC5822" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>map<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L5823" class="blob-num js-line-number" data-line-number="5823"></td>
        <td id="LC5823" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>sstream<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L5824" class="blob-num js-line-number" data-line-number="5824"></td>
        <td id="LC5824" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>string<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L5825" class="blob-num js-line-number" data-line-number="5825"></td>
        <td id="LC5825" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5826" class="blob-num js-line-number" data-line-number="5826"></td>
        <td id="LC5826" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">cluon</span> {</td>
      </tr>
      <tr>
        <td id="L5827" class="blob-num js-line-number" data-line-number="5827"></td>
        <td id="LC5827" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L5828" class="blob-num js-line-number" data-line-number="5828"></td>
        <td id="LC5828" class="blob-code blob-code-inner js-file-line"><span class="pl-c">This class provides a visitor to transform a message into JSON:</span></td>
      </tr>
      <tr>
        <td id="L5829" class="blob-num js-line-number" data-line-number="5829"></td>
        <td id="LC5829" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L5830" class="blob-num js-line-number" data-line-number="5830"></td>
        <td id="LC5830" class="blob-code blob-code-inner js-file-line"><span class="pl-c">\code{.cpp}</span></td>
      </tr>
      <tr>
        <td id="L5831" class="blob-num js-line-number" data-line-number="5831"></td>
        <td id="LC5831" class="blob-code blob-code-inner js-file-line"><span class="pl-c">MyMessage msg;</span></td>
      </tr>
      <tr>
        <td id="L5832" class="blob-num js-line-number" data-line-number="5832"></td>
        <td id="LC5832" class="blob-code blob-code-inner js-file-line"><span class="pl-c">// Set some values in msg.</span></td>
      </tr>
      <tr>
        <td id="L5833" class="blob-num js-line-number" data-line-number="5833"></td>
        <td id="LC5833" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L5834" class="blob-num js-line-number" data-line-number="5834"></td>
        <td id="LC5834" class="blob-code blob-code-inner js-file-line"><span class="pl-c">cluon::ToJSONVisitor j;</span></td>
      </tr>
      <tr>
        <td id="L5835" class="blob-num js-line-number" data-line-number="5835"></td>
        <td id="LC5835" class="blob-code blob-code-inner js-file-line"><span class="pl-c">msg.accept(j);</span></td>
      </tr>
      <tr>
        <td id="L5836" class="blob-num js-line-number" data-line-number="5836"></td>
        <td id="LC5836" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L5837" class="blob-num js-line-number" data-line-number="5837"></td>
        <td id="LC5837" class="blob-code blob-code-inner js-file-line"><span class="pl-c">std::cout &lt;&lt; j.json() &lt;&lt; std::endl;</span></td>
      </tr>
      <tr>
        <td id="L5838" class="blob-num js-line-number" data-line-number="5838"></td>
        <td id="LC5838" class="blob-code blob-code-inner js-file-line"><span class="pl-c">\endcode</span></td>
      </tr>
      <tr>
        <td id="L5839" class="blob-num js-line-number" data-line-number="5839"></td>
        <td id="LC5839" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L5840" class="blob-num js-line-number" data-line-number="5840"></td>
        <td id="LC5840" class="blob-code blob-code-inner js-file-line"><span class="pl-k">class</span> <span class="pl-en">LIBCLUON_API</span> ToJSONVisitor {</td>
      </tr>
      <tr>
        <td id="L5841" class="blob-num js-line-number" data-line-number="5841"></td>
        <td id="LC5841" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L5842" class="blob-num js-line-number" data-line-number="5842"></td>
        <td id="LC5842" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">ToJSONVisitor</span>(<span class="pl-k">const</span> ToJSONVisitor &amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L5843" class="blob-num js-line-number" data-line-number="5843"></td>
        <td id="LC5843" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">ToJSONVisitor</span>(ToJSONVisitor &amp;&amp;)      = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L5844" class="blob-num js-line-number" data-line-number="5844"></td>
        <td id="LC5844" class="blob-code blob-code-inner js-file-line">    ToJSONVisitor &amp;<span class="pl-k">operator</span>=(<span class="pl-k">const</span> ToJSONVisitor &amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L5845" class="blob-num js-line-number" data-line-number="5845"></td>
        <td id="LC5845" class="blob-code blob-code-inner js-file-line">    ToJSONVisitor &amp;<span class="pl-k">operator</span>=(ToJSONVisitor &amp;&amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L5846" class="blob-num js-line-number" data-line-number="5846"></td>
        <td id="LC5846" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5847" class="blob-num js-line-number" data-line-number="5847"></td>
        <td id="LC5847" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L5848" class="blob-num js-line-number" data-line-number="5848"></td>
        <td id="LC5848" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L5849" class="blob-num js-line-number" data-line-number="5849"></td>
        <td id="LC5849" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * Constructor.</span></td>
      </tr>
      <tr>
        <td id="L5850" class="blob-num js-line-number" data-line-number="5850"></td>
        <td id="LC5850" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     *</span></td>
      </tr>
      <tr>
        <td id="L5851" class="blob-num js-line-number" data-line-number="5851"></td>
        <td id="LC5851" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param withOuterCurlyBraces Include the outer curly braces.</span></td>
      </tr>
      <tr>
        <td id="L5852" class="blob-num js-line-number" data-line-number="5852"></td>
        <td id="LC5852" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param mask Map describing which fields to render. If empty, all</span></td>
      </tr>
      <tr>
        <td id="L5853" class="blob-num js-line-number" data-line-number="5853"></td>
        <td id="LC5853" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     *             fields will be emitted; individual field identifiers</span></td>
      </tr>
      <tr>
        <td id="L5854" class="blob-num js-line-number" data-line-number="5854"></td>
        <td id="LC5854" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     *             can be masked setting them to false.</span></td>
      </tr>
      <tr>
        <td id="L5855" class="blob-num js-line-number" data-line-number="5855"></td>
        <td id="LC5855" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L5856" class="blob-num js-line-number" data-line-number="5856"></td>
        <td id="LC5856" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">ToJSONVisitor</span>(<span class="pl-k">bool</span> withOuterCurlyBraces = <span class="pl-c1">true</span>, <span class="pl-k">const</span> std::map&lt;<span class="pl-c1">uint32_t</span>, <span class="pl-k">bool</span>&gt; &amp;mask = {}) noexcept;</td>
      </tr>
      <tr>
        <td id="L5857" class="blob-num js-line-number" data-line-number="5857"></td>
        <td id="LC5857" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5858" class="blob-num js-line-number" data-line-number="5858"></td>
        <td id="LC5858" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L5859" class="blob-num js-line-number" data-line-number="5859"></td>
        <td id="LC5859" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @return JSON-encoded data.</span></td>
      </tr>
      <tr>
        <td id="L5860" class="blob-num js-line-number" data-line-number="5860"></td>
        <td id="LC5860" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L5861" class="blob-num js-line-number" data-line-number="5861"></td>
        <td id="LC5861" class="blob-code blob-code-inner js-file-line">    std::string <span class="pl-en">json</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5862" class="blob-num js-line-number" data-line-number="5862"></td>
        <td id="LC5862" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5863" class="blob-num js-line-number" data-line-number="5863"></td>
        <td id="LC5863" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L5864" class="blob-num js-line-number" data-line-number="5864"></td>
        <td id="LC5864" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> The following methods are provided to allow an instance of this class to</span></td>
      </tr>
      <tr>
        <td id="L5865" class="blob-num js-line-number" data-line-number="5865"></td>
        <td id="LC5865" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> be used as visitor for an instance with the method signature void accept&lt;T&gt;(T&amp;);</span></td>
      </tr>
      <tr>
        <td id="L5866" class="blob-num js-line-number" data-line-number="5866"></td>
        <td id="LC5866" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5867" class="blob-num js-line-number" data-line-number="5867"></td>
        <td id="LC5867" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">preVisit</span>(<span class="pl-c1">int32_t</span> id, <span class="pl-k">const</span> std::string &amp;shortName, <span class="pl-k">const</span> std::string &amp;longName) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5868" class="blob-num js-line-number" data-line-number="5868"></td>
        <td id="LC5868" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">postVisit</span>() <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5869" class="blob-num js-line-number" data-line-number="5869"></td>
        <td id="LC5869" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5870" class="blob-num js-line-number" data-line-number="5870"></td>
        <td id="LC5870" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">bool</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5871" class="blob-num js-line-number" data-line-number="5871"></td>
        <td id="LC5871" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">char</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5872" class="blob-num js-line-number" data-line-number="5872"></td>
        <td id="LC5872" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int8_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5873" class="blob-num js-line-number" data-line-number="5873"></td>
        <td id="LC5873" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint8_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5874" class="blob-num js-line-number" data-line-number="5874"></td>
        <td id="LC5874" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int16_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5875" class="blob-num js-line-number" data-line-number="5875"></td>
        <td id="LC5875" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint16_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5876" class="blob-num js-line-number" data-line-number="5876"></td>
        <td id="LC5876" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int32_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5877" class="blob-num js-line-number" data-line-number="5877"></td>
        <td id="LC5877" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint32_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5878" class="blob-num js-line-number" data-line-number="5878"></td>
        <td id="LC5878" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int64_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5879" class="blob-num js-line-number" data-line-number="5879"></td>
        <td id="LC5879" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint64_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5880" class="blob-num js-line-number" data-line-number="5880"></td>
        <td id="LC5880" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">float</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5881" class="blob-num js-line-number" data-line-number="5881"></td>
        <td id="LC5881" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">double</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5882" class="blob-num js-line-number" data-line-number="5882"></td>
        <td id="LC5882" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, std::string &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5883" class="blob-num js-line-number" data-line-number="5883"></td>
        <td id="LC5883" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5884" class="blob-num js-line-number" data-line-number="5884"></td>
        <td id="LC5884" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> T&gt;</td>
      </tr>
      <tr>
        <td id="L5885" class="blob-num js-line-number" data-line-number="5885"></td>
        <td id="LC5885" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> &amp;id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, T &amp;value) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L5886" class="blob-num js-line-number" data-line-number="5886"></td>
        <td id="LC5886" class="blob-code blob-code-inner js-file-line">        (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L5887" class="blob-num js-line-number" data-line-number="5887"></td>
        <td id="LC5887" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> ((<span class="pl-c1">0</span> == m_mask.<span class="pl-c1">count</span>(id)) || m_mask[id]) {</td>
      </tr>
      <tr>
        <td id="L5888" class="blob-num js-line-number" data-line-number="5888"></td>
        <td id="LC5888" class="blob-code blob-code-inner js-file-line">            ToJSONVisitor jsonVisitor;</td>
      </tr>
      <tr>
        <td id="L5889" class="blob-num js-line-number" data-line-number="5889"></td>
        <td id="LC5889" class="blob-code blob-code-inner js-file-line">            value.<span class="pl-c1">accept</span>(jsonVisitor);</td>
      </tr>
      <tr>
        <td id="L5890" class="blob-num js-line-number" data-line-number="5890"></td>
        <td id="LC5890" class="blob-code blob-code-inner js-file-line">            m_buffer &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\&quot;</span><span class="pl-pds">&#39;</span></span> &lt;&lt; name &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\&quot;</span><span class="pl-pds">&#39;</span></span> &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span>:<span class="pl-pds">&#39;</span></span> &lt;&lt; jsonVisitor.<span class="pl-c1">json</span>() &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span>,<span class="pl-pds">&#39;</span></span> &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\n</span><span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L5891" class="blob-num js-line-number" data-line-number="5891"></td>
        <td id="LC5891" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L5892" class="blob-num js-line-number" data-line-number="5892"></td>
        <td id="LC5892" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L5893" class="blob-num js-line-number" data-line-number="5893"></td>
        <td id="LC5893" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5894" class="blob-num js-line-number" data-line-number="5894"></td>
        <td id="LC5894" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L5895" class="blob-num js-line-number" data-line-number="5895"></td>
        <td id="LC5895" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * This method returns the base64-encoded representation for the given input.</span></td>
      </tr>
      <tr>
        <td id="L5896" class="blob-num js-line-number" data-line-number="5896"></td>
        <td id="LC5896" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     *</span></td>
      </tr>
      <tr>
        <td id="L5897" class="blob-num js-line-number" data-line-number="5897"></td>
        <td id="LC5897" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param input to encode as base64</span></td>
      </tr>
      <tr>
        <td id="L5898" class="blob-num js-line-number" data-line-number="5898"></td>
        <td id="LC5898" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @return base64 encoded input.</span></td>
      </tr>
      <tr>
        <td id="L5899" class="blob-num js-line-number" data-line-number="5899"></td>
        <td id="LC5899" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L5900" class="blob-num js-line-number" data-line-number="5900"></td>
        <td id="LC5900" class="blob-code blob-code-inner js-file-line">    std::string <span class="pl-en">encodeBase64</span>(<span class="pl-k">const</span> std::string &amp;input) <span class="pl-k">const</span> <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5901" class="blob-num js-line-number" data-line-number="5901"></td>
        <td id="LC5901" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5902" class="blob-num js-line-number" data-line-number="5902"></td>
        <td id="LC5902" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L5903" class="blob-num js-line-number" data-line-number="5903"></td>
        <td id="LC5903" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">bool</span> m_withOuterCurlyBraces{<span class="pl-c1">true</span>};</td>
      </tr>
      <tr>
        <td id="L5904" class="blob-num js-line-number" data-line-number="5904"></td>
        <td id="LC5904" class="blob-code blob-code-inner js-file-line">    std::map&lt;<span class="pl-c1">uint32_t</span>, <span class="pl-k">bool</span>&gt; m_mask;</td>
      </tr>
      <tr>
        <td id="L5905" class="blob-num js-line-number" data-line-number="5905"></td>
        <td id="LC5905" class="blob-code blob-code-inner js-file-line">    std::stringstream m_buffer{};</td>
      </tr>
      <tr>
        <td id="L5906" class="blob-num js-line-number" data-line-number="5906"></td>
        <td id="LC5906" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L5907" class="blob-num js-line-number" data-line-number="5907"></td>
        <td id="LC5907" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5908" class="blob-num js-line-number" data-line-number="5908"></td>
        <td id="LC5908" class="blob-code blob-code-inner js-file-line">} <span class="pl-c"><span class="pl-c">//</span> namespace cluon</span></td>
      </tr>
      <tr>
        <td id="L5909" class="blob-num js-line-number" data-line-number="5909"></td>
        <td id="LC5909" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L5910" class="blob-num js-line-number" data-line-number="5910"></td>
        <td id="LC5910" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L5911" class="blob-num js-line-number" data-line-number="5911"></td>
        <td id="LC5911" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Copyright (C) 2017-2018  Christian Berger</span></td>
      </tr>
      <tr>
        <td id="L5912" class="blob-num js-line-number" data-line-number="5912"></td>
        <td id="LC5912" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L5913" class="blob-num js-line-number" data-line-number="5913"></td>
        <td id="LC5913" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is free software: you can redistribute it and/or modify</span></td>
      </tr>
      <tr>
        <td id="L5914" class="blob-num js-line-number" data-line-number="5914"></td>
        <td id="LC5914" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * it under the terms of the GNU General Public License as published by</span></td>
      </tr>
      <tr>
        <td id="L5915" class="blob-num js-line-number" data-line-number="5915"></td>
        <td id="LC5915" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * the Free Software Foundation, either version 3 of the License, or</span></td>
      </tr>
      <tr>
        <td id="L5916" class="blob-num js-line-number" data-line-number="5916"></td>
        <td id="LC5916" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * (at your option) any later version.</span></td>
      </tr>
      <tr>
        <td id="L5917" class="blob-num js-line-number" data-line-number="5917"></td>
        <td id="LC5917" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L5918" class="blob-num js-line-number" data-line-number="5918"></td>
        <td id="LC5918" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is distributed in the hope that it will be useful,</span></td>
      </tr>
      <tr>
        <td id="L5919" class="blob-num js-line-number" data-line-number="5919"></td>
        <td id="LC5919" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></td>
      </tr>
      <tr>
        <td id="L5920" class="blob-num js-line-number" data-line-number="5920"></td>
        <td id="LC5920" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></td>
      </tr>
      <tr>
        <td id="L5921" class="blob-num js-line-number" data-line-number="5921"></td>
        <td id="LC5921" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * GNU General Public License for more details.</span></td>
      </tr>
      <tr>
        <td id="L5922" class="blob-num js-line-number" data-line-number="5922"></td>
        <td id="LC5922" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L5923" class="blob-num js-line-number" data-line-number="5923"></td>
        <td id="LC5923" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * You should have received a copy of the GNU General Public License</span></td>
      </tr>
      <tr>
        <td id="L5924" class="blob-num js-line-number" data-line-number="5924"></td>
        <td id="LC5924" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></td>
      </tr>
      <tr>
        <td id="L5925" class="blob-num js-line-number" data-line-number="5925"></td>
        <td id="LC5925" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L5926" class="blob-num js-line-number" data-line-number="5926"></td>
        <td id="LC5926" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5927" class="blob-num js-line-number" data-line-number="5927"></td>
        <td id="LC5927" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifndef</span> TOCSVVISITOR_HPP</td>
      </tr>
      <tr>
        <td id="L5928" class="blob-num js-line-number" data-line-number="5928"></td>
        <td id="LC5928" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">define</span> <span class="pl-en">TOCSVVISITOR_HPP</span></td>
      </tr>
      <tr>
        <td id="L5929" class="blob-num js-line-number" data-line-number="5929"></td>
        <td id="LC5929" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5930" class="blob-num js-line-number" data-line-number="5930"></td>
        <td id="LC5930" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/cluon.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L5931" class="blob-num js-line-number" data-line-number="5931"></td>
        <td id="LC5931" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5932" class="blob-num js-line-number" data-line-number="5932"></td>
        <td id="LC5932" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>cstdint<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L5933" class="blob-num js-line-number" data-line-number="5933"></td>
        <td id="LC5933" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>sstream<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L5934" class="blob-num js-line-number" data-line-number="5934"></td>
        <td id="LC5934" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>string<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L5935" class="blob-num js-line-number" data-line-number="5935"></td>
        <td id="LC5935" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5936" class="blob-num js-line-number" data-line-number="5936"></td>
        <td id="LC5936" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">cluon</span> {</td>
      </tr>
      <tr>
        <td id="L5937" class="blob-num js-line-number" data-line-number="5937"></td>
        <td id="LC5937" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L5938" class="blob-num js-line-number" data-line-number="5938"></td>
        <td id="LC5938" class="blob-code blob-code-inner js-file-line"><span class="pl-c">This class provides a visitor to transform a message into CSV with</span></td>
      </tr>
      <tr>
        <td id="L5939" class="blob-num js-line-number" data-line-number="5939"></td>
        <td id="LC5939" class="blob-code blob-code-inner js-file-line"><span class="pl-c">user-specified delimiters and optional column headers:</span></td>
      </tr>
      <tr>
        <td id="L5940" class="blob-num js-line-number" data-line-number="5940"></td>
        <td id="LC5940" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L5941" class="blob-num js-line-number" data-line-number="5941"></td>
        <td id="LC5941" class="blob-code blob-code-inner js-file-line"><span class="pl-c">\code{.cpp}</span></td>
      </tr>
      <tr>
        <td id="L5942" class="blob-num js-line-number" data-line-number="5942"></td>
        <td id="LC5942" class="blob-code blob-code-inner js-file-line"><span class="pl-c">MyMessage msg;</span></td>
      </tr>
      <tr>
        <td id="L5943" class="blob-num js-line-number" data-line-number="5943"></td>
        <td id="LC5943" class="blob-code blob-code-inner js-file-line"><span class="pl-c">// Set some values in msg.</span></td>
      </tr>
      <tr>
        <td id="L5944" class="blob-num js-line-number" data-line-number="5944"></td>
        <td id="LC5944" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L5945" class="blob-num js-line-number" data-line-number="5945"></td>
        <td id="LC5945" class="blob-code blob-code-inner js-file-line"><span class="pl-c">cluon::ToCSVVisitor csv{&#39;,&#39;, true};</span></td>
      </tr>
      <tr>
        <td id="L5946" class="blob-num js-line-number" data-line-number="5946"></td>
        <td id="LC5946" class="blob-code blob-code-inner js-file-line"><span class="pl-c">msg.accept(csv);</span></td>
      </tr>
      <tr>
        <td id="L5947" class="blob-num js-line-number" data-line-number="5947"></td>
        <td id="LC5947" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L5948" class="blob-num js-line-number" data-line-number="5948"></td>
        <td id="LC5948" class="blob-code blob-code-inner js-file-line"><span class="pl-c">std::cout &lt;&lt; csv.csv() &lt;&lt; std::endl;</span></td>
      </tr>
      <tr>
        <td id="L5949" class="blob-num js-line-number" data-line-number="5949"></td>
        <td id="LC5949" class="blob-code blob-code-inner js-file-line"><span class="pl-c">\endcode</span></td>
      </tr>
      <tr>
        <td id="L5950" class="blob-num js-line-number" data-line-number="5950"></td>
        <td id="LC5950" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L5951" class="blob-num js-line-number" data-line-number="5951"></td>
        <td id="LC5951" class="blob-code blob-code-inner js-file-line"><span class="pl-c">Subsequent use of this visitor will append the data (please keep in mind to not</span></td>
      </tr>
      <tr>
        <td id="L5952" class="blob-num js-line-number" data-line-number="5952"></td>
        <td id="LC5952" class="blob-code blob-code-inner js-file-line"><span class="pl-c">change the visited messages in between as the generated CSV data will be messed</span></td>
      </tr>
      <tr>
        <td id="L5953" class="blob-num js-line-number" data-line-number="5953"></td>
        <td id="LC5953" class="blob-code blob-code-inner js-file-line"><span class="pl-c">up otherwise).</span></td>
      </tr>
      <tr>
        <td id="L5954" class="blob-num js-line-number" data-line-number="5954"></td>
        <td id="LC5954" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L5955" class="blob-num js-line-number" data-line-number="5955"></td>
        <td id="LC5955" class="blob-code blob-code-inner js-file-line"><span class="pl-k">class</span> <span class="pl-en">LIBCLUON_API</span> ToCSVVisitor {</td>
      </tr>
      <tr>
        <td id="L5956" class="blob-num js-line-number" data-line-number="5956"></td>
        <td id="LC5956" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L5957" class="blob-num js-line-number" data-line-number="5957"></td>
        <td id="LC5957" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">ToCSVVisitor</span>(<span class="pl-k">const</span> ToCSVVisitor &amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L5958" class="blob-num js-line-number" data-line-number="5958"></td>
        <td id="LC5958" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">ToCSVVisitor</span>(ToCSVVisitor &amp;&amp;)      = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L5959" class="blob-num js-line-number" data-line-number="5959"></td>
        <td id="LC5959" class="blob-code blob-code-inner js-file-line">    ToCSVVisitor &amp;<span class="pl-k">operator</span>=(<span class="pl-k">const</span> ToCSVVisitor &amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L5960" class="blob-num js-line-number" data-line-number="5960"></td>
        <td id="LC5960" class="blob-code blob-code-inner js-file-line">    ToCSVVisitor &amp;<span class="pl-k">operator</span>=(ToCSVVisitor &amp;&amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L5961" class="blob-num js-line-number" data-line-number="5961"></td>
        <td id="LC5961" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5962" class="blob-num js-line-number" data-line-number="5962"></td>
        <td id="LC5962" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L5963" class="blob-num js-line-number" data-line-number="5963"></td>
        <td id="LC5963" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L5964" class="blob-num js-line-number" data-line-number="5964"></td>
        <td id="LC5964" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * Constructor.</span></td>
      </tr>
      <tr>
        <td id="L5965" class="blob-num js-line-number" data-line-number="5965"></td>
        <td id="LC5965" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     *</span></td>
      </tr>
      <tr>
        <td id="L5966" class="blob-num js-line-number" data-line-number="5966"></td>
        <td id="LC5966" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param delimiter Delimiter character.</span></td>
      </tr>
      <tr>
        <td id="L5967" class="blob-num js-line-number" data-line-number="5967"></td>
        <td id="LC5967" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param withHeader If true, the first line in the output contains the</span></td>
      </tr>
      <tr>
        <td id="L5968" class="blob-num js-line-number" data-line-number="5968"></td>
        <td id="LC5968" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     *        column headers.</span></td>
      </tr>
      <tr>
        <td id="L5969" class="blob-num js-line-number" data-line-number="5969"></td>
        <td id="LC5969" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L5970" class="blob-num js-line-number" data-line-number="5970"></td>
        <td id="LC5970" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">ToCSVVisitor</span>(<span class="pl-k">char</span> delimiter = <span class="pl-s"><span class="pl-pds">&#39;</span>;<span class="pl-pds">&#39;</span></span>, <span class="pl-k">bool</span> withHeader = <span class="pl-c1">true</span>) noexcept;</td>
      </tr>
      <tr>
        <td id="L5971" class="blob-num js-line-number" data-line-number="5971"></td>
        <td id="LC5971" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5972" class="blob-num js-line-number" data-line-number="5972"></td>
        <td id="LC5972" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">protected:</span></td>
      </tr>
      <tr>
        <td id="L5973" class="blob-num js-line-number" data-line-number="5973"></td>
        <td id="LC5973" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L5974" class="blob-num js-line-number" data-line-number="5974"></td>
        <td id="LC5974" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * Constructor for internal use.</span></td>
      </tr>
      <tr>
        <td id="L5975" class="blob-num js-line-number" data-line-number="5975"></td>
        <td id="LC5975" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     *</span></td>
      </tr>
      <tr>
        <td id="L5976" class="blob-num js-line-number" data-line-number="5976"></td>
        <td id="LC5976" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param prefix Prefix to prepend per column header.</span></td>
      </tr>
      <tr>
        <td id="L5977" class="blob-num js-line-number" data-line-number="5977"></td>
        <td id="LC5977" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param delimiter Delimiter character.</span></td>
      </tr>
      <tr>
        <td id="L5978" class="blob-num js-line-number" data-line-number="5978"></td>
        <td id="LC5978" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param withHeader If true, the first line in the output contains the</span></td>
      </tr>
      <tr>
        <td id="L5979" class="blob-num js-line-number" data-line-number="5979"></td>
        <td id="LC5979" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     *        column headers.</span></td>
      </tr>
      <tr>
        <td id="L5980" class="blob-num js-line-number" data-line-number="5980"></td>
        <td id="LC5980" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param isNested If true, the returned CSV values do not have a trailing new line.</span></td>
      </tr>
      <tr>
        <td id="L5981" class="blob-num js-line-number" data-line-number="5981"></td>
        <td id="LC5981" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L5982" class="blob-num js-line-number" data-line-number="5982"></td>
        <td id="LC5982" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">ToCSVVisitor</span>(<span class="pl-k">const</span> std::string &amp;prefix, <span class="pl-k">char</span> delimiter, <span class="pl-k">bool</span> withHeader, <span class="pl-k">bool</span> isNested) noexcept;</td>
      </tr>
      <tr>
        <td id="L5983" class="blob-num js-line-number" data-line-number="5983"></td>
        <td id="LC5983" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5984" class="blob-num js-line-number" data-line-number="5984"></td>
        <td id="LC5984" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L5985" class="blob-num js-line-number" data-line-number="5985"></td>
        <td id="LC5985" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L5986" class="blob-num js-line-number" data-line-number="5986"></td>
        <td id="LC5986" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @return CSV-encoded data.</span></td>
      </tr>
      <tr>
        <td id="L5987" class="blob-num js-line-number" data-line-number="5987"></td>
        <td id="LC5987" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L5988" class="blob-num js-line-number" data-line-number="5988"></td>
        <td id="LC5988" class="blob-code blob-code-inner js-file-line">    std::string <span class="pl-en">csv</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5989" class="blob-num js-line-number" data-line-number="5989"></td>
        <td id="LC5989" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5990" class="blob-num js-line-number" data-line-number="5990"></td>
        <td id="LC5990" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L5991" class="blob-num js-line-number" data-line-number="5991"></td>
        <td id="LC5991" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * This method clears the containing CSV data.</span></td>
      </tr>
      <tr>
        <td id="L5992" class="blob-num js-line-number" data-line-number="5992"></td>
        <td id="LC5992" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L5993" class="blob-num js-line-number" data-line-number="5993"></td>
        <td id="LC5993" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">clear</span>() <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L5994" class="blob-num js-line-number" data-line-number="5994"></td>
        <td id="LC5994" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5995" class="blob-num js-line-number" data-line-number="5995"></td>
        <td id="LC5995" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L5996" class="blob-num js-line-number" data-line-number="5996"></td>
        <td id="LC5996" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> The following methods are provided to allow an instance of this class to</span></td>
      </tr>
      <tr>
        <td id="L5997" class="blob-num js-line-number" data-line-number="5997"></td>
        <td id="LC5997" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> be used as visitor for an instance with the method signature void accept&lt;T&gt;(T&amp;);</span></td>
      </tr>
      <tr>
        <td id="L5998" class="blob-num js-line-number" data-line-number="5998"></td>
        <td id="LC5998" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L5999" class="blob-num js-line-number" data-line-number="5999"></td>
        <td id="LC5999" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">preVisit</span>(<span class="pl-c1">int32_t</span> id, <span class="pl-k">const</span> std::string &amp;shortName, <span class="pl-k">const</span> std::string &amp;longName) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6000" class="blob-num js-line-number" data-line-number="6000"></td>
        <td id="LC6000" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">postVisit</span>() <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6001" class="blob-num js-line-number" data-line-number="6001"></td>
        <td id="LC6001" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6002" class="blob-num js-line-number" data-line-number="6002"></td>
        <td id="LC6002" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">bool</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6003" class="blob-num js-line-number" data-line-number="6003"></td>
        <td id="LC6003" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">char</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6004" class="blob-num js-line-number" data-line-number="6004"></td>
        <td id="LC6004" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int8_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6005" class="blob-num js-line-number" data-line-number="6005"></td>
        <td id="LC6005" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint8_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6006" class="blob-num js-line-number" data-line-number="6006"></td>
        <td id="LC6006" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int16_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6007" class="blob-num js-line-number" data-line-number="6007"></td>
        <td id="LC6007" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint16_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6008" class="blob-num js-line-number" data-line-number="6008"></td>
        <td id="LC6008" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int32_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6009" class="blob-num js-line-number" data-line-number="6009"></td>
        <td id="LC6009" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint32_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6010" class="blob-num js-line-number" data-line-number="6010"></td>
        <td id="LC6010" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int64_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6011" class="blob-num js-line-number" data-line-number="6011"></td>
        <td id="LC6011" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint64_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6012" class="blob-num js-line-number" data-line-number="6012"></td>
        <td id="LC6012" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">float</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6013" class="blob-num js-line-number" data-line-number="6013"></td>
        <td id="LC6013" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">double</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6014" class="blob-num js-line-number" data-line-number="6014"></td>
        <td id="LC6014" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, std::string &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6015" class="blob-num js-line-number" data-line-number="6015"></td>
        <td id="LC6015" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6016" class="blob-num js-line-number" data-line-number="6016"></td>
        <td id="LC6016" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> T&gt;</td>
      </tr>
      <tr>
        <td id="L6017" class="blob-num js-line-number" data-line-number="6017"></td>
        <td id="LC6017" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> &amp;id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, T &amp;value) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L6018" class="blob-num js-line-number" data-line-number="6018"></td>
        <td id="LC6018" class="blob-code blob-code-inner js-file-line">        (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L6019" class="blob-num js-line-number" data-line-number="6019"></td>
        <td id="LC6019" class="blob-code blob-code-inner js-file-line">        (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L6020" class="blob-num js-line-number" data-line-number="6020"></td>
        <td id="LC6020" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">constexpr</span> <span class="pl-k">bool</span> IS_NESTED{<span class="pl-c1">true</span>};</td>
      </tr>
      <tr>
        <td id="L6021" class="blob-num js-line-number" data-line-number="6021"></td>
        <td id="LC6021" class="blob-code blob-code-inner js-file-line">        ToCSVVisitor <span class="pl-smi">csvVisitor</span>(name, m_delimiter, m_withHeader, IS_NESTED);</td>
      </tr>
      <tr>
        <td id="L6022" class="blob-num js-line-number" data-line-number="6022"></td>
        <td id="LC6022" class="blob-code blob-code-inner js-file-line">        value.<span class="pl-c1">accept</span>(csvVisitor);</td>
      </tr>
      <tr>
        <td id="L6023" class="blob-num js-line-number" data-line-number="6023"></td>
        <td id="LC6023" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6024" class="blob-num js-line-number" data-line-number="6024"></td>
        <td id="LC6024" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (m_fillHeader) {</td>
      </tr>
      <tr>
        <td id="L6025" class="blob-num js-line-number" data-line-number="6025"></td>
        <td id="LC6025" class="blob-code blob-code-inner js-file-line">            m_bufferHeader &lt;&lt; csvVisitor.<span class="pl-smi">m_bufferHeader</span>.<span class="pl-c1">str</span>();</td>
      </tr>
      <tr>
        <td id="L6026" class="blob-num js-line-number" data-line-number="6026"></td>
        <td id="LC6026" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L6027" class="blob-num js-line-number" data-line-number="6027"></td>
        <td id="LC6027" class="blob-code blob-code-inner js-file-line">        m_bufferValues &lt;&lt; csvVisitor.<span class="pl-smi">m_bufferValues</span>.<span class="pl-c1">str</span>();</td>
      </tr>
      <tr>
        <td id="L6028" class="blob-num js-line-number" data-line-number="6028"></td>
        <td id="LC6028" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L6029" class="blob-num js-line-number" data-line-number="6029"></td>
        <td id="LC6029" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6030" class="blob-num js-line-number" data-line-number="6030"></td>
        <td id="LC6030" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L6031" class="blob-num js-line-number" data-line-number="6031"></td>
        <td id="LC6031" class="blob-code blob-code-inner js-file-line">    std::string m_prefix{};</td>
      </tr>
      <tr>
        <td id="L6032" class="blob-num js-line-number" data-line-number="6032"></td>
        <td id="LC6032" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">char</span> m_delimiter{<span class="pl-s"><span class="pl-pds">&#39;</span>;<span class="pl-pds">&#39;</span></span>};</td>
      </tr>
      <tr>
        <td id="L6033" class="blob-num js-line-number" data-line-number="6033"></td>
        <td id="LC6033" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">bool</span> m_withHeader{<span class="pl-c1">true</span>};</td>
      </tr>
      <tr>
        <td id="L6034" class="blob-num js-line-number" data-line-number="6034"></td>
        <td id="LC6034" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">bool</span> m_isNested{<span class="pl-c1">false</span>};</td>
      </tr>
      <tr>
        <td id="L6035" class="blob-num js-line-number" data-line-number="6035"></td>
        <td id="LC6035" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">bool</span> m_fillHeader{<span class="pl-c1">true</span>};</td>
      </tr>
      <tr>
        <td id="L6036" class="blob-num js-line-number" data-line-number="6036"></td>
        <td id="LC6036" class="blob-code blob-code-inner js-file-line">    std::stringstream m_bufferHeader{};</td>
      </tr>
      <tr>
        <td id="L6037" class="blob-num js-line-number" data-line-number="6037"></td>
        <td id="LC6037" class="blob-code blob-code-inner js-file-line">    std::stringstream m_bufferValues{};</td>
      </tr>
      <tr>
        <td id="L6038" class="blob-num js-line-number" data-line-number="6038"></td>
        <td id="LC6038" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L6039" class="blob-num js-line-number" data-line-number="6039"></td>
        <td id="LC6039" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6040" class="blob-num js-line-number" data-line-number="6040"></td>
        <td id="LC6040" class="blob-code blob-code-inner js-file-line">} <span class="pl-c"><span class="pl-c">//</span> namespace cluon</span></td>
      </tr>
      <tr>
        <td id="L6041" class="blob-num js-line-number" data-line-number="6041"></td>
        <td id="LC6041" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L6042" class="blob-num js-line-number" data-line-number="6042"></td>
        <td id="LC6042" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L6043" class="blob-num js-line-number" data-line-number="6043"></td>
        <td id="LC6043" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Copyright (C) 2017-2018  Christian Berger</span></td>
      </tr>
      <tr>
        <td id="L6044" class="blob-num js-line-number" data-line-number="6044"></td>
        <td id="LC6044" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L6045" class="blob-num js-line-number" data-line-number="6045"></td>
        <td id="LC6045" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is free software: you can redistribute it and/or modify</span></td>
      </tr>
      <tr>
        <td id="L6046" class="blob-num js-line-number" data-line-number="6046"></td>
        <td id="LC6046" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * it under the terms of the GNU General Public License as published by</span></td>
      </tr>
      <tr>
        <td id="L6047" class="blob-num js-line-number" data-line-number="6047"></td>
        <td id="LC6047" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * the Free Software Foundation, either version 3 of the License, or</span></td>
      </tr>
      <tr>
        <td id="L6048" class="blob-num js-line-number" data-line-number="6048"></td>
        <td id="LC6048" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * (at your option) any later version.</span></td>
      </tr>
      <tr>
        <td id="L6049" class="blob-num js-line-number" data-line-number="6049"></td>
        <td id="LC6049" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L6050" class="blob-num js-line-number" data-line-number="6050"></td>
        <td id="LC6050" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is distributed in the hope that it will be useful,</span></td>
      </tr>
      <tr>
        <td id="L6051" class="blob-num js-line-number" data-line-number="6051"></td>
        <td id="LC6051" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></td>
      </tr>
      <tr>
        <td id="L6052" class="blob-num js-line-number" data-line-number="6052"></td>
        <td id="LC6052" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></td>
      </tr>
      <tr>
        <td id="L6053" class="blob-num js-line-number" data-line-number="6053"></td>
        <td id="LC6053" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * GNU General Public License for more details.</span></td>
      </tr>
      <tr>
        <td id="L6054" class="blob-num js-line-number" data-line-number="6054"></td>
        <td id="LC6054" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L6055" class="blob-num js-line-number" data-line-number="6055"></td>
        <td id="LC6055" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * You should have received a copy of the GNU General Public License</span></td>
      </tr>
      <tr>
        <td id="L6056" class="blob-num js-line-number" data-line-number="6056"></td>
        <td id="LC6056" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></td>
      </tr>
      <tr>
        <td id="L6057" class="blob-num js-line-number" data-line-number="6057"></td>
        <td id="LC6057" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L6058" class="blob-num js-line-number" data-line-number="6058"></td>
        <td id="LC6058" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6059" class="blob-num js-line-number" data-line-number="6059"></td>
        <td id="LC6059" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifndef</span> TOLCMVISITOR_HPP</td>
      </tr>
      <tr>
        <td id="L6060" class="blob-num js-line-number" data-line-number="6060"></td>
        <td id="LC6060" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">define</span> <span class="pl-en">TOLCMVISITOR_HPP</span></td>
      </tr>
      <tr>
        <td id="L6061" class="blob-num js-line-number" data-line-number="6061"></td>
        <td id="LC6061" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6062" class="blob-num js-line-number" data-line-number="6062"></td>
        <td id="LC6062" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/cluon.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L6063" class="blob-num js-line-number" data-line-number="6063"></td>
        <td id="LC6063" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6064" class="blob-num js-line-number" data-line-number="6064"></td>
        <td id="LC6064" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>cstdint<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L6065" class="blob-num js-line-number" data-line-number="6065"></td>
        <td id="LC6065" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>sstream<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L6066" class="blob-num js-line-number" data-line-number="6066"></td>
        <td id="LC6066" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>string<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L6067" class="blob-num js-line-number" data-line-number="6067"></td>
        <td id="LC6067" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>vector<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L6068" class="blob-num js-line-number" data-line-number="6068"></td>
        <td id="LC6068" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6069" class="blob-num js-line-number" data-line-number="6069"></td>
        <td id="LC6069" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">cluon</span> {</td>
      </tr>
      <tr>
        <td id="L6070" class="blob-num js-line-number" data-line-number="6070"></td>
        <td id="LC6070" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L6071" class="blob-num js-line-number" data-line-number="6071"></td>
        <td id="LC6071" class="blob-code blob-code-inner js-file-line"><span class="pl-c">This class encodes a given message in LCM format.</span></td>
      </tr>
      <tr>
        <td id="L6072" class="blob-num js-line-number" data-line-number="6072"></td>
        <td id="LC6072" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L6073" class="blob-num js-line-number" data-line-number="6073"></td>
        <td id="LC6073" class="blob-code blob-code-inner js-file-line"><span class="pl-k">class</span> <span class="pl-en">LIBCLUON_API</span> ToLCMVisitor {</td>
      </tr>
      <tr>
        <td id="L6074" class="blob-num js-line-number" data-line-number="6074"></td>
        <td id="LC6074" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L6075" class="blob-num js-line-number" data-line-number="6075"></td>
        <td id="LC6075" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">ToLCMVisitor</span>(<span class="pl-k">const</span> ToLCMVisitor &amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L6076" class="blob-num js-line-number" data-line-number="6076"></td>
        <td id="LC6076" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">ToLCMVisitor</span>(ToLCMVisitor &amp;&amp;)      = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L6077" class="blob-num js-line-number" data-line-number="6077"></td>
        <td id="LC6077" class="blob-code blob-code-inner js-file-line">    ToLCMVisitor &amp;<span class="pl-k">operator</span>=(<span class="pl-k">const</span> ToLCMVisitor &amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L6078" class="blob-num js-line-number" data-line-number="6078"></td>
        <td id="LC6078" class="blob-code blob-code-inner js-file-line">    ToLCMVisitor &amp;<span class="pl-k">operator</span>=(ToLCMVisitor &amp;&amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L6079" class="blob-num js-line-number" data-line-number="6079"></td>
        <td id="LC6079" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6080" class="blob-num js-line-number" data-line-number="6080"></td>
        <td id="LC6080" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L6081" class="blob-num js-line-number" data-line-number="6081"></td>
        <td id="LC6081" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">ToLCMVisitor</span>()  = <span class="pl-k">default</span>;</td>
      </tr>
      <tr>
        <td id="L6082" class="blob-num js-line-number" data-line-number="6082"></td>
        <td id="LC6082" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">~ToLCMVisitor</span>() = <span class="pl-k">default</span>;</td>
      </tr>
      <tr>
        <td id="L6083" class="blob-num js-line-number" data-line-number="6083"></td>
        <td id="LC6083" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6084" class="blob-num js-line-number" data-line-number="6084"></td>
        <td id="LC6084" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L6085" class="blob-num js-line-number" data-line-number="6085"></td>
        <td id="LC6085" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param withHash True if the hash value from the fields shall be included.</span></td>
      </tr>
      <tr>
        <td id="L6086" class="blob-num js-line-number" data-line-number="6086"></td>
        <td id="LC6086" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @return Encoded data in LCM format.</span></td>
      </tr>
      <tr>
        <td id="L6087" class="blob-num js-line-number" data-line-number="6087"></td>
        <td id="LC6087" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L6088" class="blob-num js-line-number" data-line-number="6088"></td>
        <td id="LC6088" class="blob-code blob-code-inner js-file-line">    std::string <span class="pl-en">encodedData</span>(<span class="pl-k">bool</span> withHash = <span class="pl-c1">true</span>) <span class="pl-k">const</span> <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6089" class="blob-num js-line-number" data-line-number="6089"></td>
        <td id="LC6089" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6090" class="blob-num js-line-number" data-line-number="6090"></td>
        <td id="LC6090" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L6091" class="blob-num js-line-number" data-line-number="6091"></td>
        <td id="LC6091" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> The following methods are provided to allow an instance of this class to</span></td>
      </tr>
      <tr>
        <td id="L6092" class="blob-num js-line-number" data-line-number="6092"></td>
        <td id="LC6092" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> be used as visitor for an instance with the method signature void accept&lt;T&gt;(T&amp;);</span></td>
      </tr>
      <tr>
        <td id="L6093" class="blob-num js-line-number" data-line-number="6093"></td>
        <td id="LC6093" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6094" class="blob-num js-line-number" data-line-number="6094"></td>
        <td id="LC6094" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">preVisit</span>(<span class="pl-c1">int32_t</span> id, <span class="pl-k">const</span> std::string &amp;shortName, <span class="pl-k">const</span> std::string &amp;longName) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6095" class="blob-num js-line-number" data-line-number="6095"></td>
        <td id="LC6095" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">postVisit</span>() <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6096" class="blob-num js-line-number" data-line-number="6096"></td>
        <td id="LC6096" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6097" class="blob-num js-line-number" data-line-number="6097"></td>
        <td id="LC6097" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">bool</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6098" class="blob-num js-line-number" data-line-number="6098"></td>
        <td id="LC6098" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">char</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6099" class="blob-num js-line-number" data-line-number="6099"></td>
        <td id="LC6099" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int8_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6100" class="blob-num js-line-number" data-line-number="6100"></td>
        <td id="LC6100" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint8_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6101" class="blob-num js-line-number" data-line-number="6101"></td>
        <td id="LC6101" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int16_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6102" class="blob-num js-line-number" data-line-number="6102"></td>
        <td id="LC6102" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint16_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6103" class="blob-num js-line-number" data-line-number="6103"></td>
        <td id="LC6103" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int32_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6104" class="blob-num js-line-number" data-line-number="6104"></td>
        <td id="LC6104" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint32_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6105" class="blob-num js-line-number" data-line-number="6105"></td>
        <td id="LC6105" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int64_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6106" class="blob-num js-line-number" data-line-number="6106"></td>
        <td id="LC6106" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint64_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6107" class="blob-num js-line-number" data-line-number="6107"></td>
        <td id="LC6107" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">float</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6108" class="blob-num js-line-number" data-line-number="6108"></td>
        <td id="LC6108" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">double</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6109" class="blob-num js-line-number" data-line-number="6109"></td>
        <td id="LC6109" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, std::string &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6110" class="blob-num js-line-number" data-line-number="6110"></td>
        <td id="LC6110" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6111" class="blob-num js-line-number" data-line-number="6111"></td>
        <td id="LC6111" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> T&gt;</td>
      </tr>
      <tr>
        <td id="L6112" class="blob-num js-line-number" data-line-number="6112"></td>
        <td id="LC6112" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> &amp;id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, T &amp;value) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L6113" class="blob-num js-line-number" data-line-number="6113"></td>
        <td id="LC6113" class="blob-code blob-code-inner js-file-line">        (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L6114" class="blob-num js-line-number" data-line-number="6114"></td>
        <td id="LC6114" class="blob-code blob-code-inner js-file-line">        (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L6115" class="blob-num js-line-number" data-line-number="6115"></td>
        <td id="LC6115" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">calculateHash</span>(name);</td>
      </tr>
      <tr>
        <td id="L6116" class="blob-num js-line-number" data-line-number="6116"></td>
        <td id="LC6116" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">calculateHash</span>(<span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L6117" class="blob-num js-line-number" data-line-number="6117"></td>
        <td id="LC6117" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6118" class="blob-num js-line-number" data-line-number="6118"></td>
        <td id="LC6118" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> No hash for the type but for name and dimension.</span></td>
      </tr>
      <tr>
        <td id="L6119" class="blob-num js-line-number" data-line-number="6119"></td>
        <td id="LC6119" class="blob-code blob-code-inner js-file-line">        cluon::ToLCMVisitor nestedLCMEncoder;</td>
      </tr>
      <tr>
        <td id="L6120" class="blob-num js-line-number" data-line-number="6120"></td>
        <td id="LC6120" class="blob-code blob-code-inner js-file-line">        value.<span class="pl-c1">accept</span>(nestedLCMEncoder);</td>
      </tr>
      <tr>
        <td id="L6121" class="blob-num js-line-number" data-line-number="6121"></td>
        <td id="LC6121" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6122" class="blob-num js-line-number" data-line-number="6122"></td>
        <td id="LC6122" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">constexpr</span> <span class="pl-k">bool</span> WITH_HASH{<span class="pl-c1">false</span>};</td>
      </tr>
      <tr>
        <td id="L6123" class="blob-num js-line-number" data-line-number="6123"></td>
        <td id="LC6123" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> std::string s = nestedLCMEncoder.<span class="pl-c1">encodedData</span>(WITH_HASH);</td>
      </tr>
      <tr>
        <td id="L6124" class="blob-num js-line-number" data-line-number="6124"></td>
        <td id="LC6124" class="blob-code blob-code-inner js-file-line">        m_buffer.<span class="pl-c1">write</span>(s.<span class="pl-c1">c_str</span>(), <span class="pl-k">static_cast</span>&lt;std::streamsize&gt;(s.<span class="pl-c1">size</span>()));</td>
      </tr>
      <tr>
        <td id="L6125" class="blob-num js-line-number" data-line-number="6125"></td>
        <td id="LC6125" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6126" class="blob-num js-line-number" data-line-number="6126"></td>
        <td id="LC6126" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> Save this complex field&#39;s hash for later to compute final hash.</span></td>
      </tr>
      <tr>
        <td id="L6127" class="blob-num js-line-number" data-line-number="6127"></td>
        <td id="LC6127" class="blob-code blob-code-inner js-file-line">        m_hashes.<span class="pl-c1">push_back</span>(nestedLCMEncoder.<span class="pl-c1">hash</span>());</td>
      </tr>
      <tr>
        <td id="L6128" class="blob-num js-line-number" data-line-number="6128"></td>
        <td id="LC6128" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L6129" class="blob-num js-line-number" data-line-number="6129"></td>
        <td id="LC6129" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6130" class="blob-num js-line-number" data-line-number="6130"></td>
        <td id="LC6130" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L6131" class="blob-num js-line-number" data-line-number="6131"></td>
        <td id="LC6131" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">int64_t</span> <span class="pl-en">hash</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6132" class="blob-num js-line-number" data-line-number="6132"></td>
        <td id="LC6132" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">calculateHash</span>(<span class="pl-k">char</span> c) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6133" class="blob-num js-line-number" data-line-number="6133"></td>
        <td id="LC6133" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">calculateHash</span>(<span class="pl-k">const</span> std::string &amp;s) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6134" class="blob-num js-line-number" data-line-number="6134"></td>
        <td id="LC6134" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6135" class="blob-num js-line-number" data-line-number="6135"></td>
        <td id="LC6135" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L6136" class="blob-num js-line-number" data-line-number="6136"></td>
        <td id="LC6136" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">int64_t</span> m_hash{<span class="pl-c1">0x12345678</span>};</td>
      </tr>
      <tr>
        <td id="L6137" class="blob-num js-line-number" data-line-number="6137"></td>
        <td id="LC6137" class="blob-code blob-code-inner js-file-line">    std::stringstream m_buffer{<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>};</td>
      </tr>
      <tr>
        <td id="L6138" class="blob-num js-line-number" data-line-number="6138"></td>
        <td id="LC6138" class="blob-code blob-code-inner js-file-line">    std::vector&lt;<span class="pl-c1">int64_t</span>&gt; m_hashes{};</td>
      </tr>
      <tr>
        <td id="L6139" class="blob-num js-line-number" data-line-number="6139"></td>
        <td id="LC6139" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L6140" class="blob-num js-line-number" data-line-number="6140"></td>
        <td id="LC6140" class="blob-code blob-code-inner js-file-line">} <span class="pl-c"><span class="pl-c">//</span> namespace cluon</span></td>
      </tr>
      <tr>
        <td id="L6141" class="blob-num js-line-number" data-line-number="6141"></td>
        <td id="LC6141" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6142" class="blob-num js-line-number" data-line-number="6142"></td>
        <td id="LC6142" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L6143" class="blob-num js-line-number" data-line-number="6143"></td>
        <td id="LC6143" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L6144" class="blob-num js-line-number" data-line-number="6144"></td>
        <td id="LC6144" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Copyright (C) 2017-2018  Christian Berger</span></td>
      </tr>
      <tr>
        <td id="L6145" class="blob-num js-line-number" data-line-number="6145"></td>
        <td id="LC6145" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L6146" class="blob-num js-line-number" data-line-number="6146"></td>
        <td id="LC6146" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is free software: you can redistribute it and/or modify</span></td>
      </tr>
      <tr>
        <td id="L6147" class="blob-num js-line-number" data-line-number="6147"></td>
        <td id="LC6147" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * it under the terms of the GNU General Public License as published by</span></td>
      </tr>
      <tr>
        <td id="L6148" class="blob-num js-line-number" data-line-number="6148"></td>
        <td id="LC6148" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * the Free Software Foundation, either version 3 of the License, or</span></td>
      </tr>
      <tr>
        <td id="L6149" class="blob-num js-line-number" data-line-number="6149"></td>
        <td id="LC6149" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * (at your option) any later version.</span></td>
      </tr>
      <tr>
        <td id="L6150" class="blob-num js-line-number" data-line-number="6150"></td>
        <td id="LC6150" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L6151" class="blob-num js-line-number" data-line-number="6151"></td>
        <td id="LC6151" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is distributed in the hope that it will be useful,</span></td>
      </tr>
      <tr>
        <td id="L6152" class="blob-num js-line-number" data-line-number="6152"></td>
        <td id="LC6152" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></td>
      </tr>
      <tr>
        <td id="L6153" class="blob-num js-line-number" data-line-number="6153"></td>
        <td id="LC6153" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></td>
      </tr>
      <tr>
        <td id="L6154" class="blob-num js-line-number" data-line-number="6154"></td>
        <td id="LC6154" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * GNU General Public License for more details.</span></td>
      </tr>
      <tr>
        <td id="L6155" class="blob-num js-line-number" data-line-number="6155"></td>
        <td id="LC6155" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L6156" class="blob-num js-line-number" data-line-number="6156"></td>
        <td id="LC6156" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * You should have received a copy of the GNU General Public License</span></td>
      </tr>
      <tr>
        <td id="L6157" class="blob-num js-line-number" data-line-number="6157"></td>
        <td id="LC6157" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></td>
      </tr>
      <tr>
        <td id="L6158" class="blob-num js-line-number" data-line-number="6158"></td>
        <td id="LC6158" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L6159" class="blob-num js-line-number" data-line-number="6159"></td>
        <td id="LC6159" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6160" class="blob-num js-line-number" data-line-number="6160"></td>
        <td id="LC6160" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifndef</span> TOODVDVISITOR_HPP</td>
      </tr>
      <tr>
        <td id="L6161" class="blob-num js-line-number" data-line-number="6161"></td>
        <td id="LC6161" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">define</span> <span class="pl-en">TOODVDVISITOR_HPP</span></td>
      </tr>
      <tr>
        <td id="L6162" class="blob-num js-line-number" data-line-number="6162"></td>
        <td id="LC6162" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6163" class="blob-num js-line-number" data-line-number="6163"></td>
        <td id="LC6163" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/cluon.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L6164" class="blob-num js-line-number" data-line-number="6164"></td>
        <td id="LC6164" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6165" class="blob-num js-line-number" data-line-number="6165"></td>
        <td id="LC6165" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>cstdint<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L6166" class="blob-num js-line-number" data-line-number="6166"></td>
        <td id="LC6166" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>regex<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L6167" class="blob-num js-line-number" data-line-number="6167"></td>
        <td id="LC6167" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>sstream<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L6168" class="blob-num js-line-number" data-line-number="6168"></td>
        <td id="LC6168" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>string<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L6169" class="blob-num js-line-number" data-line-number="6169"></td>
        <td id="LC6169" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>vector<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L6170" class="blob-num js-line-number" data-line-number="6170"></td>
        <td id="LC6170" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6171" class="blob-num js-line-number" data-line-number="6171"></td>
        <td id="LC6171" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">cluon</span> {</td>
      </tr>
      <tr>
        <td id="L6172" class="blob-num js-line-number" data-line-number="6172"></td>
        <td id="LC6172" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L6173" class="blob-num js-line-number" data-line-number="6173"></td>
        <td id="LC6173" class="blob-code blob-code-inner js-file-line"><span class="pl-c">This class provides a visitor to transform a message into its corresponding</span></td>
      </tr>
      <tr>
        <td id="L6174" class="blob-num js-line-number" data-line-number="6174"></td>
        <td id="LC6174" class="blob-code blob-code-inner js-file-line"><span class="pl-c">message specification in ODVD format:</span></td>
      </tr>
      <tr>
        <td id="L6175" class="blob-num js-line-number" data-line-number="6175"></td>
        <td id="LC6175" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L6176" class="blob-num js-line-number" data-line-number="6176"></td>
        <td id="LC6176" class="blob-code blob-code-inner js-file-line"><span class="pl-c">\code{.cpp}</span></td>
      </tr>
      <tr>
        <td id="L6177" class="blob-num js-line-number" data-line-number="6177"></td>
        <td id="LC6177" class="blob-code blob-code-inner js-file-line"><span class="pl-c">MyMessage msg;</span></td>
      </tr>
      <tr>
        <td id="L6178" class="blob-num js-line-number" data-line-number="6178"></td>
        <td id="LC6178" class="blob-code blob-code-inner js-file-line"><span class="pl-c">// Set some values in msg.</span></td>
      </tr>
      <tr>
        <td id="L6179" class="blob-num js-line-number" data-line-number="6179"></td>
        <td id="LC6179" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L6180" class="blob-num js-line-number" data-line-number="6180"></td>
        <td id="LC6180" class="blob-code blob-code-inner js-file-line"><span class="pl-c">cluon::ToODVDVisitor odvd;</span></td>
      </tr>
      <tr>
        <td id="L6181" class="blob-num js-line-number" data-line-number="6181"></td>
        <td id="LC6181" class="blob-code blob-code-inner js-file-line"><span class="pl-c">msg.accept(odvd);</span></td>
      </tr>
      <tr>
        <td id="L6182" class="blob-num js-line-number" data-line-number="6182"></td>
        <td id="LC6182" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L6183" class="blob-num js-line-number" data-line-number="6183"></td>
        <td id="LC6183" class="blob-code blob-code-inner js-file-line"><span class="pl-c">const std::string generatedMessageSpecification{odvd.messageSpecification()};</span></td>
      </tr>
      <tr>
        <td id="L6184" class="blob-num js-line-number" data-line-number="6184"></td>
        <td id="LC6184" class="blob-code blob-code-inner js-file-line"><span class="pl-c">std::cout &lt;&lt; generatedMessageSpecification &lt;&lt; std::endl;</span></td>
      </tr>
      <tr>
        <td id="L6185" class="blob-num js-line-number" data-line-number="6185"></td>
        <td id="LC6185" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L6186" class="blob-num js-line-number" data-line-number="6186"></td>
        <td id="LC6186" class="blob-code blob-code-inner js-file-line"><span class="pl-c">cluon::MessageParser mp;</span></td>
      </tr>
      <tr>
        <td id="L6187" class="blob-num js-line-number" data-line-number="6187"></td>
        <td id="LC6187" class="blob-code blob-code-inner js-file-line"><span class="pl-c">auto retVal = mp.parse(generatedMessageSpecification);</span></td>
      </tr>
      <tr>
        <td id="L6188" class="blob-num js-line-number" data-line-number="6188"></td>
        <td id="LC6188" class="blob-code blob-code-inner js-file-line"><span class="pl-c">std::cout &lt;&lt; (cluon::MessageParser::MessageParserErrorCodes::NO_ERROR == retVal.second);</span></td>
      </tr>
      <tr>
        <td id="L6189" class="blob-num js-line-number" data-line-number="6189"></td>
        <td id="LC6189" class="blob-code blob-code-inner js-file-line"><span class="pl-c">\endcode</span></td>
      </tr>
      <tr>
        <td id="L6190" class="blob-num js-line-number" data-line-number="6190"></td>
        <td id="LC6190" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L6191" class="blob-num js-line-number" data-line-number="6191"></td>
        <td id="LC6191" class="blob-code blob-code-inner js-file-line"><span class="pl-k">class</span> <span class="pl-en">LIBCLUON_API</span> ToODVDVisitor {</td>
      </tr>
      <tr>
        <td id="L6192" class="blob-num js-line-number" data-line-number="6192"></td>
        <td id="LC6192" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L6193" class="blob-num js-line-number" data-line-number="6193"></td>
        <td id="LC6193" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">ToODVDVisitor</span>(<span class="pl-k">const</span> ToODVDVisitor &amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L6194" class="blob-num js-line-number" data-line-number="6194"></td>
        <td id="LC6194" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">ToODVDVisitor</span>(ToODVDVisitor &amp;&amp;)      = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L6195" class="blob-num js-line-number" data-line-number="6195"></td>
        <td id="LC6195" class="blob-code blob-code-inner js-file-line">    ToODVDVisitor &amp;<span class="pl-k">operator</span>=(<span class="pl-k">const</span> ToODVDVisitor &amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L6196" class="blob-num js-line-number" data-line-number="6196"></td>
        <td id="LC6196" class="blob-code blob-code-inner js-file-line">    ToODVDVisitor &amp;<span class="pl-k">operator</span>=(ToODVDVisitor &amp;&amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L6197" class="blob-num js-line-number" data-line-number="6197"></td>
        <td id="LC6197" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6198" class="blob-num js-line-number" data-line-number="6198"></td>
        <td id="LC6198" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L6199" class="blob-num js-line-number" data-line-number="6199"></td>
        <td id="LC6199" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">ToODVDVisitor</span>() = <span class="pl-k">default</span>;</td>
      </tr>
      <tr>
        <td id="L6200" class="blob-num js-line-number" data-line-number="6200"></td>
        <td id="LC6200" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6201" class="blob-num js-line-number" data-line-number="6201"></td>
        <td id="LC6201" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L6202" class="blob-num js-line-number" data-line-number="6202"></td>
        <td id="LC6202" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @return Message specification data.</span></td>
      </tr>
      <tr>
        <td id="L6203" class="blob-num js-line-number" data-line-number="6203"></td>
        <td id="LC6203" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L6204" class="blob-num js-line-number" data-line-number="6204"></td>
        <td id="LC6204" class="blob-code blob-code-inner js-file-line">    std::string <span class="pl-en">messageSpecification</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6205" class="blob-num js-line-number" data-line-number="6205"></td>
        <td id="LC6205" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6206" class="blob-num js-line-number" data-line-number="6206"></td>
        <td id="LC6206" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L6207" class="blob-num js-line-number" data-line-number="6207"></td>
        <td id="LC6207" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> The following methods are provided to allow an instance of this class to</span></td>
      </tr>
      <tr>
        <td id="L6208" class="blob-num js-line-number" data-line-number="6208"></td>
        <td id="LC6208" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> be used as visitor for an instance with the method signature void accept&lt;T&gt;(T&amp;);</span></td>
      </tr>
      <tr>
        <td id="L6209" class="blob-num js-line-number" data-line-number="6209"></td>
        <td id="LC6209" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6210" class="blob-num js-line-number" data-line-number="6210"></td>
        <td id="LC6210" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">preVisit</span>(<span class="pl-c1">int32_t</span> id, <span class="pl-k">const</span> std::string &amp;shortName, <span class="pl-k">const</span> std::string &amp;longName) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6211" class="blob-num js-line-number" data-line-number="6211"></td>
        <td id="LC6211" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">postVisit</span>() <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6212" class="blob-num js-line-number" data-line-number="6212"></td>
        <td id="LC6212" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6213" class="blob-num js-line-number" data-line-number="6213"></td>
        <td id="LC6213" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">bool</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6214" class="blob-num js-line-number" data-line-number="6214"></td>
        <td id="LC6214" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">char</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6215" class="blob-num js-line-number" data-line-number="6215"></td>
        <td id="LC6215" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int8_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6216" class="blob-num js-line-number" data-line-number="6216"></td>
        <td id="LC6216" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint8_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6217" class="blob-num js-line-number" data-line-number="6217"></td>
        <td id="LC6217" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int16_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6218" class="blob-num js-line-number" data-line-number="6218"></td>
        <td id="LC6218" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint16_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6219" class="blob-num js-line-number" data-line-number="6219"></td>
        <td id="LC6219" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int32_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6220" class="blob-num js-line-number" data-line-number="6220"></td>
        <td id="LC6220" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint32_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6221" class="blob-num js-line-number" data-line-number="6221"></td>
        <td id="LC6221" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int64_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6222" class="blob-num js-line-number" data-line-number="6222"></td>
        <td id="LC6222" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint64_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6223" class="blob-num js-line-number" data-line-number="6223"></td>
        <td id="LC6223" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">float</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6224" class="blob-num js-line-number" data-line-number="6224"></td>
        <td id="LC6224" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">double</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6225" class="blob-num js-line-number" data-line-number="6225"></td>
        <td id="LC6225" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, std::string &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6226" class="blob-num js-line-number" data-line-number="6226"></td>
        <td id="LC6226" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6227" class="blob-num js-line-number" data-line-number="6227"></td>
        <td id="LC6227" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> T&gt;</td>
      </tr>
      <tr>
        <td id="L6228" class="blob-num js-line-number" data-line-number="6228"></td>
        <td id="LC6228" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> &amp;id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, T &amp;value) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L6229" class="blob-num js-line-number" data-line-number="6229"></td>
        <td id="LC6229" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L6230" class="blob-num js-line-number" data-line-number="6230"></td>
        <td id="LC6230" class="blob-code blob-code-inner js-file-line">            std::string tmp{<span class="pl-c1">std::regex_replace</span>(typeName, <span class="pl-c1">std::regex</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>::<span class="pl-pds">&quot;</span></span>), <span class="pl-s"><span class="pl-pds">&quot;</span>.<span class="pl-pds">&quot;</span></span>)}; <span class="pl-c"><span class="pl-c">//</span> NOLINT</span></td>
      </tr>
      <tr>
        <td id="L6231" class="blob-num js-line-number" data-line-number="6231"></td>
        <td id="LC6231" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6232" class="blob-num js-line-number" data-line-number="6232"></td>
        <td id="LC6232" class="blob-code blob-code-inner js-file-line">            ToODVDVisitor odvdVisitor;</td>
      </tr>
      <tr>
        <td id="L6233" class="blob-num js-line-number" data-line-number="6233"></td>
        <td id="LC6233" class="blob-code blob-code-inner js-file-line">            value.<span class="pl-c1">accept</span>(odvdVisitor);</td>
      </tr>
      <tr>
        <td id="L6234" class="blob-num js-line-number" data-line-number="6234"></td>
        <td id="LC6234" class="blob-code blob-code-inner js-file-line">            m_forwardDeclarations.<span class="pl-c1">emplace</span>(m_forwardDeclarations.<span class="pl-c1">begin</span>(), odvdVisitor.<span class="pl-c1">messageSpecification</span>());</td>
      </tr>
      <tr>
        <td id="L6235" class="blob-num js-line-number" data-line-number="6235"></td>
        <td id="LC6235" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6236" class="blob-num js-line-number" data-line-number="6236"></td>
        <td id="LC6236" class="blob-code blob-code-inner js-file-line">            m_buffer &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>    <span class="pl-pds">&quot;</span></span> &lt;&lt; tmp &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span> <span class="pl-pds">&#39;</span></span> &lt;&lt; name &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span> [ id = <span class="pl-pds">&quot;</span></span> &lt;&lt; id &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span> ];<span class="pl-pds">&quot;</span></span> &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\n</span><span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L6237" class="blob-num js-line-number" data-line-number="6237"></td>
        <td id="LC6237" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span> (std::regex_error &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L6238" class="blob-num js-line-number" data-line-number="6238"></td>
        <td id="LC6238" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L6239" class="blob-num js-line-number" data-line-number="6239"></td>
        <td id="LC6239" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L6240" class="blob-num js-line-number" data-line-number="6240"></td>
        <td id="LC6240" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6241" class="blob-num js-line-number" data-line-number="6241"></td>
        <td id="LC6241" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L6242" class="blob-num js-line-number" data-line-number="6242"></td>
        <td id="LC6242" class="blob-code blob-code-inner js-file-line">    std::vector&lt;std::string&gt; m_forwardDeclarations{};</td>
      </tr>
      <tr>
        <td id="L6243" class="blob-num js-line-number" data-line-number="6243"></td>
        <td id="LC6243" class="blob-code blob-code-inner js-file-line">    std::stringstream m_buffer{};</td>
      </tr>
      <tr>
        <td id="L6244" class="blob-num js-line-number" data-line-number="6244"></td>
        <td id="LC6244" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L6245" class="blob-num js-line-number" data-line-number="6245"></td>
        <td id="LC6245" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6246" class="blob-num js-line-number" data-line-number="6246"></td>
        <td id="LC6246" class="blob-code blob-code-inner js-file-line">} <span class="pl-c"><span class="pl-c">//</span> namespace cluon</span></td>
      </tr>
      <tr>
        <td id="L6247" class="blob-num js-line-number" data-line-number="6247"></td>
        <td id="LC6247" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L6248" class="blob-num js-line-number" data-line-number="6248"></td>
        <td id="LC6248" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L6249" class="blob-num js-line-number" data-line-number="6249"></td>
        <td id="LC6249" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Copyright (C) 2017-2018  Christian Berger</span></td>
      </tr>
      <tr>
        <td id="L6250" class="blob-num js-line-number" data-line-number="6250"></td>
        <td id="LC6250" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L6251" class="blob-num js-line-number" data-line-number="6251"></td>
        <td id="LC6251" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is free software: you can redistribute it and/or modify</span></td>
      </tr>
      <tr>
        <td id="L6252" class="blob-num js-line-number" data-line-number="6252"></td>
        <td id="LC6252" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * it under the terms of the GNU General Public License as published by</span></td>
      </tr>
      <tr>
        <td id="L6253" class="blob-num js-line-number" data-line-number="6253"></td>
        <td id="LC6253" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * the Free Software Foundation, either version 3 of the License, or</span></td>
      </tr>
      <tr>
        <td id="L6254" class="blob-num js-line-number" data-line-number="6254"></td>
        <td id="LC6254" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * (at your option) any later version.</span></td>
      </tr>
      <tr>
        <td id="L6255" class="blob-num js-line-number" data-line-number="6255"></td>
        <td id="LC6255" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L6256" class="blob-num js-line-number" data-line-number="6256"></td>
        <td id="LC6256" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is distributed in the hope that it will be useful,</span></td>
      </tr>
      <tr>
        <td id="L6257" class="blob-num js-line-number" data-line-number="6257"></td>
        <td id="LC6257" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></td>
      </tr>
      <tr>
        <td id="L6258" class="blob-num js-line-number" data-line-number="6258"></td>
        <td id="LC6258" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></td>
      </tr>
      <tr>
        <td id="L6259" class="blob-num js-line-number" data-line-number="6259"></td>
        <td id="LC6259" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * GNU General Public License for more details.</span></td>
      </tr>
      <tr>
        <td id="L6260" class="blob-num js-line-number" data-line-number="6260"></td>
        <td id="LC6260" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L6261" class="blob-num js-line-number" data-line-number="6261"></td>
        <td id="LC6261" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * You should have received a copy of the GNU General Public License</span></td>
      </tr>
      <tr>
        <td id="L6262" class="blob-num js-line-number" data-line-number="6262"></td>
        <td id="LC6262" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></td>
      </tr>
      <tr>
        <td id="L6263" class="blob-num js-line-number" data-line-number="6263"></td>
        <td id="LC6263" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L6264" class="blob-num js-line-number" data-line-number="6264"></td>
        <td id="LC6264" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6265" class="blob-num js-line-number" data-line-number="6265"></td>
        <td id="LC6265" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifndef</span> TOMSGPACKVISITOR_HPP</td>
      </tr>
      <tr>
        <td id="L6266" class="blob-num js-line-number" data-line-number="6266"></td>
        <td id="LC6266" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">define</span> <span class="pl-en">TOMSGPACKVISITOR_HPP</span></td>
      </tr>
      <tr>
        <td id="L6267" class="blob-num js-line-number" data-line-number="6267"></td>
        <td id="LC6267" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6268" class="blob-num js-line-number" data-line-number="6268"></td>
        <td id="LC6268" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/MsgPackConstants.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L6269" class="blob-num js-line-number" data-line-number="6269"></td>
        <td id="LC6269" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/cluon.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L6270" class="blob-num js-line-number" data-line-number="6270"></td>
        <td id="LC6270" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6271" class="blob-num js-line-number" data-line-number="6271"></td>
        <td id="LC6271" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>cstdint<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L6272" class="blob-num js-line-number" data-line-number="6272"></td>
        <td id="LC6272" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>sstream<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L6273" class="blob-num js-line-number" data-line-number="6273"></td>
        <td id="LC6273" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>string<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L6274" class="blob-num js-line-number" data-line-number="6274"></td>
        <td id="LC6274" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6275" class="blob-num js-line-number" data-line-number="6275"></td>
        <td id="LC6275" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">cluon</span> {</td>
      </tr>
      <tr>
        <td id="L6276" class="blob-num js-line-number" data-line-number="6276"></td>
        <td id="LC6276" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L6277" class="blob-num js-line-number" data-line-number="6277"></td>
        <td id="LC6277" class="blob-code blob-code-inner js-file-line"><span class="pl-c">This class encodes a given message in MsgPack format.</span></td>
      </tr>
      <tr>
        <td id="L6278" class="blob-num js-line-number" data-line-number="6278"></td>
        <td id="LC6278" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L6279" class="blob-num js-line-number" data-line-number="6279"></td>
        <td id="LC6279" class="blob-code blob-code-inner js-file-line"><span class="pl-k">class</span> <span class="pl-en">LIBCLUON_API</span> ToMsgPackVisitor {</td>
      </tr>
      <tr>
        <td id="L6280" class="blob-num js-line-number" data-line-number="6280"></td>
        <td id="LC6280" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L6281" class="blob-num js-line-number" data-line-number="6281"></td>
        <td id="LC6281" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">ToMsgPackVisitor</span>(<span class="pl-k">const</span> ToMsgPackVisitor &amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L6282" class="blob-num js-line-number" data-line-number="6282"></td>
        <td id="LC6282" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">ToMsgPackVisitor</span>(ToMsgPackVisitor &amp;&amp;)      = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L6283" class="blob-num js-line-number" data-line-number="6283"></td>
        <td id="LC6283" class="blob-code blob-code-inner js-file-line">    ToMsgPackVisitor &amp;<span class="pl-k">operator</span>=(<span class="pl-k">const</span> ToMsgPackVisitor &amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L6284" class="blob-num js-line-number" data-line-number="6284"></td>
        <td id="LC6284" class="blob-code blob-code-inner js-file-line">    ToMsgPackVisitor &amp;<span class="pl-k">operator</span>=(ToMsgPackVisitor &amp;&amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L6285" class="blob-num js-line-number" data-line-number="6285"></td>
        <td id="LC6285" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6286" class="blob-num js-line-number" data-line-number="6286"></td>
        <td id="LC6286" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L6287" class="blob-num js-line-number" data-line-number="6287"></td>
        <td id="LC6287" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">ToMsgPackVisitor</span>()  = <span class="pl-k">default</span>;</td>
      </tr>
      <tr>
        <td id="L6288" class="blob-num js-line-number" data-line-number="6288"></td>
        <td id="LC6288" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">~ToMsgPackVisitor</span>() = <span class="pl-k">default</span>;</td>
      </tr>
      <tr>
        <td id="L6289" class="blob-num js-line-number" data-line-number="6289"></td>
        <td id="LC6289" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6290" class="blob-num js-line-number" data-line-number="6290"></td>
        <td id="LC6290" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L6291" class="blob-num js-line-number" data-line-number="6291"></td>
        <td id="LC6291" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @return Encoded data in MsgPack format.</span></td>
      </tr>
      <tr>
        <td id="L6292" class="blob-num js-line-number" data-line-number="6292"></td>
        <td id="LC6292" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L6293" class="blob-num js-line-number" data-line-number="6293"></td>
        <td id="LC6293" class="blob-code blob-code-inner js-file-line">    std::string <span class="pl-en">encodedData</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6294" class="blob-num js-line-number" data-line-number="6294"></td>
        <td id="LC6294" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6295" class="blob-num js-line-number" data-line-number="6295"></td>
        <td id="LC6295" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L6296" class="blob-num js-line-number" data-line-number="6296"></td>
        <td id="LC6296" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> The following methods are provided to allow an instance of this class to</span></td>
      </tr>
      <tr>
        <td id="L6297" class="blob-num js-line-number" data-line-number="6297"></td>
        <td id="LC6297" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> be used as visitor for an instance with the method signature void accept&lt;T&gt;(T&amp;);</span></td>
      </tr>
      <tr>
        <td id="L6298" class="blob-num js-line-number" data-line-number="6298"></td>
        <td id="LC6298" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6299" class="blob-num js-line-number" data-line-number="6299"></td>
        <td id="LC6299" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">preVisit</span>(<span class="pl-c1">int32_t</span> id, <span class="pl-k">const</span> std::string &amp;shortName, <span class="pl-k">const</span> std::string &amp;longName) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6300" class="blob-num js-line-number" data-line-number="6300"></td>
        <td id="LC6300" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">postVisit</span>() <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6301" class="blob-num js-line-number" data-line-number="6301"></td>
        <td id="LC6301" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6302" class="blob-num js-line-number" data-line-number="6302"></td>
        <td id="LC6302" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">bool</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6303" class="blob-num js-line-number" data-line-number="6303"></td>
        <td id="LC6303" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">char</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6304" class="blob-num js-line-number" data-line-number="6304"></td>
        <td id="LC6304" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int8_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6305" class="blob-num js-line-number" data-line-number="6305"></td>
        <td id="LC6305" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint8_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6306" class="blob-num js-line-number" data-line-number="6306"></td>
        <td id="LC6306" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int16_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6307" class="blob-num js-line-number" data-line-number="6307"></td>
        <td id="LC6307" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint16_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6308" class="blob-num js-line-number" data-line-number="6308"></td>
        <td id="LC6308" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int32_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6309" class="blob-num js-line-number" data-line-number="6309"></td>
        <td id="LC6309" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint32_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6310" class="blob-num js-line-number" data-line-number="6310"></td>
        <td id="LC6310" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int64_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6311" class="blob-num js-line-number" data-line-number="6311"></td>
        <td id="LC6311" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint64_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6312" class="blob-num js-line-number" data-line-number="6312"></td>
        <td id="LC6312" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">float</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6313" class="blob-num js-line-number" data-line-number="6313"></td>
        <td id="LC6313" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">double</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6314" class="blob-num js-line-number" data-line-number="6314"></td>
        <td id="LC6314" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, std::string &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6315" class="blob-num js-line-number" data-line-number="6315"></td>
        <td id="LC6315" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6316" class="blob-num js-line-number" data-line-number="6316"></td>
        <td id="LC6316" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> T&gt;</td>
      </tr>
      <tr>
        <td id="L6317" class="blob-num js-line-number" data-line-number="6317"></td>
        <td id="LC6317" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> &amp;id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, T &amp;value) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L6318" class="blob-num js-line-number" data-line-number="6318"></td>
        <td id="LC6318" class="blob-code blob-code-inner js-file-line">        (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L6319" class="blob-num js-line-number" data-line-number="6319"></td>
        <td id="LC6319" class="blob-code blob-code-inner js-file-line">        (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L6320" class="blob-num js-line-number" data-line-number="6320"></td>
        <td id="LC6320" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6321" class="blob-num js-line-number" data-line-number="6321"></td>
        <td id="LC6321" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">encode</span>(m_buffer, name);</td>
      </tr>
      <tr>
        <td id="L6322" class="blob-num js-line-number" data-line-number="6322"></td>
        <td id="LC6322" class="blob-code blob-code-inner js-file-line">        {</td>
      </tr>
      <tr>
        <td id="L6323" class="blob-num js-line-number" data-line-number="6323"></td>
        <td id="LC6323" class="blob-code blob-code-inner js-file-line">            cluon::ToMsgPackVisitor nestedMsgPackEncoder;</td>
      </tr>
      <tr>
        <td id="L6324" class="blob-num js-line-number" data-line-number="6324"></td>
        <td id="LC6324" class="blob-code blob-code-inner js-file-line">            value.<span class="pl-c1">accept</span>(nestedMsgPackEncoder);</td>
      </tr>
      <tr>
        <td id="L6325" class="blob-num js-line-number" data-line-number="6325"></td>
        <td id="LC6325" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">const</span> std::string tmp{nestedMsgPackEncoder.<span class="pl-c1">encodedData</span>()};</td>
      </tr>
      <tr>
        <td id="L6326" class="blob-num js-line-number" data-line-number="6326"></td>
        <td id="LC6326" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">const</span> <span class="pl-c1">uint32_t</span> LENGTH{<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint32_t</span>&gt;(tmp.<span class="pl-c1">size</span>())};</td>
      </tr>
      <tr>
        <td id="L6327" class="blob-num js-line-number" data-line-number="6327"></td>
        <td id="LC6327" class="blob-code blob-code-inner js-file-line">            m_buffer.<span class="pl-c1">write</span>(tmp.<span class="pl-c1">c_str</span>(), <span class="pl-k">static_cast</span>&lt;std::streamsize&gt;(LENGTH));</td>
      </tr>
      <tr>
        <td id="L6328" class="blob-num js-line-number" data-line-number="6328"></td>
        <td id="LC6328" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L6329" class="blob-num js-line-number" data-line-number="6329"></td>
        <td id="LC6329" class="blob-code blob-code-inner js-file-line">        m_numberOfFields++;</td>
      </tr>
      <tr>
        <td id="L6330" class="blob-num js-line-number" data-line-number="6330"></td>
        <td id="LC6330" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L6331" class="blob-num js-line-number" data-line-number="6331"></td>
        <td id="LC6331" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6332" class="blob-num js-line-number" data-line-number="6332"></td>
        <td id="LC6332" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L6333" class="blob-num js-line-number" data-line-number="6333"></td>
        <td id="LC6333" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">encode</span>(std::ostream &amp;o, <span class="pl-k">const</span> std::string &amp;s);</td>
      </tr>
      <tr>
        <td id="L6334" class="blob-num js-line-number" data-line-number="6334"></td>
        <td id="LC6334" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">encodeUint</span>(std::ostream &amp;o, <span class="pl-c1">uint64_t</span> v);</td>
      </tr>
      <tr>
        <td id="L6335" class="blob-num js-line-number" data-line-number="6335"></td>
        <td id="LC6335" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">encodeInt</span>(std::ostream &amp;o, <span class="pl-c1">int64_t</span> v);</td>
      </tr>
      <tr>
        <td id="L6336" class="blob-num js-line-number" data-line-number="6336"></td>
        <td id="LC6336" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6337" class="blob-num js-line-number" data-line-number="6337"></td>
        <td id="LC6337" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L6338" class="blob-num js-line-number" data-line-number="6338"></td>
        <td id="LC6338" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">uint32_t</span> m_numberOfFields{<span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L6339" class="blob-num js-line-number" data-line-number="6339"></td>
        <td id="LC6339" class="blob-code blob-code-inner js-file-line">    std::stringstream m_buffer{<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>};</td>
      </tr>
      <tr>
        <td id="L6340" class="blob-num js-line-number" data-line-number="6340"></td>
        <td id="LC6340" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L6341" class="blob-num js-line-number" data-line-number="6341"></td>
        <td id="LC6341" class="blob-code blob-code-inner js-file-line">} <span class="pl-c"><span class="pl-c">//</span> namespace cluon</span></td>
      </tr>
      <tr>
        <td id="L6342" class="blob-num js-line-number" data-line-number="6342"></td>
        <td id="LC6342" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6343" class="blob-num js-line-number" data-line-number="6343"></td>
        <td id="LC6343" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L6344" class="blob-num js-line-number" data-line-number="6344"></td>
        <td id="LC6344" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L6345" class="blob-num js-line-number" data-line-number="6345"></td>
        <td id="LC6345" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Copyright (C) 2018  Christian Berger</span></td>
      </tr>
      <tr>
        <td id="L6346" class="blob-num js-line-number" data-line-number="6346"></td>
        <td id="LC6346" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L6347" class="blob-num js-line-number" data-line-number="6347"></td>
        <td id="LC6347" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is free software: you can redistribute it and/or modify</span></td>
      </tr>
      <tr>
        <td id="L6348" class="blob-num js-line-number" data-line-number="6348"></td>
        <td id="LC6348" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * it under the terms of the GNU General Public License as published by</span></td>
      </tr>
      <tr>
        <td id="L6349" class="blob-num js-line-number" data-line-number="6349"></td>
        <td id="LC6349" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * the Free Software Foundation, either version 3 of the License, or</span></td>
      </tr>
      <tr>
        <td id="L6350" class="blob-num js-line-number" data-line-number="6350"></td>
        <td id="LC6350" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * (at your option) any later version.</span></td>
      </tr>
      <tr>
        <td id="L6351" class="blob-num js-line-number" data-line-number="6351"></td>
        <td id="LC6351" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L6352" class="blob-num js-line-number" data-line-number="6352"></td>
        <td id="LC6352" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is distributed in the hope that it will be useful,</span></td>
      </tr>
      <tr>
        <td id="L6353" class="blob-num js-line-number" data-line-number="6353"></td>
        <td id="LC6353" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></td>
      </tr>
      <tr>
        <td id="L6354" class="blob-num js-line-number" data-line-number="6354"></td>
        <td id="LC6354" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></td>
      </tr>
      <tr>
        <td id="L6355" class="blob-num js-line-number" data-line-number="6355"></td>
        <td id="LC6355" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * GNU General Public License for more details.</span></td>
      </tr>
      <tr>
        <td id="L6356" class="blob-num js-line-number" data-line-number="6356"></td>
        <td id="LC6356" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L6357" class="blob-num js-line-number" data-line-number="6357"></td>
        <td id="LC6357" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * You should have received a copy of the GNU General Public License</span></td>
      </tr>
      <tr>
        <td id="L6358" class="blob-num js-line-number" data-line-number="6358"></td>
        <td id="LC6358" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></td>
      </tr>
      <tr>
        <td id="L6359" class="blob-num js-line-number" data-line-number="6359"></td>
        <td id="LC6359" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L6360" class="blob-num js-line-number" data-line-number="6360"></td>
        <td id="LC6360" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6361" class="blob-num js-line-number" data-line-number="6361"></td>
        <td id="LC6361" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifndef</span> ENVELOPE_HPP</td>
      </tr>
      <tr>
        <td id="L6362" class="blob-num js-line-number" data-line-number="6362"></td>
        <td id="LC6362" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">define</span> <span class="pl-en">ENVELOPE_HPP</span></td>
      </tr>
      <tr>
        <td id="L6363" class="blob-num js-line-number" data-line-number="6363"></td>
        <td id="LC6363" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6364" class="blob-num js-line-number" data-line-number="6364"></td>
        <td id="LC6364" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/FromProtoVisitor.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L6365" class="blob-num js-line-number" data-line-number="6365"></td>
        <td id="LC6365" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/ToProtoVisitor.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L6366" class="blob-num js-line-number" data-line-number="6366"></td>
        <td id="LC6366" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/cluonDataStructures.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L6367" class="blob-num js-line-number" data-line-number="6367"></td>
        <td id="LC6367" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6368" class="blob-num js-line-number" data-line-number="6368"></td>
        <td id="LC6368" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>array<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L6369" class="blob-num js-line-number" data-line-number="6369"></td>
        <td id="LC6369" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>cstring<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L6370" class="blob-num js-line-number" data-line-number="6370"></td>
        <td id="LC6370" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>istream<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L6371" class="blob-num js-line-number" data-line-number="6371"></td>
        <td id="LC6371" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>sstream<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L6372" class="blob-num js-line-number" data-line-number="6372"></td>
        <td id="LC6372" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>string<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L6373" class="blob-num js-line-number" data-line-number="6373"></td>
        <td id="LC6373" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>utility<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L6374" class="blob-num js-line-number" data-line-number="6374"></td>
        <td id="LC6374" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>vector<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L6375" class="blob-num js-line-number" data-line-number="6375"></td>
        <td id="LC6375" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6376" class="blob-num js-line-number" data-line-number="6376"></td>
        <td id="LC6376" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">cluon</span> {</td>
      </tr>
      <tr>
        <td id="L6377" class="blob-num js-line-number" data-line-number="6377"></td>
        <td id="LC6377" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6378" class="blob-num js-line-number" data-line-number="6378"></td>
        <td id="LC6378" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L6379" class="blob-num js-line-number" data-line-number="6379"></td>
        <td id="LC6379" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This method transforms a given Envelope to a string representation to be</span></td>
      </tr>
      <tr>
        <td id="L6380" class="blob-num js-line-number" data-line-number="6380"></td>
        <td id="LC6380" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * sent to an OpenDaVINCI session.</span></td>
      </tr>
      <tr>
        <td id="L6381" class="blob-num js-line-number" data-line-number="6381"></td>
        <td id="LC6381" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L6382" class="blob-num js-line-number" data-line-number="6382"></td>
        <td id="LC6382" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * @param envelope Envelope with payload to be sent.</span></td>
      </tr>
      <tr>
        <td id="L6383" class="blob-num js-line-number" data-line-number="6383"></td>
        <td id="LC6383" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * @return String representation of the Envelope to be sent to OpenDaVINCI v4.</span></td>
      </tr>
      <tr>
        <td id="L6384" class="blob-num js-line-number" data-line-number="6384"></td>
        <td id="LC6384" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L6385" class="blob-num js-line-number" data-line-number="6385"></td>
        <td id="LC6385" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::string <span class="pl-en">serializeEnvelope</span>(cluon::data::Envelope &amp;&amp;envelope) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L6386" class="blob-num js-line-number" data-line-number="6386"></td>
        <td id="LC6386" class="blob-code blob-code-inner js-file-line">    std::string dataToSend;</td>
      </tr>
      <tr>
        <td id="L6387" class="blob-num js-line-number" data-line-number="6387"></td>
        <td id="LC6387" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="L6388" class="blob-num js-line-number" data-line-number="6388"></td>
        <td id="LC6388" class="blob-code blob-code-inner js-file-line">        cluon::ToProtoVisitor protoEncoder;</td>
      </tr>
      <tr>
        <td id="L6389" class="blob-num js-line-number" data-line-number="6389"></td>
        <td id="LC6389" class="blob-code blob-code-inner js-file-line">        envelope.<span class="pl-c1">accept</span>(protoEncoder);</td>
      </tr>
      <tr>
        <td id="L6390" class="blob-num js-line-number" data-line-number="6390"></td>
        <td id="LC6390" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6391" class="blob-num js-line-number" data-line-number="6391"></td>
        <td id="LC6391" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> std::string tmp{protoEncoder.<span class="pl-c1">encodedData</span>()};</td>
      </tr>
      <tr>
        <td id="L6392" class="blob-num js-line-number" data-line-number="6392"></td>
        <td id="LC6392" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">uint32_t</span> length{<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint32_t</span>&gt;(tmp.<span class="pl-c1">size</span>())};</td>
      </tr>
      <tr>
        <td id="L6393" class="blob-num js-line-number" data-line-number="6393"></td>
        <td id="LC6393" class="blob-code blob-code-inner js-file-line">        length = <span class="pl-c1">htole32</span>(length);</td>
      </tr>
      <tr>
        <td id="L6394" class="blob-num js-line-number" data-line-number="6394"></td>
        <td id="LC6394" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6395" class="blob-num js-line-number" data-line-number="6395"></td>
        <td id="LC6395" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> Add OpenDaVINCI header.</span></td>
      </tr>
      <tr>
        <td id="L6396" class="blob-num js-line-number" data-line-number="6396"></td>
        <td id="LC6396" class="blob-code blob-code-inner js-file-line">        std::array&lt;<span class="pl-k">char</span>, <span class="pl-c1">5</span>&gt; header;</td>
      </tr>
      <tr>
        <td id="L6397" class="blob-num js-line-number" data-line-number="6397"></td>
        <td id="LC6397" class="blob-code blob-code-inner js-file-line">        header[<span class="pl-c1">0</span>] = <span class="pl-k">static_cast</span>&lt;<span class="pl-k">char</span>&gt;(<span class="pl-c1">0x0D</span>);</td>
      </tr>
      <tr>
        <td id="L6398" class="blob-num js-line-number" data-line-number="6398"></td>
        <td id="LC6398" class="blob-code blob-code-inner js-file-line">        header[<span class="pl-c1">1</span>] = <span class="pl-k">static_cast</span>&lt;<span class="pl-k">char</span>&gt;(<span class="pl-c1">0xA4</span>);</td>
      </tr>
      <tr>
        <td id="L6399" class="blob-num js-line-number" data-line-number="6399"></td>
        <td id="LC6399" class="blob-code blob-code-inner js-file-line">        header[<span class="pl-c1">2</span>] = *(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">char</span> *&gt;(&amp;length) + <span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L6400" class="blob-num js-line-number" data-line-number="6400"></td>
        <td id="LC6400" class="blob-code blob-code-inner js-file-line">        header[<span class="pl-c1">3</span>] = *(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">char</span> *&gt;(&amp;length) + <span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L6401" class="blob-num js-line-number" data-line-number="6401"></td>
        <td id="LC6401" class="blob-code blob-code-inner js-file-line">        header[<span class="pl-c1">4</span>] = *(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">char</span> *&gt;(&amp;length) + <span class="pl-c1">2</span>);</td>
      </tr>
      <tr>
        <td id="L6402" class="blob-num js-line-number" data-line-number="6402"></td>
        <td id="LC6402" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6403" class="blob-num js-line-number" data-line-number="6403"></td>
        <td id="LC6403" class="blob-code blob-code-inner js-file-line">        std::stringstream sstr;</td>
      </tr>
      <tr>
        <td id="L6404" class="blob-num js-line-number" data-line-number="6404"></td>
        <td id="LC6404" class="blob-code blob-code-inner js-file-line">        sstr.<span class="pl-c1">write</span>(header.<span class="pl-c1">data</span>(), <span class="pl-k">static_cast</span>&lt;std::streamsize&gt;(header.<span class="pl-c1">size</span>()));</td>
      </tr>
      <tr>
        <td id="L6405" class="blob-num js-line-number" data-line-number="6405"></td>
        <td id="LC6405" class="blob-code blob-code-inner js-file-line">        sstr.<span class="pl-c1">write</span>(tmp.<span class="pl-c1">data</span>(), <span class="pl-k">static_cast</span>&lt;std::streamsize&gt;(tmp.<span class="pl-c1">size</span>()));</td>
      </tr>
      <tr>
        <td id="L6406" class="blob-num js-line-number" data-line-number="6406"></td>
        <td id="LC6406" class="blob-code blob-code-inner js-file-line">        dataToSend = sstr.<span class="pl-c1">str</span>();</td>
      </tr>
      <tr>
        <td id="L6407" class="blob-num js-line-number" data-line-number="6407"></td>
        <td id="LC6407" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L6408" class="blob-num js-line-number" data-line-number="6408"></td>
        <td id="LC6408" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> dataToSend;</td>
      </tr>
      <tr>
        <td id="L6409" class="blob-num js-line-number" data-line-number="6409"></td>
        <td id="LC6409" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L6410" class="blob-num js-line-number" data-line-number="6410"></td>
        <td id="LC6410" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6411" class="blob-num js-line-number" data-line-number="6411"></td>
        <td id="LC6411" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L6412" class="blob-num js-line-number" data-line-number="6412"></td>
        <td id="LC6412" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This method extracts an Envelope from the given istream that holds bytes in</span></td>
      </tr>
      <tr>
        <td id="L6413" class="blob-num js-line-number" data-line-number="6413"></td>
        <td id="LC6413" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * format:</span></td>
      </tr>
      <tr>
        <td id="L6414" class="blob-num js-line-number" data-line-number="6414"></td>
        <td id="LC6414" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L6415" class="blob-num js-line-number" data-line-number="6415"></td>
        <td id="LC6415" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *    0x0D 0xA4 LEN0 LEN1 LEN2 Proto-encoded cluon::data::Envelope</span></td>
      </tr>
      <tr>
        <td id="L6416" class="blob-num js-line-number" data-line-number="6416"></td>
        <td id="LC6416" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L6417" class="blob-num js-line-number" data-line-number="6417"></td>
        <td id="LC6417" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * 0xA4 LEN0 LEN1 LEN2 are little Endian.</span></td>
      </tr>
      <tr>
        <td id="L6418" class="blob-num js-line-number" data-line-number="6418"></td>
        <td id="LC6418" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L6419" class="blob-num js-line-number" data-line-number="6419"></td>
        <td id="LC6419" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * @param in Stream to read from.</span></td>
      </tr>
      <tr>
        <td id="L6420" class="blob-num js-line-number" data-line-number="6420"></td>
        <td id="LC6420" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * @return cluon::data::Envelope.</span></td>
      </tr>
      <tr>
        <td id="L6421" class="blob-num js-line-number" data-line-number="6421"></td>
        <td id="LC6421" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L6422" class="blob-num js-line-number" data-line-number="6422"></td>
        <td id="LC6422" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::pair&lt;<span class="pl-k">bool</span>, cluon::data::Envelope&gt; <span class="pl-en">extractEnvelope</span>(std::istream &amp;in) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L6423" class="blob-num js-line-number" data-line-number="6423"></td>
        <td id="LC6423" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">bool</span> retVal{<span class="pl-c1">false</span>};</td>
      </tr>
      <tr>
        <td id="L6424" class="blob-num js-line-number" data-line-number="6424"></td>
        <td id="LC6424" class="blob-code blob-code-inner js-file-line">    cluon::data::Envelope env;</td>
      </tr>
      <tr>
        <td id="L6425" class="blob-num js-line-number" data-line-number="6425"></td>
        <td id="LC6425" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (in.<span class="pl-c1">good</span>()) {</td>
      </tr>
      <tr>
        <td id="L6426" class="blob-num js-line-number" data-line-number="6426"></td>
        <td id="LC6426" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">constexpr</span> <span class="pl-c1">uint8_t</span> OD4_HEADER_SIZE{<span class="pl-c1">5</span>};</td>
      </tr>
      <tr>
        <td id="L6427" class="blob-num js-line-number" data-line-number="6427"></td>
        <td id="LC6427" class="blob-code blob-code-inner js-file-line">        std::vector&lt;<span class="pl-k">char</span>&gt; buffer;</td>
      </tr>
      <tr>
        <td id="L6428" class="blob-num js-line-number" data-line-number="6428"></td>
        <td id="LC6428" class="blob-code blob-code-inner js-file-line">        buffer.<span class="pl-c1">reserve</span>(OD4_HEADER_SIZE);</td>
      </tr>
      <tr>
        <td id="L6429" class="blob-num js-line-number" data-line-number="6429"></td>
        <td id="LC6429" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifdef</span> WIN32                                           <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L6430" class="blob-num js-line-number" data-line-number="6430"></td>
        <td id="LC6430" class="blob-code blob-code-inner js-file-line">        buffer.<span class="pl-c1">clear</span>();                                <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L6431" class="blob-num js-line-number" data-line-number="6431"></td>
        <td id="LC6431" class="blob-code blob-code-inner js-file-line">        retVal = <span class="pl-c1">true</span>;                                 <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L6432" class="blob-num js-line-number" data-line-number="6432"></td>
        <td id="LC6432" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">for</span> (<span class="pl-c1">uint8_t</span> i{<span class="pl-c1">0</span>}; i &lt; OD4_HEADER_SIZE; i++) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L6433" class="blob-num js-line-number" data-line-number="6433"></td>
        <td id="LC6433" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">char</span> c;                                    <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L6434" class="blob-num js-line-number" data-line-number="6434"></td>
        <td id="LC6434" class="blob-code blob-code-inner js-file-line">            in.<span class="pl-c1">get</span>(c);                                 <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L6435" class="blob-num js-line-number" data-line-number="6435"></td>
        <td id="LC6435" class="blob-code blob-code-inner js-file-line">            retVal &amp;= in.<span class="pl-c1">good</span>();                       <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L6436" class="blob-num js-line-number" data-line-number="6436"></td>
        <td id="LC6436" class="blob-code blob-code-inner js-file-line">            buffer.<span class="pl-c1">push_back</span>(c);                       <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L6437" class="blob-num js-line-number" data-line-number="6437"></td>
        <td id="LC6437" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L6438" class="blob-num js-line-number" data-line-number="6438"></td>
        <td id="LC6438" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (retVal) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L6439" class="blob-num js-line-number" data-line-number="6439"></td>
        <td id="LC6439" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">else</span>                 <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L6440" class="blob-num js-line-number" data-line-number="6440"></td>
        <td id="LC6440" class="blob-code blob-code-inner js-file-line">        in.<span class="pl-c1">read</span>(&amp;buffer[<span class="pl-c1">0</span>], OD4_HEADER_SIZE);</td>
      </tr>
      <tr>
        <td id="L6441" class="blob-num js-line-number" data-line-number="6441"></td>
        <td id="LC6441" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (OD4_HEADER_SIZE == in.<span class="pl-c1">gcount</span>()) {</td>
      </tr>
      <tr>
        <td id="L6442" class="blob-num js-line-number" data-line-number="6442"></td>
        <td id="LC6442" class="blob-code blob-code-inner js-file-line">#endif</td>
      </tr>
      <tr>
        <td id="L6443" class="blob-num js-line-number" data-line-number="6443"></td>
        <td id="LC6443" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> ((<span class="pl-c1">0x0D</span> == <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(buffer[<span class="pl-c1">0</span>])) &amp;&amp; (<span class="pl-c1">0xA4</span> == <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(buffer[<span class="pl-c1">1</span>]))) {</td>
      </tr>
      <tr>
        <td id="L6444" class="blob-num js-line-number" data-line-number="6444"></td>
        <td id="LC6444" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">const</span> <span class="pl-c1">uint32_t</span> LENGTH{<span class="pl-c1">le32toh</span>(*<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-c1">uint32_t</span> *&gt;(&amp;buffer[<span class="pl-c1">1</span>])) &gt;&gt; <span class="pl-c1">8</span>};</td>
      </tr>
      <tr>
        <td id="L6445" class="blob-num js-line-number" data-line-number="6445"></td>
        <td id="LC6445" class="blob-code blob-code-inner js-file-line">                buffer.<span class="pl-c1">reserve</span>(LENGTH);</td>
      </tr>
      <tr>
        <td id="L6446" class="blob-num js-line-number" data-line-number="6446"></td>
        <td id="LC6446" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifdef</span> WIN32                                          <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L6447" class="blob-num js-line-number" data-line-number="6447"></td>
        <td id="LC6447" class="blob-code blob-code-inner js-file-line">                buffer.<span class="pl-c1">clear</span>();                       <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L6448" class="blob-num js-line-number" data-line-number="6448"></td>
        <td id="LC6448" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">for</span> (<span class="pl-c1">uint8_t</span> i{<span class="pl-c1">0</span>}; i &lt; LENGTH; i++) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L6449" class="blob-num js-line-number" data-line-number="6449"></td>
        <td id="LC6449" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">char</span> c;                           <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L6450" class="blob-num js-line-number" data-line-number="6450"></td>
        <td id="LC6450" class="blob-code blob-code-inner js-file-line">                    in.<span class="pl-c1">get</span>(c);                        <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L6451" class="blob-num js-line-number" data-line-number="6451"></td>
        <td id="LC6451" class="blob-code blob-code-inner js-file-line">                    retVal &amp;= in.<span class="pl-c1">good</span>();              <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L6452" class="blob-num js-line-number" data-line-number="6452"></td>
        <td id="LC6452" class="blob-code blob-code-inner js-file-line">                    buffer.<span class="pl-c1">push_back</span>(c);              <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L6453" class="blob-num js-line-number" data-line-number="6453"></td>
        <td id="LC6453" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L6454" class="blob-num js-line-number" data-line-number="6454"></td>
        <td id="LC6454" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">else</span> <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L6455" class="blob-num js-line-number" data-line-number="6455"></td>
        <td id="LC6455" class="blob-code blob-code-inner js-file-line">                in.<span class="pl-c1">read</span>(&amp;buffer[<span class="pl-c1">0</span>], <span class="pl-k">static_cast</span>&lt;std::streamsize&gt;(LENGTH));</td>
      </tr>
      <tr>
        <td id="L6456" class="blob-num js-line-number" data-line-number="6456"></td>
        <td id="LC6456" class="blob-code blob-code-inner js-file-line">                retVal = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int32_t</span>&gt;(LENGTH) == in.<span class="pl-c1">gcount</span>();</td>
      </tr>
      <tr>
        <td id="L6457" class="blob-num js-line-number" data-line-number="6457"></td>
        <td id="LC6457" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L6458" class="blob-num js-line-number" data-line-number="6458"></td>
        <td id="LC6458" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">if</span> (retVal) {</td>
      </tr>
      <tr>
        <td id="L6459" class="blob-num js-line-number" data-line-number="6459"></td>
        <td id="LC6459" class="blob-code blob-code-inner js-file-line">                    std::stringstream <span class="pl-smi">sstr</span>(<span class="pl-c1">std::string</span>(buffer.<span class="pl-c1">begin</span>(), buffer.<span class="pl-c1">begin</span>() + <span class="pl-k">static_cast</span>&lt;std::streamsize&gt;(LENGTH)));</td>
      </tr>
      <tr>
        <td id="L6460" class="blob-num js-line-number" data-line-number="6460"></td>
        <td id="LC6460" class="blob-code blob-code-inner js-file-line">                    cluon::FromProtoVisitor protoDecoder;</td>
      </tr>
      <tr>
        <td id="L6461" class="blob-num js-line-number" data-line-number="6461"></td>
        <td id="LC6461" class="blob-code blob-code-inner js-file-line">                    protoDecoder.<span class="pl-c1">decodeFrom</span>(sstr);</td>
      </tr>
      <tr>
        <td id="L6462" class="blob-num js-line-number" data-line-number="6462"></td>
        <td id="LC6462" class="blob-code blob-code-inner js-file-line">                    env.<span class="pl-c1">accept</span>(protoDecoder);</td>
      </tr>
      <tr>
        <td id="L6463" class="blob-num js-line-number" data-line-number="6463"></td>
        <td id="LC6463" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L6464" class="blob-num js-line-number" data-line-number="6464"></td>
        <td id="LC6464" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L6465" class="blob-num js-line-number" data-line-number="6465"></td>
        <td id="LC6465" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L6466" class="blob-num js-line-number" data-line-number="6466"></td>
        <td id="LC6466" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L6467" class="blob-num js-line-number" data-line-number="6467"></td>
        <td id="LC6467" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-c1">std::make_pair</span>(retVal, env);</td>
      </tr>
      <tr>
        <td id="L6468" class="blob-num js-line-number" data-line-number="6468"></td>
        <td id="LC6468" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L6469" class="blob-num js-line-number" data-line-number="6469"></td>
        <td id="LC6469" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6470" class="blob-num js-line-number" data-line-number="6470"></td>
        <td id="LC6470" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L6471" class="blob-num js-line-number" data-line-number="6471"></td>
        <td id="LC6471" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * @return Extract a given Envelope&#39;s payload into the desired type.</span></td>
      </tr>
      <tr>
        <td id="L6472" class="blob-num js-line-number" data-line-number="6472"></td>
        <td id="LC6472" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L6473" class="blob-num js-line-number" data-line-number="6473"></td>
        <td id="LC6473" class="blob-code blob-code-inner js-file-line"><span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> T&gt;</td>
      </tr>
      <tr>
        <td id="L6474" class="blob-num js-line-number" data-line-number="6474"></td>
        <td id="LC6474" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> T <span class="pl-smi">extractMessage</span>(cluon::data::Envelope &amp;&amp;envelope) noexcept {</td>
      </tr>
      <tr>
        <td id="L6475" class="blob-num js-line-number" data-line-number="6475"></td>
        <td id="LC6475" class="blob-code blob-code-inner js-file-line">    cluon::FromProtoVisitor decoder;</td>
      </tr>
      <tr>
        <td id="L6476" class="blob-num js-line-number" data-line-number="6476"></td>
        <td id="LC6476" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6477" class="blob-num js-line-number" data-line-number="6477"></td>
        <td id="LC6477" class="blob-code blob-code-inner js-file-line">    std::stringstream <span class="pl-smi">sstr</span>(envelope.<span class="pl-c1">serializedData</span>());</td>
      </tr>
      <tr>
        <td id="L6478" class="blob-num js-line-number" data-line-number="6478"></td>
        <td id="LC6478" class="blob-code blob-code-inner js-file-line">    decoder.<span class="pl-c1">decodeFrom</span>(sstr);</td>
      </tr>
      <tr>
        <td id="L6479" class="blob-num js-line-number" data-line-number="6479"></td>
        <td id="LC6479" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6480" class="blob-num js-line-number" data-line-number="6480"></td>
        <td id="LC6480" class="blob-code blob-code-inner js-file-line">    T msg;</td>
      </tr>
      <tr>
        <td id="L6481" class="blob-num js-line-number" data-line-number="6481"></td>
        <td id="LC6481" class="blob-code blob-code-inner js-file-line">    msg.<span class="pl-c1">accept</span>(decoder);</td>
      </tr>
      <tr>
        <td id="L6482" class="blob-num js-line-number" data-line-number="6482"></td>
        <td id="LC6482" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6483" class="blob-num js-line-number" data-line-number="6483"></td>
        <td id="LC6483" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> msg;</td>
      </tr>
      <tr>
        <td id="L6484" class="blob-num js-line-number" data-line-number="6484"></td>
        <td id="LC6484" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L6485" class="blob-num js-line-number" data-line-number="6485"></td>
        <td id="LC6485" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6486" class="blob-num js-line-number" data-line-number="6486"></td>
        <td id="LC6486" class="blob-code blob-code-inner js-file-line">} <span class="pl-c"><span class="pl-c">//</span> namespace cluon</span></td>
      </tr>
      <tr>
        <td id="L6487" class="blob-num js-line-number" data-line-number="6487"></td>
        <td id="LC6487" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6488" class="blob-num js-line-number" data-line-number="6488"></td>
        <td id="LC6488" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L6489" class="blob-num js-line-number" data-line-number="6489"></td>
        <td id="LC6489" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L6490" class="blob-num js-line-number" data-line-number="6490"></td>
        <td id="LC6490" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Copyright (C) 2017-2018  Christian Berger</span></td>
      </tr>
      <tr>
        <td id="L6491" class="blob-num js-line-number" data-line-number="6491"></td>
        <td id="LC6491" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L6492" class="blob-num js-line-number" data-line-number="6492"></td>
        <td id="LC6492" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is free software: you can redistribute it and/or modify</span></td>
      </tr>
      <tr>
        <td id="L6493" class="blob-num js-line-number" data-line-number="6493"></td>
        <td id="LC6493" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * it under the terms of the GNU General Public License as published by</span></td>
      </tr>
      <tr>
        <td id="L6494" class="blob-num js-line-number" data-line-number="6494"></td>
        <td id="LC6494" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * the Free Software Foundation, either version 3 of the License, or</span></td>
      </tr>
      <tr>
        <td id="L6495" class="blob-num js-line-number" data-line-number="6495"></td>
        <td id="LC6495" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * (at your option) any later version.</span></td>
      </tr>
      <tr>
        <td id="L6496" class="blob-num js-line-number" data-line-number="6496"></td>
        <td id="LC6496" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L6497" class="blob-num js-line-number" data-line-number="6497"></td>
        <td id="LC6497" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is distributed in the hope that it will be useful,</span></td>
      </tr>
      <tr>
        <td id="L6498" class="blob-num js-line-number" data-line-number="6498"></td>
        <td id="LC6498" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></td>
      </tr>
      <tr>
        <td id="L6499" class="blob-num js-line-number" data-line-number="6499"></td>
        <td id="LC6499" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></td>
      </tr>
      <tr>
        <td id="L6500" class="blob-num js-line-number" data-line-number="6500"></td>
        <td id="LC6500" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * GNU General Public License for more details.</span></td>
      </tr>
      <tr>
        <td id="L6501" class="blob-num js-line-number" data-line-number="6501"></td>
        <td id="LC6501" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L6502" class="blob-num js-line-number" data-line-number="6502"></td>
        <td id="LC6502" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * You should have received a copy of the GNU General Public License</span></td>
      </tr>
      <tr>
        <td id="L6503" class="blob-num js-line-number" data-line-number="6503"></td>
        <td id="LC6503" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></td>
      </tr>
      <tr>
        <td id="L6504" class="blob-num js-line-number" data-line-number="6504"></td>
        <td id="LC6504" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L6505" class="blob-num js-line-number" data-line-number="6505"></td>
        <td id="LC6505" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6506" class="blob-num js-line-number" data-line-number="6506"></td>
        <td id="LC6506" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifndef</span> ENVELOPECONVERTER_HPP</td>
      </tr>
      <tr>
        <td id="L6507" class="blob-num js-line-number" data-line-number="6507"></td>
        <td id="LC6507" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">define</span> <span class="pl-en">ENVELOPECONVERTER_HPP</span></td>
      </tr>
      <tr>
        <td id="L6508" class="blob-num js-line-number" data-line-number="6508"></td>
        <td id="LC6508" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6509" class="blob-num js-line-number" data-line-number="6509"></td>
        <td id="LC6509" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/MetaMessage.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L6510" class="blob-num js-line-number" data-line-number="6510"></td>
        <td id="LC6510" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/cluon.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L6511" class="blob-num js-line-number" data-line-number="6511"></td>
        <td id="LC6511" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/cluonDataStructures.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L6512" class="blob-num js-line-number" data-line-number="6512"></td>
        <td id="LC6512" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6513" class="blob-num js-line-number" data-line-number="6513"></td>
        <td id="LC6513" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>cstdint<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L6514" class="blob-num js-line-number" data-line-number="6514"></td>
        <td id="LC6514" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>map<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L6515" class="blob-num js-line-number" data-line-number="6515"></td>
        <td id="LC6515" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>string<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L6516" class="blob-num js-line-number" data-line-number="6516"></td>
        <td id="LC6516" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>vector<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L6517" class="blob-num js-line-number" data-line-number="6517"></td>
        <td id="LC6517" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6518" class="blob-num js-line-number" data-line-number="6518"></td>
        <td id="LC6518" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">cluon</span> {</td>
      </tr>
      <tr>
        <td id="L6519" class="blob-num js-line-number" data-line-number="6519"></td>
        <td id="LC6519" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L6520" class="blob-num js-line-number" data-line-number="6520"></td>
        <td id="LC6520" class="blob-code blob-code-inner js-file-line"><span class="pl-c">This class provides various conversion functions to and from Envelope data structures.</span></td>
      </tr>
      <tr>
        <td id="L6521" class="blob-num js-line-number" data-line-number="6521"></td>
        <td id="LC6521" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L6522" class="blob-num js-line-number" data-line-number="6522"></td>
        <td id="LC6522" class="blob-code blob-code-inner js-file-line"><span class="pl-k">class</span> <span class="pl-en">LIBCLUON_API</span> EnvelopeConverter {</td>
      </tr>
      <tr>
        <td id="L6523" class="blob-num js-line-number" data-line-number="6523"></td>
        <td id="LC6523" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L6524" class="blob-num js-line-number" data-line-number="6524"></td>
        <td id="LC6524" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">EnvelopeConverter</span>(<span class="pl-k">const</span> EnvelopeConverter &amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L6525" class="blob-num js-line-number" data-line-number="6525"></td>
        <td id="LC6525" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">EnvelopeConverter</span>(EnvelopeConverter &amp;&amp;)      = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L6526" class="blob-num js-line-number" data-line-number="6526"></td>
        <td id="LC6526" class="blob-code blob-code-inner js-file-line">    EnvelopeConverter &amp;<span class="pl-k">operator</span>=(<span class="pl-k">const</span> EnvelopeConverter &amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L6527" class="blob-num js-line-number" data-line-number="6527"></td>
        <td id="LC6527" class="blob-code blob-code-inner js-file-line">    EnvelopeConverter &amp;<span class="pl-k">operator</span>=(EnvelopeConverter &amp;&amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L6528" class="blob-num js-line-number" data-line-number="6528"></td>
        <td id="LC6528" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6529" class="blob-num js-line-number" data-line-number="6529"></td>
        <td id="LC6529" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L6530" class="blob-num js-line-number" data-line-number="6530"></td>
        <td id="LC6530" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">EnvelopeConverter</span>() = <span class="pl-k">default</span>;</td>
      </tr>
      <tr>
        <td id="L6531" class="blob-num js-line-number" data-line-number="6531"></td>
        <td id="LC6531" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6532" class="blob-num js-line-number" data-line-number="6532"></td>
        <td id="LC6532" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L6533" class="blob-num js-line-number" data-line-number="6533"></td>
        <td id="LC6533" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * This method sets the message specification to be used for</span></td>
      </tr>
      <tr>
        <td id="L6534" class="blob-num js-line-number" data-line-number="6534"></td>
        <td id="LC6534" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * interpreting a given Proto-encoded Envelope.</span></td>
      </tr>
      <tr>
        <td id="L6535" class="blob-num js-line-number" data-line-number="6535"></td>
        <td id="LC6535" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     *</span></td>
      </tr>
      <tr>
        <td id="L6536" class="blob-num js-line-number" data-line-number="6536"></td>
        <td id="LC6536" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param ms Message specification following the ODVD format.</span></td>
      </tr>
      <tr>
        <td id="L6537" class="blob-num js-line-number" data-line-number="6537"></td>
        <td id="LC6537" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @return -1 in case of invalid message specification; otherwise, number</span></td>
      </tr>
      <tr>
        <td id="L6538" class="blob-num js-line-number" data-line-number="6538"></td>
        <td id="LC6538" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     *         of successfully parsed messages from given message specification.</span></td>
      </tr>
      <tr>
        <td id="L6539" class="blob-num js-line-number" data-line-number="6539"></td>
        <td id="LC6539" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L6540" class="blob-num js-line-number" data-line-number="6540"></td>
        <td id="LC6540" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">int32_t</span> <span class="pl-en">setMessageSpecification</span>(<span class="pl-k">const</span> std::string &amp;ms) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6541" class="blob-num js-line-number" data-line-number="6541"></td>
        <td id="LC6541" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6542" class="blob-num js-line-number" data-line-number="6542"></td>
        <td id="LC6542" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L6543" class="blob-num js-line-number" data-line-number="6543"></td>
        <td id="LC6543" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * This method transforms the given Proto-encoded Envelope to JSON. The</span></td>
      </tr>
      <tr>
        <td id="L6544" class="blob-num js-line-number" data-line-number="6544"></td>
        <td id="LC6544" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * Proto-encoded envelope might be preceded with a 5-bytes OD4-header (optional).</span></td>
      </tr>
      <tr>
        <td id="L6545" class="blob-num js-line-number" data-line-number="6545"></td>
        <td id="LC6545" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     *</span></td>
      </tr>
      <tr>
        <td id="L6546" class="blob-num js-line-number" data-line-number="6546"></td>
        <td id="LC6546" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param protoEncodedEnvelope Proto-encoded Envelope.</span></td>
      </tr>
      <tr>
        <td id="L6547" class="blob-num js-line-number" data-line-number="6547"></td>
        <td id="LC6547" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @return JSON representation from given Proto-encoded Envelope using the</span></td>
      </tr>
      <tr>
        <td id="L6548" class="blob-num js-line-number" data-line-number="6548"></td>
        <td id="LC6548" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     *         given message specification.</span></td>
      </tr>
      <tr>
        <td id="L6549" class="blob-num js-line-number" data-line-number="6549"></td>
        <td id="LC6549" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L6550" class="blob-num js-line-number" data-line-number="6550"></td>
        <td id="LC6550" class="blob-code blob-code-inner js-file-line">    std::string <span class="pl-en">getJSONFromProtoEncodedEnvelope</span>(<span class="pl-k">const</span> std::string &amp;protoEncodedEnvelope) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6551" class="blob-num js-line-number" data-line-number="6551"></td>
        <td id="LC6551" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6552" class="blob-num js-line-number" data-line-number="6552"></td>
        <td id="LC6552" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L6553" class="blob-num js-line-number" data-line-number="6553"></td>
        <td id="LC6553" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * This method transforms the given Envelope to JSON.</span></td>
      </tr>
      <tr>
        <td id="L6554" class="blob-num js-line-number" data-line-number="6554"></td>
        <td id="LC6554" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     *</span></td>
      </tr>
      <tr>
        <td id="L6555" class="blob-num js-line-number" data-line-number="6555"></td>
        <td id="LC6555" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param envelope Envelope.</span></td>
      </tr>
      <tr>
        <td id="L6556" class="blob-num js-line-number" data-line-number="6556"></td>
        <td id="LC6556" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @return JSON representation from given Envelope using the given message specification.</span></td>
      </tr>
      <tr>
        <td id="L6557" class="blob-num js-line-number" data-line-number="6557"></td>
        <td id="LC6557" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L6558" class="blob-num js-line-number" data-line-number="6558"></td>
        <td id="LC6558" class="blob-code blob-code-inner js-file-line">    std::string <span class="pl-en">getJSONFromEnvelope</span>(cluon::data::Envelope &amp;envelope) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6559" class="blob-num js-line-number" data-line-number="6559"></td>
        <td id="LC6559" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6560" class="blob-num js-line-number" data-line-number="6560"></td>
        <td id="LC6560" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L6561" class="blob-num js-line-number" data-line-number="6561"></td>
        <td id="LC6561" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * This method transforms a given JSON representation into a Proto-encoded Envelope</span></td>
      </tr>
      <tr>
        <td id="L6562" class="blob-num js-line-number" data-line-number="6562"></td>
        <td id="LC6562" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * including the prepended OD4-header.</span></td>
      </tr>
      <tr>
        <td id="L6563" class="blob-num js-line-number" data-line-number="6563"></td>
        <td id="LC6563" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     *</span></td>
      </tr>
      <tr>
        <td id="L6564" class="blob-num js-line-number" data-line-number="6564"></td>
        <td id="LC6564" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param json representation according to the given message specification.</span></td>
      </tr>
      <tr>
        <td id="L6565" class="blob-num js-line-number" data-line-number="6565"></td>
        <td id="LC6565" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param messageIdentifier The given JSON representation shall be interpreted</span></td>
      </tr>
      <tr>
        <td id="L6566" class="blob-num js-line-number" data-line-number="6566"></td>
        <td id="LC6566" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     *        as the specified message.</span></td>
      </tr>
      <tr>
        <td id="L6567" class="blob-num js-line-number" data-line-number="6567"></td>
        <td id="LC6567" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @return Proto-encoded Envelope including OD4-header or empty string.</span></td>
      </tr>
      <tr>
        <td id="L6568" class="blob-num js-line-number" data-line-number="6568"></td>
        <td id="LC6568" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L6569" class="blob-num js-line-number" data-line-number="6569"></td>
        <td id="LC6569" class="blob-code blob-code-inner js-file-line">    std::string <span class="pl-en">getProtoEncodedEnvelopeFromJSONWithoutTimeStamps</span>(<span class="pl-k">const</span> std::string &amp;json, <span class="pl-c1">int32_t</span> messageIdentifier) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6570" class="blob-num js-line-number" data-line-number="6570"></td>
        <td id="LC6570" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6571" class="blob-num js-line-number" data-line-number="6571"></td>
        <td id="LC6571" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L6572" class="blob-num js-line-number" data-line-number="6572"></td>
        <td id="LC6572" class="blob-code blob-code-inner js-file-line">    std::vector&lt;cluon::MetaMessage&gt; m_listOfMetaMessages{};</td>
      </tr>
      <tr>
        <td id="L6573" class="blob-num js-line-number" data-line-number="6573"></td>
        <td id="LC6573" class="blob-code blob-code-inner js-file-line">    std::map&lt;<span class="pl-c1">int32_t</span>, cluon::MetaMessage&gt; m_scopeOfMetaMessages{};</td>
      </tr>
      <tr>
        <td id="L6574" class="blob-num js-line-number" data-line-number="6574"></td>
        <td id="LC6574" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L6575" class="blob-num js-line-number" data-line-number="6575"></td>
        <td id="LC6575" class="blob-code blob-code-inner js-file-line">} <span class="pl-c"><span class="pl-c">//</span> namespace cluon</span></td>
      </tr>
      <tr>
        <td id="L6576" class="blob-num js-line-number" data-line-number="6576"></td>
        <td id="LC6576" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L6577" class="blob-num js-line-number" data-line-number="6577"></td>
        <td id="LC6577" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L6578" class="blob-num js-line-number" data-line-number="6578"></td>
        <td id="LC6578" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Copyright (C) 2017-2018  Christian Berger</span></td>
      </tr>
      <tr>
        <td id="L6579" class="blob-num js-line-number" data-line-number="6579"></td>
        <td id="LC6579" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L6580" class="blob-num js-line-number" data-line-number="6580"></td>
        <td id="LC6580" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is free software: you can redistribute it and/or modify</span></td>
      </tr>
      <tr>
        <td id="L6581" class="blob-num js-line-number" data-line-number="6581"></td>
        <td id="LC6581" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * it under the terms of the GNU General Public License as published by</span></td>
      </tr>
      <tr>
        <td id="L6582" class="blob-num js-line-number" data-line-number="6582"></td>
        <td id="LC6582" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * the Free Software Foundation, either version 3 of the License, or</span></td>
      </tr>
      <tr>
        <td id="L6583" class="blob-num js-line-number" data-line-number="6583"></td>
        <td id="LC6583" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * (at your option) any later version.</span></td>
      </tr>
      <tr>
        <td id="L6584" class="blob-num js-line-number" data-line-number="6584"></td>
        <td id="LC6584" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L6585" class="blob-num js-line-number" data-line-number="6585"></td>
        <td id="LC6585" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is distributed in the hope that it will be useful,</span></td>
      </tr>
      <tr>
        <td id="L6586" class="blob-num js-line-number" data-line-number="6586"></td>
        <td id="LC6586" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></td>
      </tr>
      <tr>
        <td id="L6587" class="blob-num js-line-number" data-line-number="6587"></td>
        <td id="LC6587" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></td>
      </tr>
      <tr>
        <td id="L6588" class="blob-num js-line-number" data-line-number="6588"></td>
        <td id="LC6588" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * GNU General Public License for more details.</span></td>
      </tr>
      <tr>
        <td id="L6589" class="blob-num js-line-number" data-line-number="6589"></td>
        <td id="LC6589" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L6590" class="blob-num js-line-number" data-line-number="6590"></td>
        <td id="LC6590" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * You should have received a copy of the GNU General Public License</span></td>
      </tr>
      <tr>
        <td id="L6591" class="blob-num js-line-number" data-line-number="6591"></td>
        <td id="LC6591" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></td>
      </tr>
      <tr>
        <td id="L6592" class="blob-num js-line-number" data-line-number="6592"></td>
        <td id="LC6592" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L6593" class="blob-num js-line-number" data-line-number="6593"></td>
        <td id="LC6593" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6594" class="blob-num js-line-number" data-line-number="6594"></td>
        <td id="LC6594" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifndef</span> GENERICMESSAGE_HPP</td>
      </tr>
      <tr>
        <td id="L6595" class="blob-num js-line-number" data-line-number="6595"></td>
        <td id="LC6595" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">define</span> <span class="pl-en">GENERICMESSAGE_HPP</span></td>
      </tr>
      <tr>
        <td id="L6596" class="blob-num js-line-number" data-line-number="6596"></td>
        <td id="LC6596" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6597" class="blob-num js-line-number" data-line-number="6597"></td>
        <td id="LC6597" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/FromProtoVisitor.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L6598" class="blob-num js-line-number" data-line-number="6598"></td>
        <td id="LC6598" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/MetaMessage.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L6599" class="blob-num js-line-number" data-line-number="6599"></td>
        <td id="LC6599" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/any/any.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L6600" class="blob-num js-line-number" data-line-number="6600"></td>
        <td id="LC6600" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/cluon.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L6601" class="blob-num js-line-number" data-line-number="6601"></td>
        <td id="LC6601" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/cluonDataStructures.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L6602" class="blob-num js-line-number" data-line-number="6602"></td>
        <td id="LC6602" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6603" class="blob-num js-line-number" data-line-number="6603"></td>
        <td id="LC6603" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>cstdint<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L6604" class="blob-num js-line-number" data-line-number="6604"></td>
        <td id="LC6604" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>map<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L6605" class="blob-num js-line-number" data-line-number="6605"></td>
        <td id="LC6605" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>string<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L6606" class="blob-num js-line-number" data-line-number="6606"></td>
        <td id="LC6606" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>vector<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L6607" class="blob-num js-line-number" data-line-number="6607"></td>
        <td id="LC6607" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6608" class="blob-num js-line-number" data-line-number="6608"></td>
        <td id="LC6608" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">cluon</span> {</td>
      </tr>
      <tr>
        <td id="L6609" class="blob-num js-line-number" data-line-number="6609"></td>
        <td id="LC6609" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L6610" class="blob-num js-line-number" data-line-number="6610"></td>
        <td id="LC6610" class="blob-code blob-code-inner js-file-line"><span class="pl-c">GenericMessage is providing an abstraction level to work with concrete</span></td>
      </tr>
      <tr>
        <td id="L6611" class="blob-num js-line-number" data-line-number="6611"></td>
        <td id="LC6611" class="blob-code blob-code-inner js-file-line"><span class="pl-c">messages. Therefore, it is acting as both, a Visitor to turn concrete</span></td>
      </tr>
      <tr>
        <td id="L6612" class="blob-num js-line-number" data-line-number="6612"></td>
        <td id="LC6612" class="blob-code blob-code-inner js-file-line"><span class="pl-c">messages into GenericMessages or as Visitable to access the contained</span></td>
      </tr>
      <tr>
        <td id="L6613" class="blob-num js-line-number" data-line-number="6613"></td>
        <td id="LC6613" class="blob-code blob-code-inner js-file-line"><span class="pl-c">data. GenericMessage would use C++&#39;s std::any type; to allow C++14</span></td>
      </tr>
      <tr>
        <td id="L6614" class="blob-num js-line-number" data-line-number="6614"></td>
        <td id="LC6614" class="blob-code blob-code-inner js-file-line"><span class="pl-c">compilers, we use the backport from linb::any.</span></td>
      </tr>
      <tr>
        <td id="L6615" class="blob-num js-line-number" data-line-number="6615"></td>
        <td id="LC6615" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L6616" class="blob-num js-line-number" data-line-number="6616"></td>
        <td id="LC6616" class="blob-code blob-code-inner js-file-line"><span class="pl-c">Creating a GenericMessage:</span></td>
      </tr>
      <tr>
        <td id="L6617" class="blob-num js-line-number" data-line-number="6617"></td>
        <td id="LC6617" class="blob-code blob-code-inner js-file-line"><span class="pl-c">There are several ways to create a GenericMessage. The first option is to</span></td>
      </tr>
      <tr>
        <td id="L6618" class="blob-num js-line-number" data-line-number="6618"></td>
        <td id="LC6618" class="blob-code blob-code-inner js-file-line"><span class="pl-c">provide a message specification in ODVD format as result from MessageParser,</span></td>
      </tr>
      <tr>
        <td id="L6619" class="blob-num js-line-number" data-line-number="6619"></td>
        <td id="LC6619" class="blob-code blob-code-inner js-file-line"><span class="pl-c">from which a GenericMessage is created. This instance can then be visited</span></td>
      </tr>
      <tr>
        <td id="L6620" class="blob-num js-line-number" data-line-number="6620"></td>
        <td id="LC6620" class="blob-code blob-code-inner js-file-line"><span class="pl-c">afterwards by, for instance, an instance of ProtoDecoder to set the</span></td>
      </tr>
      <tr>
        <td id="L6621" class="blob-num js-line-number" data-line-number="6621"></td>
        <td id="LC6621" class="blob-code blob-code-inner js-file-line"><span class="pl-c">GenericMessage&#39;s actual values.</span></td>
      </tr>
      <tr>
        <td id="L6622" class="blob-num js-line-number" data-line-number="6622"></td>
        <td id="LC6622" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L6623" class="blob-num js-line-number" data-line-number="6623"></td>
        <td id="LC6623" class="blob-code blob-code-inner js-file-line"><span class="pl-c">1) This example demonstrates how to process a given message specification</span></td>
      </tr>
      <tr>
        <td id="L6624" class="blob-num js-line-number" data-line-number="6624"></td>
        <td id="LC6624" class="blob-code blob-code-inner js-file-line"><span class="pl-c">   to decode a Proto-encoded byte sequence (in protoEncodedData). The</span></td>
      </tr>
      <tr>
        <td id="L6625" class="blob-num js-line-number" data-line-number="6625"></td>
        <td id="LC6625" class="blob-code blob-code-inner js-file-line"><span class="pl-c">   message specification is given in messageSpecification that is parsed</span></td>
      </tr>
      <tr>
        <td id="L6626" class="blob-num js-line-number" data-line-number="6626"></td>
        <td id="LC6626" class="blob-code blob-code-inner js-file-line"><span class="pl-c">   from MessageParser. On success, it is tried to decode the Proto-encoded</span></td>
      </tr>
      <tr>
        <td id="L6627" class="blob-num js-line-number" data-line-number="6627"></td>
        <td id="LC6627" class="blob-code blob-code-inner js-file-line"><span class="pl-c">   data into a GenericMesssage representing an instance of &quot;MyMessage&quot;.</span></td>
      </tr>
      <tr>
        <td id="L6628" class="blob-num js-line-number" data-line-number="6628"></td>
        <td id="LC6628" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L6629" class="blob-num js-line-number" data-line-number="6629"></td>
        <td id="LC6629" class="blob-code blob-code-inner js-file-line"><span class="pl-c">   Using a message specification that does not match the serialized Proto</span></td>
      </tr>
      <tr>
        <td id="L6630" class="blob-num js-line-number" data-line-number="6630"></td>
        <td id="LC6630" class="blob-code blob-code-inner js-file-line"><span class="pl-c">   data might result in unexpected behavior.</span></td>
      </tr>
      <tr>
        <td id="L6631" class="blob-num js-line-number" data-line-number="6631"></td>
        <td id="LC6631" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L6632" class="blob-num js-line-number" data-line-number="6632"></td>
        <td id="LC6632" class="blob-code blob-code-inner js-file-line"><span class="pl-c">\code{.cpp}</span></td>
      </tr>
      <tr>
        <td id="L6633" class="blob-num js-line-number" data-line-number="6633"></td>
        <td id="LC6633" class="blob-code blob-code-inner js-file-line"><span class="pl-c">// protoEncodedData is provided from somewhere, i.e., via network for example</span></td>
      </tr>
      <tr>
        <td id="L6634" class="blob-num js-line-number" data-line-number="6634"></td>
        <td id="LC6634" class="blob-code blob-code-inner js-file-line"><span class="pl-c">std::string protoEncodedData = &lt;...&gt;</span></td>
      </tr>
      <tr>
        <td id="L6635" class="blob-num js-line-number" data-line-number="6635"></td>
        <td id="LC6635" class="blob-code blob-code-inner js-file-line"><span class="pl-c">std::stringstream sstr{protoEncodedData};</span></td>
      </tr>
      <tr>
        <td id="L6636" class="blob-num js-line-number" data-line-number="6636"></td>
        <td id="LC6636" class="blob-code blob-code-inner js-file-line"><span class="pl-c">cluon::FromProtoVisitor protoDecoder;</span></td>
      </tr>
      <tr>
        <td id="L6637" class="blob-num js-line-number" data-line-number="6637"></td>
        <td id="LC6637" class="blob-code blob-code-inner js-file-line"><span class="pl-c">protoDecoder.decodeFrom(sstr);</span></td>
      </tr>
      <tr>
        <td id="L6638" class="blob-num js-line-number" data-line-number="6638"></td>
        <td id="LC6638" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L6639" class="blob-num js-line-number" data-line-number="6639"></td>
        <td id="LC6639" class="blob-code blob-code-inner js-file-line"><span class="pl-c">const char *messageSpecification = R&quot;(</span></td>
      </tr>
      <tr>
        <td id="L6640" class="blob-num js-line-number" data-line-number="6640"></td>
        <td id="LC6640" class="blob-code blob-code-inner js-file-line"><span class="pl-c">message MyMessage [id = 123] {</span></td>
      </tr>
      <tr>
        <td id="L6641" class="blob-num js-line-number" data-line-number="6641"></td>
        <td id="LC6641" class="blob-code blob-code-inner js-file-line"><span class="pl-c">   int32 field1 [id = 1];</span></td>
      </tr>
      <tr>
        <td id="L6642" class="blob-num js-line-number" data-line-number="6642"></td>
        <td id="LC6642" class="blob-code blob-code-inner js-file-line"><span class="pl-c">   int32 field2 [id = 2];</span></td>
      </tr>
      <tr>
        <td id="L6643" class="blob-num js-line-number" data-line-number="6643"></td>
        <td id="LC6643" class="blob-code blob-code-inner js-file-line"><span class="pl-c">}</span></td>
      </tr>
      <tr>
        <td id="L6644" class="blob-num js-line-number" data-line-number="6644"></td>
        <td id="LC6644" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L6645" class="blob-num js-line-number" data-line-number="6645"></td>
        <td id="LC6645" class="blob-code blob-code-inner js-file-line"><span class="pl-c">cluon::MessageParser mp;</span></td>
      </tr>
      <tr>
        <td id="L6646" class="blob-num js-line-number" data-line-number="6646"></td>
        <td id="LC6646" class="blob-code blob-code-inner js-file-line"><span class="pl-c">auto retVal = mp.parse(std::string(messageSpecification));</span></td>
      </tr>
      <tr>
        <td id="L6647" class="blob-num js-line-number" data-line-number="6647"></td>
        <td id="LC6647" class="blob-code blob-code-inner js-file-line"><span class="pl-c">if (cluon::MessageParser::MessageParserErrorCodes::NO_ERROR == retVal.second) {</span></td>
      </tr>
      <tr>
        <td id="L6648" class="blob-num js-line-number" data-line-number="6648"></td>
        <td id="LC6648" class="blob-code blob-code-inner js-file-line"><span class="pl-c">    cluon::GenericMessage gm;</span></td>
      </tr>
      <tr>
        <td id="L6649" class="blob-num js-line-number" data-line-number="6649"></td>
        <td id="LC6649" class="blob-code blob-code-inner js-file-line"><span class="pl-c">    auto listOfMetaMessages = retVal.first;</span></td>
      </tr>
      <tr>
        <td id="L6650" class="blob-num js-line-number" data-line-number="6650"></td>
        <td id="LC6650" class="blob-code blob-code-inner js-file-line"><span class="pl-c">    gm.createFrom(listOfMetaMessages[0], listOfMetaMessages);</span></td>
      </tr>
      <tr>
        <td id="L6651" class="blob-num js-line-number" data-line-number="6651"></td>
        <td id="LC6651" class="blob-code blob-code-inner js-file-line"><span class="pl-c">    // Set values in GenericMessage from protoDecoder.</span></td>
      </tr>
      <tr>
        <td id="L6652" class="blob-num js-line-number" data-line-number="6652"></td>
        <td id="LC6652" class="blob-code blob-code-inner js-file-line"><span class="pl-c">    gm.accept(protoDecoder);</span></td>
      </tr>
      <tr>
        <td id="L6653" class="blob-num js-line-number" data-line-number="6653"></td>
        <td id="LC6653" class="blob-code blob-code-inner js-file-line"><span class="pl-c">}</span></td>
      </tr>
      <tr>
        <td id="L6654" class="blob-num js-line-number" data-line-number="6654"></td>
        <td id="LC6654" class="blob-code blob-code-inner js-file-line"><span class="pl-c">\endcode</span></td>
      </tr>
      <tr>
        <td id="L6655" class="blob-num js-line-number" data-line-number="6655"></td>
        <td id="LC6655" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L6656" class="blob-num js-line-number" data-line-number="6656"></td>
        <td id="LC6656" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L6657" class="blob-num js-line-number" data-line-number="6657"></td>
        <td id="LC6657" class="blob-code blob-code-inner js-file-line"><span class="pl-c">2) This example demonstrates how to turn a given concrete message into a</span></td>
      </tr>
      <tr>
        <td id="L6658" class="blob-num js-line-number" data-line-number="6658"></td>
        <td id="LC6658" class="blob-code blob-code-inner js-file-line"><span class="pl-c">   GenericMessage. Afterwards, the GenericMessage can be post-processed</span></td>
      </tr>
      <tr>
        <td id="L6659" class="blob-num js-line-number" data-line-number="6659"></td>
        <td id="LC6659" class="blob-code blob-code-inner js-file-line"><span class="pl-c">   with Visitors.</span></td>
      </tr>
      <tr>
        <td id="L6660" class="blob-num js-line-number" data-line-number="6660"></td>
        <td id="LC6660" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L6661" class="blob-num js-line-number" data-line-number="6661"></td>
        <td id="LC6661" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L6662" class="blob-num js-line-number" data-line-number="6662"></td>
        <td id="LC6662" class="blob-code blob-code-inner js-file-line"><span class="pl-c">\code{.cpp}</span></td>
      </tr>
      <tr>
        <td id="L6663" class="blob-num js-line-number" data-line-number="6663"></td>
        <td id="LC6663" class="blob-code blob-code-inner js-file-line"><span class="pl-c">MyMessage msg;</span></td>
      </tr>
      <tr>
        <td id="L6664" class="blob-num js-line-number" data-line-number="6664"></td>
        <td id="LC6664" class="blob-code blob-code-inner js-file-line"><span class="pl-c">// set some fields in msg.</span></td>
      </tr>
      <tr>
        <td id="L6665" class="blob-num js-line-number" data-line-number="6665"></td>
        <td id="LC6665" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L6666" class="blob-num js-line-number" data-line-number="6666"></td>
        <td id="LC6666" class="blob-code blob-code-inner js-file-line"><span class="pl-c">cluon::GenericMessage gm;</span></td>
      </tr>
      <tr>
        <td id="L6667" class="blob-num js-line-number" data-line-number="6667"></td>
        <td id="LC6667" class="blob-code blob-code-inner js-file-line"><span class="pl-c">gm.createFrom&lt;MyMessage&gt;(msg);</span></td>
      </tr>
      <tr>
        <td id="L6668" class="blob-num js-line-number" data-line-number="6668"></td>
        <td id="LC6668" class="blob-code blob-code-inner js-file-line"><span class="pl-c">\endcode</span></td>
      </tr>
      <tr>
        <td id="L6669" class="blob-num js-line-number" data-line-number="6669"></td>
        <td id="LC6669" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L6670" class="blob-num js-line-number" data-line-number="6670"></td>
        <td id="LC6670" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L6671" class="blob-num js-line-number" data-line-number="6671"></td>
        <td id="LC6671" class="blob-code blob-code-inner js-file-line"><span class="pl-c">After an instance of GenericMessage is available, it can be post-processed</span></td>
      </tr>
      <tr>
        <td id="L6672" class="blob-num js-line-number" data-line-number="6672"></td>
        <td id="LC6672" class="blob-code blob-code-inner js-file-line"><span class="pl-c">into various representations:</span></td>
      </tr>
      <tr>
        <td id="L6673" class="blob-num js-line-number" data-line-number="6673"></td>
        <td id="LC6673" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L6674" class="blob-num js-line-number" data-line-number="6674"></td>
        <td id="LC6674" class="blob-code blob-code-inner js-file-line"><span class="pl-c">1) Printing the contained data (&quot;toString&quot;; GenericMessage is being visited):</span></td>
      </tr>
      <tr>
        <td id="L6675" class="blob-num js-line-number" data-line-number="6675"></td>
        <td id="LC6675" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L6676" class="blob-num js-line-number" data-line-number="6676"></td>
        <td id="LC6676" class="blob-code blob-code-inner js-file-line"><span class="pl-c">\code{.cpp}</span></td>
      </tr>
      <tr>
        <td id="L6677" class="blob-num js-line-number" data-line-number="6677"></td>
        <td id="LC6677" class="blob-code blob-code-inner js-file-line"><span class="pl-c">GenericMessage gm;</span></td>
      </tr>
      <tr>
        <td id="L6678" class="blob-num js-line-number" data-line-number="6678"></td>
        <td id="LC6678" class="blob-code blob-code-inner js-file-line"><span class="pl-c">// gm is created using one of the aforementioned options.</span></td>
      </tr>
      <tr>
        <td id="L6679" class="blob-num js-line-number" data-line-number="6679"></td>
        <td id="LC6679" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L6680" class="blob-num js-line-number" data-line-number="6680"></td>
        <td id="LC6680" class="blob-code blob-code-inner js-file-line"><span class="pl-c">std::stringstream buffer;</span></td>
      </tr>
      <tr>
        <td id="L6681" class="blob-num js-line-number" data-line-number="6681"></td>
        <td id="LC6681" class="blob-code blob-code-inner js-file-line"><span class="pl-c">gm.accept([](uint32_t, const std::string &amp;, const std::string &amp;) {},</span></td>
      </tr>
      <tr>
        <td id="L6682" class="blob-num js-line-number" data-line-number="6682"></td>
        <td id="LC6682" class="blob-code blob-code-inner js-file-line"><span class="pl-c">          [&amp;buffer](uint32_t, std::string &amp;&amp;, std::string &amp;&amp;n, auto v) { buffer &lt;&lt; n &lt;&lt; &quot; = &quot; &lt;&lt; v &lt;&lt; std::endl; },</span></td>
      </tr>
      <tr>
        <td id="L6683" class="blob-num js-line-number" data-line-number="6683"></td>
        <td id="LC6683" class="blob-code blob-code-inner js-file-line"><span class="pl-c">          []() {});</span></td>
      </tr>
      <tr>
        <td id="L6684" class="blob-num js-line-number" data-line-number="6684"></td>
        <td id="LC6684" class="blob-code blob-code-inner js-file-line"><span class="pl-c">std::cout &lt;&lt; buffer.str() &lt;&lt; std::endl;</span></td>
      </tr>
      <tr>
        <td id="L6685" class="blob-num js-line-number" data-line-number="6685"></td>
        <td id="LC6685" class="blob-code blob-code-inner js-file-line"><span class="pl-c">\endcode</span></td>
      </tr>
      <tr>
        <td id="L6686" class="blob-num js-line-number" data-line-number="6686"></td>
        <td id="LC6686" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L6687" class="blob-num js-line-number" data-line-number="6687"></td>
        <td id="LC6687" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L6688" class="blob-num js-line-number" data-line-number="6688"></td>
        <td id="LC6688" class="blob-code blob-code-inner js-file-line"><span class="pl-c">2) Filling the values of another concrete message (GenericMessage is</span></td>
      </tr>
      <tr>
        <td id="L6689" class="blob-num js-line-number" data-line-number="6689"></td>
        <td id="LC6689" class="blob-code blob-code-inner js-file-line"><span class="pl-c">   acting as Visitor to another message):</span></td>
      </tr>
      <tr>
        <td id="L6690" class="blob-num js-line-number" data-line-number="6690"></td>
        <td id="LC6690" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L6691" class="blob-num js-line-number" data-line-number="6691"></td>
        <td id="LC6691" class="blob-code blob-code-inner js-file-line"><span class="pl-c">\code{.cpp}</span></td>
      </tr>
      <tr>
        <td id="L6692" class="blob-num js-line-number" data-line-number="6692"></td>
        <td id="LC6692" class="blob-code blob-code-inner js-file-line"><span class="pl-c">GenericMessage gm;</span></td>
      </tr>
      <tr>
        <td id="L6693" class="blob-num js-line-number" data-line-number="6693"></td>
        <td id="LC6693" class="blob-code blob-code-inner js-file-line"><span class="pl-c">// gm is created using one of the aforementioned options.</span></td>
      </tr>
      <tr>
        <td id="L6694" class="blob-num js-line-number" data-line-number="6694"></td>
        <td id="LC6694" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L6695" class="blob-num js-line-number" data-line-number="6695"></td>
        <td id="LC6695" class="blob-code blob-code-inner js-file-line"><span class="pl-c">Message msg;</span></td>
      </tr>
      <tr>
        <td id="L6696" class="blob-num js-line-number" data-line-number="6696"></td>
        <td id="LC6696" class="blob-code blob-code-inner js-file-line"><span class="pl-c">msg.accept(gm);</span></td>
      </tr>
      <tr>
        <td id="L6697" class="blob-num js-line-number" data-line-number="6697"></td>
        <td id="LC6697" class="blob-code blob-code-inner js-file-line"><span class="pl-c">\endcode</span></td>
      </tr>
      <tr>
        <td id="L6698" class="blob-num js-line-number" data-line-number="6698"></td>
        <td id="LC6698" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L6699" class="blob-num js-line-number" data-line-number="6699"></td>
        <td id="LC6699" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L6700" class="blob-num js-line-number" data-line-number="6700"></td>
        <td id="LC6700" class="blob-code blob-code-inner js-file-line"><span class="pl-c">3) Serialize the GenericMessage gm into a Proto-format:</span></td>
      </tr>
      <tr>
        <td id="L6701" class="blob-num js-line-number" data-line-number="6701"></td>
        <td id="LC6701" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L6702" class="blob-num js-line-number" data-line-number="6702"></td>
        <td id="LC6702" class="blob-code blob-code-inner js-file-line"><span class="pl-c">\code{.cpp}</span></td>
      </tr>
      <tr>
        <td id="L6703" class="blob-num js-line-number" data-line-number="6703"></td>
        <td id="LC6703" class="blob-code blob-code-inner js-file-line"><span class="pl-c">GenericMessage gm;</span></td>
      </tr>
      <tr>
        <td id="L6704" class="blob-num js-line-number" data-line-number="6704"></td>
        <td id="LC6704" class="blob-code blob-code-inner js-file-line"><span class="pl-c">// gm is created using one of the aforementioned options.</span></td>
      </tr>
      <tr>
        <td id="L6705" class="blob-num js-line-number" data-line-number="6705"></td>
        <td id="LC6705" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L6706" class="blob-num js-line-number" data-line-number="6706"></td>
        <td id="LC6706" class="blob-code blob-code-inner js-file-line"><span class="pl-c">cluon::ToProtoVisitor protoEncoder;</span></td>
      </tr>
      <tr>
        <td id="L6707" class="blob-num js-line-number" data-line-number="6707"></td>
        <td id="LC6707" class="blob-code blob-code-inner js-file-line"><span class="pl-c">gm.accept(protoEncoder);</span></td>
      </tr>
      <tr>
        <td id="L6708" class="blob-num js-line-number" data-line-number="6708"></td>
        <td id="LC6708" class="blob-code blob-code-inner js-file-line"><span class="pl-c">const std::string{protoEncoder.encodedData()};</span></td>
      </tr>
      <tr>
        <td id="L6709" class="blob-num js-line-number" data-line-number="6709"></td>
        <td id="LC6709" class="blob-code blob-code-inner js-file-line"><span class="pl-c">\endcode</span></td>
      </tr>
      <tr>
        <td id="L6710" class="blob-num js-line-number" data-line-number="6710"></td>
        <td id="LC6710" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L6711" class="blob-num js-line-number" data-line-number="6711"></td>
        <td id="LC6711" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L6712" class="blob-num js-line-number" data-line-number="6712"></td>
        <td id="LC6712" class="blob-code blob-code-inner js-file-line"><span class="pl-c">4) Serialize the GenericMessage gm into JSON:</span></td>
      </tr>
      <tr>
        <td id="L6713" class="blob-num js-line-number" data-line-number="6713"></td>
        <td id="LC6713" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L6714" class="blob-num js-line-number" data-line-number="6714"></td>
        <td id="LC6714" class="blob-code blob-code-inner js-file-line"><span class="pl-c">\code{.cpp}</span></td>
      </tr>
      <tr>
        <td id="L6715" class="blob-num js-line-number" data-line-number="6715"></td>
        <td id="LC6715" class="blob-code blob-code-inner js-file-line"><span class="pl-c">GenericMessage gm;</span></td>
      </tr>
      <tr>
        <td id="L6716" class="blob-num js-line-number" data-line-number="6716"></td>
        <td id="LC6716" class="blob-code blob-code-inner js-file-line"><span class="pl-c">// gm is created using one of the aforementioned options.</span></td>
      </tr>
      <tr>
        <td id="L6717" class="blob-num js-line-number" data-line-number="6717"></td>
        <td id="LC6717" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L6718" class="blob-num js-line-number" data-line-number="6718"></td>
        <td id="LC6718" class="blob-code blob-code-inner js-file-line"><span class="pl-c">cluon::ToJSONVisitor j;</span></td>
      </tr>
      <tr>
        <td id="L6719" class="blob-num js-line-number" data-line-number="6719"></td>
        <td id="LC6719" class="blob-code blob-code-inner js-file-line"><span class="pl-c">gm.accept(j);</span></td>
      </tr>
      <tr>
        <td id="L6720" class="blob-num js-line-number" data-line-number="6720"></td>
        <td id="LC6720" class="blob-code blob-code-inner js-file-line"><span class="pl-c">std::cout &lt;&lt; j.json();</span></td>
      </tr>
      <tr>
        <td id="L6721" class="blob-num js-line-number" data-line-number="6721"></td>
        <td id="LC6721" class="blob-code blob-code-inner js-file-line"><span class="pl-c">\endcode</span></td>
      </tr>
      <tr>
        <td id="L6722" class="blob-num js-line-number" data-line-number="6722"></td>
        <td id="LC6722" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L6723" class="blob-num js-line-number" data-line-number="6723"></td>
        <td id="LC6723" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L6724" class="blob-num js-line-number" data-line-number="6724"></td>
        <td id="LC6724" class="blob-code blob-code-inner js-file-line"><span class="pl-c">4) Dynamically transforming a given Proto-encoded byte sequence into JSON</span></td>
      </tr>
      <tr>
        <td id="L6725" class="blob-num js-line-number" data-line-number="6725"></td>
        <td id="LC6725" class="blob-code blob-code-inner js-file-line"><span class="pl-c">   at runtime:</span></td>
      </tr>
      <tr>
        <td id="L6726" class="blob-num js-line-number" data-line-number="6726"></td>
        <td id="LC6726" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L6727" class="blob-num js-line-number" data-line-number="6727"></td>
        <td id="LC6727" class="blob-code blob-code-inner js-file-line"><span class="pl-c">\code{.cpp}</span></td>
      </tr>
      <tr>
        <td id="L6728" class="blob-num js-line-number" data-line-number="6728"></td>
        <td id="LC6728" class="blob-code blob-code-inner js-file-line"><span class="pl-c">// protoEncodedData is provided from somewhere, i.e., via network for example</span></td>
      </tr>
      <tr>
        <td id="L6729" class="blob-num js-line-number" data-line-number="6729"></td>
        <td id="LC6729" class="blob-code blob-code-inner js-file-line"><span class="pl-c">std::string protoEncodedData = &lt;...&gt;</span></td>
      </tr>
      <tr>
        <td id="L6730" class="blob-num js-line-number" data-line-number="6730"></td>
        <td id="LC6730" class="blob-code blob-code-inner js-file-line"><span class="pl-c">std::stringstream sstr{protoEncodedData};</span></td>
      </tr>
      <tr>
        <td id="L6731" class="blob-num js-line-number" data-line-number="6731"></td>
        <td id="LC6731" class="blob-code blob-code-inner js-file-line"><span class="pl-c">cluon::FromProtoVisitor protoDecoder;</span></td>
      </tr>
      <tr>
        <td id="L6732" class="blob-num js-line-number" data-line-number="6732"></td>
        <td id="LC6732" class="blob-code blob-code-inner js-file-line"><span class="pl-c">protoDecoder.decodeFrom(sstr);</span></td>
      </tr>
      <tr>
        <td id="L6733" class="blob-num js-line-number" data-line-number="6733"></td>
        <td id="LC6733" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L6734" class="blob-num js-line-number" data-line-number="6734"></td>
        <td id="LC6734" class="blob-code blob-code-inner js-file-line"><span class="pl-c">const char *messageSpecification = R&quot;(</span></td>
      </tr>
      <tr>
        <td id="L6735" class="blob-num js-line-number" data-line-number="6735"></td>
        <td id="LC6735" class="blob-code blob-code-inner js-file-line"><span class="pl-c">message MyMessage [id = 123] {</span></td>
      </tr>
      <tr>
        <td id="L6736" class="blob-num js-line-number" data-line-number="6736"></td>
        <td id="LC6736" class="blob-code blob-code-inner js-file-line"><span class="pl-c">   int32 field1 [id = 1];</span></td>
      </tr>
      <tr>
        <td id="L6737" class="blob-num js-line-number" data-line-number="6737"></td>
        <td id="LC6737" class="blob-code blob-code-inner js-file-line"><span class="pl-c">   int32 field2 [id = 2];</span></td>
      </tr>
      <tr>
        <td id="L6738" class="blob-num js-line-number" data-line-number="6738"></td>
        <td id="LC6738" class="blob-code blob-code-inner js-file-line"><span class="pl-c">}</span></td>
      </tr>
      <tr>
        <td id="L6739" class="blob-num js-line-number" data-line-number="6739"></td>
        <td id="LC6739" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L6740" class="blob-num js-line-number" data-line-number="6740"></td>
        <td id="LC6740" class="blob-code blob-code-inner js-file-line"><span class="pl-c">cluon::MessageParser mp;</span></td>
      </tr>
      <tr>
        <td id="L6741" class="blob-num js-line-number" data-line-number="6741"></td>
        <td id="LC6741" class="blob-code blob-code-inner js-file-line"><span class="pl-c">auto retVal = mp.parse(std::string(messageSpecification));</span></td>
      </tr>
      <tr>
        <td id="L6742" class="blob-num js-line-number" data-line-number="6742"></td>
        <td id="LC6742" class="blob-code blob-code-inner js-file-line"><span class="pl-c">if (cluon::MessageParser::MessageParserErrorCodes::NO_ERROR == retVal.second) {</span></td>
      </tr>
      <tr>
        <td id="L6743" class="blob-num js-line-number" data-line-number="6743"></td>
        <td id="LC6743" class="blob-code blob-code-inner js-file-line"><span class="pl-c">    cluon::GenericMessage gm;</span></td>
      </tr>
      <tr>
        <td id="L6744" class="blob-num js-line-number" data-line-number="6744"></td>
        <td id="LC6744" class="blob-code blob-code-inner js-file-line"><span class="pl-c">    auto listOfMetaMessages = retVal.first;</span></td>
      </tr>
      <tr>
        <td id="L6745" class="blob-num js-line-number" data-line-number="6745"></td>
        <td id="LC6745" class="blob-code blob-code-inner js-file-line"><span class="pl-c">    gm.createFrom(listOfMetaMessages[0], listOfMetaMessages);</span></td>
      </tr>
      <tr>
        <td id="L6746" class="blob-num js-line-number" data-line-number="6746"></td>
        <td id="LC6746" class="blob-code blob-code-inner js-file-line"><span class="pl-c">    // Set values in GenericMessage from protoDecoder.</span></td>
      </tr>
      <tr>
        <td id="L6747" class="blob-num js-line-number" data-line-number="6747"></td>
        <td id="LC6747" class="blob-code blob-code-inner js-file-line"><span class="pl-c">    gm.accept(protoDecoder);</span></td>
      </tr>
      <tr>
        <td id="L6748" class="blob-num js-line-number" data-line-number="6748"></td>
        <td id="LC6748" class="blob-code blob-code-inner js-file-line"><span class="pl-c">}</span></td>
      </tr>
      <tr>
        <td id="L6749" class="blob-num js-line-number" data-line-number="6749"></td>
        <td id="LC6749" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L6750" class="blob-num js-line-number" data-line-number="6750"></td>
        <td id="LC6750" class="blob-code blob-code-inner js-file-line"><span class="pl-c">cluon::ToJSONVisitor j;</span></td>
      </tr>
      <tr>
        <td id="L6751" class="blob-num js-line-number" data-line-number="6751"></td>
        <td id="LC6751" class="blob-code blob-code-inner js-file-line"><span class="pl-c">gm.accept(j);</span></td>
      </tr>
      <tr>
        <td id="L6752" class="blob-num js-line-number" data-line-number="6752"></td>
        <td id="LC6752" class="blob-code blob-code-inner js-file-line"><span class="pl-c">std::cout &lt;&lt; j.json();</span></td>
      </tr>
      <tr>
        <td id="L6753" class="blob-num js-line-number" data-line-number="6753"></td>
        <td id="LC6753" class="blob-code blob-code-inner js-file-line"><span class="pl-c">\endcode</span></td>
      </tr>
      <tr>
        <td id="L6754" class="blob-num js-line-number" data-line-number="6754"></td>
        <td id="LC6754" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L6755" class="blob-num js-line-number" data-line-number="6755"></td>
        <td id="LC6755" class="blob-code blob-code-inner js-file-line"><span class="pl-k">class</span> <span class="pl-en">LIBCLUON_API</span> GenericMessage {</td>
      </tr>
      <tr>
        <td id="L6756" class="blob-num js-line-number" data-line-number="6756"></td>
        <td id="LC6756" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L6757" class="blob-num js-line-number" data-line-number="6757"></td>
        <td id="LC6757" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">class</span> <span class="pl-en">GenericMessageVisitor</span> {</td>
      </tr>
      <tr>
        <td id="L6758" class="blob-num js-line-number" data-line-number="6758"></td>
        <td id="LC6758" class="blob-code blob-code-inner js-file-line">       <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L6759" class="blob-num js-line-number" data-line-number="6759"></td>
        <td id="LC6759" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">GenericMessageVisitor</span>(<span class="pl-k">const</span> GenericMessageVisitor &amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L6760" class="blob-num js-line-number" data-line-number="6760"></td>
        <td id="LC6760" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">GenericMessageVisitor</span>(GenericMessageVisitor &amp;&amp;)      = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L6761" class="blob-num js-line-number" data-line-number="6761"></td>
        <td id="LC6761" class="blob-code blob-code-inner js-file-line">        GenericMessageVisitor &amp;<span class="pl-k">operator</span>=(<span class="pl-k">const</span> GenericMessageVisitor &amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L6762" class="blob-num js-line-number" data-line-number="6762"></td>
        <td id="LC6762" class="blob-code blob-code-inner js-file-line">        GenericMessageVisitor &amp;<span class="pl-k">operator</span>=(GenericMessageVisitor &amp;&amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L6763" class="blob-num js-line-number" data-line-number="6763"></td>
        <td id="LC6763" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6764" class="blob-num js-line-number" data-line-number="6764"></td>
        <td id="LC6764" class="blob-code blob-code-inner js-file-line">       <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L6765" class="blob-num js-line-number" data-line-number="6765"></td>
        <td id="LC6765" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">GenericMessageVisitor</span>() = <span class="pl-k">default</span>;</td>
      </tr>
      <tr>
        <td id="L6766" class="blob-num js-line-number" data-line-number="6766"></td>
        <td id="LC6766" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6767" class="blob-num js-line-number" data-line-number="6767"></td>
        <td id="LC6767" class="blob-code blob-code-inner js-file-line">       <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L6768" class="blob-num js-line-number" data-line-number="6768"></td>
        <td id="LC6768" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> The following methods are provided to allow an instance of this class to</span></td>
      </tr>
      <tr>
        <td id="L6769" class="blob-num js-line-number" data-line-number="6769"></td>
        <td id="LC6769" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> be used as visitor for an instance with the method signature void accept&lt;T&gt;(T&amp;);</span></td>
      </tr>
      <tr>
        <td id="L6770" class="blob-num js-line-number" data-line-number="6770"></td>
        <td id="LC6770" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">void</span> <span class="pl-en">preVisit</span>(<span class="pl-c1">int32_t</span> id, <span class="pl-k">const</span> std::string &amp;shortName, <span class="pl-k">const</span> std::string &amp;longName) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6771" class="blob-num js-line-number" data-line-number="6771"></td>
        <td id="LC6771" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">void</span> <span class="pl-en">postVisit</span>() <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6772" class="blob-num js-line-number" data-line-number="6772"></td>
        <td id="LC6772" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6773" class="blob-num js-line-number" data-line-number="6773"></td>
        <td id="LC6773" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">bool</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6774" class="blob-num js-line-number" data-line-number="6774"></td>
        <td id="LC6774" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">char</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6775" class="blob-num js-line-number" data-line-number="6775"></td>
        <td id="LC6775" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int8_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6776" class="blob-num js-line-number" data-line-number="6776"></td>
        <td id="LC6776" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint8_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6777" class="blob-num js-line-number" data-line-number="6777"></td>
        <td id="LC6777" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int16_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6778" class="blob-num js-line-number" data-line-number="6778"></td>
        <td id="LC6778" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint16_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6779" class="blob-num js-line-number" data-line-number="6779"></td>
        <td id="LC6779" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int32_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6780" class="blob-num js-line-number" data-line-number="6780"></td>
        <td id="LC6780" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint32_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6781" class="blob-num js-line-number" data-line-number="6781"></td>
        <td id="LC6781" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int64_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6782" class="blob-num js-line-number" data-line-number="6782"></td>
        <td id="LC6782" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint64_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6783" class="blob-num js-line-number" data-line-number="6783"></td>
        <td id="LC6783" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">float</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6784" class="blob-num js-line-number" data-line-number="6784"></td>
        <td id="LC6784" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">double</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6785" class="blob-num js-line-number" data-line-number="6785"></td>
        <td id="LC6785" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, std::string &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6786" class="blob-num js-line-number" data-line-number="6786"></td>
        <td id="LC6786" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6787" class="blob-num js-line-number" data-line-number="6787"></td>
        <td id="LC6787" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> T&gt;</td>
      </tr>
      <tr>
        <td id="L6788" class="blob-num js-line-number" data-line-number="6788"></td>
        <td id="LC6788" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> &amp;id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, T &amp;value) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L6789" class="blob-num js-line-number" data-line-number="6789"></td>
        <td id="LC6789" class="blob-code blob-code-inner js-file-line">            cluon::MetaMessage::MetaField mf;</td>
      </tr>
      <tr>
        <td id="L6790" class="blob-num js-line-number" data-line-number="6790"></td>
        <td id="LC6790" class="blob-code blob-code-inner js-file-line">            mf.<span class="pl-c1">fieldIdentifier</span>(id).<span class="pl-c1">fieldDataType</span>(cluon::MetaMessage::MetaField::MESSAGE_T).<span class="pl-c1">fieldDataTypeName</span>(typeName).<span class="pl-c1">fieldName</span>(name);</td>
      </tr>
      <tr>
        <td id="L6791" class="blob-num js-line-number" data-line-number="6791"></td>
        <td id="LC6791" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6792" class="blob-num js-line-number" data-line-number="6792"></td>
        <td id="LC6792" class="blob-code blob-code-inner js-file-line">            GenericMessage gm;</td>
      </tr>
      <tr>
        <td id="L6793" class="blob-num js-line-number" data-line-number="6793"></td>
        <td id="LC6793" class="blob-code blob-code-inner js-file-line">            gm.<span class="pl-smi">createFrom</span>&lt;T&gt;(value);</td>
      </tr>
      <tr>
        <td id="L6794" class="blob-num js-line-number" data-line-number="6794"></td>
        <td id="LC6794" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6795" class="blob-num js-line-number" data-line-number="6795"></td>
        <td id="LC6795" class="blob-code blob-code-inner js-file-line">            m_intermediateDataRepresentation[mf.<span class="pl-c1">fieldIdentifier</span>()] = linb::any{gm};</td>
      </tr>
      <tr>
        <td id="L6796" class="blob-num js-line-number" data-line-number="6796"></td>
        <td id="LC6796" class="blob-code blob-code-inner js-file-line">            m_metaMessage.<span class="pl-c1">add</span>(<span class="pl-c1">std::move</span>(mf));</td>
      </tr>
      <tr>
        <td id="L6797" class="blob-num js-line-number" data-line-number="6797"></td>
        <td id="LC6797" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L6798" class="blob-num js-line-number" data-line-number="6798"></td>
        <td id="LC6798" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6799" class="blob-num js-line-number" data-line-number="6799"></td>
        <td id="LC6799" class="blob-code blob-code-inner js-file-line">       <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L6800" class="blob-num js-line-number" data-line-number="6800"></td>
        <td id="LC6800" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L6801" class="blob-num js-line-number" data-line-number="6801"></td>
        <td id="LC6801" class="blob-code blob-code-inner js-file-line"><span class="pl-c">         * @return MetaMessage for this GenericMessage.</span></td>
      </tr>
      <tr>
        <td id="L6802" class="blob-num js-line-number" data-line-number="6802"></td>
        <td id="LC6802" class="blob-code blob-code-inner js-file-line"><span class="pl-c">         <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L6803" class="blob-num js-line-number" data-line-number="6803"></td>
        <td id="LC6803" class="blob-code blob-code-inner js-file-line">        MetaMessage <span class="pl-en">metaMessage</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6804" class="blob-num js-line-number" data-line-number="6804"></td>
        <td id="LC6804" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6805" class="blob-num js-line-number" data-line-number="6805"></td>
        <td id="LC6805" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L6806" class="blob-num js-line-number" data-line-number="6806"></td>
        <td id="LC6806" class="blob-code blob-code-inner js-file-line"><span class="pl-c">         * @return Intermediate data representation for this GenericMessage.</span></td>
      </tr>
      <tr>
        <td id="L6807" class="blob-num js-line-number" data-line-number="6807"></td>
        <td id="LC6807" class="blob-code blob-code-inner js-file-line"><span class="pl-c">         <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L6808" class="blob-num js-line-number" data-line-number="6808"></td>
        <td id="LC6808" class="blob-code blob-code-inner js-file-line">        std::map&lt;<span class="pl-c1">uint32_t</span>, linb::any&gt; <span class="pl-en">intermediateDataRepresentation</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6809" class="blob-num js-line-number" data-line-number="6809"></td>
        <td id="LC6809" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6810" class="blob-num js-line-number" data-line-number="6810"></td>
        <td id="LC6810" class="blob-code blob-code-inner js-file-line">       <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L6811" class="blob-num js-line-number" data-line-number="6811"></td>
        <td id="LC6811" class="blob-code blob-code-inner js-file-line">        MetaMessage m_metaMessage{};</td>
      </tr>
      <tr>
        <td id="L6812" class="blob-num js-line-number" data-line-number="6812"></td>
        <td id="LC6812" class="blob-code blob-code-inner js-file-line">        std::map&lt;<span class="pl-c1">uint32_t</span>, linb::any&gt; m_intermediateDataRepresentation;</td>
      </tr>
      <tr>
        <td id="L6813" class="blob-num js-line-number" data-line-number="6813"></td>
        <td id="LC6813" class="blob-code blob-code-inner js-file-line">    };</td>
      </tr>
      <tr>
        <td id="L6814" class="blob-num js-line-number" data-line-number="6814"></td>
        <td id="LC6814" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6815" class="blob-num js-line-number" data-line-number="6815"></td>
        <td id="LC6815" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L6816" class="blob-num js-line-number" data-line-number="6816"></td>
        <td id="LC6816" class="blob-code blob-code-inner js-file-line">    GenericMessage &amp;<span class="pl-k">operator</span>=(GenericMessage &amp;&amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L6817" class="blob-num js-line-number" data-line-number="6817"></td>
        <td id="LC6817" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6818" class="blob-num js-line-number" data-line-number="6818"></td>
        <td id="LC6818" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L6819" class="blob-num js-line-number" data-line-number="6819"></td>
        <td id="LC6819" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">GenericMessage</span>()                       = <span class="pl-k">default</span>;</td>
      </tr>
      <tr>
        <td id="L6820" class="blob-num js-line-number" data-line-number="6820"></td>
        <td id="LC6820" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">GenericMessage</span>(GenericMessage &amp;&amp;)      = <span class="pl-k">default</span>;</td>
      </tr>
      <tr>
        <td id="L6821" class="blob-num js-line-number" data-line-number="6821"></td>
        <td id="LC6821" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">GenericMessage</span>(<span class="pl-k">const</span> GenericMessage &amp;) = <span class="pl-k">default</span>;</td>
      </tr>
      <tr>
        <td id="L6822" class="blob-num js-line-number" data-line-number="6822"></td>
        <td id="LC6822" class="blob-code blob-code-inner js-file-line">    GenericMessage &amp;<span class="pl-k">operator</span>=(<span class="pl-k">const</span> GenericMessage &amp;) = <span class="pl-k">default</span>;</td>
      </tr>
      <tr>
        <td id="L6823" class="blob-num js-line-number" data-line-number="6823"></td>
        <td id="LC6823" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6824" class="blob-num js-line-number" data-line-number="6824"></td>
        <td id="LC6824" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L6825" class="blob-num js-line-number" data-line-number="6825"></td>
        <td id="LC6825" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">int32_t</span> <span class="pl-en">ID</span>();</td>
      </tr>
      <tr>
        <td id="L6826" class="blob-num js-line-number" data-line-number="6826"></td>
        <td id="LC6826" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> std::string <span class="pl-en">ShortName</span>();</td>
      </tr>
      <tr>
        <td id="L6827" class="blob-num js-line-number" data-line-number="6827"></td>
        <td id="LC6827" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> std::string <span class="pl-en">LongName</span>();</td>
      </tr>
      <tr>
        <td id="L6828" class="blob-num js-line-number" data-line-number="6828"></td>
        <td id="LC6828" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6829" class="blob-num js-line-number" data-line-number="6829"></td>
        <td id="LC6829" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L6830" class="blob-num js-line-number" data-line-number="6830"></td>
        <td id="LC6830" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L6831" class="blob-num js-line-number" data-line-number="6831"></td>
        <td id="LC6831" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * This methods creates this GenericMessage from a given concrete message.</span></td>
      </tr>
      <tr>
        <td id="L6832" class="blob-num js-line-number" data-line-number="6832"></td>
        <td id="LC6832" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     *</span></td>
      </tr>
      <tr>
        <td id="L6833" class="blob-num js-line-number" data-line-number="6833"></td>
        <td id="LC6833" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param msg Concrete message used to derive this GenericMessage from.</span></td>
      </tr>
      <tr>
        <td id="L6834" class="blob-num js-line-number" data-line-number="6834"></td>
        <td id="LC6834" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L6835" class="blob-num js-line-number" data-line-number="6835"></td>
        <td id="LC6835" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> T&gt;</td>
      </tr>
      <tr>
        <td id="L6836" class="blob-num js-line-number" data-line-number="6836"></td>
        <td id="LC6836" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">createFrom</span>(T &amp;msg) {</td>
      </tr>
      <tr>
        <td id="L6837" class="blob-num js-line-number" data-line-number="6837"></td>
        <td id="LC6837" class="blob-code blob-code-inner js-file-line">        GenericMessageVisitor gmv;</td>
      </tr>
      <tr>
        <td id="L6838" class="blob-num js-line-number" data-line-number="6838"></td>
        <td id="LC6838" class="blob-code blob-code-inner js-file-line">        msg.<span class="pl-c1">accept</span>(gmv);</td>
      </tr>
      <tr>
        <td id="L6839" class="blob-num js-line-number" data-line-number="6839"></td>
        <td id="LC6839" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6840" class="blob-num js-line-number" data-line-number="6840"></td>
        <td id="LC6840" class="blob-code blob-code-inner js-file-line">        m_metaMessage = gmv.<span class="pl-c1">metaMessage</span>();</td>
      </tr>
      <tr>
        <td id="L6841" class="blob-num js-line-number" data-line-number="6841"></td>
        <td id="LC6841" class="blob-code blob-code-inner js-file-line">        m_intermediateDataRepresentation.<span class="pl-c1">clear</span>();</td>
      </tr>
      <tr>
        <td id="L6842" class="blob-num js-line-number" data-line-number="6842"></td>
        <td id="LC6842" class="blob-code blob-code-inner js-file-line">        m_intermediateDataRepresentation = gmv.<span class="pl-c1">intermediateDataRepresentation</span>();</td>
      </tr>
      <tr>
        <td id="L6843" class="blob-num js-line-number" data-line-number="6843"></td>
        <td id="LC6843" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L6844" class="blob-num js-line-number" data-line-number="6844"></td>
        <td id="LC6844" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6845" class="blob-num js-line-number" data-line-number="6845"></td>
        <td id="LC6845" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L6846" class="blob-num js-line-number" data-line-number="6846"></td>
        <td id="LC6846" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * This method creates an empty GenericMessage from a given message</span></td>
      </tr>
      <tr>
        <td id="L6847" class="blob-num js-line-number" data-line-number="6847"></td>
        <td id="LC6847" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * specification parsed from MessageParser.</span></td>
      </tr>
      <tr>
        <td id="L6848" class="blob-num js-line-number" data-line-number="6848"></td>
        <td id="LC6848" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     *</span></td>
      </tr>
      <tr>
        <td id="L6849" class="blob-num js-line-number" data-line-number="6849"></td>
        <td id="LC6849" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param mm MetaMessage describing the fields for the message to be resolved.</span></td>
      </tr>
      <tr>
        <td id="L6850" class="blob-num js-line-number" data-line-number="6850"></td>
        <td id="LC6850" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param mms List of MetaMessages that are known (used for resolving nested message).</span></td>
      </tr>
      <tr>
        <td id="L6851" class="blob-num js-line-number" data-line-number="6851"></td>
        <td id="LC6851" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L6852" class="blob-num js-line-number" data-line-number="6852"></td>
        <td id="LC6852" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">createFrom</span>(<span class="pl-k">const</span> MetaMessage &amp;mm, <span class="pl-k">const</span> std::vector&lt;MetaMessage&gt; &amp;mms) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6853" class="blob-num js-line-number" data-line-number="6853"></td>
        <td id="LC6853" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6854" class="blob-num js-line-number" data-line-number="6854"></td>
        <td id="LC6854" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L6855" class="blob-num js-line-number" data-line-number="6855"></td>
        <td id="LC6855" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> The following methods are provided to allow an instance of this class to</span></td>
      </tr>
      <tr>
        <td id="L6856" class="blob-num js-line-number" data-line-number="6856"></td>
        <td id="LC6856" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> be used as visitor for an instance with the method signature void accept&lt;T&gt;(T&amp;);</span></td>
      </tr>
      <tr>
        <td id="L6857" class="blob-num js-line-number" data-line-number="6857"></td>
        <td id="LC6857" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">preVisit</span>(<span class="pl-c1">int32_t</span> id, <span class="pl-k">const</span> std::string &amp;shortName, <span class="pl-k">const</span> std::string &amp;longName) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6858" class="blob-num js-line-number" data-line-number="6858"></td>
        <td id="LC6858" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">postVisit</span>() <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6859" class="blob-num js-line-number" data-line-number="6859"></td>
        <td id="LC6859" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6860" class="blob-num js-line-number" data-line-number="6860"></td>
        <td id="LC6860" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">bool</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6861" class="blob-num js-line-number" data-line-number="6861"></td>
        <td id="LC6861" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">char</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6862" class="blob-num js-line-number" data-line-number="6862"></td>
        <td id="LC6862" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int8_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6863" class="blob-num js-line-number" data-line-number="6863"></td>
        <td id="LC6863" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint8_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6864" class="blob-num js-line-number" data-line-number="6864"></td>
        <td id="LC6864" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int16_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6865" class="blob-num js-line-number" data-line-number="6865"></td>
        <td id="LC6865" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint16_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6866" class="blob-num js-line-number" data-line-number="6866"></td>
        <td id="LC6866" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int32_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6867" class="blob-num js-line-number" data-line-number="6867"></td>
        <td id="LC6867" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint32_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6868" class="blob-num js-line-number" data-line-number="6868"></td>
        <td id="LC6868" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int64_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6869" class="blob-num js-line-number" data-line-number="6869"></td>
        <td id="LC6869" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint64_t</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6870" class="blob-num js-line-number" data-line-number="6870"></td>
        <td id="LC6870" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">float</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6871" class="blob-num js-line-number" data-line-number="6871"></td>
        <td id="LC6871" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">double</span> &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6872" class="blob-num js-line-number" data-line-number="6872"></td>
        <td id="LC6872" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, std::string &amp;v) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L6873" class="blob-num js-line-number" data-line-number="6873"></td>
        <td id="LC6873" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6874" class="blob-num js-line-number" data-line-number="6874"></td>
        <td id="LC6874" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> T&gt;</td>
      </tr>
      <tr>
        <td id="L6875" class="blob-num js-line-number" data-line-number="6875"></td>
        <td id="LC6875" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-c1">uint32_t</span> &amp;id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, T &amp;value) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L6876" class="blob-num js-line-number" data-line-number="6876"></td>
        <td id="LC6876" class="blob-code blob-code-inner js-file-line">        (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L6877" class="blob-num js-line-number" data-line-number="6877"></td>
        <td id="LC6877" class="blob-code blob-code-inner js-file-line">        (<span class="pl-k">void</span>)name;</td>
      </tr>
      <tr>
        <td id="L6878" class="blob-num js-line-number" data-line-number="6878"></td>
        <td id="LC6878" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-c1">0</span> &lt; m_intermediateDataRepresentation.<span class="pl-c1">count</span>(id)) {</td>
      </tr>
      <tr>
        <td id="L6879" class="blob-num js-line-number" data-line-number="6879"></td>
        <td id="LC6879" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L6880" class="blob-num js-line-number" data-line-number="6880"></td>
        <td id="LC6880" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">auto</span> &amp;v = linb::any_cast&lt;cluon::GenericMessage &amp;&gt;(m_intermediateDataRepresentation[id]);</td>
      </tr>
      <tr>
        <td id="L6881" class="blob-num js-line-number" data-line-number="6881"></td>
        <td id="LC6881" class="blob-code blob-code-inner js-file-line">                value.<span class="pl-c1">accept</span>(v);</td>
      </tr>
      <tr>
        <td id="L6882" class="blob-num js-line-number" data-line-number="6882"></td>
        <td id="LC6882" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L6883" class="blob-num js-line-number" data-line-number="6883"></td>
        <td id="LC6883" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L6884" class="blob-num js-line-number" data-line-number="6884"></td>
        <td id="LC6884" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L6885" class="blob-num js-line-number" data-line-number="6885"></td>
        <td id="LC6885" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L6886" class="blob-num js-line-number" data-line-number="6886"></td>
        <td id="LC6886" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6887" class="blob-num js-line-number" data-line-number="6887"></td>
        <td id="LC6887" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L6888" class="blob-num js-line-number" data-line-number="6888"></td>
        <td id="LC6888" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L6889" class="blob-num js-line-number" data-line-number="6889"></td>
        <td id="LC6889" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * This method allows other instances to visit this GenericMessage for</span></td>
      </tr>
      <tr>
        <td id="L6890" class="blob-num js-line-number" data-line-number="6890"></td>
        <td id="LC6890" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * post-processing the contained data.</span></td>
      </tr>
      <tr>
        <td id="L6891" class="blob-num js-line-number" data-line-number="6891"></td>
        <td id="LC6891" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     *</span></td>
      </tr>
      <tr>
        <td id="L6892" class="blob-num js-line-number" data-line-number="6892"></td>
        <td id="LC6892" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param visitor Instance of the visitor visiting this GenericMessage.</span></td>
      </tr>
      <tr>
        <td id="L6893" class="blob-num js-line-number" data-line-number="6893"></td>
        <td id="LC6893" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L6894" class="blob-num js-line-number" data-line-number="6894"></td>
        <td id="LC6894" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template </span>&lt;<span class="pl-k">class</span> <span class="pl-en">Visitor</span>&gt;</td>
      </tr>
      <tr>
        <td id="L6895" class="blob-num js-line-number" data-line-number="6895"></td>
        <td id="LC6895" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">accept</span>(Visitor &amp;visitor) {</td>
      </tr>
      <tr>
        <td id="L6896" class="blob-num js-line-number" data-line-number="6896"></td>
        <td id="LC6896" class="blob-code blob-code-inner js-file-line">        visitor.<span class="pl-c1">preVisit</span>(m_metaMessage.<span class="pl-c1">messageIdentifier</span>(), m_metaMessage.<span class="pl-c1">messageName</span>(), m_longName);</td>
      </tr>
      <tr>
        <td id="L6897" class="blob-num js-line-number" data-line-number="6897"></td>
        <td id="LC6897" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6898" class="blob-num js-line-number" data-line-number="6898"></td>
        <td id="LC6898" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">for</span> (<span class="pl-k">const</span> <span class="pl-k">auto</span> &amp;f : m_metaMessage.<span class="pl-c1">listOfMetaFields</span>()) {</td>
      </tr>
      <tr>
        <td id="L6899" class="blob-num js-line-number" data-line-number="6899"></td>
        <td id="LC6899" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (f.<span class="pl-c1">fieldDataType</span>() == MetaMessage::MetaField::BOOL_T &amp;&amp; (<span class="pl-c1">0</span> &lt; m_intermediateDataRepresentation.<span class="pl-c1">count</span>(f.<span class="pl-c1">fieldIdentifier</span>()))) {</td>
      </tr>
      <tr>
        <td id="L6900" class="blob-num js-line-number" data-line-number="6900"></td>
        <td id="LC6900" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L6901" class="blob-num js-line-number" data-line-number="6901"></td>
        <td id="LC6901" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">auto</span> &amp;v = linb::any_cast&lt;<span class="pl-k">bool</span> &amp;&gt;(m_intermediateDataRepresentation[f.<span class="pl-c1">fieldIdentifier</span>()]);</td>
      </tr>
      <tr>
        <td id="L6902" class="blob-num js-line-number" data-line-number="6902"></td>
        <td id="LC6902" class="blob-code blob-code-inner js-file-line">                    <span class="pl-c1">doVisit</span>(f.<span class="pl-c1">fieldIdentifier</span>(), <span class="pl-c1">std::move</span>(f.<span class="pl-c1">fieldDataTypeName</span>()), <span class="pl-c1">std::move</span>(f.<span class="pl-c1">fieldName</span>()), v, visitor);</td>
      </tr>
      <tr>
        <td id="L6903" class="blob-num js-line-number" data-line-number="6903"></td>
        <td id="LC6903" class="blob-code blob-code-inner js-file-line">                } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L6904" class="blob-num js-line-number" data-line-number="6904"></td>
        <td id="LC6904" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L6905" class="blob-num js-line-number" data-line-number="6905"></td>
        <td id="LC6905" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> <span class="pl-k">if</span> (f.<span class="pl-c1">fieldDataType</span>() == MetaMessage::MetaField::CHAR_T &amp;&amp; (<span class="pl-c1">0</span> &lt; m_intermediateDataRepresentation.<span class="pl-c1">count</span>(f.<span class="pl-c1">fieldIdentifier</span>()))) {</td>
      </tr>
      <tr>
        <td id="L6906" class="blob-num js-line-number" data-line-number="6906"></td>
        <td id="LC6906" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L6907" class="blob-num js-line-number" data-line-number="6907"></td>
        <td id="LC6907" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">auto</span> &amp;v = linb::any_cast&lt;<span class="pl-k">char</span> &amp;&gt;(m_intermediateDataRepresentation[f.<span class="pl-c1">fieldIdentifier</span>()]);</td>
      </tr>
      <tr>
        <td id="L6908" class="blob-num js-line-number" data-line-number="6908"></td>
        <td id="LC6908" class="blob-code blob-code-inner js-file-line">                    <span class="pl-c1">doVisit</span>(f.<span class="pl-c1">fieldIdentifier</span>(), <span class="pl-c1">std::move</span>(f.<span class="pl-c1">fieldDataTypeName</span>()), <span class="pl-c1">std::move</span>(f.<span class="pl-c1">fieldName</span>()), v, visitor);</td>
      </tr>
      <tr>
        <td id="L6909" class="blob-num js-line-number" data-line-number="6909"></td>
        <td id="LC6909" class="blob-code blob-code-inner js-file-line">                } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L6910" class="blob-num js-line-number" data-line-number="6910"></td>
        <td id="LC6910" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L6911" class="blob-num js-line-number" data-line-number="6911"></td>
        <td id="LC6911" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> <span class="pl-k">if</span> (f.<span class="pl-c1">fieldDataType</span>() == MetaMessage::MetaField::UINT8_T &amp;&amp; (<span class="pl-c1">0</span> &lt; m_intermediateDataRepresentation.<span class="pl-c1">count</span>(f.<span class="pl-c1">fieldIdentifier</span>()))) {</td>
      </tr>
      <tr>
        <td id="L6912" class="blob-num js-line-number" data-line-number="6912"></td>
        <td id="LC6912" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L6913" class="blob-num js-line-number" data-line-number="6913"></td>
        <td id="LC6913" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">auto</span> &amp;v = linb::any_cast&lt;<span class="pl-c1">uint8_t</span> &amp;&gt;(m_intermediateDataRepresentation[f.<span class="pl-c1">fieldIdentifier</span>()]);</td>
      </tr>
      <tr>
        <td id="L6914" class="blob-num js-line-number" data-line-number="6914"></td>
        <td id="LC6914" class="blob-code blob-code-inner js-file-line">                    <span class="pl-c1">doVisit</span>(f.<span class="pl-c1">fieldIdentifier</span>(), <span class="pl-c1">std::move</span>(f.<span class="pl-c1">fieldDataTypeName</span>()), <span class="pl-c1">std::move</span>(f.<span class="pl-c1">fieldName</span>()), v, visitor);</td>
      </tr>
      <tr>
        <td id="L6915" class="blob-num js-line-number" data-line-number="6915"></td>
        <td id="LC6915" class="blob-code blob-code-inner js-file-line">                } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L6916" class="blob-num js-line-number" data-line-number="6916"></td>
        <td id="LC6916" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L6917" class="blob-num js-line-number" data-line-number="6917"></td>
        <td id="LC6917" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> <span class="pl-k">if</span> (f.<span class="pl-c1">fieldDataType</span>() == MetaMessage::MetaField::INT8_T &amp;&amp; (<span class="pl-c1">0</span> &lt; m_intermediateDataRepresentation.<span class="pl-c1">count</span>(f.<span class="pl-c1">fieldIdentifier</span>()))) {</td>
      </tr>
      <tr>
        <td id="L6918" class="blob-num js-line-number" data-line-number="6918"></td>
        <td id="LC6918" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L6919" class="blob-num js-line-number" data-line-number="6919"></td>
        <td id="LC6919" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">auto</span> &amp;v = linb::any_cast&lt;<span class="pl-c1">int8_t</span> &amp;&gt;(m_intermediateDataRepresentation[f.<span class="pl-c1">fieldIdentifier</span>()]);</td>
      </tr>
      <tr>
        <td id="L6920" class="blob-num js-line-number" data-line-number="6920"></td>
        <td id="LC6920" class="blob-code blob-code-inner js-file-line">                    <span class="pl-c1">doVisit</span>(f.<span class="pl-c1">fieldIdentifier</span>(), <span class="pl-c1">std::move</span>(f.<span class="pl-c1">fieldDataTypeName</span>()), <span class="pl-c1">std::move</span>(f.<span class="pl-c1">fieldName</span>()), v, visitor);</td>
      </tr>
      <tr>
        <td id="L6921" class="blob-num js-line-number" data-line-number="6921"></td>
        <td id="LC6921" class="blob-code blob-code-inner js-file-line">                } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L6922" class="blob-num js-line-number" data-line-number="6922"></td>
        <td id="LC6922" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L6923" class="blob-num js-line-number" data-line-number="6923"></td>
        <td id="LC6923" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> <span class="pl-k">if</span> (f.<span class="pl-c1">fieldDataType</span>() == MetaMessage::MetaField::UINT16_T &amp;&amp; (<span class="pl-c1">0</span> &lt; m_intermediateDataRepresentation.<span class="pl-c1">count</span>(f.<span class="pl-c1">fieldIdentifier</span>()))) {</td>
      </tr>
      <tr>
        <td id="L6924" class="blob-num js-line-number" data-line-number="6924"></td>
        <td id="LC6924" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L6925" class="blob-num js-line-number" data-line-number="6925"></td>
        <td id="LC6925" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">auto</span> &amp;v = linb::any_cast&lt;<span class="pl-c1">uint16_t</span> &amp;&gt;(m_intermediateDataRepresentation[f.<span class="pl-c1">fieldIdentifier</span>()]);</td>
      </tr>
      <tr>
        <td id="L6926" class="blob-num js-line-number" data-line-number="6926"></td>
        <td id="LC6926" class="blob-code blob-code-inner js-file-line">                    <span class="pl-c1">doVisit</span>(f.<span class="pl-c1">fieldIdentifier</span>(), <span class="pl-c1">std::move</span>(f.<span class="pl-c1">fieldDataTypeName</span>()), <span class="pl-c1">std::move</span>(f.<span class="pl-c1">fieldName</span>()), v, visitor);</td>
      </tr>
      <tr>
        <td id="L6927" class="blob-num js-line-number" data-line-number="6927"></td>
        <td id="LC6927" class="blob-code blob-code-inner js-file-line">                } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L6928" class="blob-num js-line-number" data-line-number="6928"></td>
        <td id="LC6928" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L6929" class="blob-num js-line-number" data-line-number="6929"></td>
        <td id="LC6929" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> <span class="pl-k">if</span> (f.<span class="pl-c1">fieldDataType</span>() == MetaMessage::MetaField::INT16_T &amp;&amp; (<span class="pl-c1">0</span> &lt; m_intermediateDataRepresentation.<span class="pl-c1">count</span>(f.<span class="pl-c1">fieldIdentifier</span>()))) {</td>
      </tr>
      <tr>
        <td id="L6930" class="blob-num js-line-number" data-line-number="6930"></td>
        <td id="LC6930" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L6931" class="blob-num js-line-number" data-line-number="6931"></td>
        <td id="LC6931" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">auto</span> &amp;v = linb::any_cast&lt;<span class="pl-c1">int16_t</span> &amp;&gt;(m_intermediateDataRepresentation[f.<span class="pl-c1">fieldIdentifier</span>()]);</td>
      </tr>
      <tr>
        <td id="L6932" class="blob-num js-line-number" data-line-number="6932"></td>
        <td id="LC6932" class="blob-code blob-code-inner js-file-line">                    <span class="pl-c1">doVisit</span>(f.<span class="pl-c1">fieldIdentifier</span>(), <span class="pl-c1">std::move</span>(f.<span class="pl-c1">fieldDataTypeName</span>()), <span class="pl-c1">std::move</span>(f.<span class="pl-c1">fieldName</span>()), v, visitor);</td>
      </tr>
      <tr>
        <td id="L6933" class="blob-num js-line-number" data-line-number="6933"></td>
        <td id="LC6933" class="blob-code blob-code-inner js-file-line">                } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L6934" class="blob-num js-line-number" data-line-number="6934"></td>
        <td id="LC6934" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L6935" class="blob-num js-line-number" data-line-number="6935"></td>
        <td id="LC6935" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> <span class="pl-k">if</span> (f.<span class="pl-c1">fieldDataType</span>() == MetaMessage::MetaField::UINT32_T &amp;&amp; (<span class="pl-c1">0</span> &lt; m_intermediateDataRepresentation.<span class="pl-c1">count</span>(f.<span class="pl-c1">fieldIdentifier</span>()))) {</td>
      </tr>
      <tr>
        <td id="L6936" class="blob-num js-line-number" data-line-number="6936"></td>
        <td id="LC6936" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L6937" class="blob-num js-line-number" data-line-number="6937"></td>
        <td id="LC6937" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">auto</span> &amp;v = linb::any_cast&lt;<span class="pl-c1">uint32_t</span> &amp;&gt;(m_intermediateDataRepresentation[f.<span class="pl-c1">fieldIdentifier</span>()]);</td>
      </tr>
      <tr>
        <td id="L6938" class="blob-num js-line-number" data-line-number="6938"></td>
        <td id="LC6938" class="blob-code blob-code-inner js-file-line">                    <span class="pl-c1">doVisit</span>(f.<span class="pl-c1">fieldIdentifier</span>(), <span class="pl-c1">std::move</span>(f.<span class="pl-c1">fieldDataTypeName</span>()), <span class="pl-c1">std::move</span>(f.<span class="pl-c1">fieldName</span>()), v, visitor);</td>
      </tr>
      <tr>
        <td id="L6939" class="blob-num js-line-number" data-line-number="6939"></td>
        <td id="LC6939" class="blob-code blob-code-inner js-file-line">                } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L6940" class="blob-num js-line-number" data-line-number="6940"></td>
        <td id="LC6940" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L6941" class="blob-num js-line-number" data-line-number="6941"></td>
        <td id="LC6941" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> <span class="pl-k">if</span> (f.<span class="pl-c1">fieldDataType</span>() == MetaMessage::MetaField::INT32_T &amp;&amp; (<span class="pl-c1">0</span> &lt; m_intermediateDataRepresentation.<span class="pl-c1">count</span>(f.<span class="pl-c1">fieldIdentifier</span>()))) {</td>
      </tr>
      <tr>
        <td id="L6942" class="blob-num js-line-number" data-line-number="6942"></td>
        <td id="LC6942" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L6943" class="blob-num js-line-number" data-line-number="6943"></td>
        <td id="LC6943" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">auto</span> &amp;v = linb::any_cast&lt;<span class="pl-c1">int32_t</span> &amp;&gt;(m_intermediateDataRepresentation[f.<span class="pl-c1">fieldIdentifier</span>()]);</td>
      </tr>
      <tr>
        <td id="L6944" class="blob-num js-line-number" data-line-number="6944"></td>
        <td id="LC6944" class="blob-code blob-code-inner js-file-line">                    <span class="pl-c1">doVisit</span>(f.<span class="pl-c1">fieldIdentifier</span>(), <span class="pl-c1">std::move</span>(f.<span class="pl-c1">fieldDataTypeName</span>()), <span class="pl-c1">std::move</span>(f.<span class="pl-c1">fieldName</span>()), v, visitor);</td>
      </tr>
      <tr>
        <td id="L6945" class="blob-num js-line-number" data-line-number="6945"></td>
        <td id="LC6945" class="blob-code blob-code-inner js-file-line">                } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L6946" class="blob-num js-line-number" data-line-number="6946"></td>
        <td id="LC6946" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L6947" class="blob-num js-line-number" data-line-number="6947"></td>
        <td id="LC6947" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> <span class="pl-k">if</span> (f.<span class="pl-c1">fieldDataType</span>() == MetaMessage::MetaField::UINT64_T &amp;&amp; (<span class="pl-c1">0</span> &lt; m_intermediateDataRepresentation.<span class="pl-c1">count</span>(f.<span class="pl-c1">fieldIdentifier</span>()))) {</td>
      </tr>
      <tr>
        <td id="L6948" class="blob-num js-line-number" data-line-number="6948"></td>
        <td id="LC6948" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L6949" class="blob-num js-line-number" data-line-number="6949"></td>
        <td id="LC6949" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">auto</span> &amp;v = linb::any_cast&lt;<span class="pl-c1">uint64_t</span> &amp;&gt;(m_intermediateDataRepresentation[f.<span class="pl-c1">fieldIdentifier</span>()]);</td>
      </tr>
      <tr>
        <td id="L6950" class="blob-num js-line-number" data-line-number="6950"></td>
        <td id="LC6950" class="blob-code blob-code-inner js-file-line">                    <span class="pl-c1">doVisit</span>(f.<span class="pl-c1">fieldIdentifier</span>(), <span class="pl-c1">std::move</span>(f.<span class="pl-c1">fieldDataTypeName</span>()), <span class="pl-c1">std::move</span>(f.<span class="pl-c1">fieldName</span>()), v, visitor);</td>
      </tr>
      <tr>
        <td id="L6951" class="blob-num js-line-number" data-line-number="6951"></td>
        <td id="LC6951" class="blob-code blob-code-inner js-file-line">                } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L6952" class="blob-num js-line-number" data-line-number="6952"></td>
        <td id="LC6952" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L6953" class="blob-num js-line-number" data-line-number="6953"></td>
        <td id="LC6953" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> <span class="pl-k">if</span> (f.<span class="pl-c1">fieldDataType</span>() == MetaMessage::MetaField::INT64_T &amp;&amp; (<span class="pl-c1">0</span> &lt; m_intermediateDataRepresentation.<span class="pl-c1">count</span>(f.<span class="pl-c1">fieldIdentifier</span>()))) {</td>
      </tr>
      <tr>
        <td id="L6954" class="blob-num js-line-number" data-line-number="6954"></td>
        <td id="LC6954" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L6955" class="blob-num js-line-number" data-line-number="6955"></td>
        <td id="LC6955" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">auto</span> &amp;v = linb::any_cast&lt;<span class="pl-c1">int64_t</span> &amp;&gt;(m_intermediateDataRepresentation[f.<span class="pl-c1">fieldIdentifier</span>()]);</td>
      </tr>
      <tr>
        <td id="L6956" class="blob-num js-line-number" data-line-number="6956"></td>
        <td id="LC6956" class="blob-code blob-code-inner js-file-line">                    <span class="pl-c1">doVisit</span>(f.<span class="pl-c1">fieldIdentifier</span>(), <span class="pl-c1">std::move</span>(f.<span class="pl-c1">fieldDataTypeName</span>()), <span class="pl-c1">std::move</span>(f.<span class="pl-c1">fieldName</span>()), v, visitor);</td>
      </tr>
      <tr>
        <td id="L6957" class="blob-num js-line-number" data-line-number="6957"></td>
        <td id="LC6957" class="blob-code blob-code-inner js-file-line">                } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L6958" class="blob-num js-line-number" data-line-number="6958"></td>
        <td id="LC6958" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L6959" class="blob-num js-line-number" data-line-number="6959"></td>
        <td id="LC6959" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> <span class="pl-k">if</span> (f.<span class="pl-c1">fieldDataType</span>() == MetaMessage::MetaField::FLOAT_T &amp;&amp; (<span class="pl-c1">0</span> &lt; m_intermediateDataRepresentation.<span class="pl-c1">count</span>(f.<span class="pl-c1">fieldIdentifier</span>()))) {</td>
      </tr>
      <tr>
        <td id="L6960" class="blob-num js-line-number" data-line-number="6960"></td>
        <td id="LC6960" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L6961" class="blob-num js-line-number" data-line-number="6961"></td>
        <td id="LC6961" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">auto</span> &amp;v = linb::any_cast&lt;<span class="pl-k">float</span> &amp;&gt;(m_intermediateDataRepresentation[f.<span class="pl-c1">fieldIdentifier</span>()]);</td>
      </tr>
      <tr>
        <td id="L6962" class="blob-num js-line-number" data-line-number="6962"></td>
        <td id="LC6962" class="blob-code blob-code-inner js-file-line">                    <span class="pl-c1">doVisit</span>(f.<span class="pl-c1">fieldIdentifier</span>(), <span class="pl-c1">std::move</span>(f.<span class="pl-c1">fieldDataTypeName</span>()), <span class="pl-c1">std::move</span>(f.<span class="pl-c1">fieldName</span>()), v, visitor);</td>
      </tr>
      <tr>
        <td id="L6963" class="blob-num js-line-number" data-line-number="6963"></td>
        <td id="LC6963" class="blob-code blob-code-inner js-file-line">                } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L6964" class="blob-num js-line-number" data-line-number="6964"></td>
        <td id="LC6964" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L6965" class="blob-num js-line-number" data-line-number="6965"></td>
        <td id="LC6965" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> <span class="pl-k">if</span> (f.<span class="pl-c1">fieldDataType</span>() == MetaMessage::MetaField::DOUBLE_T &amp;&amp; (<span class="pl-c1">0</span> &lt; m_intermediateDataRepresentation.<span class="pl-c1">count</span>(f.<span class="pl-c1">fieldIdentifier</span>()))) {</td>
      </tr>
      <tr>
        <td id="L6966" class="blob-num js-line-number" data-line-number="6966"></td>
        <td id="LC6966" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L6967" class="blob-num js-line-number" data-line-number="6967"></td>
        <td id="LC6967" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">auto</span> &amp;v = linb::any_cast&lt;<span class="pl-k">double</span> &amp;&gt;(m_intermediateDataRepresentation[f.<span class="pl-c1">fieldIdentifier</span>()]);</td>
      </tr>
      <tr>
        <td id="L6968" class="blob-num js-line-number" data-line-number="6968"></td>
        <td id="LC6968" class="blob-code blob-code-inner js-file-line">                    <span class="pl-c1">doVisit</span>(f.<span class="pl-c1">fieldIdentifier</span>(), <span class="pl-c1">std::move</span>(f.<span class="pl-c1">fieldDataTypeName</span>()), <span class="pl-c1">std::move</span>(f.<span class="pl-c1">fieldName</span>()), v, visitor);</td>
      </tr>
      <tr>
        <td id="L6969" class="blob-num js-line-number" data-line-number="6969"></td>
        <td id="LC6969" class="blob-code blob-code-inner js-file-line">                } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L6970" class="blob-num js-line-number" data-line-number="6970"></td>
        <td id="LC6970" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L6971" class="blob-num js-line-number" data-line-number="6971"></td>
        <td id="LC6971" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> <span class="pl-k">if</span> (((f.<span class="pl-c1">fieldDataType</span>() == MetaMessage::MetaField::STRING_T) || (f.<span class="pl-c1">fieldDataType</span>() == MetaMessage::MetaField::BYTES_T))</td>
      </tr>
      <tr>
        <td id="L6972" class="blob-num js-line-number" data-line-number="6972"></td>
        <td id="LC6972" class="blob-code blob-code-inner js-file-line">                       &amp;&amp; (<span class="pl-c1">0</span> &lt; m_intermediateDataRepresentation.<span class="pl-c1">count</span>(f.<span class="pl-c1">fieldIdentifier</span>()))) {</td>
      </tr>
      <tr>
        <td id="L6973" class="blob-num js-line-number" data-line-number="6973"></td>
        <td id="LC6973" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L6974" class="blob-num js-line-number" data-line-number="6974"></td>
        <td id="LC6974" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">auto</span> &amp;v = linb::any_cast&lt;std::string &amp;&gt;(m_intermediateDataRepresentation[f.<span class="pl-c1">fieldIdentifier</span>()]);</td>
      </tr>
      <tr>
        <td id="L6975" class="blob-num js-line-number" data-line-number="6975"></td>
        <td id="LC6975" class="blob-code blob-code-inner js-file-line">                    <span class="pl-c1">doVisit</span>(f.<span class="pl-c1">fieldIdentifier</span>(), <span class="pl-c1">std::move</span>(f.<span class="pl-c1">fieldDataTypeName</span>()), <span class="pl-c1">std::move</span>(f.<span class="pl-c1">fieldName</span>()), v, visitor);</td>
      </tr>
      <tr>
        <td id="L6976" class="blob-num js-line-number" data-line-number="6976"></td>
        <td id="LC6976" class="blob-code blob-code-inner js-file-line">                } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L6977" class="blob-num js-line-number" data-line-number="6977"></td>
        <td id="LC6977" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L6978" class="blob-num js-line-number" data-line-number="6978"></td>
        <td id="LC6978" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> <span class="pl-k">if</span> (f.<span class="pl-c1">fieldDataType</span>() == MetaMessage::MetaField::MESSAGE_T &amp;&amp; (<span class="pl-c1">0</span> &lt; m_intermediateDataRepresentation.<span class="pl-c1">count</span>(f.<span class="pl-c1">fieldIdentifier</span>()))) {</td>
      </tr>
      <tr>
        <td id="L6979" class="blob-num js-line-number" data-line-number="6979"></td>
        <td id="LC6979" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L6980" class="blob-num js-line-number" data-line-number="6980"></td>
        <td id="LC6980" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">auto</span> &amp;v = linb::any_cast&lt;cluon::GenericMessage &amp;&gt;(m_intermediateDataRepresentation[f.<span class="pl-c1">fieldIdentifier</span>()]);</td>
      </tr>
      <tr>
        <td id="L6981" class="blob-num js-line-number" data-line-number="6981"></td>
        <td id="LC6981" class="blob-code blob-code-inner js-file-line">                    <span class="pl-c1">doVisit</span>(f.<span class="pl-c1">fieldIdentifier</span>(), <span class="pl-c1">std::move</span>(f.<span class="pl-c1">fieldDataTypeName</span>()), <span class="pl-c1">std::move</span>(f.<span class="pl-c1">fieldName</span>()), v, visitor);</td>
      </tr>
      <tr>
        <td id="L6982" class="blob-num js-line-number" data-line-number="6982"></td>
        <td id="LC6982" class="blob-code blob-code-inner js-file-line">                } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L6983" class="blob-num js-line-number" data-line-number="6983"></td>
        <td id="LC6983" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L6984" class="blob-num js-line-number" data-line-number="6984"></td>
        <td id="LC6984" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L6985" class="blob-num js-line-number" data-line-number="6985"></td>
        <td id="LC6985" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L6986" class="blob-num js-line-number" data-line-number="6986"></td>
        <td id="LC6986" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6987" class="blob-num js-line-number" data-line-number="6987"></td>
        <td id="LC6987" class="blob-code blob-code-inner js-file-line">        visitor.<span class="pl-c1">postVisit</span>();</td>
      </tr>
      <tr>
        <td id="L6988" class="blob-num js-line-number" data-line-number="6988"></td>
        <td id="LC6988" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L6989" class="blob-num js-line-number" data-line-number="6989"></td>
        <td id="LC6989" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L6990" class="blob-num js-line-number" data-line-number="6990"></td>
        <td id="LC6990" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L6991" class="blob-num js-line-number" data-line-number="6991"></td>
        <td id="LC6991" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * This method allows other instances to visit this GenericMessage for</span></td>
      </tr>
      <tr>
        <td id="L6992" class="blob-num js-line-number" data-line-number="6992"></td>
        <td id="LC6992" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * post-processing the contained data.</span></td>
      </tr>
      <tr>
        <td id="L6993" class="blob-num js-line-number" data-line-number="6993"></td>
        <td id="LC6993" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     *</span></td>
      </tr>
      <tr>
        <td id="L6994" class="blob-num js-line-number" data-line-number="6994"></td>
        <td id="LC6994" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param _preVisit Instance of the visitor pre-visiting this GenericMessage.</span></td>
      </tr>
      <tr>
        <td id="L6995" class="blob-num js-line-number" data-line-number="6995"></td>
        <td id="LC6995" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param _visit Instance of the visitor visiting this GenericMessage.</span></td>
      </tr>
      <tr>
        <td id="L6996" class="blob-num js-line-number" data-line-number="6996"></td>
        <td id="LC6996" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param _postVisit Instance of the visitor post-visiting this GenericMessage.</span></td>
      </tr>
      <tr>
        <td id="L6997" class="blob-num js-line-number" data-line-number="6997"></td>
        <td id="LC6997" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L6998" class="blob-num js-line-number" data-line-number="6998"></td>
        <td id="LC6998" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template </span>&lt;<span class="pl-k">class</span> <span class="pl-en">PreVisitor</span>, <span class="pl-k">class</span> <span class="pl-en">Visitor</span>, <span class="pl-k">class</span> <span class="pl-en">PostVisitor</span>&gt;</td>
      </tr>
      <tr>
        <td id="L6999" class="blob-num js-line-number" data-line-number="6999"></td>
        <td id="LC6999" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">accept</span>(PreVisitor &amp;&amp;_preVisit, Visitor &amp;&amp;_visit, PostVisitor &amp;&amp;_postVisit) {</td>
      </tr>
      <tr>
        <td id="L7000" class="blob-num js-line-number" data-line-number="7000"></td>
        <td id="LC7000" class="blob-code blob-code-inner js-file-line">        std::forward&lt;PreVisitor&gt;(_preVisit)(m_metaMessage.<span class="pl-c1">messageIdentifier</span>(), m_metaMessage.<span class="pl-c1">messageName</span>(), m_longName);</td>
      </tr>
      <tr>
        <td id="L7001" class="blob-num js-line-number" data-line-number="7001"></td>
        <td id="LC7001" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7002" class="blob-num js-line-number" data-line-number="7002"></td>
        <td id="LC7002" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">for</span> (<span class="pl-k">const</span> <span class="pl-k">auto</span> &amp;f : m_metaMessage.<span class="pl-c1">listOfMetaFields</span>()) {</td>
      </tr>
      <tr>
        <td id="L7003" class="blob-num js-line-number" data-line-number="7003"></td>
        <td id="LC7003" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (f.<span class="pl-c1">fieldDataType</span>() == MetaMessage::MetaField::BOOL_T &amp;&amp; (<span class="pl-c1">0</span> &lt; m_intermediateDataRepresentation.<span class="pl-c1">count</span>(f.<span class="pl-c1">fieldIdentifier</span>()))) {</td>
      </tr>
      <tr>
        <td id="L7004" class="blob-num js-line-number" data-line-number="7004"></td>
        <td id="LC7004" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L7005" class="blob-num js-line-number" data-line-number="7005"></td>
        <td id="LC7005" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">auto</span> &amp;v = linb::any_cast&lt;<span class="pl-k">bool</span> &amp;&gt;(m_intermediateDataRepresentation[f.<span class="pl-c1">fieldIdentifier</span>()]);</td>
      </tr>
      <tr>
        <td id="L7006" class="blob-num js-line-number" data-line-number="7006"></td>
        <td id="LC7006" class="blob-code blob-code-inner js-file-line">                    <span class="pl-c1">doTripletForwardVisit</span>(f.<span class="pl-c1">fieldIdentifier</span>(), <span class="pl-c1">std::move</span>(f.<span class="pl-c1">fieldDataTypeName</span>()), <span class="pl-c1">std::move</span>(f.<span class="pl-c1">fieldName</span>()), v, _preVisit, _visit, _postVisit);</td>
      </tr>
      <tr>
        <td id="L7007" class="blob-num js-line-number" data-line-number="7007"></td>
        <td id="LC7007" class="blob-code blob-code-inner js-file-line">                } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L7008" class="blob-num js-line-number" data-line-number="7008"></td>
        <td id="LC7008" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L7009" class="blob-num js-line-number" data-line-number="7009"></td>
        <td id="LC7009" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> <span class="pl-k">if</span> (f.<span class="pl-c1">fieldDataType</span>() == MetaMessage::MetaField::CHAR_T &amp;&amp; (<span class="pl-c1">0</span> &lt; m_intermediateDataRepresentation.<span class="pl-c1">count</span>(f.<span class="pl-c1">fieldIdentifier</span>()))) {</td>
      </tr>
      <tr>
        <td id="L7010" class="blob-num js-line-number" data-line-number="7010"></td>
        <td id="LC7010" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L7011" class="blob-num js-line-number" data-line-number="7011"></td>
        <td id="LC7011" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">auto</span> &amp;v = linb::any_cast&lt;<span class="pl-k">char</span> &amp;&gt;(m_intermediateDataRepresentation[f.<span class="pl-c1">fieldIdentifier</span>()]);</td>
      </tr>
      <tr>
        <td id="L7012" class="blob-num js-line-number" data-line-number="7012"></td>
        <td id="LC7012" class="blob-code blob-code-inner js-file-line">                    <span class="pl-c1">doTripletForwardVisit</span>(f.<span class="pl-c1">fieldIdentifier</span>(), <span class="pl-c1">std::move</span>(f.<span class="pl-c1">fieldDataTypeName</span>()), <span class="pl-c1">std::move</span>(f.<span class="pl-c1">fieldName</span>()), v, _preVisit, _visit, _postVisit);</td>
      </tr>
      <tr>
        <td id="L7013" class="blob-num js-line-number" data-line-number="7013"></td>
        <td id="LC7013" class="blob-code blob-code-inner js-file-line">                } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L7014" class="blob-num js-line-number" data-line-number="7014"></td>
        <td id="LC7014" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L7015" class="blob-num js-line-number" data-line-number="7015"></td>
        <td id="LC7015" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> <span class="pl-k">if</span> (f.<span class="pl-c1">fieldDataType</span>() == MetaMessage::MetaField::UINT8_T &amp;&amp; (<span class="pl-c1">0</span> &lt; m_intermediateDataRepresentation.<span class="pl-c1">count</span>(f.<span class="pl-c1">fieldIdentifier</span>()))) {</td>
      </tr>
      <tr>
        <td id="L7016" class="blob-num js-line-number" data-line-number="7016"></td>
        <td id="LC7016" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L7017" class="blob-num js-line-number" data-line-number="7017"></td>
        <td id="LC7017" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">auto</span> &amp;v = linb::any_cast&lt;<span class="pl-c1">uint8_t</span> &amp;&gt;(m_intermediateDataRepresentation[f.<span class="pl-c1">fieldIdentifier</span>()]);</td>
      </tr>
      <tr>
        <td id="L7018" class="blob-num js-line-number" data-line-number="7018"></td>
        <td id="LC7018" class="blob-code blob-code-inner js-file-line">                    <span class="pl-c1">doTripletForwardVisit</span>(f.<span class="pl-c1">fieldIdentifier</span>(), <span class="pl-c1">std::move</span>(f.<span class="pl-c1">fieldDataTypeName</span>()), <span class="pl-c1">std::move</span>(f.<span class="pl-c1">fieldName</span>()), v, _preVisit, _visit, _postVisit);</td>
      </tr>
      <tr>
        <td id="L7019" class="blob-num js-line-number" data-line-number="7019"></td>
        <td id="LC7019" class="blob-code blob-code-inner js-file-line">                } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L7020" class="blob-num js-line-number" data-line-number="7020"></td>
        <td id="LC7020" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L7021" class="blob-num js-line-number" data-line-number="7021"></td>
        <td id="LC7021" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> <span class="pl-k">if</span> (f.<span class="pl-c1">fieldDataType</span>() == MetaMessage::MetaField::INT8_T &amp;&amp; (<span class="pl-c1">0</span> &lt; m_intermediateDataRepresentation.<span class="pl-c1">count</span>(f.<span class="pl-c1">fieldIdentifier</span>()))) {</td>
      </tr>
      <tr>
        <td id="L7022" class="blob-num js-line-number" data-line-number="7022"></td>
        <td id="LC7022" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L7023" class="blob-num js-line-number" data-line-number="7023"></td>
        <td id="LC7023" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">auto</span> &amp;v = linb::any_cast&lt;<span class="pl-c1">int8_t</span> &amp;&gt;(m_intermediateDataRepresentation[f.<span class="pl-c1">fieldIdentifier</span>()]);</td>
      </tr>
      <tr>
        <td id="L7024" class="blob-num js-line-number" data-line-number="7024"></td>
        <td id="LC7024" class="blob-code blob-code-inner js-file-line">                    <span class="pl-c1">doTripletForwardVisit</span>(f.<span class="pl-c1">fieldIdentifier</span>(), <span class="pl-c1">std::move</span>(f.<span class="pl-c1">fieldDataTypeName</span>()), <span class="pl-c1">std::move</span>(f.<span class="pl-c1">fieldName</span>()), v, _preVisit, _visit, _postVisit);</td>
      </tr>
      <tr>
        <td id="L7025" class="blob-num js-line-number" data-line-number="7025"></td>
        <td id="LC7025" class="blob-code blob-code-inner js-file-line">                } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L7026" class="blob-num js-line-number" data-line-number="7026"></td>
        <td id="LC7026" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L7027" class="blob-num js-line-number" data-line-number="7027"></td>
        <td id="LC7027" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> <span class="pl-k">if</span> (f.<span class="pl-c1">fieldDataType</span>() == MetaMessage::MetaField::UINT16_T &amp;&amp; (<span class="pl-c1">0</span> &lt; m_intermediateDataRepresentation.<span class="pl-c1">count</span>(f.<span class="pl-c1">fieldIdentifier</span>()))) {</td>
      </tr>
      <tr>
        <td id="L7028" class="blob-num js-line-number" data-line-number="7028"></td>
        <td id="LC7028" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L7029" class="blob-num js-line-number" data-line-number="7029"></td>
        <td id="LC7029" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">auto</span> &amp;v = linb::any_cast&lt;<span class="pl-c1">uint16_t</span> &amp;&gt;(m_intermediateDataRepresentation[f.<span class="pl-c1">fieldIdentifier</span>()]);</td>
      </tr>
      <tr>
        <td id="L7030" class="blob-num js-line-number" data-line-number="7030"></td>
        <td id="LC7030" class="blob-code blob-code-inner js-file-line">                    <span class="pl-c1">doTripletForwardVisit</span>(f.<span class="pl-c1">fieldIdentifier</span>(), <span class="pl-c1">std::move</span>(f.<span class="pl-c1">fieldDataTypeName</span>()), <span class="pl-c1">std::move</span>(f.<span class="pl-c1">fieldName</span>()), v, _preVisit, _visit, _postVisit);</td>
      </tr>
      <tr>
        <td id="L7031" class="blob-num js-line-number" data-line-number="7031"></td>
        <td id="LC7031" class="blob-code blob-code-inner js-file-line">                } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L7032" class="blob-num js-line-number" data-line-number="7032"></td>
        <td id="LC7032" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L7033" class="blob-num js-line-number" data-line-number="7033"></td>
        <td id="LC7033" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> <span class="pl-k">if</span> (f.<span class="pl-c1">fieldDataType</span>() == MetaMessage::MetaField::INT16_T &amp;&amp; (<span class="pl-c1">0</span> &lt; m_intermediateDataRepresentation.<span class="pl-c1">count</span>(f.<span class="pl-c1">fieldIdentifier</span>()))) {</td>
      </tr>
      <tr>
        <td id="L7034" class="blob-num js-line-number" data-line-number="7034"></td>
        <td id="LC7034" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L7035" class="blob-num js-line-number" data-line-number="7035"></td>
        <td id="LC7035" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">auto</span> &amp;v = linb::any_cast&lt;<span class="pl-c1">int16_t</span> &amp;&gt;(m_intermediateDataRepresentation[f.<span class="pl-c1">fieldIdentifier</span>()]);</td>
      </tr>
      <tr>
        <td id="L7036" class="blob-num js-line-number" data-line-number="7036"></td>
        <td id="LC7036" class="blob-code blob-code-inner js-file-line">                    <span class="pl-c1">doTripletForwardVisit</span>(f.<span class="pl-c1">fieldIdentifier</span>(), <span class="pl-c1">std::move</span>(f.<span class="pl-c1">fieldDataTypeName</span>()), <span class="pl-c1">std::move</span>(f.<span class="pl-c1">fieldName</span>()), v, _preVisit, _visit, _postVisit);</td>
      </tr>
      <tr>
        <td id="L7037" class="blob-num js-line-number" data-line-number="7037"></td>
        <td id="LC7037" class="blob-code blob-code-inner js-file-line">                } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L7038" class="blob-num js-line-number" data-line-number="7038"></td>
        <td id="LC7038" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L7039" class="blob-num js-line-number" data-line-number="7039"></td>
        <td id="LC7039" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> <span class="pl-k">if</span> (f.<span class="pl-c1">fieldDataType</span>() == MetaMessage::MetaField::UINT32_T &amp;&amp; (<span class="pl-c1">0</span> &lt; m_intermediateDataRepresentation.<span class="pl-c1">count</span>(f.<span class="pl-c1">fieldIdentifier</span>()))) {</td>
      </tr>
      <tr>
        <td id="L7040" class="blob-num js-line-number" data-line-number="7040"></td>
        <td id="LC7040" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L7041" class="blob-num js-line-number" data-line-number="7041"></td>
        <td id="LC7041" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">auto</span> &amp;v = linb::any_cast&lt;<span class="pl-c1">uint32_t</span> &amp;&gt;(m_intermediateDataRepresentation[f.<span class="pl-c1">fieldIdentifier</span>()]);</td>
      </tr>
      <tr>
        <td id="L7042" class="blob-num js-line-number" data-line-number="7042"></td>
        <td id="LC7042" class="blob-code blob-code-inner js-file-line">                    <span class="pl-c1">doTripletForwardVisit</span>(f.<span class="pl-c1">fieldIdentifier</span>(), <span class="pl-c1">std::move</span>(f.<span class="pl-c1">fieldDataTypeName</span>()), <span class="pl-c1">std::move</span>(f.<span class="pl-c1">fieldName</span>()), v, _preVisit, _visit, _postVisit);</td>
      </tr>
      <tr>
        <td id="L7043" class="blob-num js-line-number" data-line-number="7043"></td>
        <td id="LC7043" class="blob-code blob-code-inner js-file-line">                } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L7044" class="blob-num js-line-number" data-line-number="7044"></td>
        <td id="LC7044" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L7045" class="blob-num js-line-number" data-line-number="7045"></td>
        <td id="LC7045" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> <span class="pl-k">if</span> (f.<span class="pl-c1">fieldDataType</span>() == MetaMessage::MetaField::INT32_T &amp;&amp; (<span class="pl-c1">0</span> &lt; m_intermediateDataRepresentation.<span class="pl-c1">count</span>(f.<span class="pl-c1">fieldIdentifier</span>()))) {</td>
      </tr>
      <tr>
        <td id="L7046" class="blob-num js-line-number" data-line-number="7046"></td>
        <td id="LC7046" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L7047" class="blob-num js-line-number" data-line-number="7047"></td>
        <td id="LC7047" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">auto</span> &amp;v = linb::any_cast&lt;<span class="pl-c1">int32_t</span> &amp;&gt;(m_intermediateDataRepresentation[f.<span class="pl-c1">fieldIdentifier</span>()]);</td>
      </tr>
      <tr>
        <td id="L7048" class="blob-num js-line-number" data-line-number="7048"></td>
        <td id="LC7048" class="blob-code blob-code-inner js-file-line">                    <span class="pl-c1">doTripletForwardVisit</span>(f.<span class="pl-c1">fieldIdentifier</span>(), <span class="pl-c1">std::move</span>(f.<span class="pl-c1">fieldDataTypeName</span>()), <span class="pl-c1">std::move</span>(f.<span class="pl-c1">fieldName</span>()), v, _preVisit, _visit, _postVisit);</td>
      </tr>
      <tr>
        <td id="L7049" class="blob-num js-line-number" data-line-number="7049"></td>
        <td id="LC7049" class="blob-code blob-code-inner js-file-line">                } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L7050" class="blob-num js-line-number" data-line-number="7050"></td>
        <td id="LC7050" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L7051" class="blob-num js-line-number" data-line-number="7051"></td>
        <td id="LC7051" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> <span class="pl-k">if</span> (f.<span class="pl-c1">fieldDataType</span>() == MetaMessage::MetaField::UINT64_T &amp;&amp; (<span class="pl-c1">0</span> &lt; m_intermediateDataRepresentation.<span class="pl-c1">count</span>(f.<span class="pl-c1">fieldIdentifier</span>()))) {</td>
      </tr>
      <tr>
        <td id="L7052" class="blob-num js-line-number" data-line-number="7052"></td>
        <td id="LC7052" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L7053" class="blob-num js-line-number" data-line-number="7053"></td>
        <td id="LC7053" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">auto</span> &amp;v = linb::any_cast&lt;<span class="pl-c1">uint64_t</span> &amp;&gt;(m_intermediateDataRepresentation[f.<span class="pl-c1">fieldIdentifier</span>()]);</td>
      </tr>
      <tr>
        <td id="L7054" class="blob-num js-line-number" data-line-number="7054"></td>
        <td id="LC7054" class="blob-code blob-code-inner js-file-line">                    <span class="pl-c1">doTripletForwardVisit</span>(f.<span class="pl-c1">fieldIdentifier</span>(), <span class="pl-c1">std::move</span>(f.<span class="pl-c1">fieldDataTypeName</span>()), <span class="pl-c1">std::move</span>(f.<span class="pl-c1">fieldName</span>()), v, _preVisit, _visit, _postVisit);</td>
      </tr>
      <tr>
        <td id="L7055" class="blob-num js-line-number" data-line-number="7055"></td>
        <td id="LC7055" class="blob-code blob-code-inner js-file-line">                } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L7056" class="blob-num js-line-number" data-line-number="7056"></td>
        <td id="LC7056" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L7057" class="blob-num js-line-number" data-line-number="7057"></td>
        <td id="LC7057" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> <span class="pl-k">if</span> (f.<span class="pl-c1">fieldDataType</span>() == MetaMessage::MetaField::INT64_T &amp;&amp; (<span class="pl-c1">0</span> &lt; m_intermediateDataRepresentation.<span class="pl-c1">count</span>(f.<span class="pl-c1">fieldIdentifier</span>()))) {</td>
      </tr>
      <tr>
        <td id="L7058" class="blob-num js-line-number" data-line-number="7058"></td>
        <td id="LC7058" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L7059" class="blob-num js-line-number" data-line-number="7059"></td>
        <td id="LC7059" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">auto</span> &amp;v = linb::any_cast&lt;<span class="pl-c1">int64_t</span> &amp;&gt;(m_intermediateDataRepresentation[f.<span class="pl-c1">fieldIdentifier</span>()]);</td>
      </tr>
      <tr>
        <td id="L7060" class="blob-num js-line-number" data-line-number="7060"></td>
        <td id="LC7060" class="blob-code blob-code-inner js-file-line">                    <span class="pl-c1">doTripletForwardVisit</span>(f.<span class="pl-c1">fieldIdentifier</span>(), <span class="pl-c1">std::move</span>(f.<span class="pl-c1">fieldDataTypeName</span>()), <span class="pl-c1">std::move</span>(f.<span class="pl-c1">fieldName</span>()), v, _preVisit, _visit, _postVisit);</td>
      </tr>
      <tr>
        <td id="L7061" class="blob-num js-line-number" data-line-number="7061"></td>
        <td id="LC7061" class="blob-code blob-code-inner js-file-line">                } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L7062" class="blob-num js-line-number" data-line-number="7062"></td>
        <td id="LC7062" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L7063" class="blob-num js-line-number" data-line-number="7063"></td>
        <td id="LC7063" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> <span class="pl-k">if</span> (f.<span class="pl-c1">fieldDataType</span>() == MetaMessage::MetaField::FLOAT_T &amp;&amp; (<span class="pl-c1">0</span> &lt; m_intermediateDataRepresentation.<span class="pl-c1">count</span>(f.<span class="pl-c1">fieldIdentifier</span>()))) {</td>
      </tr>
      <tr>
        <td id="L7064" class="blob-num js-line-number" data-line-number="7064"></td>
        <td id="LC7064" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L7065" class="blob-num js-line-number" data-line-number="7065"></td>
        <td id="LC7065" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">auto</span> &amp;v = linb::any_cast&lt;<span class="pl-k">float</span> &amp;&gt;(m_intermediateDataRepresentation[f.<span class="pl-c1">fieldIdentifier</span>()]);</td>
      </tr>
      <tr>
        <td id="L7066" class="blob-num js-line-number" data-line-number="7066"></td>
        <td id="LC7066" class="blob-code blob-code-inner js-file-line">                    <span class="pl-c1">doTripletForwardVisit</span>(f.<span class="pl-c1">fieldIdentifier</span>(), <span class="pl-c1">std::move</span>(f.<span class="pl-c1">fieldDataTypeName</span>()), <span class="pl-c1">std::move</span>(f.<span class="pl-c1">fieldName</span>()), v, _preVisit, _visit, _postVisit);</td>
      </tr>
      <tr>
        <td id="L7067" class="blob-num js-line-number" data-line-number="7067"></td>
        <td id="LC7067" class="blob-code blob-code-inner js-file-line">                } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L7068" class="blob-num js-line-number" data-line-number="7068"></td>
        <td id="LC7068" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L7069" class="blob-num js-line-number" data-line-number="7069"></td>
        <td id="LC7069" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> <span class="pl-k">if</span> (f.<span class="pl-c1">fieldDataType</span>() == MetaMessage::MetaField::DOUBLE_T &amp;&amp; (<span class="pl-c1">0</span> &lt; m_intermediateDataRepresentation.<span class="pl-c1">count</span>(f.<span class="pl-c1">fieldIdentifier</span>()))) {</td>
      </tr>
      <tr>
        <td id="L7070" class="blob-num js-line-number" data-line-number="7070"></td>
        <td id="LC7070" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L7071" class="blob-num js-line-number" data-line-number="7071"></td>
        <td id="LC7071" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">auto</span> &amp;v = linb::any_cast&lt;<span class="pl-k">double</span> &amp;&gt;(m_intermediateDataRepresentation[f.<span class="pl-c1">fieldIdentifier</span>()]);</td>
      </tr>
      <tr>
        <td id="L7072" class="blob-num js-line-number" data-line-number="7072"></td>
        <td id="LC7072" class="blob-code blob-code-inner js-file-line">                    <span class="pl-c1">doTripletForwardVisit</span>(f.<span class="pl-c1">fieldIdentifier</span>(), <span class="pl-c1">std::move</span>(f.<span class="pl-c1">fieldDataTypeName</span>()), <span class="pl-c1">std::move</span>(f.<span class="pl-c1">fieldName</span>()), v, _preVisit, _visit, _postVisit);</td>
      </tr>
      <tr>
        <td id="L7073" class="blob-num js-line-number" data-line-number="7073"></td>
        <td id="LC7073" class="blob-code blob-code-inner js-file-line">                } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L7074" class="blob-num js-line-number" data-line-number="7074"></td>
        <td id="LC7074" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L7075" class="blob-num js-line-number" data-line-number="7075"></td>
        <td id="LC7075" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> <span class="pl-k">if</span> (((f.<span class="pl-c1">fieldDataType</span>() == MetaMessage::MetaField::STRING_T) || (f.<span class="pl-c1">fieldDataType</span>() == MetaMessage::MetaField::BYTES_T))</td>
      </tr>
      <tr>
        <td id="L7076" class="blob-num js-line-number" data-line-number="7076"></td>
        <td id="LC7076" class="blob-code blob-code-inner js-file-line">                       &amp;&amp; (<span class="pl-c1">0</span> &lt; m_intermediateDataRepresentation.<span class="pl-c1">count</span>(f.<span class="pl-c1">fieldIdentifier</span>()))) {</td>
      </tr>
      <tr>
        <td id="L7077" class="blob-num js-line-number" data-line-number="7077"></td>
        <td id="LC7077" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L7078" class="blob-num js-line-number" data-line-number="7078"></td>
        <td id="LC7078" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">auto</span> &amp;v = linb::any_cast&lt;std::string &amp;&gt;(m_intermediateDataRepresentation[f.<span class="pl-c1">fieldIdentifier</span>()]);</td>
      </tr>
      <tr>
        <td id="L7079" class="blob-num js-line-number" data-line-number="7079"></td>
        <td id="LC7079" class="blob-code blob-code-inner js-file-line">                    <span class="pl-c1">doTripletForwardVisit</span>(f.<span class="pl-c1">fieldIdentifier</span>(), <span class="pl-c1">std::move</span>(f.<span class="pl-c1">fieldDataTypeName</span>()), <span class="pl-c1">std::move</span>(f.<span class="pl-c1">fieldName</span>()), v, _preVisit, _visit, _postVisit);</td>
      </tr>
      <tr>
        <td id="L7080" class="blob-num js-line-number" data-line-number="7080"></td>
        <td id="LC7080" class="blob-code blob-code-inner js-file-line">                } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L7081" class="blob-num js-line-number" data-line-number="7081"></td>
        <td id="LC7081" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L7082" class="blob-num js-line-number" data-line-number="7082"></td>
        <td id="LC7082" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> <span class="pl-k">if</span> (f.<span class="pl-c1">fieldDataType</span>() == MetaMessage::MetaField::MESSAGE_T &amp;&amp; (<span class="pl-c1">0</span> &lt; m_intermediateDataRepresentation.<span class="pl-c1">count</span>(f.<span class="pl-c1">fieldIdentifier</span>()))) {</td>
      </tr>
      <tr>
        <td id="L7083" class="blob-num js-line-number" data-line-number="7083"></td>
        <td id="LC7083" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L7084" class="blob-num js-line-number" data-line-number="7084"></td>
        <td id="LC7084" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">auto</span> &amp;v = linb::any_cast&lt;cluon::GenericMessage &amp;&gt;(m_intermediateDataRepresentation[f.<span class="pl-c1">fieldIdentifier</span>()]);</td>
      </tr>
      <tr>
        <td id="L7085" class="blob-num js-line-number" data-line-number="7085"></td>
        <td id="LC7085" class="blob-code blob-code-inner js-file-line">                    <span class="pl-c1">doTripletForwardVisit</span>(f.<span class="pl-c1">fieldIdentifier</span>(), <span class="pl-c1">std::move</span>(f.<span class="pl-c1">fieldDataTypeName</span>()), <span class="pl-c1">std::move</span>(f.<span class="pl-c1">fieldName</span>()), v, _preVisit, _visit, _postVisit);</td>
      </tr>
      <tr>
        <td id="L7086" class="blob-num js-line-number" data-line-number="7086"></td>
        <td id="LC7086" class="blob-code blob-code-inner js-file-line">                } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L7087" class="blob-num js-line-number" data-line-number="7087"></td>
        <td id="LC7087" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L7088" class="blob-num js-line-number" data-line-number="7088"></td>
        <td id="LC7088" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L7089" class="blob-num js-line-number" data-line-number="7089"></td>
        <td id="LC7089" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L7090" class="blob-num js-line-number" data-line-number="7090"></td>
        <td id="LC7090" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7091" class="blob-num js-line-number" data-line-number="7091"></td>
        <td id="LC7091" class="blob-code blob-code-inner js-file-line">        std::forward&lt;PostVisitor&gt;(_postVisit)();</td>
      </tr>
      <tr>
        <td id="L7092" class="blob-num js-line-number" data-line-number="7092"></td>
        <td id="LC7092" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L7093" class="blob-num js-line-number" data-line-number="7093"></td>
        <td id="LC7093" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7094" class="blob-num js-line-number" data-line-number="7094"></td>
        <td id="LC7094" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L7095" class="blob-num js-line-number" data-line-number="7095"></td>
        <td id="LC7095" class="blob-code blob-code-inner js-file-line">    MetaMessage m_metaMessage{};</td>
      </tr>
      <tr>
        <td id="L7096" class="blob-num js-line-number" data-line-number="7096"></td>
        <td id="LC7096" class="blob-code blob-code-inner js-file-line">    std::vector&lt;MetaMessage&gt; m_scopeOfMetaMessages{};</td>
      </tr>
      <tr>
        <td id="L7097" class="blob-num js-line-number" data-line-number="7097"></td>
        <td id="LC7097" class="blob-code blob-code-inner js-file-line">    std::map&lt;std::string, MetaMessage&gt; m_mapForScopeOfMetaMessages{};</td>
      </tr>
      <tr>
        <td id="L7098" class="blob-num js-line-number" data-line-number="7098"></td>
        <td id="LC7098" class="blob-code blob-code-inner js-file-line">    std::string m_longName{<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>};</td>
      </tr>
      <tr>
        <td id="L7099" class="blob-num js-line-number" data-line-number="7099"></td>
        <td id="LC7099" class="blob-code blob-code-inner js-file-line">    std::map&lt;<span class="pl-c1">uint32_t</span>, linb::any&gt; m_intermediateDataRepresentation;</td>
      </tr>
      <tr>
        <td id="L7100" class="blob-num js-line-number" data-line-number="7100"></td>
        <td id="LC7100" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7101" class="blob-num js-line-number" data-line-number="7101"></td>
        <td id="LC7101" class="blob-code blob-code-inner js-file-line">} <span class="pl-c"><span class="pl-c">//</span> namespace cluon</span></td>
      </tr>
      <tr>
        <td id="L7102" class="blob-num js-line-number" data-line-number="7102"></td>
        <td id="LC7102" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7103" class="blob-num js-line-number" data-line-number="7103"></td>
        <td id="LC7103" class="blob-code blob-code-inner js-file-line"><span class="pl-k">template </span>&lt;&gt;</td>
      </tr>
      <tr>
        <td id="L7104" class="blob-num js-line-number" data-line-number="7104"></td>
        <td id="LC7104" class="blob-code blob-code-inner js-file-line"><span class="pl-k">struct</span> <span class="pl-en">isVisitable</span>&lt;cluon::GenericMessage&gt; {</td>
      </tr>
      <tr>
        <td id="L7105" class="blob-num js-line-number" data-line-number="7105"></td>
        <td id="LC7105" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">static</span> <span class="pl-k">const</span> <span class="pl-k">bool</span> value = <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L7106" class="blob-num js-line-number" data-line-number="7106"></td>
        <td id="LC7106" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7107" class="blob-num js-line-number" data-line-number="7107"></td>
        <td id="LC7107" class="blob-code blob-code-inner js-file-line"><span class="pl-k">template </span>&lt;&gt;</td>
      </tr>
      <tr>
        <td id="L7108" class="blob-num js-line-number" data-line-number="7108"></td>
        <td id="LC7108" class="blob-code blob-code-inner js-file-line"><span class="pl-k">struct</span> <span class="pl-en">isTripletForwardVisitable</span>&lt;cluon::GenericMessage&gt; {</td>
      </tr>
      <tr>
        <td id="L7109" class="blob-num js-line-number" data-line-number="7109"></td>
        <td id="LC7109" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">static</span> <span class="pl-k">const</span> <span class="pl-k">bool</span> value = <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L7110" class="blob-num js-line-number" data-line-number="7110"></td>
        <td id="LC7110" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7111" class="blob-num js-line-number" data-line-number="7111"></td>
        <td id="LC7111" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L7112" class="blob-num js-line-number" data-line-number="7112"></td>
        <td id="LC7112" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L7113" class="blob-num js-line-number" data-line-number="7113"></td>
        <td id="LC7113" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Copyright (C) 2018  Christian Berger</span></td>
      </tr>
      <tr>
        <td id="L7114" class="blob-num js-line-number" data-line-number="7114"></td>
        <td id="LC7114" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L7115" class="blob-num js-line-number" data-line-number="7115"></td>
        <td id="LC7115" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is free software: you can redistribute it and/or modify</span></td>
      </tr>
      <tr>
        <td id="L7116" class="blob-num js-line-number" data-line-number="7116"></td>
        <td id="LC7116" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * it under the terms of the GNU General Public License as published by</span></td>
      </tr>
      <tr>
        <td id="L7117" class="blob-num js-line-number" data-line-number="7117"></td>
        <td id="LC7117" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * the Free Software Foundation, either version 3 of the License, or</span></td>
      </tr>
      <tr>
        <td id="L7118" class="blob-num js-line-number" data-line-number="7118"></td>
        <td id="LC7118" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * (at your option) any later version.</span></td>
      </tr>
      <tr>
        <td id="L7119" class="blob-num js-line-number" data-line-number="7119"></td>
        <td id="LC7119" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L7120" class="blob-num js-line-number" data-line-number="7120"></td>
        <td id="LC7120" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is distributed in the hope that it will be useful,</span></td>
      </tr>
      <tr>
        <td id="L7121" class="blob-num js-line-number" data-line-number="7121"></td>
        <td id="LC7121" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></td>
      </tr>
      <tr>
        <td id="L7122" class="blob-num js-line-number" data-line-number="7122"></td>
        <td id="LC7122" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></td>
      </tr>
      <tr>
        <td id="L7123" class="blob-num js-line-number" data-line-number="7123"></td>
        <td id="LC7123" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * GNU General Public License for more details.</span></td>
      </tr>
      <tr>
        <td id="L7124" class="blob-num js-line-number" data-line-number="7124"></td>
        <td id="LC7124" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L7125" class="blob-num js-line-number" data-line-number="7125"></td>
        <td id="LC7125" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * You should have received a copy of the GNU General Public License</span></td>
      </tr>
      <tr>
        <td id="L7126" class="blob-num js-line-number" data-line-number="7126"></td>
        <td id="LC7126" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></td>
      </tr>
      <tr>
        <td id="L7127" class="blob-num js-line-number" data-line-number="7127"></td>
        <td id="LC7127" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L7128" class="blob-num js-line-number" data-line-number="7128"></td>
        <td id="LC7128" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7129" class="blob-num js-line-number" data-line-number="7129"></td>
        <td id="LC7129" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifndef</span> LCMTOGENERICMESSAGE_HPP</td>
      </tr>
      <tr>
        <td id="L7130" class="blob-num js-line-number" data-line-number="7130"></td>
        <td id="LC7130" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">define</span> <span class="pl-en">LCMTOGENERICMESSAGE_HPP</span></td>
      </tr>
      <tr>
        <td id="L7131" class="blob-num js-line-number" data-line-number="7131"></td>
        <td id="LC7131" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7132" class="blob-num js-line-number" data-line-number="7132"></td>
        <td id="LC7132" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/GenericMessage.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L7133" class="blob-num js-line-number" data-line-number="7133"></td>
        <td id="LC7133" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/MetaMessage.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L7134" class="blob-num js-line-number" data-line-number="7134"></td>
        <td id="LC7134" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/cluon.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L7135" class="blob-num js-line-number" data-line-number="7135"></td>
        <td id="LC7135" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7136" class="blob-num js-line-number" data-line-number="7136"></td>
        <td id="LC7136" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>cstdint<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L7137" class="blob-num js-line-number" data-line-number="7137"></td>
        <td id="LC7137" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>map<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L7138" class="blob-num js-line-number" data-line-number="7138"></td>
        <td id="LC7138" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>string<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L7139" class="blob-num js-line-number" data-line-number="7139"></td>
        <td id="LC7139" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>vector<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L7140" class="blob-num js-line-number" data-line-number="7140"></td>
        <td id="LC7140" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7141" class="blob-num js-line-number" data-line-number="7141"></td>
        <td id="LC7141" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">cluon</span> {</td>
      </tr>
      <tr>
        <td id="L7142" class="blob-num js-line-number" data-line-number="7142"></td>
        <td id="LC7142" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L7143" class="blob-num js-line-number" data-line-number="7143"></td>
        <td id="LC7143" class="blob-code blob-code-inner js-file-line"><span class="pl-c">This class transforms a given LCM message into a GenericMessage.</span></td>
      </tr>
      <tr>
        <td id="L7144" class="blob-num js-line-number" data-line-number="7144"></td>
        <td id="LC7144" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L7145" class="blob-num js-line-number" data-line-number="7145"></td>
        <td id="LC7145" class="blob-code blob-code-inner js-file-line"><span class="pl-k">class</span> <span class="pl-en">LIBCLUON_API</span> LCMToGenericMessage {</td>
      </tr>
      <tr>
        <td id="L7146" class="blob-num js-line-number" data-line-number="7146"></td>
        <td id="LC7146" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L7147" class="blob-num js-line-number" data-line-number="7147"></td>
        <td id="LC7147" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">LCMToGenericMessage</span>(<span class="pl-k">const</span> LCMToGenericMessage &amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L7148" class="blob-num js-line-number" data-line-number="7148"></td>
        <td id="LC7148" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">LCMToGenericMessage</span>(LCMToGenericMessage &amp;&amp;)      = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L7149" class="blob-num js-line-number" data-line-number="7149"></td>
        <td id="LC7149" class="blob-code blob-code-inner js-file-line">    LCMToGenericMessage &amp;<span class="pl-k">operator</span>=(<span class="pl-k">const</span> LCMToGenericMessage &amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L7150" class="blob-num js-line-number" data-line-number="7150"></td>
        <td id="LC7150" class="blob-code blob-code-inner js-file-line">    LCMToGenericMessage &amp;<span class="pl-k">operator</span>=(LCMToGenericMessage &amp;&amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L7151" class="blob-num js-line-number" data-line-number="7151"></td>
        <td id="LC7151" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7152" class="blob-num js-line-number" data-line-number="7152"></td>
        <td id="LC7152" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L7153" class="blob-num js-line-number" data-line-number="7153"></td>
        <td id="LC7153" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">LCMToGenericMessage</span>() = <span class="pl-k">default</span>;</td>
      </tr>
      <tr>
        <td id="L7154" class="blob-num js-line-number" data-line-number="7154"></td>
        <td id="LC7154" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7155" class="blob-num js-line-number" data-line-number="7155"></td>
        <td id="LC7155" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L7156" class="blob-num js-line-number" data-line-number="7156"></td>
        <td id="LC7156" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * This method sets the message specification to be used for</span></td>
      </tr>
      <tr>
        <td id="L7157" class="blob-num js-line-number" data-line-number="7157"></td>
        <td id="LC7157" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * interpreting a given LCM-encoded message.</span></td>
      </tr>
      <tr>
        <td id="L7158" class="blob-num js-line-number" data-line-number="7158"></td>
        <td id="LC7158" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     *</span></td>
      </tr>
      <tr>
        <td id="L7159" class="blob-num js-line-number" data-line-number="7159"></td>
        <td id="LC7159" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param ms Message specification following the ODVD format.</span></td>
      </tr>
      <tr>
        <td id="L7160" class="blob-num js-line-number" data-line-number="7160"></td>
        <td id="LC7160" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @return -1 in case of invalid message specification; otherwise, number</span></td>
      </tr>
      <tr>
        <td id="L7161" class="blob-num js-line-number" data-line-number="7161"></td>
        <td id="LC7161" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     *         of successfully parsed messages from given message specification.</span></td>
      </tr>
      <tr>
        <td id="L7162" class="blob-num js-line-number" data-line-number="7162"></td>
        <td id="LC7162" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L7163" class="blob-num js-line-number" data-line-number="7163"></td>
        <td id="LC7163" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">int32_t</span> <span class="pl-en">setMessageSpecification</span>(<span class="pl-k">const</span> std::string &amp;ms) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L7164" class="blob-num js-line-number" data-line-number="7164"></td>
        <td id="LC7164" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7165" class="blob-num js-line-number" data-line-number="7165"></td>
        <td id="LC7165" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L7166" class="blob-num js-line-number" data-line-number="7166"></td>
        <td id="LC7166" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * This method transforms the given LCM payload into a GenericMessage.</span></td>
      </tr>
      <tr>
        <td id="L7167" class="blob-num js-line-number" data-line-number="7167"></td>
        <td id="LC7167" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     *</span></td>
      </tr>
      <tr>
        <td id="L7168" class="blob-num js-line-number" data-line-number="7168"></td>
        <td id="LC7168" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param data LCM Payload.</span></td>
      </tr>
      <tr>
        <td id="L7169" class="blob-num js-line-number" data-line-number="7169"></td>
        <td id="LC7169" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @return GenericMessage representation using the given message specification.</span></td>
      </tr>
      <tr>
        <td id="L7170" class="blob-num js-line-number" data-line-number="7170"></td>
        <td id="LC7170" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L7171" class="blob-num js-line-number" data-line-number="7171"></td>
        <td id="LC7171" class="blob-code blob-code-inner js-file-line">    cluon::GenericMessage <span class="pl-en">getGenericMessage</span>(<span class="pl-k">const</span> std::string &amp;data) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L7172" class="blob-num js-line-number" data-line-number="7172"></td>
        <td id="LC7172" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7173" class="blob-num js-line-number" data-line-number="7173"></td>
        <td id="LC7173" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L7174" class="blob-num js-line-number" data-line-number="7174"></td>
        <td id="LC7174" class="blob-code blob-code-inner js-file-line">    std::vector&lt;cluon::MetaMessage&gt; m_listOfMetaMessages{};</td>
      </tr>
      <tr>
        <td id="L7175" class="blob-num js-line-number" data-line-number="7175"></td>
        <td id="LC7175" class="blob-code blob-code-inner js-file-line">    std::map&lt;std::string, cluon::MetaMessage&gt; m_scopeOfMetaMessages{};</td>
      </tr>
      <tr>
        <td id="L7176" class="blob-num js-line-number" data-line-number="7176"></td>
        <td id="LC7176" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7177" class="blob-num js-line-number" data-line-number="7177"></td>
        <td id="LC7177" class="blob-code blob-code-inner js-file-line">} <span class="pl-c"><span class="pl-c">//</span> namespace cluon</span></td>
      </tr>
      <tr>
        <td id="L7178" class="blob-num js-line-number" data-line-number="7178"></td>
        <td id="LC7178" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L7179" class="blob-num js-line-number" data-line-number="7179"></td>
        <td id="LC7179" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L7180" class="blob-num js-line-number" data-line-number="7180"></td>
        <td id="LC7180" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Copyright (C) 2018  Christian Berger</span></td>
      </tr>
      <tr>
        <td id="L7181" class="blob-num js-line-number" data-line-number="7181"></td>
        <td id="LC7181" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L7182" class="blob-num js-line-number" data-line-number="7182"></td>
        <td id="LC7182" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is free software: you can redistribute it and/or modify</span></td>
      </tr>
      <tr>
        <td id="L7183" class="blob-num js-line-number" data-line-number="7183"></td>
        <td id="LC7183" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * it under the terms of the GNU General Public License as published by</span></td>
      </tr>
      <tr>
        <td id="L7184" class="blob-num js-line-number" data-line-number="7184"></td>
        <td id="LC7184" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * the Free Software Foundation, either version 3 of the License, or</span></td>
      </tr>
      <tr>
        <td id="L7185" class="blob-num js-line-number" data-line-number="7185"></td>
        <td id="LC7185" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * (at your option) any later version.</span></td>
      </tr>
      <tr>
        <td id="L7186" class="blob-num js-line-number" data-line-number="7186"></td>
        <td id="LC7186" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L7187" class="blob-num js-line-number" data-line-number="7187"></td>
        <td id="LC7187" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is distributed in the hope that it will be useful,</span></td>
      </tr>
      <tr>
        <td id="L7188" class="blob-num js-line-number" data-line-number="7188"></td>
        <td id="LC7188" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></td>
      </tr>
      <tr>
        <td id="L7189" class="blob-num js-line-number" data-line-number="7189"></td>
        <td id="LC7189" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></td>
      </tr>
      <tr>
        <td id="L7190" class="blob-num js-line-number" data-line-number="7190"></td>
        <td id="LC7190" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * GNU General Public License for more details.</span></td>
      </tr>
      <tr>
        <td id="L7191" class="blob-num js-line-number" data-line-number="7191"></td>
        <td id="LC7191" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L7192" class="blob-num js-line-number" data-line-number="7192"></td>
        <td id="LC7192" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * You should have received a copy of the GNU General Public License</span></td>
      </tr>
      <tr>
        <td id="L7193" class="blob-num js-line-number" data-line-number="7193"></td>
        <td id="LC7193" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></td>
      </tr>
      <tr>
        <td id="L7194" class="blob-num js-line-number" data-line-number="7194"></td>
        <td id="LC7194" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L7195" class="blob-num js-line-number" data-line-number="7195"></td>
        <td id="LC7195" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7196" class="blob-num js-line-number" data-line-number="7196"></td>
        <td id="LC7196" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifndef</span> OD4SESSION_HPP</td>
      </tr>
      <tr>
        <td id="L7197" class="blob-num js-line-number" data-line-number="7197"></td>
        <td id="LC7197" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">define</span> <span class="pl-en">OD4SESSION_HPP</span></td>
      </tr>
      <tr>
        <td id="L7198" class="blob-num js-line-number" data-line-number="7198"></td>
        <td id="LC7198" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7199" class="blob-num js-line-number" data-line-number="7199"></td>
        <td id="LC7199" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/Time.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L7200" class="blob-num js-line-number" data-line-number="7200"></td>
        <td id="LC7200" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/ToProtoVisitor.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L7201" class="blob-num js-line-number" data-line-number="7201"></td>
        <td id="LC7201" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/UDPReceiver.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L7202" class="blob-num js-line-number" data-line-number="7202"></td>
        <td id="LC7202" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/UDPSender.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L7203" class="blob-num js-line-number" data-line-number="7203"></td>
        <td id="LC7203" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/cluon.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L7204" class="blob-num js-line-number" data-line-number="7204"></td>
        <td id="LC7204" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/cluonDataStructures.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L7205" class="blob-num js-line-number" data-line-number="7205"></td>
        <td id="LC7205" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7206" class="blob-num js-line-number" data-line-number="7206"></td>
        <td id="LC7206" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>chrono<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L7207" class="blob-num js-line-number" data-line-number="7207"></td>
        <td id="LC7207" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>cstdint<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L7208" class="blob-num js-line-number" data-line-number="7208"></td>
        <td id="LC7208" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>functional<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L7209" class="blob-num js-line-number" data-line-number="7209"></td>
        <td id="LC7209" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>map<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L7210" class="blob-num js-line-number" data-line-number="7210"></td>
        <td id="LC7210" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>mutex<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L7211" class="blob-num js-line-number" data-line-number="7211"></td>
        <td id="LC7211" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>string<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L7212" class="blob-num js-line-number" data-line-number="7212"></td>
        <td id="LC7212" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>utility<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L7213" class="blob-num js-line-number" data-line-number="7213"></td>
        <td id="LC7213" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7214" class="blob-num js-line-number" data-line-number="7214"></td>
        <td id="LC7214" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">cluon</span> {</td>
      </tr>
      <tr>
        <td id="L7215" class="blob-num js-line-number" data-line-number="7215"></td>
        <td id="LC7215" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L7216" class="blob-num js-line-number" data-line-number="7216"></td>
        <td id="LC7216" class="blob-code blob-code-inner js-file-line"><span class="pl-c">This class provides an interface to an OpenDaVINCI v4 session. An OpenDaVINCI</span></td>
      </tr>
      <tr>
        <td id="L7217" class="blob-num js-line-number" data-line-number="7217"></td>
        <td id="LC7217" class="blob-code blob-code-inner js-file-line"><span class="pl-c">v4 session allows the automatic exchange of time-stamped Envelopes carrying</span></td>
      </tr>
      <tr>
        <td id="L7218" class="blob-num js-line-number" data-line-number="7218"></td>
        <td id="LC7218" class="blob-code blob-code-inner js-file-line"><span class="pl-c">user-defined messages usually using UDP multicast.</span></td>
      </tr>
      <tr>
        <td id="L7219" class="blob-num js-line-number" data-line-number="7219"></td>
        <td id="LC7219" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L7220" class="blob-num js-line-number" data-line-number="7220"></td>
        <td id="LC7220" class="blob-code blob-code-inner js-file-line"><span class="pl-c">There are two ways to participate in an OpenDaVINCI session. Variant A is simply</span></td>
      </tr>
      <tr>
        <td id="L7221" class="blob-num js-line-number" data-line-number="7221"></td>
        <td id="LC7221" class="blob-code blob-code-inner js-file-line"><span class="pl-c">calling a user-supplied lambda whenever a new Envelope is received:</span></td>
      </tr>
      <tr>
        <td id="L7222" class="blob-num js-line-number" data-line-number="7222"></td>
        <td id="LC7222" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L7223" class="blob-num js-line-number" data-line-number="7223"></td>
        <td id="LC7223" class="blob-code blob-code-inner js-file-line"><span class="pl-c">\code{.cpp}</span></td>
      </tr>
      <tr>
        <td id="L7224" class="blob-num js-line-number" data-line-number="7224"></td>
        <td id="LC7224" class="blob-code blob-code-inner js-file-line"><span class="pl-c">cluon::OD4Session od4{111, [](cluon::data::Envelope &amp;&amp;envelope){ std::cout &lt;&lt; &quot;Received cluon::Envelope&quot; &lt;&lt; std::endl;}</span></td>
      </tr>
      <tr>
        <td id="L7225" class="blob-num js-line-number" data-line-number="7225"></td>
        <td id="LC7225" class="blob-code blob-code-inner js-file-line"><span class="pl-c">};</span></td>
      </tr>
      <tr>
        <td id="L7226" class="blob-num js-line-number" data-line-number="7226"></td>
        <td id="LC7226" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L7227" class="blob-num js-line-number" data-line-number="7227"></td>
        <td id="LC7227" class="blob-code blob-code-inner js-file-line"><span class="pl-c">// Do something in parallel.</span></td>
      </tr>
      <tr>
        <td id="L7228" class="blob-num js-line-number" data-line-number="7228"></td>
        <td id="LC7228" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L7229" class="blob-num js-line-number" data-line-number="7229"></td>
        <td id="LC7229" class="blob-code blob-code-inner js-file-line"><span class="pl-c">MyMessage msg;</span></td>
      </tr>
      <tr>
        <td id="L7230" class="blob-num js-line-number" data-line-number="7230"></td>
        <td id="LC7230" class="blob-code blob-code-inner js-file-line"><span class="pl-c">od4.send(msg);</span></td>
      </tr>
      <tr>
        <td id="L7231" class="blob-num js-line-number" data-line-number="7231"></td>
        <td id="LC7231" class="blob-code blob-code-inner js-file-line"><span class="pl-c">\endcode</span></td>
      </tr>
      <tr>
        <td id="L7232" class="blob-num js-line-number" data-line-number="7232"></td>
        <td id="LC7232" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L7233" class="blob-num js-line-number" data-line-number="7233"></td>
        <td id="LC7233" class="blob-code blob-code-inner js-file-line"><span class="pl-c">Variant B allows a more fine-grained setup where you specify the Envelopes of interest:</span></td>
      </tr>
      <tr>
        <td id="L7234" class="blob-num js-line-number" data-line-number="7234"></td>
        <td id="LC7234" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L7235" class="blob-num js-line-number" data-line-number="7235"></td>
        <td id="LC7235" class="blob-code blob-code-inner js-file-line"><span class="pl-c">\code{.cpp}</span></td>
      </tr>
      <tr>
        <td id="L7236" class="blob-num js-line-number" data-line-number="7236"></td>
        <td id="LC7236" class="blob-code blob-code-inner js-file-line"><span class="pl-c">cluon::OD4Session od4{111};</span></td>
      </tr>
      <tr>
        <td id="L7237" class="blob-num js-line-number" data-line-number="7237"></td>
        <td id="LC7237" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L7238" class="blob-num js-line-number" data-line-number="7238"></td>
        <td id="LC7238" class="blob-code blob-code-inner js-file-line"><span class="pl-c">od4.dataTrigger(cluon::data::TimeStamp::ID(), [](cluon::data::Envelope &amp;&amp;envelope){ std::cout &lt;&lt; &quot;Received cluon::data::TimeStamp&quot; &lt;&lt; std::endl;});</span></td>
      </tr>
      <tr>
        <td id="L7239" class="blob-num js-line-number" data-line-number="7239"></td>
        <td id="LC7239" class="blob-code blob-code-inner js-file-line"><span class="pl-c">od4.dataTrigger(MyMessage::ID(), [](cluon::data::Envelope &amp;&amp;envelope){ std::cout &lt;&lt; &quot;Received MyMessage&quot; &lt;&lt; std::endl;});</span></td>
      </tr>
      <tr>
        <td id="L7240" class="blob-num js-line-number" data-line-number="7240"></td>
        <td id="LC7240" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L7241" class="blob-num js-line-number" data-line-number="7241"></td>
        <td id="LC7241" class="blob-code blob-code-inner js-file-line"><span class="pl-c">// Do something in parallel.</span></td>
      </tr>
      <tr>
        <td id="L7242" class="blob-num js-line-number" data-line-number="7242"></td>
        <td id="LC7242" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L7243" class="blob-num js-line-number" data-line-number="7243"></td>
        <td id="LC7243" class="blob-code blob-code-inner js-file-line"><span class="pl-c">MyMessage msg;</span></td>
      </tr>
      <tr>
        <td id="L7244" class="blob-num js-line-number" data-line-number="7244"></td>
        <td id="LC7244" class="blob-code blob-code-inner js-file-line"><span class="pl-c">od4.send(msg);</span></td>
      </tr>
      <tr>
        <td id="L7245" class="blob-num js-line-number" data-line-number="7245"></td>
        <td id="LC7245" class="blob-code blob-code-inner js-file-line"><span class="pl-c">\endcode</span></td>
      </tr>
      <tr>
        <td id="L7246" class="blob-num js-line-number" data-line-number="7246"></td>
        <td id="LC7246" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L7247" class="blob-num js-line-number" data-line-number="7247"></td>
        <td id="LC7247" class="blob-code blob-code-inner js-file-line"><span class="pl-c">Next to receive Envelopes, OD4Session can call a user-supplied lambda in a time-triggered</span></td>
      </tr>
      <tr>
        <td id="L7248" class="blob-num js-line-number" data-line-number="7248"></td>
        <td id="LC7248" class="blob-code blob-code-inner js-file-line"><span class="pl-c">way. The lambda is executed as long as it does not return false or throws an exception</span></td>
      </tr>
      <tr>
        <td id="L7249" class="blob-num js-line-number" data-line-number="7249"></td>
        <td id="LC7249" class="blob-code blob-code-inner js-file-line"><span class="pl-c">that is then caught in the method timeTrigger and the method is exited:</span></td>
      </tr>
      <tr>
        <td id="L7250" class="blob-num js-line-number" data-line-number="7250"></td>
        <td id="LC7250" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L7251" class="blob-num js-line-number" data-line-number="7251"></td>
        <td id="LC7251" class="blob-code blob-code-inner js-file-line"><span class="pl-c">\code{.cpp}</span></td>
      </tr>
      <tr>
        <td id="L7252" class="blob-num js-line-number" data-line-number="7252"></td>
        <td id="LC7252" class="blob-code blob-code-inner js-file-line"><span class="pl-c">cluon::OD4Session od4{111};</span></td>
      </tr>
      <tr>
        <td id="L7253" class="blob-num js-line-number" data-line-number="7253"></td>
        <td id="LC7253" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L7254" class="blob-num js-line-number" data-line-number="7254"></td>
        <td id="LC7254" class="blob-code blob-code-inner js-file-line"><span class="pl-c">const float FREQ{10}; // 10 Hz.</span></td>
      </tr>
      <tr>
        <td id="L7255" class="blob-num js-line-number" data-line-number="7255"></td>
        <td id="LC7255" class="blob-code blob-code-inner js-file-line"><span class="pl-c">od4.timeTrigger(FREQ, [](){</span></td>
      </tr>
      <tr>
        <td id="L7256" class="blob-num js-line-number" data-line-number="7256"></td>
        <td id="LC7256" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  // Do something time-triggered.</span></td>
      </tr>
      <tr>
        <td id="L7257" class="blob-num js-line-number" data-line-number="7257"></td>
        <td id="LC7257" class="blob-code blob-code-inner js-file-line"><span class="pl-c">  return false;</span></td>
      </tr>
      <tr>
        <td id="L7258" class="blob-num js-line-number" data-line-number="7258"></td>
        <td id="LC7258" class="blob-code blob-code-inner js-file-line"><span class="pl-c">}); // This call blocks until the lambda returns false.</span></td>
      </tr>
      <tr>
        <td id="L7259" class="blob-num js-line-number" data-line-number="7259"></td>
        <td id="LC7259" class="blob-code blob-code-inner js-file-line"><span class="pl-c">\endcode</span></td>
      </tr>
      <tr>
        <td id="L7260" class="blob-num js-line-number" data-line-number="7260"></td>
        <td id="LC7260" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L7261" class="blob-num js-line-number" data-line-number="7261"></td>
        <td id="LC7261" class="blob-code blob-code-inner js-file-line"><span class="pl-k">class</span> <span class="pl-en">LIBCLUON_API</span> OD4Session {</td>
      </tr>
      <tr>
        <td id="L7262" class="blob-num js-line-number" data-line-number="7262"></td>
        <td id="LC7262" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L7263" class="blob-num js-line-number" data-line-number="7263"></td>
        <td id="LC7263" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">OD4Session</span>(<span class="pl-k">const</span> OD4Session &amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L7264" class="blob-num js-line-number" data-line-number="7264"></td>
        <td id="LC7264" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">OD4Session</span>(OD4Session &amp;&amp;)      = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L7265" class="blob-num js-line-number" data-line-number="7265"></td>
        <td id="LC7265" class="blob-code blob-code-inner js-file-line">    OD4Session &amp;<span class="pl-k">operator</span>=(<span class="pl-k">const</span> OD4Session &amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L7266" class="blob-num js-line-number" data-line-number="7266"></td>
        <td id="LC7266" class="blob-code blob-code-inner js-file-line">    OD4Session &amp;<span class="pl-k">operator</span>=(OD4Session &amp;&amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L7267" class="blob-num js-line-number" data-line-number="7267"></td>
        <td id="LC7267" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7268" class="blob-num js-line-number" data-line-number="7268"></td>
        <td id="LC7268" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L7269" class="blob-num js-line-number" data-line-number="7269"></td>
        <td id="LC7269" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L7270" class="blob-num js-line-number" data-line-number="7270"></td>
        <td id="LC7270" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * Constructor.</span></td>
      </tr>
      <tr>
        <td id="L7271" class="blob-num js-line-number" data-line-number="7271"></td>
        <td id="LC7271" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     *</span></td>
      </tr>
      <tr>
        <td id="L7272" class="blob-num js-line-number" data-line-number="7272"></td>
        <td id="LC7272" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param CID OpenDaVINCI v4 session identifier [1 .. 254]</span></td>
      </tr>
      <tr>
        <td id="L7273" class="blob-num js-line-number" data-line-number="7273"></td>
        <td id="LC7273" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param delegate Function to call on newly arriving Envelopes (&quot;catch-all&quot;);</span></td>
      </tr>
      <tr>
        <td id="L7274" class="blob-num js-line-number" data-line-number="7274"></td>
        <td id="LC7274" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     *        if a nullptr is passed, the method dataTrigger can be used to set</span></td>
      </tr>
      <tr>
        <td id="L7275" class="blob-num js-line-number" data-line-number="7275"></td>
        <td id="LC7275" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     *        message specific delegates. Please note that it is NOT possible</span></td>
      </tr>
      <tr>
        <td id="L7276" class="blob-num js-line-number" data-line-number="7276"></td>
        <td id="LC7276" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     *        to have both: a delegate for &quot;catch-all&quot; and the data-triggered ones.</span></td>
      </tr>
      <tr>
        <td id="L7277" class="blob-num js-line-number" data-line-number="7277"></td>
        <td id="LC7277" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L7278" class="blob-num js-line-number" data-line-number="7278"></td>
        <td id="LC7278" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">OD4Session</span>(<span class="pl-c1">uint16_t</span> CID, std::function&lt;<span class="pl-k">void</span>(cluon::data::Envelope &amp;&amp;envelope)&gt; delegate = <span class="pl-c1">nullptr</span>) noexcept;</td>
      </tr>
      <tr>
        <td id="L7279" class="blob-num js-line-number" data-line-number="7279"></td>
        <td id="LC7279" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7280" class="blob-num js-line-number" data-line-number="7280"></td>
        <td id="LC7280" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L7281" class="blob-num js-line-number" data-line-number="7281"></td>
        <td id="LC7281" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * This method will send a given Envelope to this OpenDaVINCI v4 session.</span></td>
      </tr>
      <tr>
        <td id="L7282" class="blob-num js-line-number" data-line-number="7282"></td>
        <td id="LC7282" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     *</span></td>
      </tr>
      <tr>
        <td id="L7283" class="blob-num js-line-number" data-line-number="7283"></td>
        <td id="LC7283" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param envelope to be sent.</span></td>
      </tr>
      <tr>
        <td id="L7284" class="blob-num js-line-number" data-line-number="7284"></td>
        <td id="LC7284" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L7285" class="blob-num js-line-number" data-line-number="7285"></td>
        <td id="LC7285" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">send</span>(cluon::data::Envelope &amp;&amp;envelope) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L7286" class="blob-num js-line-number" data-line-number="7286"></td>
        <td id="LC7286" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7287" class="blob-num js-line-number" data-line-number="7287"></td>
        <td id="LC7287" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L7288" class="blob-num js-line-number" data-line-number="7288"></td>
        <td id="LC7288" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * This method sets a delegate to be called data-triggered on arrival</span></td>
      </tr>
      <tr>
        <td id="L7289" class="blob-num js-line-number" data-line-number="7289"></td>
        <td id="LC7289" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * of a new Envelope for a given message identifier.</span></td>
      </tr>
      <tr>
        <td id="L7290" class="blob-num js-line-number" data-line-number="7290"></td>
        <td id="LC7290" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     *</span></td>
      </tr>
      <tr>
        <td id="L7291" class="blob-num js-line-number" data-line-number="7291"></td>
        <td id="LC7291" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param messageIdentifier Message identifier to assign a delegate.</span></td>
      </tr>
      <tr>
        <td id="L7292" class="blob-num js-line-number" data-line-number="7292"></td>
        <td id="LC7292" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param delegate Function to call on newly arriving Envelopes; setting it to nullptr will erase it.</span></td>
      </tr>
      <tr>
        <td id="L7293" class="blob-num js-line-number" data-line-number="7293"></td>
        <td id="LC7293" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @return true if the given delegate could be successfully set or unset.</span></td>
      </tr>
      <tr>
        <td id="L7294" class="blob-num js-line-number" data-line-number="7294"></td>
        <td id="LC7294" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L7295" class="blob-num js-line-number" data-line-number="7295"></td>
        <td id="LC7295" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">bool</span> <span class="pl-en">dataTrigger</span>(<span class="pl-c1">int32_t</span> messageIdentifier, std::function&lt;<span class="pl-k">void</span>(cluon::data::Envelope &amp;&amp;envelope)&gt; delegate) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L7296" class="blob-num js-line-number" data-line-number="7296"></td>
        <td id="LC7296" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7297" class="blob-num js-line-number" data-line-number="7297"></td>
        <td id="LC7297" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L7298" class="blob-num js-line-number" data-line-number="7298"></td>
        <td id="LC7298" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * This method sets a delegate to be called time-triggered using the</span></td>
      </tr>
      <tr>
        <td id="L7299" class="blob-num js-line-number" data-line-number="7299"></td>
        <td id="LC7299" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * specified frequency until the delegate returns false. This method</span></td>
      </tr>
      <tr>
        <td id="L7300" class="blob-num js-line-number" data-line-number="7300"></td>
        <td id="LC7300" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * blocks until the delegate has returned false or threw an exception.</span></td>
      </tr>
      <tr>
        <td id="L7301" class="blob-num js-line-number" data-line-number="7301"></td>
        <td id="LC7301" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * Thus, this method is typically called as last statement in a main</span></td>
      </tr>
      <tr>
        <td id="L7302" class="blob-num js-line-number" data-line-number="7302"></td>
        <td id="LC7302" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * function of a program.</span></td>
      </tr>
      <tr>
        <td id="L7303" class="blob-num js-line-number" data-line-number="7303"></td>
        <td id="LC7303" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     *</span></td>
      </tr>
      <tr>
        <td id="L7304" class="blob-num js-line-number" data-line-number="7304"></td>
        <td id="LC7304" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param freq Frequency in Hertz to run the given delegate.</span></td>
      </tr>
      <tr>
        <td id="L7305" class="blob-num js-line-number" data-line-number="7305"></td>
        <td id="LC7305" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param delegate Function to call according to the given frequency.</span></td>
      </tr>
      <tr>
        <td id="L7306" class="blob-num js-line-number" data-line-number="7306"></td>
        <td id="LC7306" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L7307" class="blob-num js-line-number" data-line-number="7307"></td>
        <td id="LC7307" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">timeTrigger</span>(<span class="pl-k">float</span> freq, std::function&lt;<span class="pl-k">bool</span>()&gt; delegate) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L7308" class="blob-num js-line-number" data-line-number="7308"></td>
        <td id="LC7308" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7309" class="blob-num js-line-number" data-line-number="7309"></td>
        <td id="LC7309" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L7310" class="blob-num js-line-number" data-line-number="7310"></td>
        <td id="LC7310" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * This method will send a given message to this OpenDaVINCI v4 session.</span></td>
      </tr>
      <tr>
        <td id="L7311" class="blob-num js-line-number" data-line-number="7311"></td>
        <td id="LC7311" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     *</span></td>
      </tr>
      <tr>
        <td id="L7312" class="blob-num js-line-number" data-line-number="7312"></td>
        <td id="LC7312" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param message Message to be sent.</span></td>
      </tr>
      <tr>
        <td id="L7313" class="blob-num js-line-number" data-line-number="7313"></td>
        <td id="LC7313" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param sampleTimeStamp Time point when this sample to be sent was captured (default = sent time point).</span></td>
      </tr>
      <tr>
        <td id="L7314" class="blob-num js-line-number" data-line-number="7314"></td>
        <td id="LC7314" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param senderStamp Optional sender stamp (default = 0).</span></td>
      </tr>
      <tr>
        <td id="L7315" class="blob-num js-line-number" data-line-number="7315"></td>
        <td id="LC7315" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L7316" class="blob-num js-line-number" data-line-number="7316"></td>
        <td id="LC7316" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> T&gt;</td>
      </tr>
      <tr>
        <td id="L7317" class="blob-num js-line-number" data-line-number="7317"></td>
        <td id="LC7317" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">send</span>(T &amp;message, <span class="pl-k">const</span> cluon::data::TimeStamp &amp;sampleTimeStamp = cluon::data::TimeStamp(), uint32_t senderStamp = 0) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L7318" class="blob-num js-line-number" data-line-number="7318"></td>
        <td id="LC7318" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L7319" class="blob-num js-line-number" data-line-number="7319"></td>
        <td id="LC7319" class="blob-code blob-code-inner js-file-line">            std::lock_guard&lt;std::mutex&gt; <span class="pl-c1">lck</span>(m_senderMutex);</td>
      </tr>
      <tr>
        <td id="L7320" class="blob-num js-line-number" data-line-number="7320"></td>
        <td id="LC7320" class="blob-code blob-code-inner js-file-line">            cluon::ToProtoVisitor protoEncoder;</td>
      </tr>
      <tr>
        <td id="L7321" class="blob-num js-line-number" data-line-number="7321"></td>
        <td id="LC7321" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7322" class="blob-num js-line-number" data-line-number="7322"></td>
        <td id="LC7322" class="blob-code blob-code-inner js-file-line">            cluon::data::Envelope envelope;</td>
      </tr>
      <tr>
        <td id="L7323" class="blob-num js-line-number" data-line-number="7323"></td>
        <td id="LC7323" class="blob-code blob-code-inner js-file-line">            {</td>
      </tr>
      <tr>
        <td id="L7324" class="blob-num js-line-number" data-line-number="7324"></td>
        <td id="LC7324" class="blob-code blob-code-inner js-file-line">                envelope.<span class="pl-c1">dataType</span>(<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int32_t</span>&gt;(message.<span class="pl-c1">ID</span>()));</td>
      </tr>
      <tr>
        <td id="L7325" class="blob-num js-line-number" data-line-number="7325"></td>
        <td id="LC7325" class="blob-code blob-code-inner js-file-line">                message.<span class="pl-c1">accept</span>(protoEncoder);</td>
      </tr>
      <tr>
        <td id="L7326" class="blob-num js-line-number" data-line-number="7326"></td>
        <td id="LC7326" class="blob-code blob-code-inner js-file-line">                envelope.<span class="pl-c1">serializedData</span>(protoEncoder.<span class="pl-c1">encodedData</span>());</td>
      </tr>
      <tr>
        <td id="L7327" class="blob-num js-line-number" data-line-number="7327"></td>
        <td id="LC7327" class="blob-code blob-code-inner js-file-line">                envelope.<span class="pl-c1">sent</span>(<span class="pl-c1">cluon::time::now</span>());</td>
      </tr>
      <tr>
        <td id="L7328" class="blob-num js-line-number" data-line-number="7328"></td>
        <td id="LC7328" class="blob-code blob-code-inner js-file-line">                envelope.<span class="pl-c1">sampleTimeStamp</span>((<span class="pl-c1">0</span> == (sampleTimeStamp.<span class="pl-c1">seconds</span>() + sampleTimeStamp.<span class="pl-c1">microseconds</span>())) ? envelope.<span class="pl-c1">sent</span>() : sampleTimeStamp);</td>
      </tr>
      <tr>
        <td id="L7329" class="blob-num js-line-number" data-line-number="7329"></td>
        <td id="LC7329" class="blob-code blob-code-inner js-file-line">                envelope.<span class="pl-c1">senderStamp</span>(senderStamp);</td>
      </tr>
      <tr>
        <td id="L7330" class="blob-num js-line-number" data-line-number="7330"></td>
        <td id="LC7330" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L7331" class="blob-num js-line-number" data-line-number="7331"></td>
        <td id="LC7331" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7332" class="blob-num js-line-number" data-line-number="7332"></td>
        <td id="LC7332" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">send</span>(<span class="pl-c1">std::move</span>(envelope));</td>
      </tr>
      <tr>
        <td id="L7333" class="blob-num js-line-number" data-line-number="7333"></td>
        <td id="LC7333" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span> (...) {}</td>
      </tr>
      <tr>
        <td id="L7334" class="blob-num js-line-number" data-line-number="7334"></td>
        <td id="LC7334" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L7335" class="blob-num js-line-number" data-line-number="7335"></td>
        <td id="LC7335" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7336" class="blob-num js-line-number" data-line-number="7336"></td>
        <td id="LC7336" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L7337" class="blob-num js-line-number" data-line-number="7337"></td>
        <td id="LC7337" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">bool</span> <span class="pl-en">isRunning</span>() <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L7338" class="blob-num js-line-number" data-line-number="7338"></td>
        <td id="LC7338" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7339" class="blob-num js-line-number" data-line-number="7339"></td>
        <td id="LC7339" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L7340" class="blob-num js-line-number" data-line-number="7340"></td>
        <td id="LC7340" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">callback</span>(std::string &amp;&amp;data, std::string &amp;&amp;from, std::chrono::system_clock::time_point &amp;&amp;timepoint) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L7341" class="blob-num js-line-number" data-line-number="7341"></td>
        <td id="LC7341" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">sendInternal</span>(std::string &amp;&amp;dataToSend) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L7342" class="blob-num js-line-number" data-line-number="7342"></td>
        <td id="LC7342" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7343" class="blob-num js-line-number" data-line-number="7343"></td>
        <td id="LC7343" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L7344" class="blob-num js-line-number" data-line-number="7344"></td>
        <td id="LC7344" class="blob-code blob-code-inner js-file-line">    cluon::UDPReceiver m_receiver;</td>
      </tr>
      <tr>
        <td id="L7345" class="blob-num js-line-number" data-line-number="7345"></td>
        <td id="LC7345" class="blob-code blob-code-inner js-file-line">    cluon::UDPSender m_sender;</td>
      </tr>
      <tr>
        <td id="L7346" class="blob-num js-line-number" data-line-number="7346"></td>
        <td id="LC7346" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7347" class="blob-num js-line-number" data-line-number="7347"></td>
        <td id="LC7347" class="blob-code blob-code-inner js-file-line">    std::mutex m_senderMutex{};</td>
      </tr>
      <tr>
        <td id="L7348" class="blob-num js-line-number" data-line-number="7348"></td>
        <td id="LC7348" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7349" class="blob-num js-line-number" data-line-number="7349"></td>
        <td id="LC7349" class="blob-code blob-code-inner js-file-line">    std::function&lt;<span class="pl-k">void</span>(cluon::data::Envelope &amp;&amp;envelope)&gt; m_delegate{<span class="pl-c1">nullptr</span>};</td>
      </tr>
      <tr>
        <td id="L7350" class="blob-num js-line-number" data-line-number="7350"></td>
        <td id="LC7350" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7351" class="blob-num js-line-number" data-line-number="7351"></td>
        <td id="LC7351" class="blob-code blob-code-inner js-file-line">    std::mutex m_mapOfDataTriggeredDelegatesMutex{};</td>
      </tr>
      <tr>
        <td id="L7352" class="blob-num js-line-number" data-line-number="7352"></td>
        <td id="LC7352" class="blob-code blob-code-inner js-file-line">    std::map&lt;<span class="pl-c1">int32_t</span>, std::function&lt;<span class="pl-k">void</span>(cluon::data::Envelope &amp;&amp;envelope)&gt;&gt; m_mapOfDataTriggeredDelegates{};</td>
      </tr>
      <tr>
        <td id="L7353" class="blob-num js-line-number" data-line-number="7353"></td>
        <td id="LC7353" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L7354" class="blob-num js-line-number" data-line-number="7354"></td>
        <td id="LC7354" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7355" class="blob-num js-line-number" data-line-number="7355"></td>
        <td id="LC7355" class="blob-code blob-code-inner js-file-line">} <span class="pl-c"><span class="pl-c">//</span> namespace cluon</span></td>
      </tr>
      <tr>
        <td id="L7356" class="blob-num js-line-number" data-line-number="7356"></td>
        <td id="LC7356" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L7357" class="blob-num js-line-number" data-line-number="7357"></td>
        <td id="LC7357" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7358" class="blob-num js-line-number" data-line-number="7358"></td>
        <td id="LC7358" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L7359" class="blob-num js-line-number" data-line-number="7359"></td>
        <td id="LC7359" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * THIS IS AN AUTO-GENERATED FILE. DO NOT MODIFY AS CHANGES MIGHT BE OVERWRITTEN!</span></td>
      </tr>
      <tr>
        <td id="L7360" class="blob-num js-line-number" data-line-number="7360"></td>
        <td id="LC7360" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L7361" class="blob-num js-line-number" data-line-number="7361"></td>
        <td id="LC7361" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">cluon</span> { <span class="pl-k">namespace</span> <span class="pl-en">data</span> {</td>
      </tr>
      <tr>
        <td id="L7362" class="blob-num js-line-number" data-line-number="7362"></td>
        <td id="LC7362" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7363" class="blob-num js-line-number" data-line-number="7363"></td>
        <td id="LC7363" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-c1">int32_t</span> <span class="pl-en">TimeStamp::ID</span>() {</td>
      </tr>
      <tr>
        <td id="L7364" class="blob-num js-line-number" data-line-number="7364"></td>
        <td id="LC7364" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-c1">12</span>;</td>
      </tr>
      <tr>
        <td id="L7365" class="blob-num js-line-number" data-line-number="7365"></td>
        <td id="LC7365" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L7366" class="blob-num js-line-number" data-line-number="7366"></td>
        <td id="LC7366" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7367" class="blob-num js-line-number" data-line-number="7367"></td>
        <td id="LC7367" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">const</span> std::string <span class="pl-en">TimeStamp::ShortName</span>() {</td>
      </tr>
      <tr>
        <td id="L7368" class="blob-num js-line-number" data-line-number="7368"></td>
        <td id="LC7368" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-s"><span class="pl-pds">&quot;</span>TimeStamp<span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L7369" class="blob-num js-line-number" data-line-number="7369"></td>
        <td id="LC7369" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L7370" class="blob-num js-line-number" data-line-number="7370"></td>
        <td id="LC7370" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">const</span> std::string <span class="pl-en">TimeStamp::LongName</span>() {</td>
      </tr>
      <tr>
        <td id="L7371" class="blob-num js-line-number" data-line-number="7371"></td>
        <td id="LC7371" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-s"><span class="pl-pds">&quot;</span>cluon.data.TimeStamp<span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L7372" class="blob-num js-line-number" data-line-number="7372"></td>
        <td id="LC7372" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L7373" class="blob-num js-line-number" data-line-number="7373"></td>
        <td id="LC7373" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7374" class="blob-num js-line-number" data-line-number="7374"></td>
        <td id="LC7374" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> TimeStamp&amp; <span class="pl-en">TimeStamp::seconds</span>(<span class="pl-k">const</span> <span class="pl-c1">int32_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L7375" class="blob-num js-line-number" data-line-number="7375"></td>
        <td id="LC7375" class="blob-code blob-code-inner js-file-line">    m_seconds = v;</td>
      </tr>
      <tr>
        <td id="L7376" class="blob-num js-line-number" data-line-number="7376"></td>
        <td id="LC7376" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> *<span class="pl-c1">this</span>;</td>
      </tr>
      <tr>
        <td id="L7377" class="blob-num js-line-number" data-line-number="7377"></td>
        <td id="LC7377" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L7378" class="blob-num js-line-number" data-line-number="7378"></td>
        <td id="LC7378" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-c1">int32_t</span> <span class="pl-en">TimeStamp::seconds</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L7379" class="blob-num js-line-number" data-line-number="7379"></td>
        <td id="LC7379" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> m_seconds;</td>
      </tr>
      <tr>
        <td id="L7380" class="blob-num js-line-number" data-line-number="7380"></td>
        <td id="LC7380" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L7381" class="blob-num js-line-number" data-line-number="7381"></td>
        <td id="LC7381" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7382" class="blob-num js-line-number" data-line-number="7382"></td>
        <td id="LC7382" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> TimeStamp&amp; <span class="pl-en">TimeStamp::microseconds</span>(<span class="pl-k">const</span> <span class="pl-c1">int32_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L7383" class="blob-num js-line-number" data-line-number="7383"></td>
        <td id="LC7383" class="blob-code blob-code-inner js-file-line">    m_microseconds = v;</td>
      </tr>
      <tr>
        <td id="L7384" class="blob-num js-line-number" data-line-number="7384"></td>
        <td id="LC7384" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> *<span class="pl-c1">this</span>;</td>
      </tr>
      <tr>
        <td id="L7385" class="blob-num js-line-number" data-line-number="7385"></td>
        <td id="LC7385" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L7386" class="blob-num js-line-number" data-line-number="7386"></td>
        <td id="LC7386" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-c1">int32_t</span> <span class="pl-en">TimeStamp::microseconds</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L7387" class="blob-num js-line-number" data-line-number="7387"></td>
        <td id="LC7387" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> m_microseconds;</td>
      </tr>
      <tr>
        <td id="L7388" class="blob-num js-line-number" data-line-number="7388"></td>
        <td id="LC7388" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L7389" class="blob-num js-line-number" data-line-number="7389"></td>
        <td id="LC7389" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7390" class="blob-num js-line-number" data-line-number="7390"></td>
        <td id="LC7390" class="blob-code blob-code-inner js-file-line">}}</td>
      </tr>
      <tr>
        <td id="L7391" class="blob-num js-line-number" data-line-number="7391"></td>
        <td id="LC7391" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7392" class="blob-num js-line-number" data-line-number="7392"></td>
        <td id="LC7392" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7393" class="blob-num js-line-number" data-line-number="7393"></td>
        <td id="LC7393" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L7394" class="blob-num js-line-number" data-line-number="7394"></td>
        <td id="LC7394" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * THIS IS AN AUTO-GENERATED FILE. DO NOT MODIFY AS CHANGES MIGHT BE OVERWRITTEN!</span></td>
      </tr>
      <tr>
        <td id="L7395" class="blob-num js-line-number" data-line-number="7395"></td>
        <td id="LC7395" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L7396" class="blob-num js-line-number" data-line-number="7396"></td>
        <td id="LC7396" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">cluon</span> { <span class="pl-k">namespace</span> <span class="pl-en">data</span> {</td>
      </tr>
      <tr>
        <td id="L7397" class="blob-num js-line-number" data-line-number="7397"></td>
        <td id="LC7397" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7398" class="blob-num js-line-number" data-line-number="7398"></td>
        <td id="LC7398" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-c1">int32_t</span> <span class="pl-en">Envelope::ID</span>() {</td>
      </tr>
      <tr>
        <td id="L7399" class="blob-num js-line-number" data-line-number="7399"></td>
        <td id="LC7399" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-c1">1</span>;</td>
      </tr>
      <tr>
        <td id="L7400" class="blob-num js-line-number" data-line-number="7400"></td>
        <td id="LC7400" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L7401" class="blob-num js-line-number" data-line-number="7401"></td>
        <td id="LC7401" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7402" class="blob-num js-line-number" data-line-number="7402"></td>
        <td id="LC7402" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">const</span> std::string <span class="pl-en">Envelope::ShortName</span>() {</td>
      </tr>
      <tr>
        <td id="L7403" class="blob-num js-line-number" data-line-number="7403"></td>
        <td id="LC7403" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-s"><span class="pl-pds">&quot;</span>Envelope<span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L7404" class="blob-num js-line-number" data-line-number="7404"></td>
        <td id="LC7404" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L7405" class="blob-num js-line-number" data-line-number="7405"></td>
        <td id="LC7405" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">const</span> std::string <span class="pl-en">Envelope::LongName</span>() {</td>
      </tr>
      <tr>
        <td id="L7406" class="blob-num js-line-number" data-line-number="7406"></td>
        <td id="LC7406" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-s"><span class="pl-pds">&quot;</span>cluon.data.Envelope<span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L7407" class="blob-num js-line-number" data-line-number="7407"></td>
        <td id="LC7407" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L7408" class="blob-num js-line-number" data-line-number="7408"></td>
        <td id="LC7408" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7409" class="blob-num js-line-number" data-line-number="7409"></td>
        <td id="LC7409" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> Envelope&amp; <span class="pl-en">Envelope::dataType</span>(<span class="pl-k">const</span> <span class="pl-c1">int32_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L7410" class="blob-num js-line-number" data-line-number="7410"></td>
        <td id="LC7410" class="blob-code blob-code-inner js-file-line">    m_dataType = v;</td>
      </tr>
      <tr>
        <td id="L7411" class="blob-num js-line-number" data-line-number="7411"></td>
        <td id="LC7411" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> *<span class="pl-c1">this</span>;</td>
      </tr>
      <tr>
        <td id="L7412" class="blob-num js-line-number" data-line-number="7412"></td>
        <td id="LC7412" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L7413" class="blob-num js-line-number" data-line-number="7413"></td>
        <td id="LC7413" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-c1">int32_t</span> <span class="pl-en">Envelope::dataType</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L7414" class="blob-num js-line-number" data-line-number="7414"></td>
        <td id="LC7414" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> m_dataType;</td>
      </tr>
      <tr>
        <td id="L7415" class="blob-num js-line-number" data-line-number="7415"></td>
        <td id="LC7415" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L7416" class="blob-num js-line-number" data-line-number="7416"></td>
        <td id="LC7416" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7417" class="blob-num js-line-number" data-line-number="7417"></td>
        <td id="LC7417" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> Envelope&amp; <span class="pl-en">Envelope::serializedData</span>(<span class="pl-k">const</span> std::string &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L7418" class="blob-num js-line-number" data-line-number="7418"></td>
        <td id="LC7418" class="blob-code blob-code-inner js-file-line">    m_serializedData = v;</td>
      </tr>
      <tr>
        <td id="L7419" class="blob-num js-line-number" data-line-number="7419"></td>
        <td id="LC7419" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> *<span class="pl-c1">this</span>;</td>
      </tr>
      <tr>
        <td id="L7420" class="blob-num js-line-number" data-line-number="7420"></td>
        <td id="LC7420" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L7421" class="blob-num js-line-number" data-line-number="7421"></td>
        <td id="LC7421" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::string <span class="pl-en">Envelope::serializedData</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L7422" class="blob-num js-line-number" data-line-number="7422"></td>
        <td id="LC7422" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> m_serializedData;</td>
      </tr>
      <tr>
        <td id="L7423" class="blob-num js-line-number" data-line-number="7423"></td>
        <td id="LC7423" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L7424" class="blob-num js-line-number" data-line-number="7424"></td>
        <td id="LC7424" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7425" class="blob-num js-line-number" data-line-number="7425"></td>
        <td id="LC7425" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> Envelope&amp; <span class="pl-en">Envelope::sent</span>(<span class="pl-k">const</span> cluon::data::TimeStamp &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L7426" class="blob-num js-line-number" data-line-number="7426"></td>
        <td id="LC7426" class="blob-code blob-code-inner js-file-line">    m_sent = v;</td>
      </tr>
      <tr>
        <td id="L7427" class="blob-num js-line-number" data-line-number="7427"></td>
        <td id="LC7427" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> *<span class="pl-c1">this</span>;</td>
      </tr>
      <tr>
        <td id="L7428" class="blob-num js-line-number" data-line-number="7428"></td>
        <td id="LC7428" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L7429" class="blob-num js-line-number" data-line-number="7429"></td>
        <td id="LC7429" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> cluon::data::TimeStamp <span class="pl-en">Envelope::sent</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L7430" class="blob-num js-line-number" data-line-number="7430"></td>
        <td id="LC7430" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> m_sent;</td>
      </tr>
      <tr>
        <td id="L7431" class="blob-num js-line-number" data-line-number="7431"></td>
        <td id="LC7431" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L7432" class="blob-num js-line-number" data-line-number="7432"></td>
        <td id="LC7432" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7433" class="blob-num js-line-number" data-line-number="7433"></td>
        <td id="LC7433" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> Envelope&amp; <span class="pl-en">Envelope::received</span>(<span class="pl-k">const</span> cluon::data::TimeStamp &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L7434" class="blob-num js-line-number" data-line-number="7434"></td>
        <td id="LC7434" class="blob-code blob-code-inner js-file-line">    m_received = v;</td>
      </tr>
      <tr>
        <td id="L7435" class="blob-num js-line-number" data-line-number="7435"></td>
        <td id="LC7435" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> *<span class="pl-c1">this</span>;</td>
      </tr>
      <tr>
        <td id="L7436" class="blob-num js-line-number" data-line-number="7436"></td>
        <td id="LC7436" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L7437" class="blob-num js-line-number" data-line-number="7437"></td>
        <td id="LC7437" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> cluon::data::TimeStamp <span class="pl-en">Envelope::received</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L7438" class="blob-num js-line-number" data-line-number="7438"></td>
        <td id="LC7438" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> m_received;</td>
      </tr>
      <tr>
        <td id="L7439" class="blob-num js-line-number" data-line-number="7439"></td>
        <td id="LC7439" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L7440" class="blob-num js-line-number" data-line-number="7440"></td>
        <td id="LC7440" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7441" class="blob-num js-line-number" data-line-number="7441"></td>
        <td id="LC7441" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> Envelope&amp; <span class="pl-en">Envelope::sampleTimeStamp</span>(<span class="pl-k">const</span> cluon::data::TimeStamp &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L7442" class="blob-num js-line-number" data-line-number="7442"></td>
        <td id="LC7442" class="blob-code blob-code-inner js-file-line">    m_sampleTimeStamp = v;</td>
      </tr>
      <tr>
        <td id="L7443" class="blob-num js-line-number" data-line-number="7443"></td>
        <td id="LC7443" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> *<span class="pl-c1">this</span>;</td>
      </tr>
      <tr>
        <td id="L7444" class="blob-num js-line-number" data-line-number="7444"></td>
        <td id="LC7444" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L7445" class="blob-num js-line-number" data-line-number="7445"></td>
        <td id="LC7445" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> cluon::data::TimeStamp <span class="pl-en">Envelope::sampleTimeStamp</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L7446" class="blob-num js-line-number" data-line-number="7446"></td>
        <td id="LC7446" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> m_sampleTimeStamp;</td>
      </tr>
      <tr>
        <td id="L7447" class="blob-num js-line-number" data-line-number="7447"></td>
        <td id="LC7447" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L7448" class="blob-num js-line-number" data-line-number="7448"></td>
        <td id="LC7448" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7449" class="blob-num js-line-number" data-line-number="7449"></td>
        <td id="LC7449" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> Envelope&amp; <span class="pl-en">Envelope::senderStamp</span>(<span class="pl-k">const</span> <span class="pl-c1">uint32_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L7450" class="blob-num js-line-number" data-line-number="7450"></td>
        <td id="LC7450" class="blob-code blob-code-inner js-file-line">    m_senderStamp = v;</td>
      </tr>
      <tr>
        <td id="L7451" class="blob-num js-line-number" data-line-number="7451"></td>
        <td id="LC7451" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> *<span class="pl-c1">this</span>;</td>
      </tr>
      <tr>
        <td id="L7452" class="blob-num js-line-number" data-line-number="7452"></td>
        <td id="LC7452" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L7453" class="blob-num js-line-number" data-line-number="7453"></td>
        <td id="LC7453" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-c1">uint32_t</span> <span class="pl-en">Envelope::senderStamp</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L7454" class="blob-num js-line-number" data-line-number="7454"></td>
        <td id="LC7454" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> m_senderStamp;</td>
      </tr>
      <tr>
        <td id="L7455" class="blob-num js-line-number" data-line-number="7455"></td>
        <td id="LC7455" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L7456" class="blob-num js-line-number" data-line-number="7456"></td>
        <td id="LC7456" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7457" class="blob-num js-line-number" data-line-number="7457"></td>
        <td id="LC7457" class="blob-code blob-code-inner js-file-line">}}</td>
      </tr>
      <tr>
        <td id="L7458" class="blob-num js-line-number" data-line-number="7458"></td>
        <td id="LC7458" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7459" class="blob-num js-line-number" data-line-number="7459"></td>
        <td id="LC7459" class="blob-code blob-code-inner js-file-line">#endif</td>
      </tr>
      <tr>
        <td id="L7460" class="blob-num js-line-number" data-line-number="7460"></td>
        <td id="LC7460" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifndef</span> BEGIN_HEADER_ONLY_IMPLEMENTATION</td>
      </tr>
      <tr>
        <td id="L7461" class="blob-num js-line-number" data-line-number="7461"></td>
        <td id="LC7461" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">define</span> <span class="pl-en">BEGIN_HEADER_ONLY_IMPLEMENTATION</span></td>
      </tr>
      <tr>
        <td id="L7462" class="blob-num js-line-number" data-line-number="7462"></td>
        <td id="LC7462" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L7463" class="blob-num js-line-number" data-line-number="7463"></td>
        <td id="LC7463" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Copyright (C) 2018  Christian Berger</span></td>
      </tr>
      <tr>
        <td id="L7464" class="blob-num js-line-number" data-line-number="7464"></td>
        <td id="LC7464" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L7465" class="blob-num js-line-number" data-line-number="7465"></td>
        <td id="LC7465" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is free software: you can redistribute it and/or modify</span></td>
      </tr>
      <tr>
        <td id="L7466" class="blob-num js-line-number" data-line-number="7466"></td>
        <td id="LC7466" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * it under the terms of the GNU General Public License as published by</span></td>
      </tr>
      <tr>
        <td id="L7467" class="blob-num js-line-number" data-line-number="7467"></td>
        <td id="LC7467" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * the Free Software Foundation, either version 3 of the License, or</span></td>
      </tr>
      <tr>
        <td id="L7468" class="blob-num js-line-number" data-line-number="7468"></td>
        <td id="LC7468" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * (at your option) any later version.</span></td>
      </tr>
      <tr>
        <td id="L7469" class="blob-num js-line-number" data-line-number="7469"></td>
        <td id="LC7469" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L7470" class="blob-num js-line-number" data-line-number="7470"></td>
        <td id="LC7470" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is distributed in the hope that it will be useful,</span></td>
      </tr>
      <tr>
        <td id="L7471" class="blob-num js-line-number" data-line-number="7471"></td>
        <td id="LC7471" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></td>
      </tr>
      <tr>
        <td id="L7472" class="blob-num js-line-number" data-line-number="7472"></td>
        <td id="LC7472" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></td>
      </tr>
      <tr>
        <td id="L7473" class="blob-num js-line-number" data-line-number="7473"></td>
        <td id="LC7473" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * GNU General Public License for more details.</span></td>
      </tr>
      <tr>
        <td id="L7474" class="blob-num js-line-number" data-line-number="7474"></td>
        <td id="LC7474" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L7475" class="blob-num js-line-number" data-line-number="7475"></td>
        <td id="LC7475" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * You should have received a copy of the GNU General Public License</span></td>
      </tr>
      <tr>
        <td id="L7476" class="blob-num js-line-number" data-line-number="7476"></td>
        <td id="LC7476" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></td>
      </tr>
      <tr>
        <td id="L7477" class="blob-num js-line-number" data-line-number="7477"></td>
        <td id="LC7477" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L7478" class="blob-num js-line-number" data-line-number="7478"></td>
        <td id="LC7478" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7479" class="blob-num js-line-number" data-line-number="7479"></td>
        <td id="LC7479" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;argh/argh.h&quot;</span></td>
      </tr>
      <tr>
        <td id="L7480" class="blob-num js-line-number" data-line-number="7480"></td>
        <td id="LC7480" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7481" class="blob-num js-line-number" data-line-number="7481"></td>
        <td id="LC7481" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/cluon.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L7482" class="blob-num js-line-number" data-line-number="7482"></td>
        <td id="LC7482" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7483" class="blob-num js-line-number" data-line-number="7483"></td>
        <td id="LC7483" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">cluon</span> {</td>
      </tr>
      <tr>
        <td id="L7484" class="blob-num js-line-number" data-line-number="7484"></td>
        <td id="LC7484" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7485" class="blob-num js-line-number" data-line-number="7485"></td>
        <td id="LC7485" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::map&lt;std::string, std::string&gt; <span class="pl-en">getCommandlineArguments</span>(<span class="pl-c1">int32_t</span> argc, <span class="pl-k">char</span> **argv) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L7486" class="blob-num js-line-number" data-line-number="7486"></td>
        <td id="LC7486" class="blob-code blob-code-inner js-file-line">    argh::parser commandline{argc, argv};</td>
      </tr>
      <tr>
        <td id="L7487" class="blob-num js-line-number" data-line-number="7487"></td>
        <td id="LC7487" class="blob-code blob-code-inner js-file-line">    std::map&lt;std::string, std::string&gt; retVal;</td>
      </tr>
      <tr>
        <td id="L7488" class="blob-num js-line-number" data-line-number="7488"></td>
        <td id="LC7488" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7489" class="blob-num js-line-number" data-line-number="7489"></td>
        <td id="LC7489" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">for</span> (<span class="pl-k">auto</span> &amp;positionalArgument : commandline.<span class="pl-c1">pos_args</span>()) { retVal[positionalArgument] = <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>; }</td>
      </tr>
      <tr>
        <td id="L7490" class="blob-num js-line-number" data-line-number="7490"></td>
        <td id="LC7490" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7491" class="blob-num js-line-number" data-line-number="7491"></td>
        <td id="LC7491" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">for</span> (<span class="pl-k">auto</span> &amp;flag : commandline.<span class="pl-c1">flags</span>()) { retVal[flag] = <span class="pl-s"><span class="pl-pds">&quot;</span>1<span class="pl-pds">&quot;</span></span>; }</td>
      </tr>
      <tr>
        <td id="L7492" class="blob-num js-line-number" data-line-number="7492"></td>
        <td id="LC7492" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7493" class="blob-num js-line-number" data-line-number="7493"></td>
        <td id="LC7493" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">for</span> (<span class="pl-k">auto</span> &amp;parameter : commandline.<span class="pl-c1">params</span>()) { retVal[parameter.<span class="pl-smi">first</span>] = parameter.<span class="pl-smi">second</span>; }</td>
      </tr>
      <tr>
        <td id="L7494" class="blob-num js-line-number" data-line-number="7494"></td>
        <td id="LC7494" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7495" class="blob-num js-line-number" data-line-number="7495"></td>
        <td id="LC7495" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> retVal;</td>
      </tr>
      <tr>
        <td id="L7496" class="blob-num js-line-number" data-line-number="7496"></td>
        <td id="LC7496" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L7497" class="blob-num js-line-number" data-line-number="7497"></td>
        <td id="LC7497" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7498" class="blob-num js-line-number" data-line-number="7498"></td>
        <td id="LC7498" class="blob-code blob-code-inner js-file-line">} <span class="pl-c"><span class="pl-c">//</span> namespace cluon</span></td>
      </tr>
      <tr>
        <td id="L7499" class="blob-num js-line-number" data-line-number="7499"></td>
        <td id="LC7499" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L7500" class="blob-num js-line-number" data-line-number="7500"></td>
        <td id="LC7500" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Copyright (C) 2017-2018  Christian Berger</span></td>
      </tr>
      <tr>
        <td id="L7501" class="blob-num js-line-number" data-line-number="7501"></td>
        <td id="LC7501" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L7502" class="blob-num js-line-number" data-line-number="7502"></td>
        <td id="LC7502" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is free software: you can redistribute it and/or modify</span></td>
      </tr>
      <tr>
        <td id="L7503" class="blob-num js-line-number" data-line-number="7503"></td>
        <td id="LC7503" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * it under the terms of the GNU General Public License as published by</span></td>
      </tr>
      <tr>
        <td id="L7504" class="blob-num js-line-number" data-line-number="7504"></td>
        <td id="LC7504" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * the Free Software Foundation, either version 3 of the License, or</span></td>
      </tr>
      <tr>
        <td id="L7505" class="blob-num js-line-number" data-line-number="7505"></td>
        <td id="LC7505" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * (at your option) any later version.</span></td>
      </tr>
      <tr>
        <td id="L7506" class="blob-num js-line-number" data-line-number="7506"></td>
        <td id="LC7506" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L7507" class="blob-num js-line-number" data-line-number="7507"></td>
        <td id="LC7507" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is distributed in the hope that it will be useful,</span></td>
      </tr>
      <tr>
        <td id="L7508" class="blob-num js-line-number" data-line-number="7508"></td>
        <td id="LC7508" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></td>
      </tr>
      <tr>
        <td id="L7509" class="blob-num js-line-number" data-line-number="7509"></td>
        <td id="LC7509" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></td>
      </tr>
      <tr>
        <td id="L7510" class="blob-num js-line-number" data-line-number="7510"></td>
        <td id="LC7510" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * GNU General Public License for more details.</span></td>
      </tr>
      <tr>
        <td id="L7511" class="blob-num js-line-number" data-line-number="7511"></td>
        <td id="LC7511" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L7512" class="blob-num js-line-number" data-line-number="7512"></td>
        <td id="LC7512" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * You should have received a copy of the GNU General Public License</span></td>
      </tr>
      <tr>
        <td id="L7513" class="blob-num js-line-number" data-line-number="7513"></td>
        <td id="LC7513" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></td>
      </tr>
      <tr>
        <td id="L7514" class="blob-num js-line-number" data-line-number="7514"></td>
        <td id="LC7514" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L7515" class="blob-num js-line-number" data-line-number="7515"></td>
        <td id="LC7515" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7516" class="blob-num js-line-number" data-line-number="7516"></td>
        <td id="LC7516" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/MetaMessage.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L7517" class="blob-num js-line-number" data-line-number="7517"></td>
        <td id="LC7517" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7518" class="blob-num js-line-number" data-line-number="7518"></td>
        <td id="LC7518" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">cluon</span> {</td>
      </tr>
      <tr>
        <td id="L7519" class="blob-num js-line-number" data-line-number="7519"></td>
        <td id="LC7519" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> MetaMessage::MetaField::MetaFieldDataTypes <span class="pl-en">MetaMessage::MetaField::fieldDataType</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L7520" class="blob-num js-line-number" data-line-number="7520"></td>
        <td id="LC7520" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> m_fieldDataType;</td>
      </tr>
      <tr>
        <td id="L7521" class="blob-num js-line-number" data-line-number="7521"></td>
        <td id="LC7521" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L7522" class="blob-num js-line-number" data-line-number="7522"></td>
        <td id="LC7522" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7523" class="blob-num js-line-number" data-line-number="7523"></td>
        <td id="LC7523" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> MetaMessage::MetaField &amp;<span class="pl-en">MetaMessage::MetaField::fieldDataType</span>(<span class="pl-k">const</span> MetaMessage::MetaField::MetaFieldDataTypes &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L7524" class="blob-num js-line-number" data-line-number="7524"></td>
        <td id="LC7524" class="blob-code blob-code-inner js-file-line">    m_fieldDataType = v;</td>
      </tr>
      <tr>
        <td id="L7525" class="blob-num js-line-number" data-line-number="7525"></td>
        <td id="LC7525" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> *<span class="pl-c1">this</span>;</td>
      </tr>
      <tr>
        <td id="L7526" class="blob-num js-line-number" data-line-number="7526"></td>
        <td id="LC7526" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L7527" class="blob-num js-line-number" data-line-number="7527"></td>
        <td id="LC7527" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7528" class="blob-num js-line-number" data-line-number="7528"></td>
        <td id="LC7528" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::string <span class="pl-en">MetaMessage::MetaField::fieldDataTypeName</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L7529" class="blob-num js-line-number" data-line-number="7529"></td>
        <td id="LC7529" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> m_fieldDataTypeName;</td>
      </tr>
      <tr>
        <td id="L7530" class="blob-num js-line-number" data-line-number="7530"></td>
        <td id="LC7530" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L7531" class="blob-num js-line-number" data-line-number="7531"></td>
        <td id="LC7531" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7532" class="blob-num js-line-number" data-line-number="7532"></td>
        <td id="LC7532" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> MetaMessage::MetaField &amp;<span class="pl-en">MetaMessage::MetaField::fieldDataTypeName</span>(<span class="pl-k">const</span> std::string &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L7533" class="blob-num js-line-number" data-line-number="7533"></td>
        <td id="LC7533" class="blob-code blob-code-inner js-file-line">    m_fieldDataTypeName = v;</td>
      </tr>
      <tr>
        <td id="L7534" class="blob-num js-line-number" data-line-number="7534"></td>
        <td id="LC7534" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> *<span class="pl-c1">this</span>;</td>
      </tr>
      <tr>
        <td id="L7535" class="blob-num js-line-number" data-line-number="7535"></td>
        <td id="LC7535" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L7536" class="blob-num js-line-number" data-line-number="7536"></td>
        <td id="LC7536" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7537" class="blob-num js-line-number" data-line-number="7537"></td>
        <td id="LC7537" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::string <span class="pl-en">MetaMessage::MetaField::fieldName</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L7538" class="blob-num js-line-number" data-line-number="7538"></td>
        <td id="LC7538" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> m_fieldName;</td>
      </tr>
      <tr>
        <td id="L7539" class="blob-num js-line-number" data-line-number="7539"></td>
        <td id="LC7539" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L7540" class="blob-num js-line-number" data-line-number="7540"></td>
        <td id="LC7540" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7541" class="blob-num js-line-number" data-line-number="7541"></td>
        <td id="LC7541" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> MetaMessage::MetaField &amp;<span class="pl-en">MetaMessage::MetaField::fieldName</span>(<span class="pl-k">const</span> std::string &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L7542" class="blob-num js-line-number" data-line-number="7542"></td>
        <td id="LC7542" class="blob-code blob-code-inner js-file-line">    m_fieldName = v;</td>
      </tr>
      <tr>
        <td id="L7543" class="blob-num js-line-number" data-line-number="7543"></td>
        <td id="LC7543" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> *<span class="pl-c1">this</span>;</td>
      </tr>
      <tr>
        <td id="L7544" class="blob-num js-line-number" data-line-number="7544"></td>
        <td id="LC7544" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L7545" class="blob-num js-line-number" data-line-number="7545"></td>
        <td id="LC7545" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7546" class="blob-num js-line-number" data-line-number="7546"></td>
        <td id="LC7546" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-c1">uint32_t</span> <span class="pl-en">MetaMessage::MetaField::fieldIdentifier</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L7547" class="blob-num js-line-number" data-line-number="7547"></td>
        <td id="LC7547" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> m_fieldIdentifier;</td>
      </tr>
      <tr>
        <td id="L7548" class="blob-num js-line-number" data-line-number="7548"></td>
        <td id="LC7548" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L7549" class="blob-num js-line-number" data-line-number="7549"></td>
        <td id="LC7549" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7550" class="blob-num js-line-number" data-line-number="7550"></td>
        <td id="LC7550" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> MetaMessage::MetaField &amp;<span class="pl-en">MetaMessage::MetaField::fieldIdentifier</span>(<span class="pl-c1">uint32_t</span> v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L7551" class="blob-num js-line-number" data-line-number="7551"></td>
        <td id="LC7551" class="blob-code blob-code-inner js-file-line">    m_fieldIdentifier = v;</td>
      </tr>
      <tr>
        <td id="L7552" class="blob-num js-line-number" data-line-number="7552"></td>
        <td id="LC7552" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> *<span class="pl-c1">this</span>;</td>
      </tr>
      <tr>
        <td id="L7553" class="blob-num js-line-number" data-line-number="7553"></td>
        <td id="LC7553" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L7554" class="blob-num js-line-number" data-line-number="7554"></td>
        <td id="LC7554" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7555" class="blob-num js-line-number" data-line-number="7555"></td>
        <td id="LC7555" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::string <span class="pl-en">MetaMessage::MetaField::defaultInitializationValue</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L7556" class="blob-num js-line-number" data-line-number="7556"></td>
        <td id="LC7556" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> m_defaultInitializationValue;</td>
      </tr>
      <tr>
        <td id="L7557" class="blob-num js-line-number" data-line-number="7557"></td>
        <td id="LC7557" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L7558" class="blob-num js-line-number" data-line-number="7558"></td>
        <td id="LC7558" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7559" class="blob-num js-line-number" data-line-number="7559"></td>
        <td id="LC7559" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> MetaMessage::MetaField &amp;<span class="pl-en">MetaMessage::MetaField::defaultInitializationValue</span>(<span class="pl-k">const</span> std::string &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L7560" class="blob-num js-line-number" data-line-number="7560"></td>
        <td id="LC7560" class="blob-code blob-code-inner js-file-line">    m_defaultInitializationValue = v;</td>
      </tr>
      <tr>
        <td id="L7561" class="blob-num js-line-number" data-line-number="7561"></td>
        <td id="LC7561" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> *<span class="pl-c1">this</span>;</td>
      </tr>
      <tr>
        <td id="L7562" class="blob-num js-line-number" data-line-number="7562"></td>
        <td id="LC7562" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L7563" class="blob-num js-line-number" data-line-number="7563"></td>
        <td id="LC7563" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7564" class="blob-num js-line-number" data-line-number="7564"></td>
        <td id="LC7564" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>//////////////////////////////////////////////////////////////////////////////</span></td>
      </tr>
      <tr>
        <td id="L7565" class="blob-num js-line-number" data-line-number="7565"></td>
        <td id="LC7565" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7566" class="blob-num js-line-number" data-line-number="7566"></td>
        <td id="LC7566" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::string <span class="pl-en">MetaMessage::packageName</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L7567" class="blob-num js-line-number" data-line-number="7567"></td>
        <td id="LC7567" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> m_packageName;</td>
      </tr>
      <tr>
        <td id="L7568" class="blob-num js-line-number" data-line-number="7568"></td>
        <td id="LC7568" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L7569" class="blob-num js-line-number" data-line-number="7569"></td>
        <td id="LC7569" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7570" class="blob-num js-line-number" data-line-number="7570"></td>
        <td id="LC7570" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::string <span class="pl-en">MetaMessage::messageName</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L7571" class="blob-num js-line-number" data-line-number="7571"></td>
        <td id="LC7571" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> m_messageName;</td>
      </tr>
      <tr>
        <td id="L7572" class="blob-num js-line-number" data-line-number="7572"></td>
        <td id="LC7572" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L7573" class="blob-num js-line-number" data-line-number="7573"></td>
        <td id="LC7573" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7574" class="blob-num js-line-number" data-line-number="7574"></td>
        <td id="LC7574" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> MetaMessage &amp;<span class="pl-en">MetaMessage::packageName</span>(<span class="pl-k">const</span> std::string &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L7575" class="blob-num js-line-number" data-line-number="7575"></td>
        <td id="LC7575" class="blob-code blob-code-inner js-file-line">    m_packageName = v;</td>
      </tr>
      <tr>
        <td id="L7576" class="blob-num js-line-number" data-line-number="7576"></td>
        <td id="LC7576" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> *<span class="pl-c1">this</span>;</td>
      </tr>
      <tr>
        <td id="L7577" class="blob-num js-line-number" data-line-number="7577"></td>
        <td id="LC7577" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L7578" class="blob-num js-line-number" data-line-number="7578"></td>
        <td id="LC7578" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7579" class="blob-num js-line-number" data-line-number="7579"></td>
        <td id="LC7579" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> MetaMessage &amp;<span class="pl-en">MetaMessage::messageName</span>(<span class="pl-k">const</span> std::string &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L7580" class="blob-num js-line-number" data-line-number="7580"></td>
        <td id="LC7580" class="blob-code blob-code-inner js-file-line">    m_messageName = v;</td>
      </tr>
      <tr>
        <td id="L7581" class="blob-num js-line-number" data-line-number="7581"></td>
        <td id="LC7581" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> *<span class="pl-c1">this</span>;</td>
      </tr>
      <tr>
        <td id="L7582" class="blob-num js-line-number" data-line-number="7582"></td>
        <td id="LC7582" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L7583" class="blob-num js-line-number" data-line-number="7583"></td>
        <td id="LC7583" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7584" class="blob-num js-line-number" data-line-number="7584"></td>
        <td id="LC7584" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-c1">int32_t</span> <span class="pl-en">MetaMessage::messageIdentifier</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L7585" class="blob-num js-line-number" data-line-number="7585"></td>
        <td id="LC7585" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> m_messageIdentifier;</td>
      </tr>
      <tr>
        <td id="L7586" class="blob-num js-line-number" data-line-number="7586"></td>
        <td id="LC7586" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L7587" class="blob-num js-line-number" data-line-number="7587"></td>
        <td id="LC7587" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7588" class="blob-num js-line-number" data-line-number="7588"></td>
        <td id="LC7588" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> MetaMessage &amp;<span class="pl-en">MetaMessage::messageIdentifier</span>(<span class="pl-c1">int32_t</span> v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L7589" class="blob-num js-line-number" data-line-number="7589"></td>
        <td id="LC7589" class="blob-code blob-code-inner js-file-line">    m_messageIdentifier = v;</td>
      </tr>
      <tr>
        <td id="L7590" class="blob-num js-line-number" data-line-number="7590"></td>
        <td id="LC7590" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> *<span class="pl-c1">this</span>;</td>
      </tr>
      <tr>
        <td id="L7591" class="blob-num js-line-number" data-line-number="7591"></td>
        <td id="LC7591" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L7592" class="blob-num js-line-number" data-line-number="7592"></td>
        <td id="LC7592" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7593" class="blob-num js-line-number" data-line-number="7593"></td>
        <td id="LC7593" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> MetaMessage &amp;<span class="pl-en">MetaMessage::add</span>(MetaMessage::MetaField &amp;&amp;mf) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L7594" class="blob-num js-line-number" data-line-number="7594"></td>
        <td id="LC7594" class="blob-code blob-code-inner js-file-line">    m_listOfMetaFields.<span class="pl-c1">emplace_back</span>(<span class="pl-c1">std::move</span>(mf));</td>
      </tr>
      <tr>
        <td id="L7595" class="blob-num js-line-number" data-line-number="7595"></td>
        <td id="LC7595" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> *<span class="pl-c1">this</span>;</td>
      </tr>
      <tr>
        <td id="L7596" class="blob-num js-line-number" data-line-number="7596"></td>
        <td id="LC7596" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L7597" class="blob-num js-line-number" data-line-number="7597"></td>
        <td id="LC7597" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7598" class="blob-num js-line-number" data-line-number="7598"></td>
        <td id="LC7598" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">const</span> std::vector&lt;MetaMessage::MetaField&gt; &amp;<span class="pl-en">MetaMessage::listOfMetaFields</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L7599" class="blob-num js-line-number" data-line-number="7599"></td>
        <td id="LC7599" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> m_listOfMetaFields;</td>
      </tr>
      <tr>
        <td id="L7600" class="blob-num js-line-number" data-line-number="7600"></td>
        <td id="LC7600" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L7601" class="blob-num js-line-number" data-line-number="7601"></td>
        <td id="LC7601" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7602" class="blob-num js-line-number" data-line-number="7602"></td>
        <td id="LC7602" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">MetaMessage::accept</span>(<span class="pl-k">const</span> std::function&lt;<span class="pl-k">void</span>(<span class="pl-k">const</span> MetaMessage &amp;)&gt; &amp;visit) {</td>
      </tr>
      <tr>
        <td id="L7603" class="blob-num js-line-number" data-line-number="7603"></td>
        <td id="LC7603" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">visit</span>(*<span class="pl-c1">this</span>);</td>
      </tr>
      <tr>
        <td id="L7604" class="blob-num js-line-number" data-line-number="7604"></td>
        <td id="LC7604" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L7605" class="blob-num js-line-number" data-line-number="7605"></td>
        <td id="LC7605" class="blob-code blob-code-inner js-file-line">} <span class="pl-c"><span class="pl-c">//</span> namespace cluon</span></td>
      </tr>
      <tr>
        <td id="L7606" class="blob-num js-line-number" data-line-number="7606"></td>
        <td id="LC7606" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L7607" class="blob-num js-line-number" data-line-number="7607"></td>
        <td id="LC7607" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Copyright (C) 2017-2018  Christian Berger</span></td>
      </tr>
      <tr>
        <td id="L7608" class="blob-num js-line-number" data-line-number="7608"></td>
        <td id="LC7608" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L7609" class="blob-num js-line-number" data-line-number="7609"></td>
        <td id="LC7609" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is free software: you can redistribute it and/or modify</span></td>
      </tr>
      <tr>
        <td id="L7610" class="blob-num js-line-number" data-line-number="7610"></td>
        <td id="LC7610" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * it under the terms of the GNU General Public License as published by</span></td>
      </tr>
      <tr>
        <td id="L7611" class="blob-num js-line-number" data-line-number="7611"></td>
        <td id="LC7611" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * the Free Software Foundation, either version 3 of the License, or</span></td>
      </tr>
      <tr>
        <td id="L7612" class="blob-num js-line-number" data-line-number="7612"></td>
        <td id="LC7612" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * (at your option) any later version.</span></td>
      </tr>
      <tr>
        <td id="L7613" class="blob-num js-line-number" data-line-number="7613"></td>
        <td id="LC7613" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L7614" class="blob-num js-line-number" data-line-number="7614"></td>
        <td id="LC7614" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is distributed in the hope that it will be useful,</span></td>
      </tr>
      <tr>
        <td id="L7615" class="blob-num js-line-number" data-line-number="7615"></td>
        <td id="LC7615" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></td>
      </tr>
      <tr>
        <td id="L7616" class="blob-num js-line-number" data-line-number="7616"></td>
        <td id="LC7616" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></td>
      </tr>
      <tr>
        <td id="L7617" class="blob-num js-line-number" data-line-number="7617"></td>
        <td id="LC7617" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * GNU General Public License for more details.</span></td>
      </tr>
      <tr>
        <td id="L7618" class="blob-num js-line-number" data-line-number="7618"></td>
        <td id="LC7618" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L7619" class="blob-num js-line-number" data-line-number="7619"></td>
        <td id="LC7619" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * You should have received a copy of the GNU General Public License</span></td>
      </tr>
      <tr>
        <td id="L7620" class="blob-num js-line-number" data-line-number="7620"></td>
        <td id="LC7620" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></td>
      </tr>
      <tr>
        <td id="L7621" class="blob-num js-line-number" data-line-number="7621"></td>
        <td id="LC7621" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L7622" class="blob-num js-line-number" data-line-number="7622"></td>
        <td id="LC7622" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7623" class="blob-num js-line-number" data-line-number="7623"></td>
        <td id="LC7623" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/MessageParser.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L7624" class="blob-num js-line-number" data-line-number="7624"></td>
        <td id="LC7624" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/stringtoolbox.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L7625" class="blob-num js-line-number" data-line-number="7625"></td>
        <td id="LC7625" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7626" class="blob-num js-line-number" data-line-number="7626"></td>
        <td id="LC7626" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cpp-peglib/peglib.h&quot;</span></td>
      </tr>
      <tr>
        <td id="L7627" class="blob-num js-line-number" data-line-number="7627"></td>
        <td id="LC7627" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7628" class="blob-num js-line-number" data-line-number="7628"></td>
        <td id="LC7628" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>algorithm<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L7629" class="blob-num js-line-number" data-line-number="7629"></td>
        <td id="LC7629" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>functional<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L7630" class="blob-num js-line-number" data-line-number="7630"></td>
        <td id="LC7630" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>iostream<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L7631" class="blob-num js-line-number" data-line-number="7631"></td>
        <td id="LC7631" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>memory<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L7632" class="blob-num js-line-number" data-line-number="7632"></td>
        <td id="LC7632" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>regex<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L7633" class="blob-num js-line-number" data-line-number="7633"></td>
        <td id="LC7633" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>string<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L7634" class="blob-num js-line-number" data-line-number="7634"></td>
        <td id="LC7634" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>vector<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L7635" class="blob-num js-line-number" data-line-number="7635"></td>
        <td id="LC7635" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7636" class="blob-num js-line-number" data-line-number="7636"></td>
        <td id="LC7636" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">cluon</span> {</td>
      </tr>
      <tr>
        <td id="L7637" class="blob-num js-line-number" data-line-number="7637"></td>
        <td id="LC7637" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7638" class="blob-num js-line-number" data-line-number="7638"></td>
        <td id="LC7638" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::pair&lt;std::vector&lt;MetaMessage&gt;, MessageParser::MessageParserErrorCodes&gt; <span class="pl-en">MessageParser::parse</span>(<span class="pl-k">const</span> std::string &amp;input) {</td>
      </tr>
      <tr>
        <td id="L7639" class="blob-num js-line-number" data-line-number="7639"></td>
        <td id="LC7639" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> <span class="pl-k">char</span> *grammarMessageSpecificationLanguage = <span class="pl-s"><span class="pl-pds">R&quot;(</span></span></td>
      </tr>
      <tr>
        <td id="L7640" class="blob-num js-line-number" data-line-number="7640"></td>
        <td id="LC7640" class="blob-code blob-code-inner js-file-line"><span class="pl-s">        MESSAGES_SPECIFICATION      &lt;- PACKAGE_DECLARATION? MESSAGE_DECLARATION*</span></td>
      </tr>
      <tr>
        <td id="L7641" class="blob-num js-line-number" data-line-number="7641"></td>
        <td id="LC7641" class="blob-code blob-code-inner js-file-line"><span class="pl-s">        PACKAGE_DECLARATION         &lt;- &#39;package&#39; PACKAGE_IDENTIFIER &#39;;&#39;</span></td>
      </tr>
      <tr>
        <td id="L7642" class="blob-num js-line-number" data-line-number="7642"></td>
        <td id="LC7642" class="blob-code blob-code-inner js-file-line"><span class="pl-s">        PACKAGE_IDENTIFIER          &lt;- &lt; IDENTIFIER (&#39;.&#39; IDENTIFIER)* &gt;</span></td>
      </tr>
      <tr>
        <td id="L7643" class="blob-num js-line-number" data-line-number="7643"></td>
        <td id="LC7643" class="blob-code blob-code-inner js-file-line"><span class="pl-s"></span></td>
      </tr>
      <tr>
        <td id="L7644" class="blob-num js-line-number" data-line-number="7644"></td>
        <td id="LC7644" class="blob-code blob-code-inner js-file-line"><span class="pl-s">        MESSAGE_DECLARATION         &lt;- &#39;message&#39; MESSAGE_IDENTIFIER MESSAGE_OPTIONS &#39;{&#39; FIELD* &#39;}&#39;</span></td>
      </tr>
      <tr>
        <td id="L7645" class="blob-num js-line-number" data-line-number="7645"></td>
        <td id="LC7645" class="blob-code blob-code-inner js-file-line"><span class="pl-s">        MESSAGE_IDENTIFIER          &lt;- &lt; IDENTIFIER (&#39;.&#39; IDENTIFIER)* &gt;</span></td>
      </tr>
      <tr>
        <td id="L7646" class="blob-num js-line-number" data-line-number="7646"></td>
        <td id="LC7646" class="blob-code blob-code-inner js-file-line"><span class="pl-s">        MESSAGE_OPTIONS             &lt;- &#39;[&#39; &#39;id&#39; &#39;=&#39; NATURAL_NUMBER &#39;,&#39;? &#39;]&#39;</span></td>
      </tr>
      <tr>
        <td id="L7647" class="blob-num js-line-number" data-line-number="7647"></td>
        <td id="LC7647" class="blob-code blob-code-inner js-file-line"><span class="pl-s"></span></td>
      </tr>
      <tr>
        <td id="L7648" class="blob-num js-line-number" data-line-number="7648"></td>
        <td id="LC7648" class="blob-code blob-code-inner js-file-line"><span class="pl-s">        FIELD                       &lt;- PRIMITIVE_FIELD</span></td>
      </tr>
      <tr>
        <td id="L7649" class="blob-num js-line-number" data-line-number="7649"></td>
        <td id="LC7649" class="blob-code blob-code-inner js-file-line"><span class="pl-s"></span></td>
      </tr>
      <tr>
        <td id="L7650" class="blob-num js-line-number" data-line-number="7650"></td>
        <td id="LC7650" class="blob-code blob-code-inner js-file-line"><span class="pl-s">        PRIMITIVE_FIELD             &lt;- PRIMITIVE_TYPE IDENTIFIER (&#39;[&#39; PRIMITIVE_FIELD_OPTIONS &#39;]&#39;)? &#39;;&#39;</span></td>
      </tr>
      <tr>
        <td id="L7651" class="blob-num js-line-number" data-line-number="7651"></td>
        <td id="LC7651" class="blob-code blob-code-inner js-file-line"><span class="pl-s">        PRIMITIVE_FIELD_OPTIONS     &lt;- PRIMITIVE_FIELD_DEFAULT? &#39;,&#39;? NUMERICAL_FIELD_IDENTIFIER?</span></td>
      </tr>
      <tr>
        <td id="L7652" class="blob-num js-line-number" data-line-number="7652"></td>
        <td id="LC7652" class="blob-code blob-code-inner js-file-line"><span class="pl-s">        NUMERICAL_FIELD_IDENTIFIER  &lt;- &#39;id&#39; &#39;=&#39; NATURAL_NUMBER</span></td>
      </tr>
      <tr>
        <td id="L7653" class="blob-num js-line-number" data-line-number="7653"></td>
        <td id="LC7653" class="blob-code blob-code-inner js-file-line"><span class="pl-s">        PRIMITIVE_FIELD_DEFAULT     &lt;- &#39;default&#39; &#39;=&#39; (FLOAT_NUMBER / BOOL / CHARACTER / STRING)</span></td>
      </tr>
      <tr>
        <td id="L7654" class="blob-num js-line-number" data-line-number="7654"></td>
        <td id="LC7654" class="blob-code blob-code-inner js-file-line"><span class="pl-s">        PRIMITIVE_TYPE              &lt;- &lt; &#39;bool&#39; / &#39;float&#39; / &#39;double&#39; /</span></td>
      </tr>
      <tr>
        <td id="L7655" class="blob-num js-line-number" data-line-number="7655"></td>
        <td id="LC7655" class="blob-code blob-code-inner js-file-line"><span class="pl-s">                                         &#39;char&#39; /</span></td>
      </tr>
      <tr>
        <td id="L7656" class="blob-num js-line-number" data-line-number="7656"></td>
        <td id="LC7656" class="blob-code blob-code-inner js-file-line"><span class="pl-s">                                         &#39;bytes&#39; / &#39;string&#39; /</span></td>
      </tr>
      <tr>
        <td id="L7657" class="blob-num js-line-number" data-line-number="7657"></td>
        <td id="LC7657" class="blob-code blob-code-inner js-file-line"><span class="pl-s">                                         &#39;int8&#39; / &#39;uint8&#39; / </span></td>
      </tr>
      <tr>
        <td id="L7658" class="blob-num js-line-number" data-line-number="7658"></td>
        <td id="LC7658" class="blob-code blob-code-inner js-file-line"><span class="pl-s">                                         &#39;int16&#39; / &#39;uint16&#39; / </span></td>
      </tr>
      <tr>
        <td id="L7659" class="blob-num js-line-number" data-line-number="7659"></td>
        <td id="LC7659" class="blob-code blob-code-inner js-file-line"><span class="pl-s">                                         &#39;int32&#39; / &#39;uint32&#39; / </span></td>
      </tr>
      <tr>
        <td id="L7660" class="blob-num js-line-number" data-line-number="7660"></td>
        <td id="LC7660" class="blob-code blob-code-inner js-file-line"><span class="pl-s">                                         &#39;int64&#39; / &#39;uint64&#39; /</span></td>
      </tr>
      <tr>
        <td id="L7661" class="blob-num js-line-number" data-line-number="7661"></td>
        <td id="LC7661" class="blob-code blob-code-inner js-file-line"><span class="pl-s">                                         MESSAGE_TYPE &gt;</span></td>
      </tr>
      <tr>
        <td id="L7662" class="blob-num js-line-number" data-line-number="7662"></td>
        <td id="LC7662" class="blob-code blob-code-inner js-file-line"><span class="pl-s"></span></td>
      </tr>
      <tr>
        <td id="L7663" class="blob-num js-line-number" data-line-number="7663"></td>
        <td id="LC7663" class="blob-code blob-code-inner js-file-line"><span class="pl-s">        MESSAGE_TYPE                &lt;- &lt; IDENTIFIER (&#39;.&#39; IDENTIFIER)* &gt;</span></td>
      </tr>
      <tr>
        <td id="L7664" class="blob-num js-line-number" data-line-number="7664"></td>
        <td id="LC7664" class="blob-code blob-code-inner js-file-line"><span class="pl-s"></span></td>
      </tr>
      <tr>
        <td id="L7665" class="blob-num js-line-number" data-line-number="7665"></td>
        <td id="LC7665" class="blob-code blob-code-inner js-file-line"><span class="pl-s">        IDENTIFIER                  &lt;- &lt; [a-zA-Z][a-zA-Z0-9_]* &gt;</span></td>
      </tr>
      <tr>
        <td id="L7666" class="blob-num js-line-number" data-line-number="7666"></td>
        <td id="LC7666" class="blob-code blob-code-inner js-file-line"><span class="pl-s">        DIGIT                       &lt;- &lt; [0-9] &gt;</span></td>
      </tr>
      <tr>
        <td id="L7667" class="blob-num js-line-number" data-line-number="7667"></td>
        <td id="LC7667" class="blob-code blob-code-inner js-file-line"><span class="pl-s">        NATURAL_NUMBER              &lt;- &lt; [1-9] DIGIT* &gt;</span></td>
      </tr>
      <tr>
        <td id="L7668" class="blob-num js-line-number" data-line-number="7668"></td>
        <td id="LC7668" class="blob-code blob-code-inner js-file-line"><span class="pl-s">        FLOAT_NUMBER                &lt;- &lt; (&#39;+&#39; / &#39;-&#39;)? DIGIT DIGIT* ((&#39;.&#39;) DIGIT*)? &gt;</span></td>
      </tr>
      <tr>
        <td id="L7669" class="blob-num js-line-number" data-line-number="7669"></td>
        <td id="LC7669" class="blob-code blob-code-inner js-file-line"><span class="pl-s">        BOOL                        &lt;- &lt; &#39;true&#39; &gt; / &lt; &#39;false&#39; &gt;</span></td>
      </tr>
      <tr>
        <td id="L7670" class="blob-num js-line-number" data-line-number="7670"></td>
        <td id="LC7670" class="blob-code blob-code-inner js-file-line"><span class="pl-s">        STRING                      &lt;- &#39;&quot;&#39; &lt; (!&#39;&quot;&#39;.)* &gt; &#39;&quot;&#39;</span></td>
      </tr>
      <tr>
        <td id="L7671" class="blob-num js-line-number" data-line-number="7671"></td>
        <td id="LC7671" class="blob-code blob-code-inner js-file-line"><span class="pl-s">        CHARACTER                   &lt;- &#39;\&#39;&#39; &lt; (!&#39;\&#39;&#39; .) &gt; &#39;\&#39;&#39;</span></td>
      </tr>
      <tr>
        <td id="L7672" class="blob-num js-line-number" data-line-number="7672"></td>
        <td id="LC7672" class="blob-code blob-code-inner js-file-line"><span class="pl-s"></span></td>
      </tr>
      <tr>
        <td id="L7673" class="blob-num js-line-number" data-line-number="7673"></td>
        <td id="LC7673" class="blob-code blob-code-inner js-file-line"><span class="pl-s">        %whitespace                 &lt;- [ \t\r\n]*</span></td>
      </tr>
      <tr>
        <td id="L7674" class="blob-num js-line-number" data-line-number="7674"></td>
        <td id="LC7674" class="blob-code blob-code-inner js-file-line"><span class="pl-s">    <span class="pl-pds">)&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L7675" class="blob-num js-line-number" data-line-number="7675"></td>
        <td id="LC7675" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7676" class="blob-num js-line-number" data-line-number="7676"></td>
        <td id="LC7676" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span>//////////////////////////////////////////////////////////////////////////</span></td>
      </tr>
      <tr>
        <td id="L7677" class="blob-num js-line-number" data-line-number="7677"></td>
        <td id="LC7677" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7678" class="blob-num js-line-number" data-line-number="7678"></td>
        <td id="LC7678" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Function to check for unique field names.</span></td>
      </tr>
      <tr>
        <td id="L7679" class="blob-num js-line-number" data-line-number="7679"></td>
        <td id="LC7679" class="blob-code blob-code-inner js-file-line">    std::function&lt;<span class="pl-c1">bool</span>(<span class="pl-k">const</span> peg::Ast &amp;, std::string &amp;, std::vector&lt;std::string&gt; &amp;, std::vector&lt;std::string&gt; &amp;, std::vector&lt;<span class="pl-c1">int32_t</span>&gt; &amp;, std::vector&lt;<span class="pl-c1">int32_t</span>&gt; &amp;)&gt;</td>
      </tr>
      <tr>
        <td id="L7680" class="blob-num js-line-number" data-line-number="7680"></td>
        <td id="LC7680" class="blob-code blob-code-inner js-file-line">        check4UniqueFieldNames = [&amp;checkForUniqueFieldNames = check4UniqueFieldNames](<span class="pl-k">const</span> peg::Ast &amp;ast,</td>
      </tr>
      <tr>
        <td id="L7681" class="blob-num js-line-number" data-line-number="7681"></td>
        <td id="LC7681" class="blob-code blob-code-inner js-file-line">                                                                                      std::string &amp;prefix,</td>
      </tr>
      <tr>
        <td id="L7682" class="blob-num js-line-number" data-line-number="7682"></td>
        <td id="LC7682" class="blob-code blob-code-inner js-file-line">                                                                                      std::vector&lt;std::string&gt; &amp;messageNames,</td>
      </tr>
      <tr>
        <td id="L7683" class="blob-num js-line-number" data-line-number="7683"></td>
        <td id="LC7683" class="blob-code blob-code-inner js-file-line">                                                                                      std::vector&lt;std::string&gt; &amp;fieldNames,</td>
      </tr>
      <tr>
        <td id="L7684" class="blob-num js-line-number" data-line-number="7684"></td>
        <td id="LC7684" class="blob-code blob-code-inner js-file-line">                                                                                      std::vector&lt;<span class="pl-c1">int32_t</span>&gt; &amp;numericalMessageIdentifiers,</td>
      </tr>
      <tr>
        <td id="L7685" class="blob-num js-line-number" data-line-number="7685"></td>
        <td id="LC7685" class="blob-code blob-code-inner js-file-line">                                                                                      std::vector&lt;<span class="pl-c1">int32_t</span>&gt; &amp;numericalFieldIdentifiers) {</td>
      </tr>
      <tr>
        <td id="L7686" class="blob-num js-line-number" data-line-number="7686"></td>
        <td id="LC7686" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">bool</span> retVal = <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L7687" class="blob-num js-line-number" data-line-number="7687"></td>
        <td id="LC7687" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> First, we need to visit the children of AST node MESSAGES_SPECIFICATION.</span></td>
      </tr>
      <tr>
        <td id="L7688" class="blob-num js-line-number" data-line-number="7688"></td>
        <td id="LC7688" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-s"><span class="pl-pds">&quot;</span>MESSAGES_SPECIFICATION<span class="pl-pds">&quot;</span></span> == ast.<span class="pl-smi">name</span>) {</td>
      </tr>
      <tr>
        <td id="L7689" class="blob-num js-line-number" data-line-number="7689"></td>
        <td id="LC7689" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">for</span> (<span class="pl-k">const</span> <span class="pl-k">auto</span> &amp;node : ast.<span class="pl-smi">nodes</span>) {</td>
      </tr>
      <tr>
        <td id="L7690" class="blob-num js-line-number" data-line-number="7690"></td>
        <td id="LC7690" class="blob-code blob-code-inner js-file-line">                    retVal &amp;= <span class="pl-c1">checkForUniqueFieldNames</span>(*node, prefix, messageNames, fieldNames, numericalMessageIdentifiers, numericalFieldIdentifiers);</td>
      </tr>
      <tr>
        <td id="L7691" class="blob-num js-line-number" data-line-number="7691"></td>
        <td id="LC7691" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L7692" class="blob-num js-line-number" data-line-number="7692"></td>
        <td id="LC7692" class="blob-code blob-code-inner js-file-line">                <span class="pl-c"><span class="pl-c">//</span> Try finding duplicated message identifiers.</span></td>
      </tr>
      <tr>
        <td id="L7693" class="blob-num js-line-number" data-line-number="7693"></td>
        <td id="LC7693" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">if</span> (retVal) {</td>
      </tr>
      <tr>
        <td id="L7694" class="blob-num js-line-number" data-line-number="7694"></td>
        <td id="LC7694" class="blob-code blob-code-inner js-file-line">                    <span class="pl-c1">std::sort</span>(<span class="pl-c1">std::begin</span>(numericalMessageIdentifiers), <span class="pl-c1">std::end</span>(numericalMessageIdentifiers));</td>
      </tr>
      <tr>
        <td id="L7695" class="blob-num js-line-number" data-line-number="7695"></td>
        <td id="LC7695" class="blob-code blob-code-inner js-file-line">                    <span class="pl-c1">int32_t</span> duplicatedMessageIdentifier{-<span class="pl-c1">1</span>};</td>
      </tr>
      <tr>
        <td id="L7696" class="blob-num js-line-number" data-line-number="7696"></td>
        <td id="LC7696" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">for</span> (<span class="pl-k">auto</span> it{<span class="pl-c1">std::begin</span>(numericalMessageIdentifiers)}; it != <span class="pl-c1">std::end</span>(numericalMessageIdentifiers); it++) {</td>
      </tr>
      <tr>
        <td id="L7697" class="blob-num js-line-number" data-line-number="7697"></td>
        <td id="LC7697" class="blob-code blob-code-inner js-file-line">                        <span class="pl-k">if</span> (it + <span class="pl-c1">1</span> != <span class="pl-c1">std::end</span>(numericalMessageIdentifiers)) {</td>
      </tr>
      <tr>
        <td id="L7698" class="blob-num js-line-number" data-line-number="7698"></td>
        <td id="LC7698" class="blob-code blob-code-inner js-file-line">                            <span class="pl-k">if</span> (<span class="pl-c1">std::find</span>(it + <span class="pl-c1">1</span>, <span class="pl-c1">std::end</span>(numericalMessageIdentifiers), *it) != <span class="pl-c1">std::end</span>(numericalMessageIdentifiers)) {</td>
      </tr>
      <tr>
        <td id="L7699" class="blob-num js-line-number" data-line-number="7699"></td>
        <td id="LC7699" class="blob-code blob-code-inner js-file-line">                                duplicatedMessageIdentifier = *it;</td>
      </tr>
      <tr>
        <td id="L7700" class="blob-num js-line-number" data-line-number="7700"></td>
        <td id="LC7700" class="blob-code blob-code-inner js-file-line">                            }</td>
      </tr>
      <tr>
        <td id="L7701" class="blob-num js-line-number" data-line-number="7701"></td>
        <td id="LC7701" class="blob-code blob-code-inner js-file-line">                        }</td>
      </tr>
      <tr>
        <td id="L7702" class="blob-num js-line-number" data-line-number="7702"></td>
        <td id="LC7702" class="blob-code blob-code-inner js-file-line">                    }</td>
      </tr>
      <tr>
        <td id="L7703" class="blob-num js-line-number" data-line-number="7703"></td>
        <td id="LC7703" class="blob-code blob-code-inner js-file-line">                    retVal &amp;= (-<span class="pl-c1">1</span> == duplicatedMessageIdentifier);</td>
      </tr>
      <tr>
        <td id="L7704" class="blob-num js-line-number" data-line-number="7704"></td>
        <td id="LC7704" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">if</span> (!retVal) {</td>
      </tr>
      <tr>
        <td id="L7705" class="blob-num js-line-number" data-line-number="7705"></td>
        <td id="LC7705" class="blob-code blob-code-inner js-file-line">                        std::cerr &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>[cluon::MessageParser] Found duplicated numerical message identifier: <span class="pl-pds">&quot;</span></span> &lt;&lt; duplicatedMessageIdentifier &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\n</span><span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L7706" class="blob-num js-line-number" data-line-number="7706"></td>
        <td id="LC7706" class="blob-code blob-code-inner js-file-line">                    }</td>
      </tr>
      <tr>
        <td id="L7707" class="blob-num js-line-number" data-line-number="7707"></td>
        <td id="LC7707" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L7708" class="blob-num js-line-number" data-line-number="7708"></td>
        <td id="LC7708" class="blob-code blob-code-inner js-file-line">                <span class="pl-c"><span class="pl-c">//</span> Try finding duplicated message names.</span></td>
      </tr>
      <tr>
        <td id="L7709" class="blob-num js-line-number" data-line-number="7709"></td>
        <td id="LC7709" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">if</span> (retVal) {</td>
      </tr>
      <tr>
        <td id="L7710" class="blob-num js-line-number" data-line-number="7710"></td>
        <td id="LC7710" class="blob-code blob-code-inner js-file-line">                    <span class="pl-c1">std::sort</span>(<span class="pl-c1">std::begin</span>(messageNames), <span class="pl-c1">std::end</span>(messageNames));</td>
      </tr>
      <tr>
        <td id="L7711" class="blob-num js-line-number" data-line-number="7711"></td>
        <td id="LC7711" class="blob-code blob-code-inner js-file-line">                    std::string duplicatedMessageName;</td>
      </tr>
      <tr>
        <td id="L7712" class="blob-num js-line-number" data-line-number="7712"></td>
        <td id="LC7712" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">for</span> (<span class="pl-k">auto</span> it{<span class="pl-c1">std::begin</span>(messageNames)}; it != <span class="pl-c1">std::end</span>(messageNames); it++) {</td>
      </tr>
      <tr>
        <td id="L7713" class="blob-num js-line-number" data-line-number="7713"></td>
        <td id="LC7713" class="blob-code blob-code-inner js-file-line">                        <span class="pl-k">if</span> (it + <span class="pl-c1">1</span> != <span class="pl-c1">std::end</span>(messageNames)) {</td>
      </tr>
      <tr>
        <td id="L7714" class="blob-num js-line-number" data-line-number="7714"></td>
        <td id="LC7714" class="blob-code blob-code-inner js-file-line">                            <span class="pl-k">if</span> (<span class="pl-c1">std::find</span>(it + <span class="pl-c1">1</span>, <span class="pl-c1">std::end</span>(messageNames), *it) != <span class="pl-c1">std::end</span>(messageNames)) {</td>
      </tr>
      <tr>
        <td id="L7715" class="blob-num js-line-number" data-line-number="7715"></td>
        <td id="LC7715" class="blob-code blob-code-inner js-file-line">                                duplicatedMessageName = *it;</td>
      </tr>
      <tr>
        <td id="L7716" class="blob-num js-line-number" data-line-number="7716"></td>
        <td id="LC7716" class="blob-code blob-code-inner js-file-line">                            }</td>
      </tr>
      <tr>
        <td id="L7717" class="blob-num js-line-number" data-line-number="7717"></td>
        <td id="LC7717" class="blob-code blob-code-inner js-file-line">                        }</td>
      </tr>
      <tr>
        <td id="L7718" class="blob-num js-line-number" data-line-number="7718"></td>
        <td id="LC7718" class="blob-code blob-code-inner js-file-line">                    }</td>
      </tr>
      <tr>
        <td id="L7719" class="blob-num js-line-number" data-line-number="7719"></td>
        <td id="LC7719" class="blob-code blob-code-inner js-file-line">                    retVal &amp;= (duplicatedMessageName.<span class="pl-c1">empty</span>());</td>
      </tr>
      <tr>
        <td id="L7720" class="blob-num js-line-number" data-line-number="7720"></td>
        <td id="LC7720" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">if</span> (!retVal) {</td>
      </tr>
      <tr>
        <td id="L7721" class="blob-num js-line-number" data-line-number="7721"></td>
        <td id="LC7721" class="blob-code blob-code-inner js-file-line">                        std::cerr &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>[cluon::MessageParser] Found duplicated message name &#39;<span class="pl-pds">&quot;</span></span> &lt;&lt; duplicatedMessageName &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>&#39;<span class="pl-pds">&quot;</span></span> &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\n</span><span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L7722" class="blob-num js-line-number" data-line-number="7722"></td>
        <td id="LC7722" class="blob-code blob-code-inner js-file-line">                    }</td>
      </tr>
      <tr>
        <td id="L7723" class="blob-num js-line-number" data-line-number="7723"></td>
        <td id="LC7723" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L7724" class="blob-num js-line-number" data-line-number="7724"></td>
        <td id="LC7724" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L7725" class="blob-num js-line-number" data-line-number="7725"></td>
        <td id="LC7725" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> Second, we need to visit the children of AST node MESSAGE_DECLARATION.</span></td>
      </tr>
      <tr>
        <td id="L7726" class="blob-num js-line-number" data-line-number="7726"></td>
        <td id="LC7726" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-s"><span class="pl-pds">&quot;</span>MESSAGE_DECLARATION<span class="pl-pds">&quot;</span></span> == ast.<span class="pl-smi">name</span>) {</td>
      </tr>
      <tr>
        <td id="L7727" class="blob-num js-line-number" data-line-number="7727"></td>
        <td id="LC7727" class="blob-code blob-code-inner js-file-line">                fieldNames.<span class="pl-c1">clear</span>();</td>
      </tr>
      <tr>
        <td id="L7728" class="blob-num js-line-number" data-line-number="7728"></td>
        <td id="LC7728" class="blob-code blob-code-inner js-file-line">                numericalFieldIdentifiers.<span class="pl-c1">clear</span>();</td>
      </tr>
      <tr>
        <td id="L7729" class="blob-num js-line-number" data-line-number="7729"></td>
        <td id="LC7729" class="blob-code blob-code-inner js-file-line">                prefix = <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L7730" class="blob-num js-line-number" data-line-number="7730"></td>
        <td id="LC7730" class="blob-code blob-code-inner js-file-line">                retVal = <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L7731" class="blob-num js-line-number" data-line-number="7731"></td>
        <td id="LC7731" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7732" class="blob-num js-line-number" data-line-number="7732"></td>
        <td id="LC7732" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">for</span> (<span class="pl-k">const</span> <span class="pl-k">auto</span> &amp;node : ast.<span class="pl-smi">nodes</span>) {</td>
      </tr>
      <tr>
        <td id="L7733" class="blob-num js-line-number" data-line-number="7733"></td>
        <td id="LC7733" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">if</span> (<span class="pl-s"><span class="pl-pds">&quot;</span>MESSAGE_IDENTIFIER<span class="pl-pds">&quot;</span></span> == node-&gt;name) {</td>
      </tr>
      <tr>
        <td id="L7734" class="blob-num js-line-number" data-line-number="7734"></td>
        <td id="LC7734" class="blob-code blob-code-inner js-file-line">                        prefix = node-&gt;token;</td>
      </tr>
      <tr>
        <td id="L7735" class="blob-num js-line-number" data-line-number="7735"></td>
        <td id="LC7735" class="blob-code blob-code-inner js-file-line">                        messageNames.<span class="pl-c1">push_back</span>(::<span class="pl-c1">stringtoolbox::trim</span>(prefix));</td>
      </tr>
      <tr>
        <td id="L7736" class="blob-num js-line-number" data-line-number="7736"></td>
        <td id="LC7736" class="blob-code blob-code-inner js-file-line">                    } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-s"><span class="pl-pds">&quot;</span>NATURAL_NUMBER<span class="pl-pds">&quot;</span></span> == node-&gt;name) {</td>
      </tr>
      <tr>
        <td id="L7737" class="blob-num js-line-number" data-line-number="7737"></td>
        <td id="LC7737" class="blob-code blob-code-inner js-file-line">                        numericalMessageIdentifiers.<span class="pl-c1">push_back</span>(<span class="pl-c1">std::stoi</span>(node-&gt;token));</td>
      </tr>
      <tr>
        <td id="L7738" class="blob-num js-line-number" data-line-number="7738"></td>
        <td id="LC7738" class="blob-code blob-code-inner js-file-line">                    } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-s"><span class="pl-pds">&quot;</span>PRIMITIVE_FIELD<span class="pl-pds">&quot;</span></span> == node-&gt;name) {</td>
      </tr>
      <tr>
        <td id="L7739" class="blob-num js-line-number" data-line-number="7739"></td>
        <td id="LC7739" class="blob-code blob-code-inner js-file-line">                        retVal &amp;= <span class="pl-c1">checkForUniqueFieldNames</span>(*node, prefix, messageNames, fieldNames, numericalMessageIdentifiers, numericalFieldIdentifiers);</td>
      </tr>
      <tr>
        <td id="L7740" class="blob-num js-line-number" data-line-number="7740"></td>
        <td id="LC7740" class="blob-code blob-code-inner js-file-line">                    }</td>
      </tr>
      <tr>
        <td id="L7741" class="blob-num js-line-number" data-line-number="7741"></td>
        <td id="LC7741" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L7742" class="blob-num js-line-number" data-line-number="7742"></td>
        <td id="LC7742" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7743" class="blob-num js-line-number" data-line-number="7743"></td>
        <td id="LC7743" class="blob-code blob-code-inner js-file-line">                <span class="pl-c"><span class="pl-c">//</span> Try finding duplicated numerical field identifiers.</span></td>
      </tr>
      <tr>
        <td id="L7744" class="blob-num js-line-number" data-line-number="7744"></td>
        <td id="LC7744" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">if</span> (retVal) {</td>
      </tr>
      <tr>
        <td id="L7745" class="blob-num js-line-number" data-line-number="7745"></td>
        <td id="LC7745" class="blob-code blob-code-inner js-file-line">                    <span class="pl-c1">std::sort</span>(<span class="pl-c1">std::begin</span>(numericalFieldIdentifiers), <span class="pl-c1">std::end</span>(numericalFieldIdentifiers));</td>
      </tr>
      <tr>
        <td id="L7746" class="blob-num js-line-number" data-line-number="7746"></td>
        <td id="LC7746" class="blob-code blob-code-inner js-file-line">                    <span class="pl-c1">int32_t</span> duplicatedFieldIdentifier{-<span class="pl-c1">1</span>};</td>
      </tr>
      <tr>
        <td id="L7747" class="blob-num js-line-number" data-line-number="7747"></td>
        <td id="LC7747" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">for</span> (<span class="pl-k">auto</span> it{<span class="pl-c1">std::begin</span>(numericalFieldIdentifiers)}; it != <span class="pl-c1">std::end</span>(numericalFieldIdentifiers); it++) {</td>
      </tr>
      <tr>
        <td id="L7748" class="blob-num js-line-number" data-line-number="7748"></td>
        <td id="LC7748" class="blob-code blob-code-inner js-file-line">                        <span class="pl-k">if</span> (it + <span class="pl-c1">1</span> != <span class="pl-c1">std::end</span>(numericalFieldIdentifiers)) {</td>
      </tr>
      <tr>
        <td id="L7749" class="blob-num js-line-number" data-line-number="7749"></td>
        <td id="LC7749" class="blob-code blob-code-inner js-file-line">                            <span class="pl-k">if</span> (<span class="pl-c1">std::find</span>(it + <span class="pl-c1">1</span>, <span class="pl-c1">std::end</span>(numericalFieldIdentifiers), *it) != <span class="pl-c1">std::end</span>(numericalFieldIdentifiers)) {</td>
      </tr>
      <tr>
        <td id="L7750" class="blob-num js-line-number" data-line-number="7750"></td>
        <td id="LC7750" class="blob-code blob-code-inner js-file-line">                                duplicatedFieldIdentifier = *it;</td>
      </tr>
      <tr>
        <td id="L7751" class="blob-num js-line-number" data-line-number="7751"></td>
        <td id="LC7751" class="blob-code blob-code-inner js-file-line">                            }</td>
      </tr>
      <tr>
        <td id="L7752" class="blob-num js-line-number" data-line-number="7752"></td>
        <td id="LC7752" class="blob-code blob-code-inner js-file-line">                        }</td>
      </tr>
      <tr>
        <td id="L7753" class="blob-num js-line-number" data-line-number="7753"></td>
        <td id="LC7753" class="blob-code blob-code-inner js-file-line">                    }</td>
      </tr>
      <tr>
        <td id="L7754" class="blob-num js-line-number" data-line-number="7754"></td>
        <td id="LC7754" class="blob-code blob-code-inner js-file-line">                    retVal &amp;= (-<span class="pl-c1">1</span> == duplicatedFieldIdentifier);</td>
      </tr>
      <tr>
        <td id="L7755" class="blob-num js-line-number" data-line-number="7755"></td>
        <td id="LC7755" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">if</span> (!retVal) {</td>
      </tr>
      <tr>
        <td id="L7756" class="blob-num js-line-number" data-line-number="7756"></td>
        <td id="LC7756" class="blob-code blob-code-inner js-file-line">                        std::cerr &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>[cluon::MessageParser] Found duplicated numerical field identifier in message <span class="pl-pds">&quot;</span></span></td>
      </tr>
      <tr>
        <td id="L7757" class="blob-num js-line-number" data-line-number="7757"></td>
        <td id="LC7757" class="blob-code blob-code-inner js-file-line">                                  &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>&#39;<span class="pl-pds">&quot;</span></span> &lt;&lt; ::<span class="pl-c1">stringtoolbox::trim</span>(prefix) &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>&#39;: <span class="pl-pds">&quot;</span></span> &lt;&lt; duplicatedFieldIdentifier &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\n</span><span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L7758" class="blob-num js-line-number" data-line-number="7758"></td>
        <td id="LC7758" class="blob-code blob-code-inner js-file-line">                    }</td>
      </tr>
      <tr>
        <td id="L7759" class="blob-num js-line-number" data-line-number="7759"></td>
        <td id="LC7759" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L7760" class="blob-num js-line-number" data-line-number="7760"></td>
        <td id="LC7760" class="blob-code blob-code-inner js-file-line">                <span class="pl-c"><span class="pl-c">//</span> Try finding duplicated field names.</span></td>
      </tr>
      <tr>
        <td id="L7761" class="blob-num js-line-number" data-line-number="7761"></td>
        <td id="LC7761" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">if</span> (retVal) {</td>
      </tr>
      <tr>
        <td id="L7762" class="blob-num js-line-number" data-line-number="7762"></td>
        <td id="LC7762" class="blob-code blob-code-inner js-file-line">                    <span class="pl-c1">std::sort</span>(<span class="pl-c1">std::begin</span>(fieldNames), <span class="pl-c1">std::end</span>(fieldNames));</td>
      </tr>
      <tr>
        <td id="L7763" class="blob-num js-line-number" data-line-number="7763"></td>
        <td id="LC7763" class="blob-code blob-code-inner js-file-line">                    std::string duplicatedFieldName;</td>
      </tr>
      <tr>
        <td id="L7764" class="blob-num js-line-number" data-line-number="7764"></td>
        <td id="LC7764" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">for</span> (<span class="pl-k">auto</span> it{<span class="pl-c1">std::begin</span>(fieldNames)}; it != <span class="pl-c1">std::end</span>(fieldNames); it++) {</td>
      </tr>
      <tr>
        <td id="L7765" class="blob-num js-line-number" data-line-number="7765"></td>
        <td id="LC7765" class="blob-code blob-code-inner js-file-line">                        <span class="pl-k">if</span> (it + <span class="pl-c1">1</span> != <span class="pl-c1">std::end</span>(fieldNames)) {</td>
      </tr>
      <tr>
        <td id="L7766" class="blob-num js-line-number" data-line-number="7766"></td>
        <td id="LC7766" class="blob-code blob-code-inner js-file-line">                            <span class="pl-k">if</span> (<span class="pl-c1">std::find</span>(it + <span class="pl-c1">1</span>, <span class="pl-c1">std::end</span>(fieldNames), *it) != <span class="pl-c1">std::end</span>(fieldNames)) {</td>
      </tr>
      <tr>
        <td id="L7767" class="blob-num js-line-number" data-line-number="7767"></td>
        <td id="LC7767" class="blob-code blob-code-inner js-file-line">                                duplicatedFieldName = *it;</td>
      </tr>
      <tr>
        <td id="L7768" class="blob-num js-line-number" data-line-number="7768"></td>
        <td id="LC7768" class="blob-code blob-code-inner js-file-line">                            }</td>
      </tr>
      <tr>
        <td id="L7769" class="blob-num js-line-number" data-line-number="7769"></td>
        <td id="LC7769" class="blob-code blob-code-inner js-file-line">                        }</td>
      </tr>
      <tr>
        <td id="L7770" class="blob-num js-line-number" data-line-number="7770"></td>
        <td id="LC7770" class="blob-code blob-code-inner js-file-line">                    }</td>
      </tr>
      <tr>
        <td id="L7771" class="blob-num js-line-number" data-line-number="7771"></td>
        <td id="LC7771" class="blob-code blob-code-inner js-file-line">                    retVal &amp;= (duplicatedFieldName.<span class="pl-c1">empty</span>());</td>
      </tr>
      <tr>
        <td id="L7772" class="blob-num js-line-number" data-line-number="7772"></td>
        <td id="LC7772" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">if</span> (!retVal) {</td>
      </tr>
      <tr>
        <td id="L7773" class="blob-num js-line-number" data-line-number="7773"></td>
        <td id="LC7773" class="blob-code blob-code-inner js-file-line">                        std::cerr &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>[cluon::MessageParser] Found duplicated field name in message &#39;<span class="pl-pds">&quot;</span></span> &lt;&lt; ::<span class="pl-c1">stringtoolbox::trim</span>(prefix) &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>&#39;: &#39;<span class="pl-pds">&quot;</span></span></td>
      </tr>
      <tr>
        <td id="L7774" class="blob-num js-line-number" data-line-number="7774"></td>
        <td id="LC7774" class="blob-code blob-code-inner js-file-line">                                  &lt;&lt; duplicatedFieldName &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>&#39;<span class="pl-pds">&quot;</span></span> &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\n</span><span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L7775" class="blob-num js-line-number" data-line-number="7775"></td>
        <td id="LC7775" class="blob-code blob-code-inner js-file-line">                    }</td>
      </tr>
      <tr>
        <td id="L7776" class="blob-num js-line-number" data-line-number="7776"></td>
        <td id="LC7776" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L7777" class="blob-num js-line-number" data-line-number="7777"></td>
        <td id="LC7777" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L7778" class="blob-num js-line-number" data-line-number="7778"></td>
        <td id="LC7778" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> Within AST node MESSAGE_DECLARATION, we have PRIMITIVE_FIELD from</span></td>
      </tr>
      <tr>
        <td id="L7779" class="blob-num js-line-number" data-line-number="7779"></td>
        <td id="LC7779" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> which we need to extract the field &quot;token&quot;.</span></td>
      </tr>
      <tr>
        <td id="L7780" class="blob-num js-line-number" data-line-number="7780"></td>
        <td id="LC7780" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (ast.<span class="pl-smi">name</span> == <span class="pl-s"><span class="pl-pds">&quot;</span>PRIMITIVE_FIELD<span class="pl-pds">&quot;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L7781" class="blob-num js-line-number" data-line-number="7781"></td>
        <td id="LC7781" class="blob-code blob-code-inner js-file-line">                <span class="pl-c"><span class="pl-c">//</span> Extract the value of entry &quot;IDENTIFIER&quot;.</span></td>
      </tr>
      <tr>
        <td id="L7782" class="blob-num js-line-number" data-line-number="7782"></td>
        <td id="LC7782" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">auto</span> nodeIdentifier = <span class="pl-c1">std::find_if</span>(<span class="pl-c1">std::begin</span>(ast.<span class="pl-smi">nodes</span>), <span class="pl-c1">std::end</span>(ast.<span class="pl-smi">nodes</span>), [](<span class="pl-k">auto</span> a) { <span class="pl-k">return</span> (a-&gt;name == <span class="pl-s"><span class="pl-pds">&quot;</span>IDENTIFIER<span class="pl-pds">&quot;</span></span>); });</td>
      </tr>
      <tr>
        <td id="L7783" class="blob-num js-line-number" data-line-number="7783"></td>
        <td id="LC7783" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">if</span> (nodeIdentifier != <span class="pl-c1">std::end</span>(ast.<span class="pl-smi">nodes</span>)) {</td>
      </tr>
      <tr>
        <td id="L7784" class="blob-num js-line-number" data-line-number="7784"></td>
        <td id="LC7784" class="blob-code blob-code-inner js-file-line">                    fieldNames.<span class="pl-c1">push_back</span>((*nodeIdentifier)-&gt;token);</td>
      </tr>
      <tr>
        <td id="L7785" class="blob-num js-line-number" data-line-number="7785"></td>
        <td id="LC7785" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L7786" class="blob-num js-line-number" data-line-number="7786"></td>
        <td id="LC7786" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7787" class="blob-num js-line-number" data-line-number="7787"></td>
        <td id="LC7787" class="blob-code blob-code-inner js-file-line">                <span class="pl-c"><span class="pl-c">//</span> Visit this node&#39;s children to check for duplicated numerical identifiers.</span></td>
      </tr>
      <tr>
        <td id="L7788" class="blob-num js-line-number" data-line-number="7788"></td>
        <td id="LC7788" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">for</span> (<span class="pl-k">const</span> <span class="pl-k">auto</span> &amp;node : ast.<span class="pl-smi">nodes</span>) {</td>
      </tr>
      <tr>
        <td id="L7789" class="blob-num js-line-number" data-line-number="7789"></td>
        <td id="LC7789" class="blob-code blob-code-inner js-file-line">                    retVal &amp;= <span class="pl-c1">checkForUniqueFieldNames</span>(*node, prefix, messageNames, fieldNames, numericalMessageIdentifiers, numericalFieldIdentifiers);</td>
      </tr>
      <tr>
        <td id="L7790" class="blob-num js-line-number" data-line-number="7790"></td>
        <td id="LC7790" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L7791" class="blob-num js-line-number" data-line-number="7791"></td>
        <td id="LC7791" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L7792" class="blob-num js-line-number" data-line-number="7792"></td>
        <td id="LC7792" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> Within AST node PRIMITIVE_FIELD, we have PRIMITIVE_FIELD_OPTIONS from</span></td>
      </tr>
      <tr>
        <td id="L7793" class="blob-num js-line-number" data-line-number="7793"></td>
        <td id="LC7793" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> which we need to extract the field &quot;token&quot;.</span></td>
      </tr>
      <tr>
        <td id="L7794" class="blob-num js-line-number" data-line-number="7794"></td>
        <td id="LC7794" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (ast.<span class="pl-smi">name</span> == <span class="pl-s"><span class="pl-pds">&quot;</span>PRIMITIVE_FIELD_OPTIONS<span class="pl-pds">&quot;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L7795" class="blob-num js-line-number" data-line-number="7795"></td>
        <td id="LC7795" class="blob-code blob-code-inner js-file-line">                <span class="pl-c"><span class="pl-c">//</span> Extract the value of entry &quot;IDENTIFIER&quot;.</span></td>
      </tr>
      <tr>
        <td id="L7796" class="blob-num js-line-number" data-line-number="7796"></td>
        <td id="LC7796" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">auto</span> nodeNumericalFieldIdentifier</td>
      </tr>
      <tr>
        <td id="L7797" class="blob-num js-line-number" data-line-number="7797"></td>
        <td id="LC7797" class="blob-code blob-code-inner js-file-line">                    = <span class="pl-c1">std::find_if</span>(<span class="pl-c1">std::begin</span>(ast.<span class="pl-smi">nodes</span>), <span class="pl-c1">std::end</span>(ast.<span class="pl-smi">nodes</span>), [](<span class="pl-k">auto</span> a) { <span class="pl-k">return</span> (a-&gt;name == <span class="pl-s"><span class="pl-pds">&quot;</span>NATURAL_NUMBER<span class="pl-pds">&quot;</span></span>); });</td>
      </tr>
      <tr>
        <td id="L7798" class="blob-num js-line-number" data-line-number="7798"></td>
        <td id="LC7798" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">if</span> (nodeNumericalFieldIdentifier != <span class="pl-c1">std::end</span>(ast.<span class="pl-smi">nodes</span>)) {</td>
      </tr>
      <tr>
        <td id="L7799" class="blob-num js-line-number" data-line-number="7799"></td>
        <td id="LC7799" class="blob-code blob-code-inner js-file-line">                    numericalFieldIdentifiers.<span class="pl-c1">push_back</span>(<span class="pl-c1">std::stoi</span>((*nodeNumericalFieldIdentifier)-&gt;token));</td>
      </tr>
      <tr>
        <td id="L7800" class="blob-num js-line-number" data-line-number="7800"></td>
        <td id="LC7800" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L7801" class="blob-num js-line-number" data-line-number="7801"></td>
        <td id="LC7801" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L7802" class="blob-num js-line-number" data-line-number="7802"></td>
        <td id="LC7802" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7803" class="blob-num js-line-number" data-line-number="7803"></td>
        <td id="LC7803" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> retVal;</td>
      </tr>
      <tr>
        <td id="L7804" class="blob-num js-line-number" data-line-number="7804"></td>
        <td id="LC7804" class="blob-code blob-code-inner js-file-line">        };</td>
      </tr>
      <tr>
        <td id="L7805" class="blob-num js-line-number" data-line-number="7805"></td>
        <td id="LC7805" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7806" class="blob-num js-line-number" data-line-number="7806"></td>
        <td id="LC7806" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span>//////////////////////////////////////////////////////////////////////////</span></td>
      </tr>
      <tr>
        <td id="L7807" class="blob-num js-line-number" data-line-number="7807"></td>
        <td id="LC7807" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7808" class="blob-num js-line-number" data-line-number="7808"></td>
        <td id="LC7808" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Function to transform AST into list of MetaMessages.</span></td>
      </tr>
      <tr>
        <td id="L7809" class="blob-num js-line-number" data-line-number="7809"></td>
        <td id="LC7809" class="blob-code blob-code-inner js-file-line">    std::function&lt;<span class="pl-c1">void</span>(<span class="pl-k">const</span> peg::Ast &amp;, std::vector&lt;MetaMessage&gt; &amp;)&gt; transform2MetaMessages</td>
      </tr>
      <tr>
        <td id="L7810" class="blob-num js-line-number" data-line-number="7810"></td>
        <td id="LC7810" class="blob-code blob-code-inner js-file-line">        = [](<span class="pl-k">const</span> peg::Ast &amp;ast, std::vector&lt;MetaMessage&gt; &amp;listOfMetaMessages) {</td>
      </tr>
      <tr>
        <td id="L7811" class="blob-num js-line-number" data-line-number="7811"></td>
        <td id="LC7811" class="blob-code blob-code-inner js-file-line">              <span class="pl-c"><span class="pl-c">//</span> &quot;Inner&quot;-lambda to handle various types of message declarations.</span></td>
      </tr>
      <tr>
        <td id="L7812" class="blob-num js-line-number" data-line-number="7812"></td>
        <td id="LC7812" class="blob-code blob-code-inner js-file-line">              <span class="pl-k">auto</span> createMetaMessage = [](<span class="pl-k">const</span> peg::Ast &amp;_node, std::string _packageName) -&gt; MetaMessage {</td>
      </tr>
      <tr>
        <td id="L7813" class="blob-num js-line-number" data-line-number="7813"></td>
        <td id="LC7813" class="blob-code blob-code-inner js-file-line">                  MetaMessage mm;</td>
      </tr>
      <tr>
        <td id="L7814" class="blob-num js-line-number" data-line-number="7814"></td>
        <td id="LC7814" class="blob-code blob-code-inner js-file-line">                  mm.<span class="pl-c1">packageName</span>(::<span class="pl-c1">stringtoolbox::trim</span>(_packageName));</td>
      </tr>
      <tr>
        <td id="L7815" class="blob-num js-line-number" data-line-number="7815"></td>
        <td id="LC7815" class="blob-code blob-code-inner js-file-line">                  <span class="pl-c1">uint32_t</span> fieldIdentifierCounter{<span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L7816" class="blob-num js-line-number" data-line-number="7816"></td>
        <td id="LC7816" class="blob-code blob-code-inner js-file-line">                  <span class="pl-k">for</span> (<span class="pl-k">const</span> <span class="pl-k">auto</span> &amp;e : _node.<span class="pl-smi">nodes</span>) {</td>
      </tr>
      <tr>
        <td id="L7817" class="blob-num js-line-number" data-line-number="7817"></td>
        <td id="LC7817" class="blob-code blob-code-inner js-file-line">                      <span class="pl-k">if</span> (<span class="pl-s"><span class="pl-pds">&quot;</span>MESSAGE_IDENTIFIER<span class="pl-pds">&quot;</span></span> == e-&gt;name) {</td>
      </tr>
      <tr>
        <td id="L7818" class="blob-num js-line-number" data-line-number="7818"></td>
        <td id="LC7818" class="blob-code blob-code-inner js-file-line">                          std::string _messageName = e-&gt;token;</td>
      </tr>
      <tr>
        <td id="L7819" class="blob-num js-line-number" data-line-number="7819"></td>
        <td id="LC7819" class="blob-code blob-code-inner js-file-line">                          mm.<span class="pl-c1">messageName</span>(::<span class="pl-c1">stringtoolbox::trim</span>(_messageName));</td>
      </tr>
      <tr>
        <td id="L7820" class="blob-num js-line-number" data-line-number="7820"></td>
        <td id="LC7820" class="blob-code blob-code-inner js-file-line">                      } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-s"><span class="pl-pds">&quot;</span>NATURAL_NUMBER<span class="pl-pds">&quot;</span></span> == e-&gt;name) {</td>
      </tr>
      <tr>
        <td id="L7821" class="blob-num js-line-number" data-line-number="7821"></td>
        <td id="LC7821" class="blob-code blob-code-inner js-file-line">                          mm.<span class="pl-c1">messageIdentifier</span>(<span class="pl-c1">std::stoi</span>(e-&gt;token));</td>
      </tr>
      <tr>
        <td id="L7822" class="blob-num js-line-number" data-line-number="7822"></td>
        <td id="LC7822" class="blob-code blob-code-inner js-file-line">                      } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-s"><span class="pl-pds">&quot;</span>PRIMITIVE_FIELD<span class="pl-pds">&quot;</span></span> == e-&gt;name) {</td>
      </tr>
      <tr>
        <td id="L7823" class="blob-num js-line-number" data-line-number="7823"></td>
        <td id="LC7823" class="blob-code blob-code-inner js-file-line">                          std::string _fieldName;</td>
      </tr>
      <tr>
        <td id="L7824" class="blob-num js-line-number" data-line-number="7824"></td>
        <td id="LC7824" class="blob-code blob-code-inner js-file-line">                          <span class="pl-k">auto</span> fieldName = <span class="pl-c1">std::find_if</span>(<span class="pl-c1">std::begin</span>(e-&gt;nodes), <span class="pl-c1">std::end</span>(e-&gt;nodes), [](<span class="pl-k">auto</span> a) { <span class="pl-k">return</span> (a-&gt;name == <span class="pl-s"><span class="pl-pds">&quot;</span>IDENTIFIER<span class="pl-pds">&quot;</span></span>); });</td>
      </tr>
      <tr>
        <td id="L7825" class="blob-num js-line-number" data-line-number="7825"></td>
        <td id="LC7825" class="blob-code blob-code-inner js-file-line">                          <span class="pl-k">if</span> (fieldName != <span class="pl-c1">std::end</span>(e-&gt;nodes)) {</td>
      </tr>
      <tr>
        <td id="L7826" class="blob-num js-line-number" data-line-number="7826"></td>
        <td id="LC7826" class="blob-code blob-code-inner js-file-line">                              _fieldName = (*fieldName)-&gt;token;</td>
      </tr>
      <tr>
        <td id="L7827" class="blob-num js-line-number" data-line-number="7827"></td>
        <td id="LC7827" class="blob-code blob-code-inner js-file-line">                          }</td>
      </tr>
      <tr>
        <td id="L7828" class="blob-num js-line-number" data-line-number="7828"></td>
        <td id="LC7828" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7829" class="blob-num js-line-number" data-line-number="7829"></td>
        <td id="LC7829" class="blob-code blob-code-inner js-file-line">                          std::string _fieldDataType;</td>
      </tr>
      <tr>
        <td id="L7830" class="blob-num js-line-number" data-line-number="7830"></td>
        <td id="LC7830" class="blob-code blob-code-inner js-file-line">                          <span class="pl-k">auto</span> fieldDataType = <span class="pl-c1">std::find_if</span>(<span class="pl-c1">std::begin</span>(e-&gt;nodes), <span class="pl-c1">std::end</span>(e-&gt;nodes), [](<span class="pl-k">auto</span> a) { <span class="pl-k">return</span> (a-&gt;name == <span class="pl-s"><span class="pl-pds">&quot;</span>PRIMITIVE_TYPE<span class="pl-pds">&quot;</span></span>); });</td>
      </tr>
      <tr>
        <td id="L7831" class="blob-num js-line-number" data-line-number="7831"></td>
        <td id="LC7831" class="blob-code blob-code-inner js-file-line">                          <span class="pl-k">if</span> (fieldDataType != <span class="pl-c1">std::end</span>(e-&gt;nodes)) {</td>
      </tr>
      <tr>
        <td id="L7832" class="blob-num js-line-number" data-line-number="7832"></td>
        <td id="LC7832" class="blob-code blob-code-inner js-file-line">                              _fieldDataType = (*fieldDataType)-&gt;token;</td>
      </tr>
      <tr>
        <td id="L7833" class="blob-num js-line-number" data-line-number="7833"></td>
        <td id="LC7833" class="blob-code blob-code-inner js-file-line">                          }</td>
      </tr>
      <tr>
        <td id="L7834" class="blob-num js-line-number" data-line-number="7834"></td>
        <td id="LC7834" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7835" class="blob-num js-line-number" data-line-number="7835"></td>
        <td id="LC7835" class="blob-code blob-code-inner js-file-line">                          fieldIdentifierCounter++; <span class="pl-c"><span class="pl-c">//</span> Automatically count expected field identifiers in case of missing</span></td>
      </tr>
      <tr>
        <td id="L7836" class="blob-num js-line-number" data-line-number="7836"></td>
        <td id="LC7836" class="blob-code blob-code-inner js-file-line">                                                    <span class="pl-c"><span class="pl-c">//</span> field options.</span></td>
      </tr>
      <tr>
        <td id="L7837" class="blob-num js-line-number" data-line-number="7837"></td>
        <td id="LC7837" class="blob-code blob-code-inner js-file-line">                          std::string _fieldIdentifier;</td>
      </tr>
      <tr>
        <td id="L7838" class="blob-num js-line-number" data-line-number="7838"></td>
        <td id="LC7838" class="blob-code blob-code-inner js-file-line">                          <span class="pl-k">auto</span> fieldIdentifier = <span class="pl-c1">std::find_if</span>(<span class="pl-c1">std::begin</span>(e-&gt;nodes), <span class="pl-c1">std::end</span>(e-&gt;nodes), [](<span class="pl-k">auto</span> a) { <span class="pl-k">return</span> (a-&gt;name == <span class="pl-s"><span class="pl-pds">&quot;</span>NATURAL_NUMBER<span class="pl-pds">&quot;</span></span>); });</td>
      </tr>
      <tr>
        <td id="L7839" class="blob-num js-line-number" data-line-number="7839"></td>
        <td id="LC7839" class="blob-code blob-code-inner js-file-line">                          <span class="pl-k">if</span> (fieldIdentifier != <span class="pl-c1">std::end</span>(e-&gt;nodes)) {</td>
      </tr>
      <tr>
        <td id="L7840" class="blob-num js-line-number" data-line-number="7840"></td>
        <td id="LC7840" class="blob-code blob-code-inner js-file-line">                              _fieldIdentifier = (*fieldIdentifier)-&gt;token;</td>
      </tr>
      <tr>
        <td id="L7841" class="blob-num js-line-number" data-line-number="7841"></td>
        <td id="LC7841" class="blob-code blob-code-inner js-file-line">                          }</td>
      </tr>
      <tr>
        <td id="L7842" class="blob-num js-line-number" data-line-number="7842"></td>
        <td id="LC7842" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7843" class="blob-num js-line-number" data-line-number="7843"></td>
        <td id="LC7843" class="blob-code blob-code-inner js-file-line">                          std::string _fieldDefaultInitializerValue;</td>
      </tr>
      <tr>
        <td id="L7844" class="blob-num js-line-number" data-line-number="7844"></td>
        <td id="LC7844" class="blob-code blob-code-inner js-file-line">                          <span class="pl-k">auto</span> primitiveFieldOptions</td>
      </tr>
      <tr>
        <td id="L7845" class="blob-num js-line-number" data-line-number="7845"></td>
        <td id="LC7845" class="blob-code blob-code-inner js-file-line">                              = <span class="pl-c1">std::find_if</span>(<span class="pl-c1">std::begin</span>(e-&gt;nodes), <span class="pl-c1">std::end</span>(e-&gt;nodes), [](<span class="pl-k">auto</span> a) { <span class="pl-k">return</span> (a-&gt;name == <span class="pl-s"><span class="pl-pds">&quot;</span>PRIMITIVE_FIELD_OPTIONS<span class="pl-pds">&quot;</span></span>); });</td>
      </tr>
      <tr>
        <td id="L7846" class="blob-num js-line-number" data-line-number="7846"></td>
        <td id="LC7846" class="blob-code blob-code-inner js-file-line">                          <span class="pl-k">if</span> (primitiveFieldOptions != <span class="pl-c1">std::end</span>(e-&gt;nodes)) {</td>
      </tr>
      <tr>
        <td id="L7847" class="blob-num js-line-number" data-line-number="7847"></td>
        <td id="LC7847" class="blob-code blob-code-inner js-file-line">                              <span class="pl-k">for</span> (<span class="pl-k">const</span> <span class="pl-k">auto</span> &amp;f : (*primitiveFieldOptions)-&gt;nodes) {</td>
      </tr>
      <tr>
        <td id="L7848" class="blob-num js-line-number" data-line-number="7848"></td>
        <td id="LC7848" class="blob-code blob-code-inner js-file-line">                                  <span class="pl-k">if</span> (<span class="pl-s"><span class="pl-pds">&quot;</span>NATURAL_NUMBER<span class="pl-pds">&quot;</span></span> != f-&gt;name) {</td>
      </tr>
      <tr>
        <td id="L7849" class="blob-num js-line-number" data-line-number="7849"></td>
        <td id="LC7849" class="blob-code blob-code-inner js-file-line">                                      <span class="pl-k">if</span> (<span class="pl-s"><span class="pl-pds">&quot;</span>STRING<span class="pl-pds">&quot;</span></span> == f-&gt;name) {</td>
      </tr>
      <tr>
        <td id="L7850" class="blob-num js-line-number" data-line-number="7850"></td>
        <td id="LC7850" class="blob-code blob-code-inner js-file-line">                                          _fieldDefaultInitializerValue = <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span> + f-&gt;token + <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span>; <span class="pl-c"><span class="pl-c">//</span> NOLINT</span></td>
      </tr>
      <tr>
        <td id="L7851" class="blob-num js-line-number" data-line-number="7851"></td>
        <td id="LC7851" class="blob-code blob-code-inner js-file-line">                                      } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-s"><span class="pl-pds">&quot;</span>CHARACTER<span class="pl-pds">&quot;</span></span> == f-&gt;name) {</td>
      </tr>
      <tr>
        <td id="L7852" class="blob-num js-line-number" data-line-number="7852"></td>
        <td id="LC7852" class="blob-code blob-code-inner js-file-line">                                          _fieldDefaultInitializerValue = <span class="pl-s"><span class="pl-pds">&quot;</span>&#39;<span class="pl-pds">&quot;</span></span> + f-&gt;token + <span class="pl-s"><span class="pl-pds">&quot;</span>&#39;<span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L7853" class="blob-num js-line-number" data-line-number="7853"></td>
        <td id="LC7853" class="blob-code blob-code-inner js-file-line">                                      } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L7854" class="blob-num js-line-number" data-line-number="7854"></td>
        <td id="LC7854" class="blob-code blob-code-inner js-file-line">                                          _fieldDefaultInitializerValue = f-&gt;token;</td>
      </tr>
      <tr>
        <td id="L7855" class="blob-num js-line-number" data-line-number="7855"></td>
        <td id="LC7855" class="blob-code blob-code-inner js-file-line">                                      }</td>
      </tr>
      <tr>
        <td id="L7856" class="blob-num js-line-number" data-line-number="7856"></td>
        <td id="LC7856" class="blob-code blob-code-inner js-file-line">                                  }</td>
      </tr>
      <tr>
        <td id="L7857" class="blob-num js-line-number" data-line-number="7857"></td>
        <td id="LC7857" class="blob-code blob-code-inner js-file-line">                              }</td>
      </tr>
      <tr>
        <td id="L7858" class="blob-num js-line-number" data-line-number="7858"></td>
        <td id="LC7858" class="blob-code blob-code-inner js-file-line">                          }</td>
      </tr>
      <tr>
        <td id="L7859" class="blob-num js-line-number" data-line-number="7859"></td>
        <td id="LC7859" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7860" class="blob-num js-line-number" data-line-number="7860"></td>
        <td id="LC7860" class="blob-code blob-code-inner js-file-line">                          std::map&lt;std::string, MetaMessage::MetaField::MetaFieldDataTypes&gt; STRING_TO_DATATYPE_MAP = {</td>
      </tr>
      <tr>
        <td id="L7861" class="blob-num js-line-number" data-line-number="7861"></td>
        <td id="LC7861" class="blob-code blob-code-inner js-file-line">                              {<span class="pl-s"><span class="pl-pds">&quot;</span>bool<span class="pl-pds">&quot;</span></span>, MetaMessage::MetaField::BOOL_T},</td>
      </tr>
      <tr>
        <td id="L7862" class="blob-num js-line-number" data-line-number="7862"></td>
        <td id="LC7862" class="blob-code blob-code-inner js-file-line">                              {<span class="pl-s"><span class="pl-pds">&quot;</span>char<span class="pl-pds">&quot;</span></span>, MetaMessage::MetaField::CHAR_T},</td>
      </tr>
      <tr>
        <td id="L7863" class="blob-num js-line-number" data-line-number="7863"></td>
        <td id="LC7863" class="blob-code blob-code-inner js-file-line">                              {<span class="pl-s"><span class="pl-pds">&quot;</span>uint8<span class="pl-pds">&quot;</span></span>, MetaMessage::MetaField::UINT8_T},</td>
      </tr>
      <tr>
        <td id="L7864" class="blob-num js-line-number" data-line-number="7864"></td>
        <td id="LC7864" class="blob-code blob-code-inner js-file-line">                              {<span class="pl-s"><span class="pl-pds">&quot;</span>int8<span class="pl-pds">&quot;</span></span>, MetaMessage::MetaField::INT8_T},</td>
      </tr>
      <tr>
        <td id="L7865" class="blob-num js-line-number" data-line-number="7865"></td>
        <td id="LC7865" class="blob-code blob-code-inner js-file-line">                              {<span class="pl-s"><span class="pl-pds">&quot;</span>uint16<span class="pl-pds">&quot;</span></span>, MetaMessage::MetaField::UINT16_T},</td>
      </tr>
      <tr>
        <td id="L7866" class="blob-num js-line-number" data-line-number="7866"></td>
        <td id="LC7866" class="blob-code blob-code-inner js-file-line">                              {<span class="pl-s"><span class="pl-pds">&quot;</span>int16<span class="pl-pds">&quot;</span></span>, MetaMessage::MetaField::INT16_T},</td>
      </tr>
      <tr>
        <td id="L7867" class="blob-num js-line-number" data-line-number="7867"></td>
        <td id="LC7867" class="blob-code blob-code-inner js-file-line">                              {<span class="pl-s"><span class="pl-pds">&quot;</span>uint32<span class="pl-pds">&quot;</span></span>, MetaMessage::MetaField::UINT32_T},</td>
      </tr>
      <tr>
        <td id="L7868" class="blob-num js-line-number" data-line-number="7868"></td>
        <td id="LC7868" class="blob-code blob-code-inner js-file-line">                              {<span class="pl-s"><span class="pl-pds">&quot;</span>int32<span class="pl-pds">&quot;</span></span>, MetaMessage::MetaField::INT32_T},</td>
      </tr>
      <tr>
        <td id="L7869" class="blob-num js-line-number" data-line-number="7869"></td>
        <td id="LC7869" class="blob-code blob-code-inner js-file-line">                              {<span class="pl-s"><span class="pl-pds">&quot;</span>uint64<span class="pl-pds">&quot;</span></span>, MetaMessage::MetaField::UINT64_T},</td>
      </tr>
      <tr>
        <td id="L7870" class="blob-num js-line-number" data-line-number="7870"></td>
        <td id="LC7870" class="blob-code blob-code-inner js-file-line">                              {<span class="pl-s"><span class="pl-pds">&quot;</span>int64<span class="pl-pds">&quot;</span></span>, MetaMessage::MetaField::INT64_T},</td>
      </tr>
      <tr>
        <td id="L7871" class="blob-num js-line-number" data-line-number="7871"></td>
        <td id="LC7871" class="blob-code blob-code-inner js-file-line">                              {<span class="pl-s"><span class="pl-pds">&quot;</span>float<span class="pl-pds">&quot;</span></span>, MetaMessage::MetaField::FLOAT_T},</td>
      </tr>
      <tr>
        <td id="L7872" class="blob-num js-line-number" data-line-number="7872"></td>
        <td id="LC7872" class="blob-code blob-code-inner js-file-line">                              {<span class="pl-s"><span class="pl-pds">&quot;</span>double<span class="pl-pds">&quot;</span></span>, MetaMessage::MetaField::DOUBLE_T},</td>
      </tr>
      <tr>
        <td id="L7873" class="blob-num js-line-number" data-line-number="7873"></td>
        <td id="LC7873" class="blob-code blob-code-inner js-file-line">                              {<span class="pl-s"><span class="pl-pds">&quot;</span>string<span class="pl-pds">&quot;</span></span>, MetaMessage::MetaField::STRING_T},</td>
      </tr>
      <tr>
        <td id="L7874" class="blob-num js-line-number" data-line-number="7874"></td>
        <td id="LC7874" class="blob-code blob-code-inner js-file-line">                              {<span class="pl-s"><span class="pl-pds">&quot;</span>bytes<span class="pl-pds">&quot;</span></span>, MetaMessage::MetaField::BYTES_T},</td>
      </tr>
      <tr>
        <td id="L7875" class="blob-num js-line-number" data-line-number="7875"></td>
        <td id="LC7875" class="blob-code blob-code-inner js-file-line">                          };</td>
      </tr>
      <tr>
        <td id="L7876" class="blob-num js-line-number" data-line-number="7876"></td>
        <td id="LC7876" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7877" class="blob-num js-line-number" data-line-number="7877"></td>
        <td id="LC7877" class="blob-code blob-code-inner js-file-line">                          MetaMessage::MetaField mf;</td>
      </tr>
      <tr>
        <td id="L7878" class="blob-num js-line-number" data-line-number="7878"></td>
        <td id="LC7878" class="blob-code blob-code-inner js-file-line">                          <span class="pl-k">if</span> (<span class="pl-c1">0</span> &lt; STRING_TO_DATATYPE_MAP.<span class="pl-c1">count</span>(_fieldDataType)) {</td>
      </tr>
      <tr>
        <td id="L7879" class="blob-num js-line-number" data-line-number="7879"></td>
        <td id="LC7879" class="blob-code blob-code-inner js-file-line">                              mf.<span class="pl-c1">fieldDataType</span>(STRING_TO_DATATYPE_MAP[_fieldDataType]);</td>
      </tr>
      <tr>
        <td id="L7880" class="blob-num js-line-number" data-line-number="7880"></td>
        <td id="LC7880" class="blob-code blob-code-inner js-file-line">                          } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L7881" class="blob-num js-line-number" data-line-number="7881"></td>
        <td id="LC7881" class="blob-code blob-code-inner js-file-line">                              mf.<span class="pl-c1">fieldDataType</span>(MetaMessage::MetaField::MESSAGE_T);</td>
      </tr>
      <tr>
        <td id="L7882" class="blob-num js-line-number" data-line-number="7882"></td>
        <td id="LC7882" class="blob-code blob-code-inner js-file-line">                          }</td>
      </tr>
      <tr>
        <td id="L7883" class="blob-num js-line-number" data-line-number="7883"></td>
        <td id="LC7883" class="blob-code blob-code-inner js-file-line">                          mf.<span class="pl-c1">fieldDataTypeName</span>(::<span class="pl-c1">stringtoolbox::trim</span>(_fieldDataType));</td>
      </tr>
      <tr>
        <td id="L7884" class="blob-num js-line-number" data-line-number="7884"></td>
        <td id="LC7884" class="blob-code blob-code-inner js-file-line">                          mf.<span class="pl-c1">fieldName</span>(::<span class="pl-c1">stringtoolbox::trim</span>(_fieldName));</td>
      </tr>
      <tr>
        <td id="L7885" class="blob-num js-line-number" data-line-number="7885"></td>
        <td id="LC7885" class="blob-code blob-code-inner js-file-line">                          mf.<span class="pl-c1">fieldIdentifier</span>(</td>
      </tr>
      <tr>
        <td id="L7886" class="blob-num js-line-number" data-line-number="7886"></td>
        <td id="LC7886" class="blob-code blob-code-inner js-file-line">                              (!_fieldIdentifier.<span class="pl-c1">empty</span>() ? <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint32_t</span>&gt;(<span class="pl-c1">std::stoi</span>(::<span class="pl-c1">stringtoolbox::trim</span>(_fieldIdentifier))) : fieldIdentifierCounter));</td>
      </tr>
      <tr>
        <td id="L7887" class="blob-num js-line-number" data-line-number="7887"></td>
        <td id="LC7887" class="blob-code blob-code-inner js-file-line">                          mf.<span class="pl-c1">defaultInitializationValue</span>(_fieldDefaultInitializerValue);</td>
      </tr>
      <tr>
        <td id="L7888" class="blob-num js-line-number" data-line-number="7888"></td>
        <td id="LC7888" class="blob-code blob-code-inner js-file-line">                          mm.<span class="pl-c1">add</span>(<span class="pl-c1">std::move</span>(mf));</td>
      </tr>
      <tr>
        <td id="L7889" class="blob-num js-line-number" data-line-number="7889"></td>
        <td id="LC7889" class="blob-code blob-code-inner js-file-line">                      }</td>
      </tr>
      <tr>
        <td id="L7890" class="blob-num js-line-number" data-line-number="7890"></td>
        <td id="LC7890" class="blob-code blob-code-inner js-file-line">                  }</td>
      </tr>
      <tr>
        <td id="L7891" class="blob-num js-line-number" data-line-number="7891"></td>
        <td id="LC7891" class="blob-code blob-code-inner js-file-line">                  <span class="pl-k">return</span> mm;</td>
      </tr>
      <tr>
        <td id="L7892" class="blob-num js-line-number" data-line-number="7892"></td>
        <td id="LC7892" class="blob-code blob-code-inner js-file-line">              };</td>
      </tr>
      <tr>
        <td id="L7893" class="blob-num js-line-number" data-line-number="7893"></td>
        <td id="LC7893" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7894" class="blob-num js-line-number" data-line-number="7894"></td>
        <td id="LC7894" class="blob-code blob-code-inner js-file-line">              <span class="pl-c"><span class="pl-c">//</span>//////////////////////////////////////////////////////////////////////</span></td>
      </tr>
      <tr>
        <td id="L7895" class="blob-num js-line-number" data-line-number="7895"></td>
        <td id="LC7895" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7896" class="blob-num js-line-number" data-line-number="7896"></td>
        <td id="LC7896" class="blob-code blob-code-inner js-file-line">              <span class="pl-c"><span class="pl-c">//</span> Case: &quot;package XYZ&quot; present.</span></td>
      </tr>
      <tr>
        <td id="L7897" class="blob-num js-line-number" data-line-number="7897"></td>
        <td id="LC7897" class="blob-code blob-code-inner js-file-line">              <span class="pl-k">if</span> (<span class="pl-s"><span class="pl-pds">&quot;</span>MESSAGES_SPECIFICATION<span class="pl-pds">&quot;</span></span> == ast.<span class="pl-smi">name</span>) {</td>
      </tr>
      <tr>
        <td id="L7898" class="blob-num js-line-number" data-line-number="7898"></td>
        <td id="LC7898" class="blob-code blob-code-inner js-file-line">                  <span class="pl-c"><span class="pl-c">//</span> Extract the value of entry &quot;PACKAGE_IDENTIFIER&quot;.</span></td>
      </tr>
      <tr>
        <td id="L7899" class="blob-num js-line-number" data-line-number="7899"></td>
        <td id="LC7899" class="blob-code blob-code-inner js-file-line">                  <span class="pl-k">auto</span> nodeIdentifier = <span class="pl-c1">std::find_if</span>(<span class="pl-c1">std::begin</span>(ast.<span class="pl-smi">nodes</span>), <span class="pl-c1">std::end</span>(ast.<span class="pl-smi">nodes</span>), [](<span class="pl-k">auto</span> a) { <span class="pl-k">return</span> (a-&gt;name == <span class="pl-s"><span class="pl-pds">&quot;</span>PACKAGE_IDENTIFIER<span class="pl-pds">&quot;</span></span>); });</td>
      </tr>
      <tr>
        <td id="L7900" class="blob-num js-line-number" data-line-number="7900"></td>
        <td id="LC7900" class="blob-code blob-code-inner js-file-line">                  std::string packageName;</td>
      </tr>
      <tr>
        <td id="L7901" class="blob-num js-line-number" data-line-number="7901"></td>
        <td id="LC7901" class="blob-code blob-code-inner js-file-line">                  <span class="pl-k">if</span> (nodeIdentifier != <span class="pl-c1">std::end</span>(ast.<span class="pl-smi">nodes</span>)) {</td>
      </tr>
      <tr>
        <td id="L7902" class="blob-num js-line-number" data-line-number="7902"></td>
        <td id="LC7902" class="blob-code blob-code-inner js-file-line">                      packageName = (*nodeIdentifier)-&gt;token;</td>
      </tr>
      <tr>
        <td id="L7903" class="blob-num js-line-number" data-line-number="7903"></td>
        <td id="LC7903" class="blob-code blob-code-inner js-file-line">                  }</td>
      </tr>
      <tr>
        <td id="L7904" class="blob-num js-line-number" data-line-number="7904"></td>
        <td id="LC7904" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7905" class="blob-num js-line-number" data-line-number="7905"></td>
        <td id="LC7905" class="blob-code blob-code-inner js-file-line">                  <span class="pl-c"><span class="pl-c">//</span> Extract the value of entry &quot;MESSAGE_DECLARATION&quot;.</span></td>
      </tr>
      <tr>
        <td id="L7906" class="blob-num js-line-number" data-line-number="7906"></td>
        <td id="LC7906" class="blob-code blob-code-inner js-file-line">                  <span class="pl-k">for</span> (<span class="pl-k">const</span> <span class="pl-k">auto</span> &amp;node : ast.<span class="pl-smi">nodes</span>) {</td>
      </tr>
      <tr>
        <td id="L7907" class="blob-num js-line-number" data-line-number="7907"></td>
        <td id="LC7907" class="blob-code blob-code-inner js-file-line">                      <span class="pl-k">if</span> (node-&gt;name == <span class="pl-s"><span class="pl-pds">&quot;</span>MESSAGE_DECLARATION<span class="pl-pds">&quot;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L7908" class="blob-num js-line-number" data-line-number="7908"></td>
        <td id="LC7908" class="blob-code blob-code-inner js-file-line">                          listOfMetaMessages.<span class="pl-c1">emplace_back</span>(<span class="pl-c1">createMetaMessage</span>(*node, packageName));</td>
      </tr>
      <tr>
        <td id="L7909" class="blob-num js-line-number" data-line-number="7909"></td>
        <td id="LC7909" class="blob-code blob-code-inner js-file-line">                      }</td>
      </tr>
      <tr>
        <td id="L7910" class="blob-num js-line-number" data-line-number="7910"></td>
        <td id="LC7910" class="blob-code blob-code-inner js-file-line">                  }</td>
      </tr>
      <tr>
        <td id="L7911" class="blob-num js-line-number" data-line-number="7911"></td>
        <td id="LC7911" class="blob-code blob-code-inner js-file-line">              } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L7912" class="blob-num js-line-number" data-line-number="7912"></td>
        <td id="LC7912" class="blob-code blob-code-inner js-file-line">                  <span class="pl-c"><span class="pl-c">//</span> In case we only have one single message and no package.</span></td>
      </tr>
      <tr>
        <td id="L7913" class="blob-num js-line-number" data-line-number="7913"></td>
        <td id="LC7913" class="blob-code blob-code-inner js-file-line">                  listOfMetaMessages.<span class="pl-c1">emplace_back</span>(<span class="pl-c1">createMetaMessage</span>(ast, <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>));</td>
      </tr>
      <tr>
        <td id="L7914" class="blob-num js-line-number" data-line-number="7914"></td>
        <td id="LC7914" class="blob-code blob-code-inner js-file-line">              }</td>
      </tr>
      <tr>
        <td id="L7915" class="blob-num js-line-number" data-line-number="7915"></td>
        <td id="LC7915" class="blob-code blob-code-inner js-file-line">          };</td>
      </tr>
      <tr>
        <td id="L7916" class="blob-num js-line-number" data-line-number="7916"></td>
        <td id="LC7916" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7917" class="blob-num js-line-number" data-line-number="7917"></td>
        <td id="LC7917" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span>//////////////////////////////////////////////////////////////////////////</span></td>
      </tr>
      <tr>
        <td id="L7918" class="blob-num js-line-number" data-line-number="7918"></td>
        <td id="LC7918" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7919" class="blob-num js-line-number" data-line-number="7919"></td>
        <td id="LC7919" class="blob-code blob-code-inner js-file-line">    peg::parser <span class="pl-smi">p</span>(grammarMessageSpecificationLanguage);</td>
      </tr>
      <tr>
        <td id="L7920" class="blob-num js-line-number" data-line-number="7920"></td>
        <td id="LC7920" class="blob-code blob-code-inner js-file-line">    p.<span class="pl-c1">enable_ast</span>();</td>
      </tr>
      <tr>
        <td id="L7921" class="blob-num js-line-number" data-line-number="7921"></td>
        <td id="LC7921" class="blob-code blob-code-inner js-file-line">    p.<span class="pl-smi">log</span> = [](<span class="pl-c1">size_t</span> row, <span class="pl-c1">size_t</span> col, <span class="pl-k">const</span> std::string &amp;msg) {</td>
      </tr>
      <tr>
        <td id="L7922" class="blob-num js-line-number" data-line-number="7922"></td>
        <td id="LC7922" class="blob-code blob-code-inner js-file-line">        std::cerr &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>[cluon::MessageParser] Parsing error:<span class="pl-pds">&quot;</span></span> &lt;&lt; row &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>:<span class="pl-pds">&quot;</span></span> &lt;&lt; col &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>: <span class="pl-pds">&quot;</span></span> &lt;&lt; msg &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\n</span><span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L7923" class="blob-num js-line-number" data-line-number="7923"></td>
        <td id="LC7923" class="blob-code blob-code-inner js-file-line">    };</td>
      </tr>
      <tr>
        <td id="L7924" class="blob-num js-line-number" data-line-number="7924"></td>
        <td id="LC7924" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7925" class="blob-num js-line-number" data-line-number="7925"></td>
        <td id="LC7925" class="blob-code blob-code-inner js-file-line">    std::pair&lt;std::vector&lt;MetaMessage&gt;, MessageParserErrorCodes&gt; retVal{};</td>
      </tr>
      <tr>
        <td id="L7926" class="blob-num js-line-number" data-line-number="7926"></td>
        <td id="LC7926" class="blob-code blob-code-inner js-file-line">    std::string inputWithoutComments{input};</td>
      </tr>
      <tr>
        <td id="L7927" class="blob-num js-line-number" data-line-number="7927"></td>
        <td id="LC7927" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L7928" class="blob-num js-line-number" data-line-number="7928"></td>
        <td id="LC7928" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> std::string MATCH_COMMENTS_REGEX = <span class="pl-s"><span class="pl-pds">R&quot;(</span>(//.*)|/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+/<span class="pl-pds">)&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L7929" class="blob-num js-line-number" data-line-number="7929"></td>
        <td id="LC7929" class="blob-code blob-code-inner js-file-line">        inputWithoutComments                   = <span class="pl-c1">std::regex_replace</span>(input, <span class="pl-c1">std::regex</span>(MATCH_COMMENTS_REGEX), <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>); <span class="pl-c"><span class="pl-c">//</span> NOLINT</span></td>
      </tr>
      <tr>
        <td id="L7930" class="blob-num js-line-number" data-line-number="7930"></td>
        <td id="LC7930" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">catch</span> (std::regex_error &amp;) {                                                                                <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L7931" class="blob-num js-line-number" data-line-number="7931"></td>
        <td id="LC7931" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">catch</span> (std::bad_cast &amp;) {                                                                                   <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L7932" class="blob-num js-line-number" data-line-number="7932"></td>
        <td id="LC7932" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L7933" class="blob-num js-line-number" data-line-number="7933"></td>
        <td id="LC7933" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L7934" class="blob-num js-line-number" data-line-number="7934"></td>
        <td id="LC7934" class="blob-code blob-code-inner js-file-line">        std::vector&lt;MetaMessage&gt; listOfMetaMessages{};</td>
      </tr>
      <tr>
        <td id="L7935" class="blob-num js-line-number" data-line-number="7935"></td>
        <td id="LC7935" class="blob-code blob-code-inner js-file-line">        std::shared_ptr&lt;peg::Ast&gt; ast{};</td>
      </tr>
      <tr>
        <td id="L7936" class="blob-num js-line-number" data-line-number="7936"></td>
        <td id="LC7936" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (p.<span class="pl-c1">parse</span>(inputWithoutComments.<span class="pl-c1">c_str</span>(), ast)) {</td>
      </tr>
      <tr>
        <td id="L7937" class="blob-num js-line-number" data-line-number="7937"></td>
        <td id="LC7937" class="blob-code blob-code-inner js-file-line">            ast = <span class="pl-c1">peg::AstOptimizer</span>(<span class="pl-c1">true</span>).<span class="pl-c1">optimize</span>(ast);</td>
      </tr>
      <tr>
        <td id="L7938" class="blob-num js-line-number" data-line-number="7938"></td>
        <td id="LC7938" class="blob-code blob-code-inner js-file-line">            {</td>
      </tr>
      <tr>
        <td id="L7939" class="blob-num js-line-number" data-line-number="7939"></td>
        <td id="LC7939" class="blob-code blob-code-inner js-file-line">                std::string tmpPrefix;</td>
      </tr>
      <tr>
        <td id="L7940" class="blob-num js-line-number" data-line-number="7940"></td>
        <td id="LC7940" class="blob-code blob-code-inner js-file-line">                std::vector&lt;std::string&gt; tmpMessageNames{};</td>
      </tr>
      <tr>
        <td id="L7941" class="blob-num js-line-number" data-line-number="7941"></td>
        <td id="LC7941" class="blob-code blob-code-inner js-file-line">                std::vector&lt;std::string&gt; tmpFieldNames{};</td>
      </tr>
      <tr>
        <td id="L7942" class="blob-num js-line-number" data-line-number="7942"></td>
        <td id="LC7942" class="blob-code blob-code-inner js-file-line">                std::vector&lt;<span class="pl-c1">int32_t</span>&gt; tmpNumericalMessageIdentifiers{};</td>
      </tr>
      <tr>
        <td id="L7943" class="blob-num js-line-number" data-line-number="7943"></td>
        <td id="LC7943" class="blob-code blob-code-inner js-file-line">                std::vector&lt;<span class="pl-c1">int32_t</span>&gt; tmpNumericalFieldIdentifiers{};</td>
      </tr>
      <tr>
        <td id="L7944" class="blob-num js-line-number" data-line-number="7944"></td>
        <td id="LC7944" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">if</span> (<span class="pl-c1">check4UniqueFieldNames</span>(*ast, tmpPrefix, tmpMessageNames, tmpFieldNames, tmpNumericalMessageIdentifiers, tmpNumericalFieldIdentifiers)) {</td>
      </tr>
      <tr>
        <td id="L7945" class="blob-num js-line-number" data-line-number="7945"></td>
        <td id="LC7945" class="blob-code blob-code-inner js-file-line">                    <span class="pl-c1">transform2MetaMessages</span>(*ast, listOfMetaMessages);</td>
      </tr>
      <tr>
        <td id="L7946" class="blob-num js-line-number" data-line-number="7946"></td>
        <td id="LC7946" class="blob-code blob-code-inner js-file-line">                    retVal = {listOfMetaMessages, MessageParserErrorCodes::NO_ERROR};</td>
      </tr>
      <tr>
        <td id="L7947" class="blob-num js-line-number" data-line-number="7947"></td>
        <td id="LC7947" class="blob-code blob-code-inner js-file-line">                } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L7948" class="blob-num js-line-number" data-line-number="7948"></td>
        <td id="LC7948" class="blob-code blob-code-inner js-file-line">                    retVal = {listOfMetaMessages, MessageParserErrorCodes::DUPLICATE_IDENTIFIERS};</td>
      </tr>
      <tr>
        <td id="L7949" class="blob-num js-line-number" data-line-number="7949"></td>
        <td id="LC7949" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L7950" class="blob-num js-line-number" data-line-number="7950"></td>
        <td id="LC7950" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L7951" class="blob-num js-line-number" data-line-number="7951"></td>
        <td id="LC7951" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L7952" class="blob-num js-line-number" data-line-number="7952"></td>
        <td id="LC7952" class="blob-code blob-code-inner js-file-line">            retVal = {listOfMetaMessages, MessageParserErrorCodes::SYNTAX_ERROR};</td>
      </tr>
      <tr>
        <td id="L7953" class="blob-num js-line-number" data-line-number="7953"></td>
        <td id="LC7953" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L7954" class="blob-num js-line-number" data-line-number="7954"></td>
        <td id="LC7954" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">catch</span> (std::bad_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L7955" class="blob-num js-line-number" data-line-number="7955"></td>
        <td id="LC7955" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L7956" class="blob-num js-line-number" data-line-number="7956"></td>
        <td id="LC7956" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> retVal;</td>
      </tr>
      <tr>
        <td id="L7957" class="blob-num js-line-number" data-line-number="7957"></td>
        <td id="LC7957" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L7958" class="blob-num js-line-number" data-line-number="7958"></td>
        <td id="LC7958" class="blob-code blob-code-inner js-file-line">} <span class="pl-c"><span class="pl-c">//</span> namespace cluon</span></td>
      </tr>
      <tr>
        <td id="L7959" class="blob-num js-line-number" data-line-number="7959"></td>
        <td id="LC7959" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L7960" class="blob-num js-line-number" data-line-number="7960"></td>
        <td id="LC7960" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Copyright (C) 2017-2018  Christian Berger</span></td>
      </tr>
      <tr>
        <td id="L7961" class="blob-num js-line-number" data-line-number="7961"></td>
        <td id="LC7961" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L7962" class="blob-num js-line-number" data-line-number="7962"></td>
        <td id="LC7962" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is free software: you can redistribute it and/or modify</span></td>
      </tr>
      <tr>
        <td id="L7963" class="blob-num js-line-number" data-line-number="7963"></td>
        <td id="LC7963" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * it under the terms of the GNU General Public License as published by</span></td>
      </tr>
      <tr>
        <td id="L7964" class="blob-num js-line-number" data-line-number="7964"></td>
        <td id="LC7964" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * the Free Software Foundation, either version 3 of the License, or</span></td>
      </tr>
      <tr>
        <td id="L7965" class="blob-num js-line-number" data-line-number="7965"></td>
        <td id="LC7965" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * (at your option) any later version.</span></td>
      </tr>
      <tr>
        <td id="L7966" class="blob-num js-line-number" data-line-number="7966"></td>
        <td id="LC7966" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L7967" class="blob-num js-line-number" data-line-number="7967"></td>
        <td id="LC7967" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is distributed in the hope that it will be useful,</span></td>
      </tr>
      <tr>
        <td id="L7968" class="blob-num js-line-number" data-line-number="7968"></td>
        <td id="LC7968" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></td>
      </tr>
      <tr>
        <td id="L7969" class="blob-num js-line-number" data-line-number="7969"></td>
        <td id="LC7969" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></td>
      </tr>
      <tr>
        <td id="L7970" class="blob-num js-line-number" data-line-number="7970"></td>
        <td id="LC7970" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * GNU General Public License for more details.</span></td>
      </tr>
      <tr>
        <td id="L7971" class="blob-num js-line-number" data-line-number="7971"></td>
        <td id="LC7971" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L7972" class="blob-num js-line-number" data-line-number="7972"></td>
        <td id="LC7972" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * You should have received a copy of the GNU General Public License</span></td>
      </tr>
      <tr>
        <td id="L7973" class="blob-num js-line-number" data-line-number="7973"></td>
        <td id="LC7973" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></td>
      </tr>
      <tr>
        <td id="L7974" class="blob-num js-line-number" data-line-number="7974"></td>
        <td id="LC7974" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L7975" class="blob-num js-line-number" data-line-number="7975"></td>
        <td id="LC7975" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7976" class="blob-num js-line-number" data-line-number="7976"></td>
        <td id="LC7976" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/UDPSender.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L7977" class="blob-num js-line-number" data-line-number="7977"></td>
        <td id="LC7977" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/UDPPacketSizeConstraints.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L7978" class="blob-num js-line-number" data-line-number="7978"></td>
        <td id="LC7978" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7979" class="blob-num js-line-number" data-line-number="7979"></td>
        <td id="LC7979" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> clang-format off</span></td>
      </tr>
      <tr>
        <td id="L7980" class="blob-num js-line-number" data-line-number="7980"></td>
        <td id="LC7980" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifdef</span> WIN32</td>
      </tr>
      <tr>
        <td id="L7981" class="blob-num js-line-number" data-line-number="7981"></td>
        <td id="LC7981" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>iostream<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L7982" class="blob-num js-line-number" data-line-number="7982"></td>
        <td id="LC7982" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">else</span></td>
      </tr>
      <tr>
        <td id="L7983" class="blob-num js-line-number" data-line-number="7983"></td>
        <td id="LC7983" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>arpa/inet.h<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L7984" class="blob-num js-line-number" data-line-number="7984"></td>
        <td id="LC7984" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>sys/socket.h<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L7985" class="blob-num js-line-number" data-line-number="7985"></td>
        <td id="LC7985" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>unistd.h<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L7986" class="blob-num js-line-number" data-line-number="7986"></td>
        <td id="LC7986" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L7987" class="blob-num js-line-number" data-line-number="7987"></td>
        <td id="LC7987" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> clang-format on</span></td>
      </tr>
      <tr>
        <td id="L7988" class="blob-num js-line-number" data-line-number="7988"></td>
        <td id="LC7988" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7989" class="blob-num js-line-number" data-line-number="7989"></td>
        <td id="LC7989" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>cerrno<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L7990" class="blob-num js-line-number" data-line-number="7990"></td>
        <td id="LC7990" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>cstring<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L7991" class="blob-num js-line-number" data-line-number="7991"></td>
        <td id="LC7991" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>algorithm<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L7992" class="blob-num js-line-number" data-line-number="7992"></td>
        <td id="LC7992" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>iterator<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L7993" class="blob-num js-line-number" data-line-number="7993"></td>
        <td id="LC7993" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>sstream<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L7994" class="blob-num js-line-number" data-line-number="7994"></td>
        <td id="LC7994" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>vector<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L7995" class="blob-num js-line-number" data-line-number="7995"></td>
        <td id="LC7995" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7996" class="blob-num js-line-number" data-line-number="7996"></td>
        <td id="LC7996" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">cluon</span> {</td>
      </tr>
      <tr>
        <td id="L7997" class="blob-num js-line-number" data-line-number="7997"></td>
        <td id="LC7997" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L7998" class="blob-num js-line-number" data-line-number="7998"></td>
        <td id="LC7998" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-en">UDPSender::UDPSender</span>(<span class="pl-k">const</span> std::string &amp;sendToAddress, <span class="pl-c1">uint16_t</span> sendToPort) <span class="pl-k">noexcept</span></td>
      </tr>
      <tr>
        <td id="L7999" class="blob-num js-line-number" data-line-number="7999"></td>
        <td id="LC7999" class="blob-code blob-code-inner js-file-line">    : m_socketMutex()</td>
      </tr>
      <tr>
        <td id="L8000" class="blob-num js-line-number" data-line-number="8000"></td>
        <td id="LC8000" class="blob-code blob-code-inner js-file-line">    , m_sendToAddress() {</td>
      </tr>
      <tr>
        <td id="L8001" class="blob-num js-line-number" data-line-number="8001"></td>
        <td id="LC8001" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Decompose given address into tokens to check validity with numerical IPv4 address.</span></td>
      </tr>
      <tr>
        <td id="L8002" class="blob-num js-line-number" data-line-number="8002"></td>
        <td id="LC8002" class="blob-code blob-code-inner js-file-line">    std::string tmp{sendToAddress};</td>
      </tr>
      <tr>
        <td id="L8003" class="blob-num js-line-number" data-line-number="8003"></td>
        <td id="LC8003" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">std::replace</span>(tmp.<span class="pl-c1">begin</span>(), tmp.<span class="pl-c1">end</span>(), <span class="pl-s"><span class="pl-pds">&#39;</span>.<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span> <span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L8004" class="blob-num js-line-number" data-line-number="8004"></td>
        <td id="LC8004" class="blob-code blob-code-inner js-file-line">    std::istringstream sstr{tmp};</td>
      </tr>
      <tr>
        <td id="L8005" class="blob-num js-line-number" data-line-number="8005"></td>
        <td id="LC8005" class="blob-code blob-code-inner js-file-line">    std::vector&lt;<span class="pl-k">int</span>&gt; sendToAddressTokens{std::istream_iterator&lt;<span class="pl-k">int</span>&gt;(sstr), std::istream_iterator&lt;<span class="pl-k">int</span>&gt;()};</td>
      </tr>
      <tr>
        <td id="L8006" class="blob-num js-line-number" data-line-number="8006"></td>
        <td id="LC8006" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8007" class="blob-num js-line-number" data-line-number="8007"></td>
        <td id="LC8007" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (!sendToAddress.<span class="pl-c1">empty</span>() &amp;&amp; (<span class="pl-c1">4</span> == sendToAddressTokens.<span class="pl-c1">size</span>())</td>
      </tr>
      <tr>
        <td id="L8008" class="blob-num js-line-number" data-line-number="8008"></td>
        <td id="LC8008" class="blob-code blob-code-inner js-file-line">        &amp;&amp; !(<span class="pl-c1">std::end</span>(sendToAddressTokens) != <span class="pl-c1">std::find_if</span>(sendToAddressTokens.<span class="pl-c1">begin</span>(), sendToAddressTokens.<span class="pl-c1">end</span>(), [](<span class="pl-k">int</span> a) { <span class="pl-k">return</span> (a &lt; <span class="pl-c1">0</span>) || (a &gt; <span class="pl-c1">255</span>); }))</td>
      </tr>
      <tr>
        <td id="L8009" class="blob-num js-line-number" data-line-number="8009"></td>
        <td id="LC8009" class="blob-code blob-code-inner js-file-line">        &amp;&amp; (<span class="pl-c1">0</span> &lt; sendToPort)) {</td>
      </tr>
      <tr>
        <td id="L8010" class="blob-num js-line-number" data-line-number="8010"></td>
        <td id="LC8010" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">::memset</span>(&amp;m_sendToAddress, <span class="pl-c1">0</span>, <span class="pl-k">sizeof</span>(m_sendToAddress));</td>
      </tr>
      <tr>
        <td id="L8011" class="blob-num js-line-number" data-line-number="8011"></td>
        <td id="LC8011" class="blob-code blob-code-inner js-file-line">        m_sendToAddress.<span class="pl-smi">sin_addr</span>.<span class="pl-smi">s_addr</span> = ::<span class="pl-c1">inet_addr</span>(sendToAddress.<span class="pl-c1">c_str</span>());</td>
      </tr>
      <tr>
        <td id="L8012" class="blob-num js-line-number" data-line-number="8012"></td>
        <td id="LC8012" class="blob-code blob-code-inner js-file-line">        m_sendToAddress.<span class="pl-smi">sin_family</span>      = AF_INET;</td>
      </tr>
      <tr>
        <td id="L8013" class="blob-num js-line-number" data-line-number="8013"></td>
        <td id="LC8013" class="blob-code blob-code-inner js-file-line">        m_sendToAddress.<span class="pl-smi">sin_port</span>        = <span class="pl-c1">htons</span>(sendToPort);</td>
      </tr>
      <tr>
        <td id="L8014" class="blob-num js-line-number" data-line-number="8014"></td>
        <td id="LC8014" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8015" class="blob-num js-line-number" data-line-number="8015"></td>
        <td id="LC8015" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifdef</span> WIN32</td>
      </tr>
      <tr>
        <td id="L8016" class="blob-num js-line-number" data-line-number="8016"></td>
        <td id="LC8016" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> Load Winsock 2.2 DLL.</span></td>
      </tr>
      <tr>
        <td id="L8017" class="blob-num js-line-number" data-line-number="8017"></td>
        <td id="LC8017" class="blob-code blob-code-inner js-file-line">        WSADATA wsaData;</td>
      </tr>
      <tr>
        <td id="L8018" class="blob-num js-line-number" data-line-number="8018"></td>
        <td id="LC8018" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-c1">WSAStartup</span>(<span class="pl-c1">MAKEWORD</span>(<span class="pl-c1">2</span>, <span class="pl-c1">2</span>), &amp;wsaData) != <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L8019" class="blob-num js-line-number" data-line-number="8019"></td>
        <td id="LC8019" class="blob-code blob-code-inner js-file-line">            std::cerr &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>[cluon::UDPSender] Error while calling WSAStartUp: <span class="pl-pds">&quot;</span></span> &lt;&lt; <span class="pl-c1">WSAGetLastError</span>() &lt;&lt; std::endl;</td>
      </tr>
      <tr>
        <td id="L8020" class="blob-num js-line-number" data-line-number="8020"></td>
        <td id="LC8020" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L8021" class="blob-num js-line-number" data-line-number="8021"></td>
        <td id="LC8021" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L8022" class="blob-num js-line-number" data-line-number="8022"></td>
        <td id="LC8022" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8023" class="blob-num js-line-number" data-line-number="8023"></td>
        <td id="LC8023" class="blob-code blob-code-inner js-file-line">        m_socket = ::<span class="pl-c1">socket</span>(PF_INET, SOCK_DGRAM, IPPROTO_UDP);</td>
      </tr>
      <tr>
        <td id="L8024" class="blob-num js-line-number" data-line-number="8024"></td>
        <td id="LC8024" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8025" class="blob-num js-line-number" data-line-number="8025"></td>
        <td id="LC8025" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifdef</span> WIN32</td>
      </tr>
      <tr>
        <td id="L8026" class="blob-num js-line-number" data-line-number="8026"></td>
        <td id="LC8026" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (m_socket &lt; <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L8027" class="blob-num js-line-number" data-line-number="8027"></td>
        <td id="LC8027" class="blob-code blob-code-inner js-file-line">            std::cerr &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>[cluon::UDPSender] Error while creating socket: <span class="pl-pds">&quot;</span></span> &lt;&lt; <span class="pl-c1">WSAGetLastError</span>() &lt;&lt; std::endl;</td>
      </tr>
      <tr>
        <td id="L8028" class="blob-num js-line-number" data-line-number="8028"></td>
        <td id="LC8028" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">WSACleanup</span>();</td>
      </tr>
      <tr>
        <td id="L8029" class="blob-num js-line-number" data-line-number="8029"></td>
        <td id="LC8029" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L8030" class="blob-num js-line-number" data-line-number="8030"></td>
        <td id="LC8030" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L8031" class="blob-num js-line-number" data-line-number="8031"></td>
        <td id="LC8031" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L8032" class="blob-num js-line-number" data-line-number="8032"></td>
        <td id="LC8032" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L8033" class="blob-num js-line-number" data-line-number="8033"></td>
        <td id="LC8033" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8034" class="blob-num js-line-number" data-line-number="8034"></td>
        <td id="LC8034" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-en">UDPSender::~UDPSender</span>() noexcept {</td>
      </tr>
      <tr>
        <td id="L8035" class="blob-num js-line-number" data-line-number="8035"></td>
        <td id="LC8035" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (!(m_socket &lt; <span class="pl-c1">0</span>)) {</td>
      </tr>
      <tr>
        <td id="L8036" class="blob-num js-line-number" data-line-number="8036"></td>
        <td id="LC8036" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifdef</span> WIN32</td>
      </tr>
      <tr>
        <td id="L8037" class="blob-num js-line-number" data-line-number="8037"></td>
        <td id="LC8037" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">::shutdown</span>(m_socket, SD_BOTH);</td>
      </tr>
      <tr>
        <td id="L8038" class="blob-num js-line-number" data-line-number="8038"></td>
        <td id="LC8038" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">::closesocket</span>(m_socket);</td>
      </tr>
      <tr>
        <td id="L8039" class="blob-num js-line-number" data-line-number="8039"></td>
        <td id="LC8039" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">WSACleanup</span>();</td>
      </tr>
      <tr>
        <td id="L8040" class="blob-num js-line-number" data-line-number="8040"></td>
        <td id="LC8040" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">else</span></td>
      </tr>
      <tr>
        <td id="L8041" class="blob-num js-line-number" data-line-number="8041"></td>
        <td id="LC8041" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">::shutdown</span>(m_socket, SHUT_RDWR); <span class="pl-c"><span class="pl-c">//</span> Disallow further read/write operations.</span></td>
      </tr>
      <tr>
        <td id="L8042" class="blob-num js-line-number" data-line-number="8042"></td>
        <td id="LC8042" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">::close</span>(m_socket);</td>
      </tr>
      <tr>
        <td id="L8043" class="blob-num js-line-number" data-line-number="8043"></td>
        <td id="LC8043" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L8044" class="blob-num js-line-number" data-line-number="8044"></td>
        <td id="LC8044" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L8045" class="blob-num js-line-number" data-line-number="8045"></td>
        <td id="LC8045" class="blob-code blob-code-inner js-file-line">    m_socket = -<span class="pl-c1">1</span>;</td>
      </tr>
      <tr>
        <td id="L8046" class="blob-num js-line-number" data-line-number="8046"></td>
        <td id="LC8046" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L8047" class="blob-num js-line-number" data-line-number="8047"></td>
        <td id="LC8047" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8048" class="blob-num js-line-number" data-line-number="8048"></td>
        <td id="LC8048" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::pair&lt;<span class="pl-c1">ssize_t</span>, <span class="pl-c1">int32_t</span>&gt; <span class="pl-en">UDPSender::send</span>(std::string &amp;&amp;data) <span class="pl-k">const</span> <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L8049" class="blob-num js-line-number" data-line-number="8049"></td>
        <td id="LC8049" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (-<span class="pl-c1">1</span> == m_socket) {</td>
      </tr>
      <tr>
        <td id="L8050" class="blob-num js-line-number" data-line-number="8050"></td>
        <td id="LC8050" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> {-<span class="pl-c1">1</span>, EBADF};</td>
      </tr>
      <tr>
        <td id="L8051" class="blob-num js-line-number" data-line-number="8051"></td>
        <td id="LC8051" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L8052" class="blob-num js-line-number" data-line-number="8052"></td>
        <td id="LC8052" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8053" class="blob-num js-line-number" data-line-number="8053"></td>
        <td id="LC8053" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (data.<span class="pl-c1">empty</span>()) {</td>
      </tr>
      <tr>
        <td id="L8054" class="blob-num js-line-number" data-line-number="8054"></td>
        <td id="LC8054" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> {<span class="pl-c1">0</span>, <span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L8055" class="blob-num js-line-number" data-line-number="8055"></td>
        <td id="LC8055" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L8056" class="blob-num js-line-number" data-line-number="8056"></td>
        <td id="LC8056" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8057" class="blob-num js-line-number" data-line-number="8057"></td>
        <td id="LC8057" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">constexpr</span> <span class="pl-c1">uint16_t</span> MAX_LENGTH = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint16_t</span>&gt;(UDPPacketSizeConstraints::MAX_SIZE_UDP_PACKET)</td>
      </tr>
      <tr>
        <td id="L8058" class="blob-num js-line-number" data-line-number="8058"></td>
        <td id="LC8058" class="blob-code blob-code-inner js-file-line">                                    - <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint16_t</span>&gt;(UDPPacketSizeConstraints::SIZE_IPv4_HEADER)</td>
      </tr>
      <tr>
        <td id="L8059" class="blob-num js-line-number" data-line-number="8059"></td>
        <td id="LC8059" class="blob-code blob-code-inner js-file-line">                                    - <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint16_t</span>&gt;(UDPPacketSizeConstraints::SIZE_UDP_HEADER);</td>
      </tr>
      <tr>
        <td id="L8060" class="blob-num js-line-number" data-line-number="8060"></td>
        <td id="LC8060" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (MAX_LENGTH &lt; data.<span class="pl-c1">size</span>()) {</td>
      </tr>
      <tr>
        <td id="L8061" class="blob-num js-line-number" data-line-number="8061"></td>
        <td id="LC8061" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> {-<span class="pl-c1">1</span>, E2BIG};</td>
      </tr>
      <tr>
        <td id="L8062" class="blob-num js-line-number" data-line-number="8062"></td>
        <td id="LC8062" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L8063" class="blob-num js-line-number" data-line-number="8063"></td>
        <td id="LC8063" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8064" class="blob-num js-line-number" data-line-number="8064"></td>
        <td id="LC8064" class="blob-code blob-code-inner js-file-line">    std::lock_guard&lt;std::mutex&gt; <span class="pl-c1">lck</span>(m_socketMutex);</td>
      </tr>
      <tr>
        <td id="L8065" class="blob-num js-line-number" data-line-number="8065"></td>
        <td id="LC8065" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">ssize_t</span> bytesSent = ::<span class="pl-c1">sendto</span>(m_socket,</td>
      </tr>
      <tr>
        <td id="L8066" class="blob-num js-line-number" data-line-number="8066"></td>
        <td id="LC8066" class="blob-code blob-code-inner js-file-line">                                 data.<span class="pl-c1">c_str</span>(),</td>
      </tr>
      <tr>
        <td id="L8067" class="blob-num js-line-number" data-line-number="8067"></td>
        <td id="LC8067" class="blob-code blob-code-inner js-file-line">                                 data.<span class="pl-c1">length</span>(),</td>
      </tr>
      <tr>
        <td id="L8068" class="blob-num js-line-number" data-line-number="8068"></td>
        <td id="LC8068" class="blob-code blob-code-inner js-file-line">                                 <span class="pl-c1">0</span>,</td>
      </tr>
      <tr>
        <td id="L8069" class="blob-num js-line-number" data-line-number="8069"></td>
        <td id="LC8069" class="blob-code blob-code-inner js-file-line">                                 <span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">const</span> <span class="pl-k">struct</span> <span class="pl-en">sockaddr</span> *&gt;(&amp;m_sendToAddress), <span class="pl-c"><span class="pl-c">//</span> NOLINT</span></td>
      </tr>
      <tr>
        <td id="L8070" class="blob-num js-line-number" data-line-number="8070"></td>
        <td id="LC8070" class="blob-code blob-code-inner js-file-line">                                 <span class="pl-k">sizeof</span>(m_sendToAddress));</td>
      </tr>
      <tr>
        <td id="L8071" class="blob-num js-line-number" data-line-number="8071"></td>
        <td id="LC8071" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8072" class="blob-num js-line-number" data-line-number="8072"></td>
        <td id="LC8072" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> {bytesSent, (<span class="pl-c1">0</span> &gt; bytesSent ? errno : <span class="pl-c1">0</span>)};</td>
      </tr>
      <tr>
        <td id="L8073" class="blob-num js-line-number" data-line-number="8073"></td>
        <td id="LC8073" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L8074" class="blob-num js-line-number" data-line-number="8074"></td>
        <td id="LC8074" class="blob-code blob-code-inner js-file-line">} <span class="pl-c"><span class="pl-c">//</span> namespace cluon</span></td>
      </tr>
      <tr>
        <td id="L8075" class="blob-num js-line-number" data-line-number="8075"></td>
        <td id="LC8075" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L8076" class="blob-num js-line-number" data-line-number="8076"></td>
        <td id="LC8076" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Copyright (C) 2017-2018  Christian Berger</span></td>
      </tr>
      <tr>
        <td id="L8077" class="blob-num js-line-number" data-line-number="8077"></td>
        <td id="LC8077" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L8078" class="blob-num js-line-number" data-line-number="8078"></td>
        <td id="LC8078" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is free software: you can redistribute it and/or modify</span></td>
      </tr>
      <tr>
        <td id="L8079" class="blob-num js-line-number" data-line-number="8079"></td>
        <td id="LC8079" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * it under the terms of the GNU General Public License as published by</span></td>
      </tr>
      <tr>
        <td id="L8080" class="blob-num js-line-number" data-line-number="8080"></td>
        <td id="LC8080" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * the Free Software Foundation, either version 3 of the License, or</span></td>
      </tr>
      <tr>
        <td id="L8081" class="blob-num js-line-number" data-line-number="8081"></td>
        <td id="LC8081" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * (at your option) any later version.</span></td>
      </tr>
      <tr>
        <td id="L8082" class="blob-num js-line-number" data-line-number="8082"></td>
        <td id="LC8082" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L8083" class="blob-num js-line-number" data-line-number="8083"></td>
        <td id="LC8083" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is distributed in the hope that it will be useful,</span></td>
      </tr>
      <tr>
        <td id="L8084" class="blob-num js-line-number" data-line-number="8084"></td>
        <td id="LC8084" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></td>
      </tr>
      <tr>
        <td id="L8085" class="blob-num js-line-number" data-line-number="8085"></td>
        <td id="LC8085" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></td>
      </tr>
      <tr>
        <td id="L8086" class="blob-num js-line-number" data-line-number="8086"></td>
        <td id="LC8086" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * GNU General Public License for more details.</span></td>
      </tr>
      <tr>
        <td id="L8087" class="blob-num js-line-number" data-line-number="8087"></td>
        <td id="LC8087" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L8088" class="blob-num js-line-number" data-line-number="8088"></td>
        <td id="LC8088" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * You should have received a copy of the GNU General Public License</span></td>
      </tr>
      <tr>
        <td id="L8089" class="blob-num js-line-number" data-line-number="8089"></td>
        <td id="LC8089" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></td>
      </tr>
      <tr>
        <td id="L8090" class="blob-num js-line-number" data-line-number="8090"></td>
        <td id="LC8090" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L8091" class="blob-num js-line-number" data-line-number="8091"></td>
        <td id="LC8091" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8092" class="blob-num js-line-number" data-line-number="8092"></td>
        <td id="LC8092" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/UDPReceiver.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L8093" class="blob-num js-line-number" data-line-number="8093"></td>
        <td id="LC8093" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/UDPPacketSizeConstraints.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L8094" class="blob-num js-line-number" data-line-number="8094"></td>
        <td id="LC8094" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8095" class="blob-num js-line-number" data-line-number="8095"></td>
        <td id="LC8095" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> clang-format off</span></td>
      </tr>
      <tr>
        <td id="L8096" class="blob-num js-line-number" data-line-number="8096"></td>
        <td id="LC8096" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifdef</span> WIN32</td>
      </tr>
      <tr>
        <td id="L8097" class="blob-num js-line-number" data-line-number="8097"></td>
        <td id="LC8097" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>errno.h<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L8098" class="blob-num js-line-number" data-line-number="8098"></td>
        <td id="LC8098" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>iostream<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L8099" class="blob-num js-line-number" data-line-number="8099"></td>
        <td id="LC8099" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">else</span></td>
      </tr>
      <tr>
        <td id="L8100" class="blob-num js-line-number" data-line-number="8100"></td>
        <td id="LC8100" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>arpa/inet.h<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L8101" class="blob-num js-line-number" data-line-number="8101"></td>
        <td id="LC8101" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>sys/ioctl.h<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L8102" class="blob-num js-line-number" data-line-number="8102"></td>
        <td id="LC8102" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>sys/socket.h<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L8103" class="blob-num js-line-number" data-line-number="8103"></td>
        <td id="LC8103" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>sys/types.h<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L8104" class="blob-num js-line-number" data-line-number="8104"></td>
        <td id="LC8104" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>unistd.h<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L8105" class="blob-num js-line-number" data-line-number="8105"></td>
        <td id="LC8105" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L8106" class="blob-num js-line-number" data-line-number="8106"></td>
        <td id="LC8106" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> clang-format on</span></td>
      </tr>
      <tr>
        <td id="L8107" class="blob-num js-line-number" data-line-number="8107"></td>
        <td id="LC8107" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8108" class="blob-num js-line-number" data-line-number="8108"></td>
        <td id="LC8108" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>cstring<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L8109" class="blob-num js-line-number" data-line-number="8109"></td>
        <td id="LC8109" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>algorithm<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L8110" class="blob-num js-line-number" data-line-number="8110"></td>
        <td id="LC8110" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>array<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L8111" class="blob-num js-line-number" data-line-number="8111"></td>
        <td id="LC8111" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>iostream<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L8112" class="blob-num js-line-number" data-line-number="8112"></td>
        <td id="LC8112" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>iterator<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L8113" class="blob-num js-line-number" data-line-number="8113"></td>
        <td id="LC8113" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>sstream<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L8114" class="blob-num js-line-number" data-line-number="8114"></td>
        <td id="LC8114" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>utility<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L8115" class="blob-num js-line-number" data-line-number="8115"></td>
        <td id="LC8115" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>vector<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L8116" class="blob-num js-line-number" data-line-number="8116"></td>
        <td id="LC8116" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8117" class="blob-num js-line-number" data-line-number="8117"></td>
        <td id="LC8117" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">cluon</span> {</td>
      </tr>
      <tr>
        <td id="L8118" class="blob-num js-line-number" data-line-number="8118"></td>
        <td id="LC8118" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8119" class="blob-num js-line-number" data-line-number="8119"></td>
        <td id="LC8119" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-en">UDPReceiver::UDPReceiver</span>(<span class="pl-k">const</span> std::string &amp;receiveFromAddress,</td>
      </tr>
      <tr>
        <td id="L8120" class="blob-num js-line-number" data-line-number="8120"></td>
        <td id="LC8120" class="blob-code blob-code-inner js-file-line">                         <span class="pl-c1">uint16_t</span> receiveFromPort,</td>
      </tr>
      <tr>
        <td id="L8121" class="blob-num js-line-number" data-line-number="8121"></td>
        <td id="LC8121" class="blob-code blob-code-inner js-file-line">                         std::function&lt;<span class="pl-k">void</span>(std::string &amp;&amp;, std::string &amp;&amp;, std::chrono::system_clock::time_point &amp;&amp;)&gt; delegate) <span class="pl-k">noexcept</span></td>
      </tr>
      <tr>
        <td id="L8122" class="blob-num js-line-number" data-line-number="8122"></td>
        <td id="LC8122" class="blob-code blob-code-inner js-file-line">    : m_receiveFromAddress()</td>
      </tr>
      <tr>
        <td id="L8123" class="blob-num js-line-number" data-line-number="8123"></td>
        <td id="LC8123" class="blob-code blob-code-inner js-file-line">    , m_mreq()</td>
      </tr>
      <tr>
        <td id="L8124" class="blob-num js-line-number" data-line-number="8124"></td>
        <td id="LC8124" class="blob-code blob-code-inner js-file-line">    , m_readFromSocketThread()</td>
      </tr>
      <tr>
        <td id="L8125" class="blob-num js-line-number" data-line-number="8125"></td>
        <td id="LC8125" class="blob-code blob-code-inner js-file-line">    , m_delegate(std::move(delegate)) {</td>
      </tr>
      <tr>
        <td id="L8126" class="blob-num js-line-number" data-line-number="8126"></td>
        <td id="LC8126" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Decompose given address string to check validity with numerical IPv4 address.</span></td>
      </tr>
      <tr>
        <td id="L8127" class="blob-num js-line-number" data-line-number="8127"></td>
        <td id="LC8127" class="blob-code blob-code-inner js-file-line">    std::string tmp{receiveFromAddress};</td>
      </tr>
      <tr>
        <td id="L8128" class="blob-num js-line-number" data-line-number="8128"></td>
        <td id="LC8128" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">std::replace</span>(tmp.<span class="pl-c1">begin</span>(), tmp.<span class="pl-c1">end</span>(), <span class="pl-s"><span class="pl-pds">&#39;</span>.<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span> <span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L8129" class="blob-num js-line-number" data-line-number="8129"></td>
        <td id="LC8129" class="blob-code blob-code-inner js-file-line">    std::istringstream sstr{tmp};</td>
      </tr>
      <tr>
        <td id="L8130" class="blob-num js-line-number" data-line-number="8130"></td>
        <td id="LC8130" class="blob-code blob-code-inner js-file-line">    std::vector&lt;<span class="pl-k">int</span>&gt; receiveFromAddressTokens{std::istream_iterator&lt;<span class="pl-k">int</span>&gt;(sstr), std::istream_iterator&lt;<span class="pl-k">int</span>&gt;()};</td>
      </tr>
      <tr>
        <td id="L8131" class="blob-num js-line-number" data-line-number="8131"></td>
        <td id="LC8131" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8132" class="blob-num js-line-number" data-line-number="8132"></td>
        <td id="LC8132" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> ((!receiveFromAddress.<span class="pl-c1">empty</span>()) &amp;&amp; (<span class="pl-c1">4</span> == receiveFromAddressTokens.<span class="pl-c1">size</span>())</td>
      </tr>
      <tr>
        <td id="L8133" class="blob-num js-line-number" data-line-number="8133"></td>
        <td id="LC8133" class="blob-code blob-code-inner js-file-line">        &amp;&amp; !(<span class="pl-c1">std::end</span>(receiveFromAddressTokens)</td>
      </tr>
      <tr>
        <td id="L8134" class="blob-num js-line-number" data-line-number="8134"></td>
        <td id="LC8134" class="blob-code blob-code-inner js-file-line">             != <span class="pl-c1">std::find_if</span>(receiveFromAddressTokens.<span class="pl-c1">begin</span>(), receiveFromAddressTokens.<span class="pl-c1">end</span>(), [](<span class="pl-k">int</span> a) { <span class="pl-k">return</span> (a &lt; <span class="pl-c1">0</span>) || (a &gt; <span class="pl-c1">255</span>); }))</td>
      </tr>
      <tr>
        <td id="L8135" class="blob-num js-line-number" data-line-number="8135"></td>
        <td id="LC8135" class="blob-code blob-code-inner js-file-line">        &amp;&amp; (<span class="pl-c1">0</span> &lt; receiveFromPort)) {</td>
      </tr>
      <tr>
        <td id="L8136" class="blob-num js-line-number" data-line-number="8136"></td>
        <td id="LC8136" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> Check for valid IP address.</span></td>
      </tr>
      <tr>
        <td id="L8137" class="blob-num js-line-number" data-line-number="8137"></td>
        <td id="LC8137" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">struct</span> <span class="pl-en">sockaddr_in</span> tmpSocketAddress {};</td>
      </tr>
      <tr>
        <td id="L8138" class="blob-num js-line-number" data-line-number="8138"></td>
        <td id="LC8138" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> <span class="pl-k">bool</span> isValid = (<span class="pl-c1">0</span> &lt; ::<span class="pl-c1">inet_pton</span>(AF_INET, receiveFromAddress.<span class="pl-c1">c_str</span>(), &amp;(tmpSocketAddress.<span class="pl-smi">sin_addr</span>))) &amp;&amp; (<span class="pl-c1">224</span> &gt; receiveFromAddressTokens[<span class="pl-c1">0</span>]);</td>
      </tr>
      <tr>
        <td id="L8139" class="blob-num js-line-number" data-line-number="8139"></td>
        <td id="LC8139" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8140" class="blob-num js-line-number" data-line-number="8140"></td>
        <td id="LC8140" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> Check for UDP multicast, i.e., IP address range [225.0.0.1 - 239.255.255.255].</span></td>
      </tr>
      <tr>
        <td id="L8141" class="blob-num js-line-number" data-line-number="8141"></td>
        <td id="LC8141" class="blob-code blob-code-inner js-file-line">        m_isMulticast = (((<span class="pl-c1">224</span> &lt; receiveFromAddressTokens[<span class="pl-c1">0</span>]) &amp;&amp; (receiveFromAddressTokens[<span class="pl-c1">0</span>] &lt;= <span class="pl-c1">239</span>))</td>
      </tr>
      <tr>
        <td id="L8142" class="blob-num js-line-number" data-line-number="8142"></td>
        <td id="LC8142" class="blob-code blob-code-inner js-file-line">                         &amp;&amp; ((<span class="pl-c1">0</span> &lt;= receiveFromAddressTokens[<span class="pl-c1">1</span>]) &amp;&amp; (receiveFromAddressTokens[<span class="pl-c1">1</span>] &lt;= <span class="pl-c1">255</span>))</td>
      </tr>
      <tr>
        <td id="L8143" class="blob-num js-line-number" data-line-number="8143"></td>
        <td id="LC8143" class="blob-code blob-code-inner js-file-line">                         &amp;&amp; ((<span class="pl-c1">0</span> &lt;= receiveFromAddressTokens[<span class="pl-c1">2</span>]) &amp;&amp; (receiveFromAddressTokens[<span class="pl-c1">2</span>] &lt;= <span class="pl-c1">255</span>))</td>
      </tr>
      <tr>
        <td id="L8144" class="blob-num js-line-number" data-line-number="8144"></td>
        <td id="LC8144" class="blob-code blob-code-inner js-file-line">                         &amp;&amp; ((<span class="pl-c1">1</span> &lt;= receiveFromAddressTokens[<span class="pl-c1">3</span>]) &amp;&amp; (receiveFromAddressTokens[<span class="pl-c1">3</span>] &lt;= <span class="pl-c1">255</span>)));</td>
      </tr>
      <tr>
        <td id="L8145" class="blob-num js-line-number" data-line-number="8145"></td>
        <td id="LC8145" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8146" class="blob-num js-line-number" data-line-number="8146"></td>
        <td id="LC8146" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">std::memset</span>(&amp;m_receiveFromAddress, <span class="pl-c1">0</span>, <span class="pl-k">sizeof</span>(m_receiveFromAddress));</td>
      </tr>
      <tr>
        <td id="L8147" class="blob-num js-line-number" data-line-number="8147"></td>
        <td id="LC8147" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifdef</span> WIN32</td>
      </tr>
      <tr>
        <td id="L8148" class="blob-num js-line-number" data-line-number="8148"></td>
        <td id="LC8148" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> According to http://www.sockets.com/err_lst1.htm, the binding is</span></td>
      </tr>
      <tr>
        <td id="L8149" class="blob-num js-line-number" data-line-number="8149"></td>
        <td id="LC8149" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> different on Windows opposed to POSIX when using the real address</span></td>
      </tr>
      <tr>
        <td id="L8150" class="blob-num js-line-number" data-line-number="8150"></td>
        <td id="LC8150" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> here; thus, we need to use INADDR_ANY.</span></td>
      </tr>
      <tr>
        <td id="L8151" class="blob-num js-line-number" data-line-number="8151"></td>
        <td id="LC8151" class="blob-code blob-code-inner js-file-line">        m_receiveFromAddress.<span class="pl-smi">sin_addr</span>.<span class="pl-smi">s_addr</span> = (m_isMulticast ? <span class="pl-c1">htonl</span>(INADDR_ANY) : ::<span class="pl-c1">inet_addr</span>(receiveFromAddress.<span class="pl-c1">c_str</span>()));</td>
      </tr>
      <tr>
        <td id="L8152" class="blob-num js-line-number" data-line-number="8152"></td>
        <td id="LC8152" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">else</span></td>
      </tr>
      <tr>
        <td id="L8153" class="blob-num js-line-number" data-line-number="8153"></td>
        <td id="LC8153" class="blob-code blob-code-inner js-file-line">        m_receiveFromAddress.<span class="pl-smi">sin_addr</span>.<span class="pl-smi">s_addr</span> = ::<span class="pl-c1">inet_addr</span>(receiveFromAddress.<span class="pl-c1">c_str</span>());</td>
      </tr>
      <tr>
        <td id="L8154" class="blob-num js-line-number" data-line-number="8154"></td>
        <td id="LC8154" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L8155" class="blob-num js-line-number" data-line-number="8155"></td>
        <td id="LC8155" class="blob-code blob-code-inner js-file-line">        m_receiveFromAddress.<span class="pl-smi">sin_family</span> = AF_INET;</td>
      </tr>
      <tr>
        <td id="L8156" class="blob-num js-line-number" data-line-number="8156"></td>
        <td id="LC8156" class="blob-code blob-code-inner js-file-line">        m_receiveFromAddress.<span class="pl-smi">sin_port</span>   = <span class="pl-c1">htons</span>(receiveFromPort);</td>
      </tr>
      <tr>
        <td id="L8157" class="blob-num js-line-number" data-line-number="8157"></td>
        <td id="LC8157" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8158" class="blob-num js-line-number" data-line-number="8158"></td>
        <td id="LC8158" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifdef</span> WIN32</td>
      </tr>
      <tr>
        <td id="L8159" class="blob-num js-line-number" data-line-number="8159"></td>
        <td id="LC8159" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> Load Winsock 2.2 DLL.</span></td>
      </tr>
      <tr>
        <td id="L8160" class="blob-num js-line-number" data-line-number="8160"></td>
        <td id="LC8160" class="blob-code blob-code-inner js-file-line">        WSADATA wsaData;</td>
      </tr>
      <tr>
        <td id="L8161" class="blob-num js-line-number" data-line-number="8161"></td>
        <td id="LC8161" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-c1">WSAStartup</span>(<span class="pl-c1">MAKEWORD</span>(<span class="pl-c1">2</span>, <span class="pl-c1">2</span>), &amp;wsaData) != <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L8162" class="blob-num js-line-number" data-line-number="8162"></td>
        <td id="LC8162" class="blob-code blob-code-inner js-file-line">            std::cerr &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>[cluon::UDPReceiver] Error while calling WSAStartUp: <span class="pl-pds">&quot;</span></span> &lt;&lt; <span class="pl-c1">WSAGetLastError</span>() &lt;&lt; std::endl;</td>
      </tr>
      <tr>
        <td id="L8163" class="blob-num js-line-number" data-line-number="8163"></td>
        <td id="LC8163" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L8164" class="blob-num js-line-number" data-line-number="8164"></td>
        <td id="LC8164" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L8165" class="blob-num js-line-number" data-line-number="8165"></td>
        <td id="LC8165" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8166" class="blob-num js-line-number" data-line-number="8166"></td>
        <td id="LC8166" class="blob-code blob-code-inner js-file-line">        m_socket = ::<span class="pl-c1">socket</span>(PF_INET, SOCK_DGRAM, IPPROTO_UDP);</td>
      </tr>
      <tr>
        <td id="L8167" class="blob-num js-line-number" data-line-number="8167"></td>
        <td id="LC8167" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8168" class="blob-num js-line-number" data-line-number="8168"></td>
        <td id="LC8168" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifdef</span> WIN32</td>
      </tr>
      <tr>
        <td id="L8169" class="blob-num js-line-number" data-line-number="8169"></td>
        <td id="LC8169" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (m_socket &lt; <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L8170" class="blob-num js-line-number" data-line-number="8170"></td>
        <td id="LC8170" class="blob-code blob-code-inner js-file-line">            std::cerr &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>[cluon::UDPReceiver] Error while creating socket: <span class="pl-pds">&quot;</span></span> &lt;&lt; <span class="pl-c1">WSAGetLastError</span>() &lt;&lt; std::endl;</td>
      </tr>
      <tr>
        <td id="L8171" class="blob-num js-line-number" data-line-number="8171"></td>
        <td id="LC8171" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">WSACleanup</span>();</td>
      </tr>
      <tr>
        <td id="L8172" class="blob-num js-line-number" data-line-number="8172"></td>
        <td id="LC8172" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L8173" class="blob-num js-line-number" data-line-number="8173"></td>
        <td id="LC8173" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L8174" class="blob-num js-line-number" data-line-number="8174"></td>
        <td id="LC8174" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8175" class="blob-num js-line-number" data-line-number="8175"></td>
        <td id="LC8175" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (!(m_socket &lt; <span class="pl-c1">0</span>)) {</td>
      </tr>
      <tr>
        <td id="L8176" class="blob-num js-line-number" data-line-number="8176"></td>
        <td id="LC8176" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> Allow reusing of ports by multiple calls with same address/port.</span></td>
      </tr>
      <tr>
        <td id="L8177" class="blob-num js-line-number" data-line-number="8177"></td>
        <td id="LC8177" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">uint32_t</span> YES = <span class="pl-c1">1</span>;</td>
      </tr>
      <tr>
        <td id="L8178" class="blob-num js-line-number" data-line-number="8178"></td>
        <td id="LC8178" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> clang-format off</span></td>
      </tr>
      <tr>
        <td id="L8179" class="blob-num js-line-number" data-line-number="8179"></td>
        <td id="LC8179" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">auto</span> retVal = ::<span class="pl-c1">setsockopt</span>(m_socket, SOL_SOCKET, SO_REUSEADDR, <span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">char</span> *&gt;(&amp;YES), <span class="pl-k">sizeof</span>(YES)); <span class="pl-c"><span class="pl-c">//</span> NOLINT</span></td>
      </tr>
      <tr>
        <td id="L8180" class="blob-num js-line-number" data-line-number="8180"></td>
        <td id="LC8180" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> clang-format on</span></td>
      </tr>
      <tr>
        <td id="L8181" class="blob-num js-line-number" data-line-number="8181"></td>
        <td id="LC8181" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-c1">0</span> &gt; retVal) {</td>
      </tr>
      <tr>
        <td id="L8182" class="blob-num js-line-number" data-line-number="8182"></td>
        <td id="LC8182" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifdef</span> WIN32 <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L8183" class="blob-num js-line-number" data-line-number="8183"></td>
        <td id="LC8183" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">auto</span> errorCode = <span class="pl-c1">WSAGetLastError</span>();</td>
      </tr>
      <tr>
        <td id="L8184" class="blob-num js-line-number" data-line-number="8184"></td>
        <td id="LC8184" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">else</span></td>
      </tr>
      <tr>
        <td id="L8185" class="blob-num js-line-number" data-line-number="8185"></td>
        <td id="LC8185" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">auto</span> errorCode = errno; <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L8186" class="blob-num js-line-number" data-line-number="8186"></td>
        <td id="LC8186" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span>                                  <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L8187" class="blob-num js-line-number" data-line-number="8187"></td>
        <td id="LC8187" class="blob-code blob-code-inner js-file-line">                <span class="pl-c1">closeSocket</span>(errorCode); <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L8188" class="blob-num js-line-number" data-line-number="8188"></td>
        <td id="LC8188" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L8189" class="blob-num js-line-number" data-line-number="8189"></td>
        <td id="LC8189" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L8190" class="blob-num js-line-number" data-line-number="8190"></td>
        <td id="LC8190" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8191" class="blob-num js-line-number" data-line-number="8191"></td>
        <td id="LC8191" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (!(m_socket &lt; <span class="pl-c1">0</span>)) {</td>
      </tr>
      <tr>
        <td id="L8192" class="blob-num js-line-number" data-line-number="8192"></td>
        <td id="LC8192" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> Bind to receive address/port.</span></td>
      </tr>
      <tr>
        <td id="L8193" class="blob-num js-line-number" data-line-number="8193"></td>
        <td id="LC8193" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> clang-format off</span></td>
      </tr>
      <tr>
        <td id="L8194" class="blob-num js-line-number" data-line-number="8194"></td>
        <td id="LC8194" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">auto</span> retVal = ::<span class="pl-c1">bind</span>(m_socket, <span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">struct</span> <span class="pl-en">sockaddr</span> *&gt;(&amp;m_receiveFromAddress), <span class="pl-k">sizeof</span>(m_receiveFromAddress)); <span class="pl-c"><span class="pl-c">//</span> NOLINT</span></td>
      </tr>
      <tr>
        <td id="L8195" class="blob-num js-line-number" data-line-number="8195"></td>
        <td id="LC8195" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> clang-format on</span></td>
      </tr>
      <tr>
        <td id="L8196" class="blob-num js-line-number" data-line-number="8196"></td>
        <td id="LC8196" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-c1">0</span> &gt; retVal) {</td>
      </tr>
      <tr>
        <td id="L8197" class="blob-num js-line-number" data-line-number="8197"></td>
        <td id="LC8197" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifdef</span> WIN32 <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L8198" class="blob-num js-line-number" data-line-number="8198"></td>
        <td id="LC8198" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">auto</span> errorCode = <span class="pl-c1">WSAGetLastError</span>();</td>
      </tr>
      <tr>
        <td id="L8199" class="blob-num js-line-number" data-line-number="8199"></td>
        <td id="LC8199" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">else</span></td>
      </tr>
      <tr>
        <td id="L8200" class="blob-num js-line-number" data-line-number="8200"></td>
        <td id="LC8200" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">auto</span> errorCode = errno; <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L8201" class="blob-num js-line-number" data-line-number="8201"></td>
        <td id="LC8201" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span>                                  <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L8202" class="blob-num js-line-number" data-line-number="8202"></td>
        <td id="LC8202" class="blob-code blob-code-inner js-file-line">                <span class="pl-c1">closeSocket</span>(errorCode); <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L8203" class="blob-num js-line-number" data-line-number="8203"></td>
        <td id="LC8203" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L8204" class="blob-num js-line-number" data-line-number="8204"></td>
        <td id="LC8204" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L8205" class="blob-num js-line-number" data-line-number="8205"></td>
        <td id="LC8205" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8206" class="blob-num js-line-number" data-line-number="8206"></td>
        <td id="LC8206" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (!(m_socket &lt; <span class="pl-c1">0</span>)) {</td>
      </tr>
      <tr>
        <td id="L8207" class="blob-num js-line-number" data-line-number="8207"></td>
        <td id="LC8207" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (m_isMulticast) {</td>
      </tr>
      <tr>
        <td id="L8208" class="blob-num js-line-number" data-line-number="8208"></td>
        <td id="LC8208" class="blob-code blob-code-inner js-file-line">                <span class="pl-c"><span class="pl-c">//</span> Join the multicast group.</span></td>
      </tr>
      <tr>
        <td id="L8209" class="blob-num js-line-number" data-line-number="8209"></td>
        <td id="LC8209" class="blob-code blob-code-inner js-file-line">                m_mreq.<span class="pl-smi">imr_multiaddr</span>.<span class="pl-smi">s_addr</span> = ::<span class="pl-c1">inet_addr</span>(receiveFromAddress.<span class="pl-c1">c_str</span>());</td>
      </tr>
      <tr>
        <td id="L8210" class="blob-num js-line-number" data-line-number="8210"></td>
        <td id="LC8210" class="blob-code blob-code-inner js-file-line">                m_mreq.<span class="pl-smi">imr_interface</span>.<span class="pl-smi">s_addr</span> = <span class="pl-c1">htonl</span>(INADDR_ANY);</td>
      </tr>
      <tr>
        <td id="L8211" class="blob-num js-line-number" data-line-number="8211"></td>
        <td id="LC8211" class="blob-code blob-code-inner js-file-line">                <span class="pl-c"><span class="pl-c">//</span> clang-format off</span></td>
      </tr>
      <tr>
        <td id="L8212" class="blob-num js-line-number" data-line-number="8212"></td>
        <td id="LC8212" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">auto</span> retval                 = ::<span class="pl-c1">setsockopt</span>(m_socket, IPPROTO_IP, IP_ADD_MEMBERSHIP, <span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">char</span> *&gt;(&amp;m_mreq), <span class="pl-k">sizeof</span>(m_mreq)); <span class="pl-c"><span class="pl-c">//</span> NOLINT</span></td>
      </tr>
      <tr>
        <td id="L8213" class="blob-num js-line-number" data-line-number="8213"></td>
        <td id="LC8213" class="blob-code blob-code-inner js-file-line">                <span class="pl-c"><span class="pl-c">//</span> clang-format on</span></td>
      </tr>
      <tr>
        <td id="L8214" class="blob-num js-line-number" data-line-number="8214"></td>
        <td id="LC8214" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">if</span> (<span class="pl-c1">0</span> &gt; retval) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L8215" class="blob-num js-line-number" data-line-number="8215"></td>
        <td id="LC8215" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifdef</span> WIN32                      <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L8216" class="blob-num js-line-number" data-line-number="8216"></td>
        <td id="LC8216" class="blob-code blob-code-inner js-file-line">                    <span class="pl-c1">closeSocket</span>(<span class="pl-c1">WSAGetLastError</span>());</td>
      </tr>
      <tr>
        <td id="L8217" class="blob-num js-line-number" data-line-number="8217"></td>
        <td id="LC8217" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">else</span></td>
      </tr>
      <tr>
        <td id="L8218" class="blob-num js-line-number" data-line-number="8218"></td>
        <td id="LC8218" class="blob-code blob-code-inner js-file-line">                    <span class="pl-c1">closeSocket</span>(errno); <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L8219" class="blob-num js-line-number" data-line-number="8219"></td>
        <td id="LC8219" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span> <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L8220" class="blob-num js-line-number" data-line-number="8220"></td>
        <td id="LC8220" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L8221" class="blob-num js-line-number" data-line-number="8221"></td>
        <td id="LC8221" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> <span class="pl-k">if</span> (!isValid) {</td>
      </tr>
      <tr>
        <td id="L8222" class="blob-num js-line-number" data-line-number="8222"></td>
        <td id="LC8222" class="blob-code blob-code-inner js-file-line">                <span class="pl-c1">closeSocket</span>(EBADF);</td>
      </tr>
      <tr>
        <td id="L8223" class="blob-num js-line-number" data-line-number="8223"></td>
        <td id="LC8223" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L8224" class="blob-num js-line-number" data-line-number="8224"></td>
        <td id="LC8224" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L8225" class="blob-num js-line-number" data-line-number="8225"></td>
        <td id="LC8225" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8226" class="blob-num js-line-number" data-line-number="8226"></td>
        <td id="LC8226" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (!(m_socket &lt; <span class="pl-c1">0</span>)) {</td>
      </tr>
      <tr>
        <td id="L8227" class="blob-num js-line-number" data-line-number="8227"></td>
        <td id="LC8227" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> Constructing a thread could fail.</span></td>
      </tr>
      <tr>
        <td id="L8228" class="blob-num js-line-number" data-line-number="8228"></td>
        <td id="LC8228" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L8229" class="blob-num js-line-number" data-line-number="8229"></td>
        <td id="LC8229" class="blob-code blob-code-inner js-file-line">                m_readFromSocketThread = <span class="pl-c1">std::thread</span>(&amp;UDPReceiver::readFromSocket, <span class="pl-c1">this</span>);</td>
      </tr>
      <tr>
        <td id="L8230" class="blob-num js-line-number" data-line-number="8230"></td>
        <td id="LC8230" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8231" class="blob-num js-line-number" data-line-number="8231"></td>
        <td id="LC8231" class="blob-code blob-code-inner js-file-line">                <span class="pl-c"><span class="pl-c">//</span> Let the operating system spawn the thread.</span></td>
      </tr>
      <tr>
        <td id="L8232" class="blob-num js-line-number" data-line-number="8232"></td>
        <td id="LC8232" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">using</span> <span class="pl-k">namespace</span> <span class="pl-en">std</span>::literals::chrono_literals<span class="pl-k">;</span> <span class="pl-c"><span class="pl-c">//</span> NOLINT</span></td>
      </tr>
      <tr>
        <td id="L8233" class="blob-num js-line-number" data-line-number="8233"></td>
        <td id="LC8233" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">do</span> { <span class="pl-c1">std::this_thread::sleep_for</span>(1ms); } <span class="pl-k">while</span> (!m_readFromSocketThreadRunning.<span class="pl-c1">load</span>());</td>
      </tr>
      <tr>
        <td id="L8234" class="blob-num js-line-number" data-line-number="8234"></td>
        <td id="LC8234" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">catch</span> (...) { <span class="pl-c1">closeSocket</span>(ECHILD); } <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L8235" class="blob-num js-line-number" data-line-number="8235"></td>
        <td id="LC8235" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L8236" class="blob-num js-line-number" data-line-number="8236"></td>
        <td id="LC8236" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L8237" class="blob-num js-line-number" data-line-number="8237"></td>
        <td id="LC8237" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L8238" class="blob-num js-line-number" data-line-number="8238"></td>
        <td id="LC8238" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8239" class="blob-num js-line-number" data-line-number="8239"></td>
        <td id="LC8239" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-en">UDPReceiver::~UDPReceiver</span>() noexcept {</td>
      </tr>
      <tr>
        <td id="L8240" class="blob-num js-line-number" data-line-number="8240"></td>
        <td id="LC8240" class="blob-code blob-code-inner js-file-line">    m_readFromSocketThreadRunning.<span class="pl-c1">store</span>(<span class="pl-c1">false</span>);</td>
      </tr>
      <tr>
        <td id="L8241" class="blob-num js-line-number" data-line-number="8241"></td>
        <td id="LC8241" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8242" class="blob-num js-line-number" data-line-number="8242"></td>
        <td id="LC8242" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Joining the thread could fail.</span></td>
      </tr>
      <tr>
        <td id="L8243" class="blob-num js-line-number" data-line-number="8243"></td>
        <td id="LC8243" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L8244" class="blob-num js-line-number" data-line-number="8244"></td>
        <td id="LC8244" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (m_readFromSocketThread.<span class="pl-c1">joinable</span>()) {</td>
      </tr>
      <tr>
        <td id="L8245" class="blob-num js-line-number" data-line-number="8245"></td>
        <td id="LC8245" class="blob-code blob-code-inner js-file-line">            m_readFromSocketThread.<span class="pl-c1">join</span>();</td>
      </tr>
      <tr>
        <td id="L8246" class="blob-num js-line-number" data-line-number="8246"></td>
        <td id="LC8246" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L8247" class="blob-num js-line-number" data-line-number="8247"></td>
        <td id="LC8247" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">catch</span> (...) {} <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L8248" class="blob-num js-line-number" data-line-number="8248"></td>
        <td id="LC8248" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8249" class="blob-num js-line-number" data-line-number="8249"></td>
        <td id="LC8249" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">closeSocket</span>(<span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L8250" class="blob-num js-line-number" data-line-number="8250"></td>
        <td id="LC8250" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L8251" class="blob-num js-line-number" data-line-number="8251"></td>
        <td id="LC8251" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8252" class="blob-num js-line-number" data-line-number="8252"></td>
        <td id="LC8252" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">UDPReceiver::closeSocket</span>(<span class="pl-k">int</span> errorCode) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L8253" class="blob-num js-line-number" data-line-number="8253"></td>
        <td id="LC8253" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-c1">0</span> != errorCode) {</td>
      </tr>
      <tr>
        <td id="L8254" class="blob-num js-line-number" data-line-number="8254"></td>
        <td id="LC8254" class="blob-code blob-code-inner js-file-line">        std::cerr &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>[cluon::UDPReceiver] Failed to perform socket operation: <span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L8255" class="blob-num js-line-number" data-line-number="8255"></td>
        <td id="LC8255" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifdef</span> WIN32</td>
      </tr>
      <tr>
        <td id="L8256" class="blob-num js-line-number" data-line-number="8256"></td>
        <td id="LC8256" class="blob-code blob-code-inner js-file-line">        std::cerr &lt;&lt; errorCode &lt;&lt; std::endl;</td>
      </tr>
      <tr>
        <td id="L8257" class="blob-num js-line-number" data-line-number="8257"></td>
        <td id="LC8257" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">else</span></td>
      </tr>
      <tr>
        <td id="L8258" class="blob-num js-line-number" data-line-number="8258"></td>
        <td id="LC8258" class="blob-code blob-code-inner js-file-line">        std::cerr &lt;&lt; ::<span class="pl-c1">strerror</span>(errorCode) &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span> (<span class="pl-pds">&quot;</span></span> &lt;&lt; errorCode &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>)<span class="pl-pds">&quot;</span></span> &lt;&lt; std::endl;</td>
      </tr>
      <tr>
        <td id="L8259" class="blob-num js-line-number" data-line-number="8259"></td>
        <td id="LC8259" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L8260" class="blob-num js-line-number" data-line-number="8260"></td>
        <td id="LC8260" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L8261" class="blob-num js-line-number" data-line-number="8261"></td>
        <td id="LC8261" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8262" class="blob-num js-line-number" data-line-number="8262"></td>
        <td id="LC8262" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (!(m_socket &lt; <span class="pl-c1">0</span>)) {</td>
      </tr>
      <tr>
        <td id="L8263" class="blob-num js-line-number" data-line-number="8263"></td>
        <td id="LC8263" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (m_isMulticast) {</td>
      </tr>
      <tr>
        <td id="L8264" class="blob-num js-line-number" data-line-number="8264"></td>
        <td id="LC8264" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> clang-format off</span></td>
      </tr>
      <tr>
        <td id="L8265" class="blob-num js-line-number" data-line-number="8265"></td>
        <td id="LC8265" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">auto</span> retVal = ::<span class="pl-c1">setsockopt</span>(m_socket, IPPROTO_IP, IP_DROP_MEMBERSHIP, <span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">char</span> *&gt;(&amp;m_mreq), <span class="pl-k">sizeof</span>(m_mreq)); <span class="pl-c"><span class="pl-c">//</span> NOLINT</span></td>
      </tr>
      <tr>
        <td id="L8266" class="blob-num js-line-number" data-line-number="8266"></td>
        <td id="LC8266" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> clang-format on</span></td>
      </tr>
      <tr>
        <td id="L8267" class="blob-num js-line-number" data-line-number="8267"></td>
        <td id="LC8267" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-c1">0</span> &gt; retVal) {                                                                         <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L8268" class="blob-num js-line-number" data-line-number="8268"></td>
        <td id="LC8268" class="blob-code blob-code-inner js-file-line">                std::cerr &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>[cluon::UDPReceiver] Failed to drop multicast membership<span class="pl-pds">&quot;</span></span> &lt;&lt; std::endl; <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L8269" class="blob-num js-line-number" data-line-number="8269"></td>
        <td id="LC8269" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L8270" class="blob-num js-line-number" data-line-number="8270"></td>
        <td id="LC8270" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L8271" class="blob-num js-line-number" data-line-number="8271"></td>
        <td id="LC8271" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8272" class="blob-num js-line-number" data-line-number="8272"></td>
        <td id="LC8272" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifdef</span> WIN32</td>
      </tr>
      <tr>
        <td id="L8273" class="blob-num js-line-number" data-line-number="8273"></td>
        <td id="LC8273" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">::shutdown</span>(m_socket, SD_BOTH);</td>
      </tr>
      <tr>
        <td id="L8274" class="blob-num js-line-number" data-line-number="8274"></td>
        <td id="LC8274" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">::closesocket</span>(m_socket);</td>
      </tr>
      <tr>
        <td id="L8275" class="blob-num js-line-number" data-line-number="8275"></td>
        <td id="LC8275" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">WSACleanup</span>();</td>
      </tr>
      <tr>
        <td id="L8276" class="blob-num js-line-number" data-line-number="8276"></td>
        <td id="LC8276" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">else</span></td>
      </tr>
      <tr>
        <td id="L8277" class="blob-num js-line-number" data-line-number="8277"></td>
        <td id="LC8277" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">::shutdown</span>(m_socket, SHUT_RDWR); <span class="pl-c"><span class="pl-c">//</span> Disallow further read/write operations.</span></td>
      </tr>
      <tr>
        <td id="L8278" class="blob-num js-line-number" data-line-number="8278"></td>
        <td id="LC8278" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">::close</span>(m_socket);</td>
      </tr>
      <tr>
        <td id="L8279" class="blob-num js-line-number" data-line-number="8279"></td>
        <td id="LC8279" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L8280" class="blob-num js-line-number" data-line-number="8280"></td>
        <td id="LC8280" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L8281" class="blob-num js-line-number" data-line-number="8281"></td>
        <td id="LC8281" class="blob-code blob-code-inner js-file-line">    m_socket = -<span class="pl-c1">1</span>;</td>
      </tr>
      <tr>
        <td id="L8282" class="blob-num js-line-number" data-line-number="8282"></td>
        <td id="LC8282" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L8283" class="blob-num js-line-number" data-line-number="8283"></td>
        <td id="LC8283" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8284" class="blob-num js-line-number" data-line-number="8284"></td>
        <td id="LC8284" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">bool</span> <span class="pl-en">UDPReceiver::isRunning</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L8285" class="blob-num js-line-number" data-line-number="8285"></td>
        <td id="LC8285" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> m_readFromSocketThreadRunning.<span class="pl-c1">load</span>();</td>
      </tr>
      <tr>
        <td id="L8286" class="blob-num js-line-number" data-line-number="8286"></td>
        <td id="LC8286" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L8287" class="blob-num js-line-number" data-line-number="8287"></td>
        <td id="LC8287" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8288" class="blob-num js-line-number" data-line-number="8288"></td>
        <td id="LC8288" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">UDPReceiver::readFromSocket</span>() <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L8289" class="blob-num js-line-number" data-line-number="8289"></td>
        <td id="LC8289" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Create buffer to store data from socket.</span></td>
      </tr>
      <tr>
        <td id="L8290" class="blob-num js-line-number" data-line-number="8290"></td>
        <td id="LC8290" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">constexpr</span> <span class="pl-c1">uint16_t</span> MAX_LENGTH = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint16_t</span>&gt;(UDPPacketSizeConstraints::MAX_SIZE_UDP_PACKET)</td>
      </tr>
      <tr>
        <td id="L8291" class="blob-num js-line-number" data-line-number="8291"></td>
        <td id="LC8291" class="blob-code blob-code-inner js-file-line">                                    - <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint16_t</span>&gt;(UDPPacketSizeConstraints::SIZE_IPv4_HEADER)</td>
      </tr>
      <tr>
        <td id="L8292" class="blob-num js-line-number" data-line-number="8292"></td>
        <td id="LC8292" class="blob-code blob-code-inner js-file-line">                                    - <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint16_t</span>&gt;(UDPPacketSizeConstraints::SIZE_UDP_HEADER);</td>
      </tr>
      <tr>
        <td id="L8293" class="blob-num js-line-number" data-line-number="8293"></td>
        <td id="LC8293" class="blob-code blob-code-inner js-file-line">    std::array&lt;<span class="pl-k">char</span>, MAX_LENGTH&gt; buffer{};</td>
      </tr>
      <tr>
        <td id="L8294" class="blob-num js-line-number" data-line-number="8294"></td>
        <td id="LC8294" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8295" class="blob-num js-line-number" data-line-number="8295"></td>
        <td id="LC8295" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Define timeout for select system call.</span></td>
      </tr>
      <tr>
        <td id="L8296" class="blob-num js-line-number" data-line-number="8296"></td>
        <td id="LC8296" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">struct</span> <span class="pl-en">timeval</span> timeout {};</td>
      </tr>
      <tr>
        <td id="L8297" class="blob-num js-line-number" data-line-number="8297"></td>
        <td id="LC8297" class="blob-code blob-code-inner js-file-line">    timeout.<span class="pl-smi">tv_sec</span>  = <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L8298" class="blob-num js-line-number" data-line-number="8298"></td>
        <td id="LC8298" class="blob-code blob-code-inner js-file-line">    timeout.<span class="pl-smi">tv_usec</span> = <span class="pl-c1">20</span> * <span class="pl-c1">1000</span>; <span class="pl-c"><span class="pl-c">//</span> Check for new data with 50Hz.</span></td>
      </tr>
      <tr>
        <td id="L8299" class="blob-num js-line-number" data-line-number="8299"></td>
        <td id="LC8299" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8300" class="blob-num js-line-number" data-line-number="8300"></td>
        <td id="LC8300" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Define file descriptor set to watch for read operations.</span></td>
      </tr>
      <tr>
        <td id="L8301" class="blob-num js-line-number" data-line-number="8301"></td>
        <td id="LC8301" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">fd_set</span> setOfFiledescriptorsToReadFrom{};</td>
      </tr>
      <tr>
        <td id="L8302" class="blob-num js-line-number" data-line-number="8302"></td>
        <td id="LC8302" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8303" class="blob-num js-line-number" data-line-number="8303"></td>
        <td id="LC8303" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">ssize_t</span> bytesRead{<span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L8304" class="blob-num js-line-number" data-line-number="8304"></td>
        <td id="LC8304" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8305" class="blob-num js-line-number" data-line-number="8305"></td>
        <td id="LC8305" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Sender address and port.</span></td>
      </tr>
      <tr>
        <td id="L8306" class="blob-num js-line-number" data-line-number="8306"></td>
        <td id="LC8306" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">constexpr</span> <span class="pl-c1">uint16_t</span> MAX_ADDR_SIZE{<span class="pl-c1">1024</span>};</td>
      </tr>
      <tr>
        <td id="L8307" class="blob-num js-line-number" data-line-number="8307"></td>
        <td id="LC8307" class="blob-code blob-code-inner js-file-line">    std::array&lt;<span class="pl-k">char</span>, MAX_ADDR_SIZE&gt; remoteAddress{};</td>
      </tr>
      <tr>
        <td id="L8308" class="blob-num js-line-number" data-line-number="8308"></td>
        <td id="LC8308" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8309" class="blob-num js-line-number" data-line-number="8309"></td>
        <td id="LC8309" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">struct</span> <span class="pl-en">sockaddr_storage</span> remote {};</td>
      </tr>
      <tr>
        <td id="L8310" class="blob-num js-line-number" data-line-number="8310"></td>
        <td id="LC8310" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">socklen_t</span> addrLength{<span class="pl-k">sizeof</span>(remote)};</td>
      </tr>
      <tr>
        <td id="L8311" class="blob-num js-line-number" data-line-number="8311"></td>
        <td id="LC8311" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8312" class="blob-num js-line-number" data-line-number="8312"></td>
        <td id="LC8312" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Indicate to main thread that we are ready.</span></td>
      </tr>
      <tr>
        <td id="L8313" class="blob-num js-line-number" data-line-number="8313"></td>
        <td id="LC8313" class="blob-code blob-code-inner js-file-line">    m_readFromSocketThreadRunning.<span class="pl-c1">store</span>(<span class="pl-c1">true</span>);</td>
      </tr>
      <tr>
        <td id="L8314" class="blob-num js-line-number" data-line-number="8314"></td>
        <td id="LC8314" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8315" class="blob-num js-line-number" data-line-number="8315"></td>
        <td id="LC8315" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">while</span> (m_readFromSocketThreadRunning.<span class="pl-c1">load</span>()) {</td>
      </tr>
      <tr>
        <td id="L8316" class="blob-num js-line-number" data-line-number="8316"></td>
        <td id="LC8316" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">FD_ZERO</span>(&amp;setOfFiledescriptorsToReadFrom);          <span class="pl-c"><span class="pl-c">//</span> NOLINT</span></td>
      </tr>
      <tr>
        <td id="L8317" class="blob-num js-line-number" data-line-number="8317"></td>
        <td id="LC8317" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">FD_SET</span>(m_socket, &amp;setOfFiledescriptorsToReadFrom); <span class="pl-c"><span class="pl-c">//</span> NOLINT</span></td>
      </tr>
      <tr>
        <td id="L8318" class="blob-num js-line-number" data-line-number="8318"></td>
        <td id="LC8318" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">::select</span>(m_socket + <span class="pl-c1">1</span>, &amp;setOfFiledescriptorsToReadFrom, <span class="pl-c1">nullptr</span>, <span class="pl-c1">nullptr</span>, &amp;timeout);</td>
      </tr>
      <tr>
        <td id="L8319" class="blob-num js-line-number" data-line-number="8319"></td>
        <td id="LC8319" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-c1">FD_ISSET</span>(m_socket, &amp;setOfFiledescriptorsToReadFrom)) { <span class="pl-c"><span class="pl-c">//</span> NOLINT</span></td>
      </tr>
      <tr>
        <td id="L8320" class="blob-num js-line-number" data-line-number="8320"></td>
        <td id="LC8320" class="blob-code blob-code-inner js-file-line">            bytesRead = ::<span class="pl-c1">recvfrom</span>(m_socket,</td>
      </tr>
      <tr>
        <td id="L8321" class="blob-num js-line-number" data-line-number="8321"></td>
        <td id="LC8321" class="blob-code blob-code-inner js-file-line">                                   buffer.<span class="pl-c1">data</span>(),</td>
      </tr>
      <tr>
        <td id="L8322" class="blob-num js-line-number" data-line-number="8322"></td>
        <td id="LC8322" class="blob-code blob-code-inner js-file-line">                                   buffer.<span class="pl-c1">max_size</span>(),</td>
      </tr>
      <tr>
        <td id="L8323" class="blob-num js-line-number" data-line-number="8323"></td>
        <td id="LC8323" class="blob-code blob-code-inner js-file-line">                                   <span class="pl-c1">0</span>,</td>
      </tr>
      <tr>
        <td id="L8324" class="blob-num js-line-number" data-line-number="8324"></td>
        <td id="LC8324" class="blob-code blob-code-inner js-file-line">                                   <span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">struct</span> <span class="pl-en">sockaddr</span> *&gt;(&amp;remote), <span class="pl-c"><span class="pl-c">//</span> NOLINT</span></td>
      </tr>
      <tr>
        <td id="L8325" class="blob-num js-line-number" data-line-number="8325"></td>
        <td id="LC8325" class="blob-code blob-code-inner js-file-line">                                   <span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-c1">socklen_t</span> *&gt;(&amp;addrLength));  <span class="pl-c"><span class="pl-c">//</span> NOLINT</span></td>
      </tr>
      <tr>
        <td id="L8326" class="blob-num js-line-number" data-line-number="8326"></td>
        <td id="LC8326" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8327" class="blob-num js-line-number" data-line-number="8327"></td>
        <td id="LC8327" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> ((<span class="pl-c1">0</span> &lt; bytesRead) &amp;&amp; (<span class="pl-c1">nullptr</span> != m_delegate)) {</td>
      </tr>
      <tr>
        <td id="L8328" class="blob-num js-line-number" data-line-number="8328"></td>
        <td id="LC8328" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifdef</span> __linux__</td>
      </tr>
      <tr>
        <td id="L8329" class="blob-num js-line-number" data-line-number="8329"></td>
        <td id="LC8329" class="blob-code blob-code-inner js-file-line">                std::chrono::system_clock::time_point timestamp;</td>
      </tr>
      <tr>
        <td id="L8330" class="blob-num js-line-number" data-line-number="8330"></td>
        <td id="LC8330" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">struct</span> <span class="pl-en">timeval</span> receivedTimeStamp {};</td>
      </tr>
      <tr>
        <td id="L8331" class="blob-num js-line-number" data-line-number="8331"></td>
        <td id="LC8331" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">if</span> (<span class="pl-c1">0</span> == ::<span class="pl-c1">ioctl</span>(m_socket, SIOCGSTAMP, &amp;receivedTimeStamp)) { <span class="pl-c"><span class="pl-c">//</span> NOLINT</span></td>
      </tr>
      <tr>
        <td id="L8332" class="blob-num js-line-number" data-line-number="8332"></td>
        <td id="LC8332" class="blob-code blob-code-inner js-file-line">                    <span class="pl-c"><span class="pl-c">//</span> Transform struct timeval to C++ chrono.</span></td>
      </tr>
      <tr>
        <td id="L8333" class="blob-num js-line-number" data-line-number="8333"></td>
        <td id="LC8333" class="blob-code blob-code-inner js-file-line">                    std::chrono::time_point&lt;std::chrono::system_clock, std::chrono::microseconds&gt; <span class="pl-c1">transformedTimePoint</span>(</td>
      </tr>
      <tr>
        <td id="L8334" class="blob-num js-line-number" data-line-number="8334"></td>
        <td id="LC8334" class="blob-code blob-code-inner js-file-line">                        <span class="pl-c1">std::chrono::microseconds</span>(receivedTimeStamp.<span class="pl-smi">tv_sec</span> * <span class="pl-c1">1000000L</span> + receivedTimeStamp.<span class="pl-smi">tv_usec</span>));</td>
      </tr>
      <tr>
        <td id="L8335" class="blob-num js-line-number" data-line-number="8335"></td>
        <td id="LC8335" class="blob-code blob-code-inner js-file-line">                    timestamp = std::chrono::time_point_cast&lt;std::chrono::system_clock::duration&gt;(transformedTimePoint);</td>
      </tr>
      <tr>
        <td id="L8336" class="blob-num js-line-number" data-line-number="8336"></td>
        <td id="LC8336" class="blob-code blob-code-inner js-file-line">                } <span class="pl-k">else</span> { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L8337" class="blob-num js-line-number" data-line-number="8337"></td>
        <td id="LC8337" class="blob-code blob-code-inner js-file-line">                    <span class="pl-c"><span class="pl-c">//</span> In case the ioctl failed, fall back to chrono. // LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L8338" class="blob-num js-line-number" data-line-number="8338"></td>
        <td id="LC8338" class="blob-code blob-code-inner js-file-line">                    timestamp = <span class="pl-c1">std::chrono::system_clock::now</span>(); <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L8339" class="blob-num js-line-number" data-line-number="8339"></td>
        <td id="LC8339" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L8340" class="blob-num js-line-number" data-line-number="8340"></td>
        <td id="LC8340" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">else</span></td>
      </tr>
      <tr>
        <td id="L8341" class="blob-num js-line-number" data-line-number="8341"></td>
        <td id="LC8341" class="blob-code blob-code-inner js-file-line">                std::chrono::system_clock::time_point timestamp = <span class="pl-c1">std::chrono::system_clock::now</span>();</td>
      </tr>
      <tr>
        <td id="L8342" class="blob-num js-line-number" data-line-number="8342"></td>
        <td id="LC8342" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L8343" class="blob-num js-line-number" data-line-number="8343"></td>
        <td id="LC8343" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8344" class="blob-num js-line-number" data-line-number="8344"></td>
        <td id="LC8344" class="blob-code blob-code-inner js-file-line">                <span class="pl-c"><span class="pl-c">//</span> Transform sender address to C-string.</span></td>
      </tr>
      <tr>
        <td id="L8345" class="blob-num js-line-number" data-line-number="8345"></td>
        <td id="LC8345" class="blob-code blob-code-inner js-file-line">                <span class="pl-en">::inet_ntop</span>(remote.ss_family,</td>
      </tr>
      <tr>
        <td id="L8346" class="blob-num js-line-number" data-line-number="8346"></td>
        <td id="LC8346" class="blob-code blob-code-inner js-file-line">                            &amp;((<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">struct</span> <span class="pl-en">sockaddr_in</span> *&gt;(&amp;remote))-&gt;sin_addr), <span class="pl-c"><span class="pl-c">//</span> NOLINT</span></td>
      </tr>
      <tr>
        <td id="L8347" class="blob-num js-line-number" data-line-number="8347"></td>
        <td id="LC8347" class="blob-code blob-code-inner js-file-line">                            remoteAddress.data(),</td>
      </tr>
      <tr>
        <td id="L8348" class="blob-num js-line-number" data-line-number="8348"></td>
        <td id="LC8348" class="blob-code blob-code-inner js-file-line">                            remoteAddress.max_size());</td>
      </tr>
      <tr>
        <td id="L8349" class="blob-num js-line-number" data-line-number="8349"></td>
        <td id="LC8349" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">const</span> <span class="pl-c1">uint16_t</span> RECVFROM_PORT{<span class="pl-c1">ntohs</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">struct</span> <span class="pl-en">sockaddr_in</span> *&gt;(&amp;remote)-&gt;sin_port)}; <span class="pl-c"><span class="pl-c">//</span> NOLINT</span></td>
      </tr>
      <tr>
        <td id="L8350" class="blob-num js-line-number" data-line-number="8350"></td>
        <td id="LC8350" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8351" class="blob-num js-line-number" data-line-number="8351"></td>
        <td id="LC8351" class="blob-code blob-code-inner js-file-line">                <span class="pl-c"><span class="pl-c">//</span> Call delegate.</span></td>
      </tr>
      <tr>
        <td id="L8352" class="blob-num js-line-number" data-line-number="8352"></td>
        <td id="LC8352" class="blob-code blob-code-inner js-file-line">                <span class="pl-c1">m_delegate</span>(<span class="pl-c1">std::string</span>(buffer.<span class="pl-c1">data</span>(), <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">size_t</span>&gt;(bytesRead)),</td>
      </tr>
      <tr>
        <td id="L8353" class="blob-num js-line-number" data-line-number="8353"></td>
        <td id="LC8353" class="blob-code blob-code-inner js-file-line">                           <span class="pl-c1">std::string</span>(remoteAddress.<span class="pl-c1">data</span>()) + <span class="pl-s"><span class="pl-pds">&#39;</span>:<span class="pl-pds">&#39;</span></span> + <span class="pl-c1">std::to_string</span>(RECVFROM_PORT),</td>
      </tr>
      <tr>
        <td id="L8354" class="blob-num js-line-number" data-line-number="8354"></td>
        <td id="LC8354" class="blob-code blob-code-inner js-file-line">                           timestamp);</td>
      </tr>
      <tr>
        <td id="L8355" class="blob-num js-line-number" data-line-number="8355"></td>
        <td id="LC8355" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L8356" class="blob-num js-line-number" data-line-number="8356"></td>
        <td id="LC8356" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L8357" class="blob-num js-line-number" data-line-number="8357"></td>
        <td id="LC8357" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> Let the operating system yield other threads.</span></td>
      </tr>
      <tr>
        <td id="L8358" class="blob-num js-line-number" data-line-number="8358"></td>
        <td id="LC8358" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">using</span> <span class="pl-k">namespace</span> <span class="pl-en">std</span>::literals::chrono_literals<span class="pl-k">;</span> <span class="pl-c"><span class="pl-c">//</span> NOLINT</span></td>
      </tr>
      <tr>
        <td id="L8359" class="blob-num js-line-number" data-line-number="8359"></td>
        <td id="LC8359" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">std::this_thread::sleep_for</span>(1ms);</td>
      </tr>
      <tr>
        <td id="L8360" class="blob-num js-line-number" data-line-number="8360"></td>
        <td id="LC8360" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L8361" class="blob-num js-line-number" data-line-number="8361"></td>
        <td id="LC8361" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L8362" class="blob-num js-line-number" data-line-number="8362"></td>
        <td id="LC8362" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L8363" class="blob-num js-line-number" data-line-number="8363"></td>
        <td id="LC8363" class="blob-code blob-code-inner js-file-line">} <span class="pl-c"><span class="pl-c">//</span> namespace cluon</span></td>
      </tr>
      <tr>
        <td id="L8364" class="blob-num js-line-number" data-line-number="8364"></td>
        <td id="LC8364" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L8365" class="blob-num js-line-number" data-line-number="8365"></td>
        <td id="LC8365" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Copyright (C) 2018  Christian Berger</span></td>
      </tr>
      <tr>
        <td id="L8366" class="blob-num js-line-number" data-line-number="8366"></td>
        <td id="LC8366" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L8367" class="blob-num js-line-number" data-line-number="8367"></td>
        <td id="LC8367" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is free software: you can redistribute it and/or modify</span></td>
      </tr>
      <tr>
        <td id="L8368" class="blob-num js-line-number" data-line-number="8368"></td>
        <td id="LC8368" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * it under the terms of the GNU General Public License as published by</span></td>
      </tr>
      <tr>
        <td id="L8369" class="blob-num js-line-number" data-line-number="8369"></td>
        <td id="LC8369" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * the Free Software Foundation, either version 3 of the License, or</span></td>
      </tr>
      <tr>
        <td id="L8370" class="blob-num js-line-number" data-line-number="8370"></td>
        <td id="LC8370" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * (at your option) any later version.</span></td>
      </tr>
      <tr>
        <td id="L8371" class="blob-num js-line-number" data-line-number="8371"></td>
        <td id="LC8371" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L8372" class="blob-num js-line-number" data-line-number="8372"></td>
        <td id="LC8372" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is distributed in the hope that it will be useful,</span></td>
      </tr>
      <tr>
        <td id="L8373" class="blob-num js-line-number" data-line-number="8373"></td>
        <td id="LC8373" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></td>
      </tr>
      <tr>
        <td id="L8374" class="blob-num js-line-number" data-line-number="8374"></td>
        <td id="LC8374" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></td>
      </tr>
      <tr>
        <td id="L8375" class="blob-num js-line-number" data-line-number="8375"></td>
        <td id="LC8375" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * GNU General Public License for more details.</span></td>
      </tr>
      <tr>
        <td id="L8376" class="blob-num js-line-number" data-line-number="8376"></td>
        <td id="LC8376" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L8377" class="blob-num js-line-number" data-line-number="8377"></td>
        <td id="LC8377" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * You should have received a copy of the GNU General Public License</span></td>
      </tr>
      <tr>
        <td id="L8378" class="blob-num js-line-number" data-line-number="8378"></td>
        <td id="LC8378" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></td>
      </tr>
      <tr>
        <td id="L8379" class="blob-num js-line-number" data-line-number="8379"></td>
        <td id="LC8379" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L8380" class="blob-num js-line-number" data-line-number="8380"></td>
        <td id="LC8380" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8381" class="blob-num js-line-number" data-line-number="8381"></td>
        <td id="LC8381" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/TCPConnection.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L8382" class="blob-num js-line-number" data-line-number="8382"></td>
        <td id="LC8382" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8383" class="blob-num js-line-number" data-line-number="8383"></td>
        <td id="LC8383" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> clang-format off</span></td>
      </tr>
      <tr>
        <td id="L8384" class="blob-num js-line-number" data-line-number="8384"></td>
        <td id="LC8384" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifdef</span> WIN32</td>
      </tr>
      <tr>
        <td id="L8385" class="blob-num js-line-number" data-line-number="8385"></td>
        <td id="LC8385" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>errno.h<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L8386" class="blob-num js-line-number" data-line-number="8386"></td>
        <td id="LC8386" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>iostream<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L8387" class="blob-num js-line-number" data-line-number="8387"></td>
        <td id="LC8387" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">else</span></td>
      </tr>
      <tr>
        <td id="L8388" class="blob-num js-line-number" data-line-number="8388"></td>
        <td id="LC8388" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>arpa/inet.h<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L8389" class="blob-num js-line-number" data-line-number="8389"></td>
        <td id="LC8389" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>sys/ioctl.h<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L8390" class="blob-num js-line-number" data-line-number="8390"></td>
        <td id="LC8390" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>sys/socket.h<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L8391" class="blob-num js-line-number" data-line-number="8391"></td>
        <td id="LC8391" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>sys/types.h<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L8392" class="blob-num js-line-number" data-line-number="8392"></td>
        <td id="LC8392" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>unistd.h<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L8393" class="blob-num js-line-number" data-line-number="8393"></td>
        <td id="LC8393" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L8394" class="blob-num js-line-number" data-line-number="8394"></td>
        <td id="LC8394" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> clang-format on</span></td>
      </tr>
      <tr>
        <td id="L8395" class="blob-num js-line-number" data-line-number="8395"></td>
        <td id="LC8395" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8396" class="blob-num js-line-number" data-line-number="8396"></td>
        <td id="LC8396" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>cstring<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L8397" class="blob-num js-line-number" data-line-number="8397"></td>
        <td id="LC8397" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>algorithm<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L8398" class="blob-num js-line-number" data-line-number="8398"></td>
        <td id="LC8398" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>array<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L8399" class="blob-num js-line-number" data-line-number="8399"></td>
        <td id="LC8399" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>iostream<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L8400" class="blob-num js-line-number" data-line-number="8400"></td>
        <td id="LC8400" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>iterator<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L8401" class="blob-num js-line-number" data-line-number="8401"></td>
        <td id="LC8401" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>sstream<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L8402" class="blob-num js-line-number" data-line-number="8402"></td>
        <td id="LC8402" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>utility<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L8403" class="blob-num js-line-number" data-line-number="8403"></td>
        <td id="LC8403" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>vector<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L8404" class="blob-num js-line-number" data-line-number="8404"></td>
        <td id="LC8404" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8405" class="blob-num js-line-number" data-line-number="8405"></td>
        <td id="LC8405" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">cluon</span> {</td>
      </tr>
      <tr>
        <td id="L8406" class="blob-num js-line-number" data-line-number="8406"></td>
        <td id="LC8406" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8407" class="blob-num js-line-number" data-line-number="8407"></td>
        <td id="LC8407" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-en">TCPConnection::TCPConnection</span>(<span class="pl-k">const</span> std::string &amp;address,</td>
      </tr>
      <tr>
        <td id="L8408" class="blob-num js-line-number" data-line-number="8408"></td>
        <td id="LC8408" class="blob-code blob-code-inner js-file-line">                             <span class="pl-c1">uint16_t</span> port,</td>
      </tr>
      <tr>
        <td id="L8409" class="blob-num js-line-number" data-line-number="8409"></td>
        <td id="LC8409" class="blob-code blob-code-inner js-file-line">                             std::function&lt;<span class="pl-k">void</span>(std::string &amp;&amp;, std::chrono::system_clock::time_point &amp;&amp;)&gt; newDataDelegate,</td>
      </tr>
      <tr>
        <td id="L8410" class="blob-num js-line-number" data-line-number="8410"></td>
        <td id="LC8410" class="blob-code blob-code-inner js-file-line">                             std::function&lt;void()&gt; connectionLostDelegate) <span class="pl-k">noexcept</span></td>
      </tr>
      <tr>
        <td id="L8411" class="blob-num js-line-number" data-line-number="8411"></td>
        <td id="LC8411" class="blob-code blob-code-inner js-file-line">    : m_address()</td>
      </tr>
      <tr>
        <td id="L8412" class="blob-num js-line-number" data-line-number="8412"></td>
        <td id="LC8412" class="blob-code blob-code-inner js-file-line">    , m_readFromSocketThread()</td>
      </tr>
      <tr>
        <td id="L8413" class="blob-num js-line-number" data-line-number="8413"></td>
        <td id="LC8413" class="blob-code blob-code-inner js-file-line">    , m_newDataDelegate(std::move(newDataDelegate))</td>
      </tr>
      <tr>
        <td id="L8414" class="blob-num js-line-number" data-line-number="8414"></td>
        <td id="LC8414" class="blob-code blob-code-inner js-file-line">    , m_connectionLostDelegate(std::move(connectionLostDelegate)) {</td>
      </tr>
      <tr>
        <td id="L8415" class="blob-num js-line-number" data-line-number="8415"></td>
        <td id="LC8415" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Decompose given address string to check validity with numerical IPv4 address.</span></td>
      </tr>
      <tr>
        <td id="L8416" class="blob-num js-line-number" data-line-number="8416"></td>
        <td id="LC8416" class="blob-code blob-code-inner js-file-line">    std::string tmp{address};</td>
      </tr>
      <tr>
        <td id="L8417" class="blob-num js-line-number" data-line-number="8417"></td>
        <td id="LC8417" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">std::replace</span>(tmp.<span class="pl-c1">begin</span>(), tmp.<span class="pl-c1">end</span>(), <span class="pl-s"><span class="pl-pds">&#39;</span>.<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span> <span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L8418" class="blob-num js-line-number" data-line-number="8418"></td>
        <td id="LC8418" class="blob-code blob-code-inner js-file-line">    std::istringstream sstr{tmp};</td>
      </tr>
      <tr>
        <td id="L8419" class="blob-num js-line-number" data-line-number="8419"></td>
        <td id="LC8419" class="blob-code blob-code-inner js-file-line">    std::vector&lt;<span class="pl-k">int</span>&gt; addressTokens{std::istream_iterator&lt;<span class="pl-k">int</span>&gt;(sstr), std::istream_iterator&lt;<span class="pl-k">int</span>&gt;()};</td>
      </tr>
      <tr>
        <td id="L8420" class="blob-num js-line-number" data-line-number="8420"></td>
        <td id="LC8420" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8421" class="blob-num js-line-number" data-line-number="8421"></td>
        <td id="LC8421" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> ((!addressTokens.<span class="pl-c1">empty</span>()) &amp;&amp; (<span class="pl-c1">4</span> == addressTokens.<span class="pl-c1">size</span>())</td>
      </tr>
      <tr>
        <td id="L8422" class="blob-num js-line-number" data-line-number="8422"></td>
        <td id="LC8422" class="blob-code blob-code-inner js-file-line">        &amp;&amp; !(<span class="pl-c1">std::end</span>(addressTokens) != <span class="pl-c1">std::find_if</span>(addressTokens.<span class="pl-c1">begin</span>(), addressTokens.<span class="pl-c1">end</span>(), [](<span class="pl-k">int</span> a) { <span class="pl-k">return</span> (a &lt; <span class="pl-c1">0</span>) || (a &gt; <span class="pl-c1">255</span>); })) &amp;&amp; (<span class="pl-c1">0</span> &lt; port)) {</td>
      </tr>
      <tr>
        <td id="L8423" class="blob-num js-line-number" data-line-number="8423"></td>
        <td id="LC8423" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> Check for valid IP address.</span></td>
      </tr>
      <tr>
        <td id="L8424" class="blob-num js-line-number" data-line-number="8424"></td>
        <td id="LC8424" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">struct</span> <span class="pl-en">sockaddr_in</span> tmpSocketAddress {};</td>
      </tr>
      <tr>
        <td id="L8425" class="blob-num js-line-number" data-line-number="8425"></td>
        <td id="LC8425" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> <span class="pl-k">bool</span> isValid = (<span class="pl-c1">0</span> &lt; ::<span class="pl-c1">inet_pton</span>(AF_INET, address.<span class="pl-c1">c_str</span>(), &amp;(tmpSocketAddress.<span class="pl-smi">sin_addr</span>)));</td>
      </tr>
      <tr>
        <td id="L8426" class="blob-num js-line-number" data-line-number="8426"></td>
        <td id="LC8426" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (isValid) {</td>
      </tr>
      <tr>
        <td id="L8427" class="blob-num js-line-number" data-line-number="8427"></td>
        <td id="LC8427" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">std::memset</span>(&amp;m_address, <span class="pl-c1">0</span>, <span class="pl-k">sizeof</span>(m_address));</td>
      </tr>
      <tr>
        <td id="L8428" class="blob-num js-line-number" data-line-number="8428"></td>
        <td id="LC8428" class="blob-code blob-code-inner js-file-line">            m_address.<span class="pl-smi">sin_addr</span>.<span class="pl-smi">s_addr</span> = ::<span class="pl-c1">inet_addr</span>(address.<span class="pl-c1">c_str</span>());</td>
      </tr>
      <tr>
        <td id="L8429" class="blob-num js-line-number" data-line-number="8429"></td>
        <td id="LC8429" class="blob-code blob-code-inner js-file-line">            m_address.<span class="pl-smi">sin_family</span>      = AF_INET;</td>
      </tr>
      <tr>
        <td id="L8430" class="blob-num js-line-number" data-line-number="8430"></td>
        <td id="LC8430" class="blob-code blob-code-inner js-file-line">            m_address.<span class="pl-smi">sin_port</span>        = <span class="pl-c1">htons</span>(port);</td>
      </tr>
      <tr>
        <td id="L8431" class="blob-num js-line-number" data-line-number="8431"></td>
        <td id="LC8431" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifdef</span> WIN32</td>
      </tr>
      <tr>
        <td id="L8432" class="blob-num js-line-number" data-line-number="8432"></td>
        <td id="LC8432" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> Load Winsock 2.2 DLL.</span></td>
      </tr>
      <tr>
        <td id="L8433" class="blob-num js-line-number" data-line-number="8433"></td>
        <td id="LC8433" class="blob-code blob-code-inner js-file-line">            WSADATA wsaData;</td>
      </tr>
      <tr>
        <td id="L8434" class="blob-num js-line-number" data-line-number="8434"></td>
        <td id="LC8434" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-c1">WSAStartup</span>(<span class="pl-c1">MAKEWORD</span>(<span class="pl-c1">2</span>, <span class="pl-c1">2</span>), &amp;wsaData) != <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L8435" class="blob-num js-line-number" data-line-number="8435"></td>
        <td id="LC8435" class="blob-code blob-code-inner js-file-line">                std::cerr &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>[cluon::TCPConnection] Error while calling WSAStartUp: <span class="pl-pds">&quot;</span></span> &lt;&lt; <span class="pl-c1">WSAGetLastError</span>() &lt;&lt; std::endl;</td>
      </tr>
      <tr>
        <td id="L8436" class="blob-num js-line-number" data-line-number="8436"></td>
        <td id="LC8436" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L8437" class="blob-num js-line-number" data-line-number="8437"></td>
        <td id="LC8437" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L8438" class="blob-num js-line-number" data-line-number="8438"></td>
        <td id="LC8438" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8439" class="blob-num js-line-number" data-line-number="8439"></td>
        <td id="LC8439" class="blob-code blob-code-inner js-file-line">            m_socket = ::<span class="pl-c1">socket</span>(AF_INET, SOCK_STREAM, IPPROTO_TCP);</td>
      </tr>
      <tr>
        <td id="L8440" class="blob-num js-line-number" data-line-number="8440"></td>
        <td id="LC8440" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8441" class="blob-num js-line-number" data-line-number="8441"></td>
        <td id="LC8441" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifdef</span> WIN32</td>
      </tr>
      <tr>
        <td id="L8442" class="blob-num js-line-number" data-line-number="8442"></td>
        <td id="LC8442" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (m_socket &lt; <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L8443" class="blob-num js-line-number" data-line-number="8443"></td>
        <td id="LC8443" class="blob-code blob-code-inner js-file-line">                std::cerr &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>[cluon::TCPConnection] Error while creating socket: <span class="pl-pds">&quot;</span></span> &lt;&lt; <span class="pl-c1">WSAGetLastError</span>() &lt;&lt; std::endl;</td>
      </tr>
      <tr>
        <td id="L8444" class="blob-num js-line-number" data-line-number="8444"></td>
        <td id="LC8444" class="blob-code blob-code-inner js-file-line">                <span class="pl-c1">WSACleanup</span>();</td>
      </tr>
      <tr>
        <td id="L8445" class="blob-num js-line-number" data-line-number="8445"></td>
        <td id="LC8445" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L8446" class="blob-num js-line-number" data-line-number="8446"></td>
        <td id="LC8446" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L8447" class="blob-num js-line-number" data-line-number="8447"></td>
        <td id="LC8447" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8448" class="blob-num js-line-number" data-line-number="8448"></td>
        <td id="LC8448" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (!(m_socket &lt; <span class="pl-c1">0</span>)) {</td>
      </tr>
      <tr>
        <td id="L8449" class="blob-num js-line-number" data-line-number="8449"></td>
        <td id="LC8449" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">auto</span> retVal = ::<span class="pl-c1">connect</span>(m_socket, <span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">struct</span> <span class="pl-en">sockaddr</span> *&gt;(&amp;m_address), <span class="pl-k">sizeof</span>(m_address));</td>
      </tr>
      <tr>
        <td id="L8450" class="blob-num js-line-number" data-line-number="8450"></td>
        <td id="LC8450" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">if</span> (<span class="pl-c1">0</span> &gt; retVal) {</td>
      </tr>
      <tr>
        <td id="L8451" class="blob-num js-line-number" data-line-number="8451"></td>
        <td id="LC8451" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifdef</span> WIN32</td>
      </tr>
      <tr>
        <td id="L8452" class="blob-num js-line-number" data-line-number="8452"></td>
        <td id="LC8452" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">auto</span> errorCode = <span class="pl-c1">WSAGetLastError</span>();</td>
      </tr>
      <tr>
        <td id="L8453" class="blob-num js-line-number" data-line-number="8453"></td>
        <td id="LC8453" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">else</span></td>
      </tr>
      <tr>
        <td id="L8454" class="blob-num js-line-number" data-line-number="8454"></td>
        <td id="LC8454" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">auto</span> errorCode = errno;</td>
      </tr>
      <tr>
        <td id="L8455" class="blob-num js-line-number" data-line-number="8455"></td>
        <td id="LC8455" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L8456" class="blob-num js-line-number" data-line-number="8456"></td>
        <td id="LC8456" class="blob-code blob-code-inner js-file-line">                    <span class="pl-c1">closeSocket</span>(errorCode);</td>
      </tr>
      <tr>
        <td id="L8457" class="blob-num js-line-number" data-line-number="8457"></td>
        <td id="LC8457" class="blob-code blob-code-inner js-file-line">                } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L8458" class="blob-num js-line-number" data-line-number="8458"></td>
        <td id="LC8458" class="blob-code blob-code-inner js-file-line">                    <span class="pl-c"><span class="pl-c">//</span> Constructing a thread could fail.</span></td>
      </tr>
      <tr>
        <td id="L8459" class="blob-num js-line-number" data-line-number="8459"></td>
        <td id="LC8459" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L8460" class="blob-num js-line-number" data-line-number="8460"></td>
        <td id="LC8460" class="blob-code blob-code-inner js-file-line">                        m_readFromSocketThread = <span class="pl-c1">std::thread</span>(&amp;TCPConnection::readFromSocket, <span class="pl-c1">this</span>);</td>
      </tr>
      <tr>
        <td id="L8461" class="blob-num js-line-number" data-line-number="8461"></td>
        <td id="LC8461" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8462" class="blob-num js-line-number" data-line-number="8462"></td>
        <td id="LC8462" class="blob-code blob-code-inner js-file-line">                        <span class="pl-c"><span class="pl-c">//</span> Let the operating system spawn the thread.</span></td>
      </tr>
      <tr>
        <td id="L8463" class="blob-num js-line-number" data-line-number="8463"></td>
        <td id="LC8463" class="blob-code blob-code-inner js-file-line">                        <span class="pl-k">using</span> <span class="pl-k">namespace</span> <span class="pl-en">std</span>::literals::chrono_literals<span class="pl-k">;</span></td>
      </tr>
      <tr>
        <td id="L8464" class="blob-num js-line-number" data-line-number="8464"></td>
        <td id="LC8464" class="blob-code blob-code-inner js-file-line">                        <span class="pl-k">do</span> { <span class="pl-c1">std::this_thread::sleep_for</span>(1ms); } <span class="pl-k">while</span> (!m_readFromSocketThreadRunning.<span class="pl-c1">load</span>());</td>
      </tr>
      <tr>
        <td id="L8465" class="blob-num js-line-number" data-line-number="8465"></td>
        <td id="LC8465" class="blob-code blob-code-inner js-file-line">                    } <span class="pl-k">catch</span> (...) { <span class="pl-c1">closeSocket</span>(ECHILD); }</td>
      </tr>
      <tr>
        <td id="L8466" class="blob-num js-line-number" data-line-number="8466"></td>
        <td id="LC8466" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L8467" class="blob-num js-line-number" data-line-number="8467"></td>
        <td id="LC8467" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L8468" class="blob-num js-line-number" data-line-number="8468"></td>
        <td id="LC8468" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L8469" class="blob-num js-line-number" data-line-number="8469"></td>
        <td id="LC8469" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L8470" class="blob-num js-line-number" data-line-number="8470"></td>
        <td id="LC8470" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L8471" class="blob-num js-line-number" data-line-number="8471"></td>
        <td id="LC8471" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8472" class="blob-num js-line-number" data-line-number="8472"></td>
        <td id="LC8472" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-en">TCPConnection::~TCPConnection</span>() noexcept {</td>
      </tr>
      <tr>
        <td id="L8473" class="blob-num js-line-number" data-line-number="8473"></td>
        <td id="LC8473" class="blob-code blob-code-inner js-file-line">    m_readFromSocketThreadRunning.<span class="pl-c1">store</span>(<span class="pl-c1">false</span>);</td>
      </tr>
      <tr>
        <td id="L8474" class="blob-num js-line-number" data-line-number="8474"></td>
        <td id="LC8474" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8475" class="blob-num js-line-number" data-line-number="8475"></td>
        <td id="LC8475" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Joining the thread could fail.</span></td>
      </tr>
      <tr>
        <td id="L8476" class="blob-num js-line-number" data-line-number="8476"></td>
        <td id="LC8476" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L8477" class="blob-num js-line-number" data-line-number="8477"></td>
        <td id="LC8477" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (m_readFromSocketThread.<span class="pl-c1">joinable</span>()) {</td>
      </tr>
      <tr>
        <td id="L8478" class="blob-num js-line-number" data-line-number="8478"></td>
        <td id="LC8478" class="blob-code blob-code-inner js-file-line">            m_readFromSocketThread.<span class="pl-c1">join</span>();</td>
      </tr>
      <tr>
        <td id="L8479" class="blob-num js-line-number" data-line-number="8479"></td>
        <td id="LC8479" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L8480" class="blob-num js-line-number" data-line-number="8480"></td>
        <td id="LC8480" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">catch</span> (...) {}</td>
      </tr>
      <tr>
        <td id="L8481" class="blob-num js-line-number" data-line-number="8481"></td>
        <td id="LC8481" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8482" class="blob-num js-line-number" data-line-number="8482"></td>
        <td id="LC8482" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">closeSocket</span>(<span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L8483" class="blob-num js-line-number" data-line-number="8483"></td>
        <td id="LC8483" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L8484" class="blob-num js-line-number" data-line-number="8484"></td>
        <td id="LC8484" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8485" class="blob-num js-line-number" data-line-number="8485"></td>
        <td id="LC8485" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">TCPConnection::closeSocket</span>(<span class="pl-k">int</span> errorCode) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L8486" class="blob-num js-line-number" data-line-number="8486"></td>
        <td id="LC8486" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-c1">0</span> != errorCode) {</td>
      </tr>
      <tr>
        <td id="L8487" class="blob-num js-line-number" data-line-number="8487"></td>
        <td id="LC8487" class="blob-code blob-code-inner js-file-line">        std::cerr &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>[cluon::TCPConnection] Failed to perform socket operation: <span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L8488" class="blob-num js-line-number" data-line-number="8488"></td>
        <td id="LC8488" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifdef</span> WIN32</td>
      </tr>
      <tr>
        <td id="L8489" class="blob-num js-line-number" data-line-number="8489"></td>
        <td id="LC8489" class="blob-code blob-code-inner js-file-line">        std::cerr &lt;&lt; errorCode &lt;&lt; std::endl;</td>
      </tr>
      <tr>
        <td id="L8490" class="blob-num js-line-number" data-line-number="8490"></td>
        <td id="LC8490" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">else</span></td>
      </tr>
      <tr>
        <td id="L8491" class="blob-num js-line-number" data-line-number="8491"></td>
        <td id="LC8491" class="blob-code blob-code-inner js-file-line">        std::cerr &lt;&lt; ::<span class="pl-c1">strerror</span>(errorCode) &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span> (<span class="pl-pds">&quot;</span></span> &lt;&lt; errorCode &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>)<span class="pl-pds">&quot;</span></span> &lt;&lt; std::endl;</td>
      </tr>
      <tr>
        <td id="L8492" class="blob-num js-line-number" data-line-number="8492"></td>
        <td id="LC8492" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L8493" class="blob-num js-line-number" data-line-number="8493"></td>
        <td id="LC8493" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L8494" class="blob-num js-line-number" data-line-number="8494"></td>
        <td id="LC8494" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8495" class="blob-num js-line-number" data-line-number="8495"></td>
        <td id="LC8495" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (!(m_socket &lt; <span class="pl-c1">0</span>)) {</td>
      </tr>
      <tr>
        <td id="L8496" class="blob-num js-line-number" data-line-number="8496"></td>
        <td id="LC8496" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifdef</span> WIN32</td>
      </tr>
      <tr>
        <td id="L8497" class="blob-num js-line-number" data-line-number="8497"></td>
        <td id="LC8497" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">::shutdown</span>(m_socket, SD_BOTH);</td>
      </tr>
      <tr>
        <td id="L8498" class="blob-num js-line-number" data-line-number="8498"></td>
        <td id="LC8498" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">::closesocket</span>(m_socket);</td>
      </tr>
      <tr>
        <td id="L8499" class="blob-num js-line-number" data-line-number="8499"></td>
        <td id="LC8499" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">WSACleanup</span>();</td>
      </tr>
      <tr>
        <td id="L8500" class="blob-num js-line-number" data-line-number="8500"></td>
        <td id="LC8500" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">else</span></td>
      </tr>
      <tr>
        <td id="L8501" class="blob-num js-line-number" data-line-number="8501"></td>
        <td id="LC8501" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">::shutdown</span>(m_socket, SHUT_RDWR); <span class="pl-c"><span class="pl-c">//</span> Disallow further read/write operations.</span></td>
      </tr>
      <tr>
        <td id="L8502" class="blob-num js-line-number" data-line-number="8502"></td>
        <td id="LC8502" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">::close</span>(m_socket);</td>
      </tr>
      <tr>
        <td id="L8503" class="blob-num js-line-number" data-line-number="8503"></td>
        <td id="LC8503" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L8504" class="blob-num js-line-number" data-line-number="8504"></td>
        <td id="LC8504" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L8505" class="blob-num js-line-number" data-line-number="8505"></td>
        <td id="LC8505" class="blob-code blob-code-inner js-file-line">    m_socket = -<span class="pl-c1">1</span>;</td>
      </tr>
      <tr>
        <td id="L8506" class="blob-num js-line-number" data-line-number="8506"></td>
        <td id="LC8506" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L8507" class="blob-num js-line-number" data-line-number="8507"></td>
        <td id="LC8507" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8508" class="blob-num js-line-number" data-line-number="8508"></td>
        <td id="LC8508" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">bool</span> <span class="pl-en">TCPConnection::isRunning</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L8509" class="blob-num js-line-number" data-line-number="8509"></td>
        <td id="LC8509" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> m_readFromSocketThreadRunning.<span class="pl-c1">load</span>();</td>
      </tr>
      <tr>
        <td id="L8510" class="blob-num js-line-number" data-line-number="8510"></td>
        <td id="LC8510" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L8511" class="blob-num js-line-number" data-line-number="8511"></td>
        <td id="LC8511" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8512" class="blob-num js-line-number" data-line-number="8512"></td>
        <td id="LC8512" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::pair&lt;<span class="pl-c1">ssize_t</span>, <span class="pl-c1">int32_t</span>&gt; <span class="pl-en">TCPConnection::send</span>(std::string &amp;&amp;data) <span class="pl-k">const</span> <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L8513" class="blob-num js-line-number" data-line-number="8513"></td>
        <td id="LC8513" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (-<span class="pl-c1">1</span> == m_socket) {</td>
      </tr>
      <tr>
        <td id="L8514" class="blob-num js-line-number" data-line-number="8514"></td>
        <td id="LC8514" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> {-<span class="pl-c1">1</span>, EBADF};</td>
      </tr>
      <tr>
        <td id="L8515" class="blob-num js-line-number" data-line-number="8515"></td>
        <td id="LC8515" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L8516" class="blob-num js-line-number" data-line-number="8516"></td>
        <td id="LC8516" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8517" class="blob-num js-line-number" data-line-number="8517"></td>
        <td id="LC8517" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (data.<span class="pl-c1">empty</span>()) {</td>
      </tr>
      <tr>
        <td id="L8518" class="blob-num js-line-number" data-line-number="8518"></td>
        <td id="LC8518" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> {<span class="pl-c1">0</span>, <span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L8519" class="blob-num js-line-number" data-line-number="8519"></td>
        <td id="LC8519" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L8520" class="blob-num js-line-number" data-line-number="8520"></td>
        <td id="LC8520" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8521" class="blob-num js-line-number" data-line-number="8521"></td>
        <td id="LC8521" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (!m_readFromSocketThreadRunning.<span class="pl-c1">load</span>()) {</td>
      </tr>
      <tr>
        <td id="L8522" class="blob-num js-line-number" data-line-number="8522"></td>
        <td id="LC8522" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">m_connectionLostDelegate</span>();</td>
      </tr>
      <tr>
        <td id="L8523" class="blob-num js-line-number" data-line-number="8523"></td>
        <td id="LC8523" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> {-<span class="pl-c1">1</span>, ENOTCONN};</td>
      </tr>
      <tr>
        <td id="L8524" class="blob-num js-line-number" data-line-number="8524"></td>
        <td id="LC8524" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L8525" class="blob-num js-line-number" data-line-number="8525"></td>
        <td id="LC8525" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8526" class="blob-num js-line-number" data-line-number="8526"></td>
        <td id="LC8526" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">constexpr</span> <span class="pl-c1">uint16_t</span> MAX_LENGTH{<span class="pl-c1">65535</span>};</td>
      </tr>
      <tr>
        <td id="L8527" class="blob-num js-line-number" data-line-number="8527"></td>
        <td id="LC8527" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (MAX_LENGTH &lt; data.<span class="pl-c1">size</span>()) {</td>
      </tr>
      <tr>
        <td id="L8528" class="blob-num js-line-number" data-line-number="8528"></td>
        <td id="LC8528" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> {-<span class="pl-c1">1</span>, E2BIG};</td>
      </tr>
      <tr>
        <td id="L8529" class="blob-num js-line-number" data-line-number="8529"></td>
        <td id="LC8529" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L8530" class="blob-num js-line-number" data-line-number="8530"></td>
        <td id="LC8530" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8531" class="blob-num js-line-number" data-line-number="8531"></td>
        <td id="LC8531" class="blob-code blob-code-inner js-file-line">    std::lock_guard&lt;std::mutex&gt; <span class="pl-c1">lck</span>(m_socketMutex);</td>
      </tr>
      <tr>
        <td id="L8532" class="blob-num js-line-number" data-line-number="8532"></td>
        <td id="LC8532" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">ssize_t</span> bytesSent = ::<span class="pl-c1">send</span>(m_socket, data.<span class="pl-c1">c_str</span>(), data.<span class="pl-c1">length</span>(), <span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L8533" class="blob-num js-line-number" data-line-number="8533"></td>
        <td id="LC8533" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> {bytesSent, (<span class="pl-c1">0</span> &gt; bytesSent ? errno : <span class="pl-c1">0</span>)};</td>
      </tr>
      <tr>
        <td id="L8534" class="blob-num js-line-number" data-line-number="8534"></td>
        <td id="LC8534" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L8535" class="blob-num js-line-number" data-line-number="8535"></td>
        <td id="LC8535" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8536" class="blob-num js-line-number" data-line-number="8536"></td>
        <td id="LC8536" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">TCPConnection::readFromSocket</span>() <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L8537" class="blob-num js-line-number" data-line-number="8537"></td>
        <td id="LC8537" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Create buffer to store data from socket.</span></td>
      </tr>
      <tr>
        <td id="L8538" class="blob-num js-line-number" data-line-number="8538"></td>
        <td id="LC8538" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">constexpr</span> <span class="pl-c1">uint16_t</span> MAX_LENGTH{<span class="pl-c1">65535</span>};</td>
      </tr>
      <tr>
        <td id="L8539" class="blob-num js-line-number" data-line-number="8539"></td>
        <td id="LC8539" class="blob-code blob-code-inner js-file-line">    std::array&lt;<span class="pl-k">char</span>, MAX_LENGTH&gt; buffer{};</td>
      </tr>
      <tr>
        <td id="L8540" class="blob-num js-line-number" data-line-number="8540"></td>
        <td id="LC8540" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8541" class="blob-num js-line-number" data-line-number="8541"></td>
        <td id="LC8541" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Define timeout for select system call.</span></td>
      </tr>
      <tr>
        <td id="L8542" class="blob-num js-line-number" data-line-number="8542"></td>
        <td id="LC8542" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">struct</span> <span class="pl-en">timeval</span> timeout {};</td>
      </tr>
      <tr>
        <td id="L8543" class="blob-num js-line-number" data-line-number="8543"></td>
        <td id="LC8543" class="blob-code blob-code-inner js-file-line">    timeout.<span class="pl-smi">tv_sec</span>  = <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L8544" class="blob-num js-line-number" data-line-number="8544"></td>
        <td id="LC8544" class="blob-code blob-code-inner js-file-line">    timeout.<span class="pl-smi">tv_usec</span> = <span class="pl-c1">20</span> * <span class="pl-c1">1000</span>; <span class="pl-c"><span class="pl-c">//</span> Check for new data with 50Hz.</span></td>
      </tr>
      <tr>
        <td id="L8545" class="blob-num js-line-number" data-line-number="8545"></td>
        <td id="LC8545" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8546" class="blob-num js-line-number" data-line-number="8546"></td>
        <td id="LC8546" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Define file descriptor set to watch for read operations.</span></td>
      </tr>
      <tr>
        <td id="L8547" class="blob-num js-line-number" data-line-number="8547"></td>
        <td id="LC8547" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">fd_set</span> setOfFiledescriptorsToReadFrom{};</td>
      </tr>
      <tr>
        <td id="L8548" class="blob-num js-line-number" data-line-number="8548"></td>
        <td id="LC8548" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">ssize_t</span> bytesRead{<span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L8549" class="blob-num js-line-number" data-line-number="8549"></td>
        <td id="LC8549" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8550" class="blob-num js-line-number" data-line-number="8550"></td>
        <td id="LC8550" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Indicate to main thread that we are ready.</span></td>
      </tr>
      <tr>
        <td id="L8551" class="blob-num js-line-number" data-line-number="8551"></td>
        <td id="LC8551" class="blob-code blob-code-inner js-file-line">    m_readFromSocketThreadRunning.<span class="pl-c1">store</span>(<span class="pl-c1">true</span>);</td>
      </tr>
      <tr>
        <td id="L8552" class="blob-num js-line-number" data-line-number="8552"></td>
        <td id="LC8552" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8553" class="blob-num js-line-number" data-line-number="8553"></td>
        <td id="LC8553" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">while</span> (m_readFromSocketThreadRunning.<span class="pl-c1">load</span>()) {</td>
      </tr>
      <tr>
        <td id="L8554" class="blob-num js-line-number" data-line-number="8554"></td>
        <td id="LC8554" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">FD_ZERO</span>(&amp;setOfFiledescriptorsToReadFrom);</td>
      </tr>
      <tr>
        <td id="L8555" class="blob-num js-line-number" data-line-number="8555"></td>
        <td id="LC8555" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">FD_SET</span>(m_socket, &amp;setOfFiledescriptorsToReadFrom);</td>
      </tr>
      <tr>
        <td id="L8556" class="blob-num js-line-number" data-line-number="8556"></td>
        <td id="LC8556" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">::select</span>(m_socket + <span class="pl-c1">1</span>, &amp;setOfFiledescriptorsToReadFrom, <span class="pl-c1">nullptr</span>, <span class="pl-c1">nullptr</span>, &amp;timeout);</td>
      </tr>
      <tr>
        <td id="L8557" class="blob-num js-line-number" data-line-number="8557"></td>
        <td id="LC8557" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-c1">FD_ISSET</span>(m_socket, &amp;setOfFiledescriptorsToReadFrom)) {</td>
      </tr>
      <tr>
        <td id="L8558" class="blob-num js-line-number" data-line-number="8558"></td>
        <td id="LC8558" class="blob-code blob-code-inner js-file-line">            bytesRead = ::<span class="pl-c1">recv</span>(m_socket, buffer.<span class="pl-c1">data</span>(), buffer.<span class="pl-c1">max_size</span>(), <span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L8559" class="blob-num js-line-number" data-line-number="8559"></td>
        <td id="LC8559" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-c1">0</span> &gt;= bytesRead) {</td>
      </tr>
      <tr>
        <td id="L8560" class="blob-num js-line-number" data-line-number="8560"></td>
        <td id="LC8560" class="blob-code blob-code-inner js-file-line">                <span class="pl-c"><span class="pl-c">//</span> 0 == bytesRead: peer shut down the connection; 0 &gt; bytesRead: other error.</span></td>
      </tr>
      <tr>
        <td id="L8561" class="blob-num js-line-number" data-line-number="8561"></td>
        <td id="LC8561" class="blob-code blob-code-inner js-file-line">                m_readFromSocketThreadRunning.<span class="pl-c1">store</span>(<span class="pl-c1">false</span>);</td>
      </tr>
      <tr>
        <td id="L8562" class="blob-num js-line-number" data-line-number="8562"></td>
        <td id="LC8562" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">if</span> (<span class="pl-c1">nullptr</span> != m_connectionLostDelegate) {</td>
      </tr>
      <tr>
        <td id="L8563" class="blob-num js-line-number" data-line-number="8563"></td>
        <td id="LC8563" class="blob-code blob-code-inner js-file-line">                    <span class="pl-c1">m_connectionLostDelegate</span>();</td>
      </tr>
      <tr>
        <td id="L8564" class="blob-num js-line-number" data-line-number="8564"></td>
        <td id="LC8564" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L8565" class="blob-num js-line-number" data-line-number="8565"></td>
        <td id="LC8565" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L8566" class="blob-num js-line-number" data-line-number="8566"></td>
        <td id="LC8566" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L8567" class="blob-num js-line-number" data-line-number="8567"></td>
        <td id="LC8567" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> ((<span class="pl-c1">0</span> &lt; bytesRead) &amp;&amp; (<span class="pl-c1">nullptr</span> != m_newDataDelegate)) {</td>
      </tr>
      <tr>
        <td id="L8568" class="blob-num js-line-number" data-line-number="8568"></td>
        <td id="LC8568" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifdef</span> __linux__</td>
      </tr>
      <tr>
        <td id="L8569" class="blob-num js-line-number" data-line-number="8569"></td>
        <td id="LC8569" class="blob-code blob-code-inner js-file-line">                std::chrono::system_clock::time_point timestamp;</td>
      </tr>
      <tr>
        <td id="L8570" class="blob-num js-line-number" data-line-number="8570"></td>
        <td id="LC8570" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">struct</span> <span class="pl-en">timeval</span> receivedTimeStamp {};</td>
      </tr>
      <tr>
        <td id="L8571" class="blob-num js-line-number" data-line-number="8571"></td>
        <td id="LC8571" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">if</span> (<span class="pl-c1">0</span> == ::<span class="pl-c1">ioctl</span>(m_socket, SIOCGSTAMP, &amp;receivedTimeStamp)) {</td>
      </tr>
      <tr>
        <td id="L8572" class="blob-num js-line-number" data-line-number="8572"></td>
        <td id="LC8572" class="blob-code blob-code-inner js-file-line">                    <span class="pl-c"><span class="pl-c">//</span> Transform struct timeval to C++ chrono.</span></td>
      </tr>
      <tr>
        <td id="L8573" class="blob-num js-line-number" data-line-number="8573"></td>
        <td id="LC8573" class="blob-code blob-code-inner js-file-line">                    std::chrono::time_point&lt;std::chrono::system_clock, std::chrono::microseconds&gt; <span class="pl-c1">transformedTimePoint</span>(</td>
      </tr>
      <tr>
        <td id="L8574" class="blob-num js-line-number" data-line-number="8574"></td>
        <td id="LC8574" class="blob-code blob-code-inner js-file-line">                        <span class="pl-c1">std::chrono::microseconds</span>(receivedTimeStamp.<span class="pl-smi">tv_sec</span> * <span class="pl-c1">1000000L</span> + receivedTimeStamp.<span class="pl-smi">tv_usec</span>));</td>
      </tr>
      <tr>
        <td id="L8575" class="blob-num js-line-number" data-line-number="8575"></td>
        <td id="LC8575" class="blob-code blob-code-inner js-file-line">                    timestamp = std::chrono::time_point_cast&lt;std::chrono::system_clock::duration&gt;(transformedTimePoint);</td>
      </tr>
      <tr>
        <td id="L8576" class="blob-num js-line-number" data-line-number="8576"></td>
        <td id="LC8576" class="blob-code blob-code-inner js-file-line">                } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L8577" class="blob-num js-line-number" data-line-number="8577"></td>
        <td id="LC8577" class="blob-code blob-code-inner js-file-line">                    <span class="pl-c"><span class="pl-c">//</span> In case the ioctl failed, fall back to chrono.</span></td>
      </tr>
      <tr>
        <td id="L8578" class="blob-num js-line-number" data-line-number="8578"></td>
        <td id="LC8578" class="blob-code blob-code-inner js-file-line">                    timestamp = <span class="pl-c1">std::chrono::system_clock::now</span>();</td>
      </tr>
      <tr>
        <td id="L8579" class="blob-num js-line-number" data-line-number="8579"></td>
        <td id="LC8579" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L8580" class="blob-num js-line-number" data-line-number="8580"></td>
        <td id="LC8580" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">else</span></td>
      </tr>
      <tr>
        <td id="L8581" class="blob-num js-line-number" data-line-number="8581"></td>
        <td id="LC8581" class="blob-code blob-code-inner js-file-line">                std::chrono::system_clock::time_point timestamp = <span class="pl-c1">std::chrono::system_clock::now</span>();</td>
      </tr>
      <tr>
        <td id="L8582" class="blob-num js-line-number" data-line-number="8582"></td>
        <td id="LC8582" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L8583" class="blob-num js-line-number" data-line-number="8583"></td>
        <td id="LC8583" class="blob-code blob-code-inner js-file-line">                <span class="pl-c"><span class="pl-c">//</span> Call newDataDelegate.</span></td>
      </tr>
      <tr>
        <td id="L8584" class="blob-num js-line-number" data-line-number="8584"></td>
        <td id="LC8584" class="blob-code blob-code-inner js-file-line">                <span class="pl-c1">m_newDataDelegate</span>(<span class="pl-c1">std::string</span>(buffer.<span class="pl-c1">data</span>(), <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">size_t</span>&gt;(bytesRead)), timestamp);</td>
      </tr>
      <tr>
        <td id="L8585" class="blob-num js-line-number" data-line-number="8585"></td>
        <td id="LC8585" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L8586" class="blob-num js-line-number" data-line-number="8586"></td>
        <td id="LC8586" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L8587" class="blob-num js-line-number" data-line-number="8587"></td>
        <td id="LC8587" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> Let the operating system yield other threads.</span></td>
      </tr>
      <tr>
        <td id="L8588" class="blob-num js-line-number" data-line-number="8588"></td>
        <td id="LC8588" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">using</span> <span class="pl-k">namespace</span> <span class="pl-en">std</span>::literals::chrono_literals<span class="pl-k">;</span></td>
      </tr>
      <tr>
        <td id="L8589" class="blob-num js-line-number" data-line-number="8589"></td>
        <td id="LC8589" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">std::this_thread::sleep_for</span>(1ms);</td>
      </tr>
      <tr>
        <td id="L8590" class="blob-num js-line-number" data-line-number="8590"></td>
        <td id="LC8590" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L8591" class="blob-num js-line-number" data-line-number="8591"></td>
        <td id="LC8591" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L8592" class="blob-num js-line-number" data-line-number="8592"></td>
        <td id="LC8592" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L8593" class="blob-num js-line-number" data-line-number="8593"></td>
        <td id="LC8593" class="blob-code blob-code-inner js-file-line">} <span class="pl-c"><span class="pl-c">//</span> namespace cluon</span></td>
      </tr>
      <tr>
        <td id="L8594" class="blob-num js-line-number" data-line-number="8594"></td>
        <td id="LC8594" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L8595" class="blob-num js-line-number" data-line-number="8595"></td>
        <td id="LC8595" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Copyright (C) 2017-2018  Christian Berger</span></td>
      </tr>
      <tr>
        <td id="L8596" class="blob-num js-line-number" data-line-number="8596"></td>
        <td id="LC8596" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L8597" class="blob-num js-line-number" data-line-number="8597"></td>
        <td id="LC8597" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is free software: you can redistribute it and/or modify</span></td>
      </tr>
      <tr>
        <td id="L8598" class="blob-num js-line-number" data-line-number="8598"></td>
        <td id="LC8598" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * it under the terms of the GNU General Public License as published by</span></td>
      </tr>
      <tr>
        <td id="L8599" class="blob-num js-line-number" data-line-number="8599"></td>
        <td id="LC8599" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * the Free Software Foundation, either version 3 of the License, or</span></td>
      </tr>
      <tr>
        <td id="L8600" class="blob-num js-line-number" data-line-number="8600"></td>
        <td id="LC8600" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * (at your option) any later version.</span></td>
      </tr>
      <tr>
        <td id="L8601" class="blob-num js-line-number" data-line-number="8601"></td>
        <td id="LC8601" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L8602" class="blob-num js-line-number" data-line-number="8602"></td>
        <td id="LC8602" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is distributed in the hope that it will be useful,</span></td>
      </tr>
      <tr>
        <td id="L8603" class="blob-num js-line-number" data-line-number="8603"></td>
        <td id="LC8603" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></td>
      </tr>
      <tr>
        <td id="L8604" class="blob-num js-line-number" data-line-number="8604"></td>
        <td id="LC8604" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></td>
      </tr>
      <tr>
        <td id="L8605" class="blob-num js-line-number" data-line-number="8605"></td>
        <td id="LC8605" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * GNU General Public License for more details.</span></td>
      </tr>
      <tr>
        <td id="L8606" class="blob-num js-line-number" data-line-number="8606"></td>
        <td id="LC8606" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L8607" class="blob-num js-line-number" data-line-number="8607"></td>
        <td id="LC8607" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * You should have received a copy of the GNU General Public License</span></td>
      </tr>
      <tr>
        <td id="L8608" class="blob-num js-line-number" data-line-number="8608"></td>
        <td id="LC8608" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></td>
      </tr>
      <tr>
        <td id="L8609" class="blob-num js-line-number" data-line-number="8609"></td>
        <td id="LC8609" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L8610" class="blob-num js-line-number" data-line-number="8610"></td>
        <td id="LC8610" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8611" class="blob-num js-line-number" data-line-number="8611"></td>
        <td id="LC8611" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/ToProtoVisitor.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L8612" class="blob-num js-line-number" data-line-number="8612"></td>
        <td id="LC8612" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8613" class="blob-num js-line-number" data-line-number="8613"></td>
        <td id="LC8613" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>cstring<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L8614" class="blob-num js-line-number" data-line-number="8614"></td>
        <td id="LC8614" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8615" class="blob-num js-line-number" data-line-number="8615"></td>
        <td id="LC8615" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">cluon</span> {</td>
      </tr>
      <tr>
        <td id="L8616" class="blob-num js-line-number" data-line-number="8616"></td>
        <td id="LC8616" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8617" class="blob-num js-line-number" data-line-number="8617"></td>
        <td id="LC8617" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::string <span class="pl-en">ToProtoVisitor::encodedData</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L8618" class="blob-num js-line-number" data-line-number="8618"></td>
        <td id="LC8618" class="blob-code blob-code-inner js-file-line">    std::string s{m_buffer.<span class="pl-c1">str</span>()};</td>
      </tr>
      <tr>
        <td id="L8619" class="blob-num js-line-number" data-line-number="8619"></td>
        <td id="LC8619" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> s;</td>
      </tr>
      <tr>
        <td id="L8620" class="blob-num js-line-number" data-line-number="8620"></td>
        <td id="LC8620" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L8621" class="blob-num js-line-number" data-line-number="8621"></td>
        <td id="LC8621" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8622" class="blob-num js-line-number" data-line-number="8622"></td>
        <td id="LC8622" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToProtoVisitor::preVisit</span>(<span class="pl-c1">int32_t</span> id, <span class="pl-k">const</span> std::string &amp;shortName, <span class="pl-k">const</span> std::string &amp;longName) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L8623" class="blob-num js-line-number" data-line-number="8623"></td>
        <td id="LC8623" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L8624" class="blob-num js-line-number" data-line-number="8624"></td>
        <td id="LC8624" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)shortName;</td>
      </tr>
      <tr>
        <td id="L8625" class="blob-num js-line-number" data-line-number="8625"></td>
        <td id="LC8625" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)longName;</td>
      </tr>
      <tr>
        <td id="L8626" class="blob-num js-line-number" data-line-number="8626"></td>
        <td id="LC8626" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L8627" class="blob-num js-line-number" data-line-number="8627"></td>
        <td id="LC8627" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8628" class="blob-num js-line-number" data-line-number="8628"></td>
        <td id="LC8628" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToProtoVisitor::postVisit</span>() <span class="pl-k">noexcept</span> {}</td>
      </tr>
      <tr>
        <td id="L8629" class="blob-num js-line-number" data-line-number="8629"></td>
        <td id="LC8629" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8630" class="blob-num js-line-number" data-line-number="8630"></td>
        <td id="LC8630" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToProtoVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">bool</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L8631" class="blob-num js-line-number" data-line-number="8631"></td>
        <td id="LC8631" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L8632" class="blob-num js-line-number" data-line-number="8632"></td>
        <td id="LC8632" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)name;</td>
      </tr>
      <tr>
        <td id="L8633" class="blob-num js-line-number" data-line-number="8633"></td>
        <td id="LC8633" class="blob-code blob-code-inner js-file-line">    toKeyValue&lt;<span class="pl-k">bool</span>&gt;(id, v);</td>
      </tr>
      <tr>
        <td id="L8634" class="blob-num js-line-number" data-line-number="8634"></td>
        <td id="LC8634" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L8635" class="blob-num js-line-number" data-line-number="8635"></td>
        <td id="LC8635" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8636" class="blob-num js-line-number" data-line-number="8636"></td>
        <td id="LC8636" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToProtoVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">char</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L8637" class="blob-num js-line-number" data-line-number="8637"></td>
        <td id="LC8637" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L8638" class="blob-num js-line-number" data-line-number="8638"></td>
        <td id="LC8638" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)name;</td>
      </tr>
      <tr>
        <td id="L8639" class="blob-num js-line-number" data-line-number="8639"></td>
        <td id="LC8639" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">uint8_t</span> _v = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(v); <span class="pl-c"><span class="pl-c">//</span> NOLINT</span></td>
      </tr>
      <tr>
        <td id="L8640" class="blob-num js-line-number" data-line-number="8640"></td>
        <td id="LC8640" class="blob-code blob-code-inner js-file-line">    toKeyValue&lt;<span class="pl-c1">uint8_t</span>&gt;(id, _v);</td>
      </tr>
      <tr>
        <td id="L8641" class="blob-num js-line-number" data-line-number="8641"></td>
        <td id="LC8641" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L8642" class="blob-num js-line-number" data-line-number="8642"></td>
        <td id="LC8642" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8643" class="blob-num js-line-number" data-line-number="8643"></td>
        <td id="LC8643" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToProtoVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int8_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L8644" class="blob-num js-line-number" data-line-number="8644"></td>
        <td id="LC8644" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L8645" class="blob-num js-line-number" data-line-number="8645"></td>
        <td id="LC8645" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)name;</td>
      </tr>
      <tr>
        <td id="L8646" class="blob-num js-line-number" data-line-number="8646"></td>
        <td id="LC8646" class="blob-code blob-code-inner js-file-line">    toKeyValue&lt;<span class="pl-c1">int8_t</span>&gt;(id, v);</td>
      </tr>
      <tr>
        <td id="L8647" class="blob-num js-line-number" data-line-number="8647"></td>
        <td id="LC8647" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L8648" class="blob-num js-line-number" data-line-number="8648"></td>
        <td id="LC8648" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8649" class="blob-num js-line-number" data-line-number="8649"></td>
        <td id="LC8649" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToProtoVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint8_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L8650" class="blob-num js-line-number" data-line-number="8650"></td>
        <td id="LC8650" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L8651" class="blob-num js-line-number" data-line-number="8651"></td>
        <td id="LC8651" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)name;</td>
      </tr>
      <tr>
        <td id="L8652" class="blob-num js-line-number" data-line-number="8652"></td>
        <td id="LC8652" class="blob-code blob-code-inner js-file-line">    toKeyValue&lt;<span class="pl-c1">uint8_t</span>&gt;(id, v);</td>
      </tr>
      <tr>
        <td id="L8653" class="blob-num js-line-number" data-line-number="8653"></td>
        <td id="LC8653" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L8654" class="blob-num js-line-number" data-line-number="8654"></td>
        <td id="LC8654" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8655" class="blob-num js-line-number" data-line-number="8655"></td>
        <td id="LC8655" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToProtoVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int16_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L8656" class="blob-num js-line-number" data-line-number="8656"></td>
        <td id="LC8656" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L8657" class="blob-num js-line-number" data-line-number="8657"></td>
        <td id="LC8657" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)name;</td>
      </tr>
      <tr>
        <td id="L8658" class="blob-num js-line-number" data-line-number="8658"></td>
        <td id="LC8658" class="blob-code blob-code-inner js-file-line">    toKeyValue&lt;<span class="pl-c1">int16_t</span>&gt;(id, v);</td>
      </tr>
      <tr>
        <td id="L8659" class="blob-num js-line-number" data-line-number="8659"></td>
        <td id="LC8659" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L8660" class="blob-num js-line-number" data-line-number="8660"></td>
        <td id="LC8660" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8661" class="blob-num js-line-number" data-line-number="8661"></td>
        <td id="LC8661" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToProtoVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint16_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L8662" class="blob-num js-line-number" data-line-number="8662"></td>
        <td id="LC8662" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L8663" class="blob-num js-line-number" data-line-number="8663"></td>
        <td id="LC8663" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)name;</td>
      </tr>
      <tr>
        <td id="L8664" class="blob-num js-line-number" data-line-number="8664"></td>
        <td id="LC8664" class="blob-code blob-code-inner js-file-line">    toKeyValue&lt;<span class="pl-c1">uint16_t</span>&gt;(id, v);</td>
      </tr>
      <tr>
        <td id="L8665" class="blob-num js-line-number" data-line-number="8665"></td>
        <td id="LC8665" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L8666" class="blob-num js-line-number" data-line-number="8666"></td>
        <td id="LC8666" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8667" class="blob-num js-line-number" data-line-number="8667"></td>
        <td id="LC8667" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToProtoVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int32_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L8668" class="blob-num js-line-number" data-line-number="8668"></td>
        <td id="LC8668" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L8669" class="blob-num js-line-number" data-line-number="8669"></td>
        <td id="LC8669" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)name;</td>
      </tr>
      <tr>
        <td id="L8670" class="blob-num js-line-number" data-line-number="8670"></td>
        <td id="LC8670" class="blob-code blob-code-inner js-file-line">    toKeyValue&lt;<span class="pl-c1">int32_t</span>&gt;(id, v);</td>
      </tr>
      <tr>
        <td id="L8671" class="blob-num js-line-number" data-line-number="8671"></td>
        <td id="LC8671" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L8672" class="blob-num js-line-number" data-line-number="8672"></td>
        <td id="LC8672" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8673" class="blob-num js-line-number" data-line-number="8673"></td>
        <td id="LC8673" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToProtoVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint32_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L8674" class="blob-num js-line-number" data-line-number="8674"></td>
        <td id="LC8674" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L8675" class="blob-num js-line-number" data-line-number="8675"></td>
        <td id="LC8675" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)name;</td>
      </tr>
      <tr>
        <td id="L8676" class="blob-num js-line-number" data-line-number="8676"></td>
        <td id="LC8676" class="blob-code blob-code-inner js-file-line">    toKeyValue&lt;<span class="pl-c1">uint32_t</span>&gt;(id, v);</td>
      </tr>
      <tr>
        <td id="L8677" class="blob-num js-line-number" data-line-number="8677"></td>
        <td id="LC8677" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L8678" class="blob-num js-line-number" data-line-number="8678"></td>
        <td id="LC8678" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8679" class="blob-num js-line-number" data-line-number="8679"></td>
        <td id="LC8679" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToProtoVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int64_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L8680" class="blob-num js-line-number" data-line-number="8680"></td>
        <td id="LC8680" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L8681" class="blob-num js-line-number" data-line-number="8681"></td>
        <td id="LC8681" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)name;</td>
      </tr>
      <tr>
        <td id="L8682" class="blob-num js-line-number" data-line-number="8682"></td>
        <td id="LC8682" class="blob-code blob-code-inner js-file-line">    toKeyValue&lt;<span class="pl-c1">int64_t</span>&gt;(id, v);</td>
      </tr>
      <tr>
        <td id="L8683" class="blob-num js-line-number" data-line-number="8683"></td>
        <td id="LC8683" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L8684" class="blob-num js-line-number" data-line-number="8684"></td>
        <td id="LC8684" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8685" class="blob-num js-line-number" data-line-number="8685"></td>
        <td id="LC8685" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToProtoVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint64_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L8686" class="blob-num js-line-number" data-line-number="8686"></td>
        <td id="LC8686" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L8687" class="blob-num js-line-number" data-line-number="8687"></td>
        <td id="LC8687" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)name;</td>
      </tr>
      <tr>
        <td id="L8688" class="blob-num js-line-number" data-line-number="8688"></td>
        <td id="LC8688" class="blob-code blob-code-inner js-file-line">    toKeyValue&lt;<span class="pl-c1">uint64_t</span>&gt;(id, v);</td>
      </tr>
      <tr>
        <td id="L8689" class="blob-num js-line-number" data-line-number="8689"></td>
        <td id="LC8689" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L8690" class="blob-num js-line-number" data-line-number="8690"></td>
        <td id="LC8690" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8691" class="blob-num js-line-number" data-line-number="8691"></td>
        <td id="LC8691" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToProtoVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">float</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L8692" class="blob-num js-line-number" data-line-number="8692"></td>
        <td id="LC8692" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L8693" class="blob-num js-line-number" data-line-number="8693"></td>
        <td id="LC8693" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)name;</td>
      </tr>
      <tr>
        <td id="L8694" class="blob-num js-line-number" data-line-number="8694"></td>
        <td id="LC8694" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">uint64_t</span> key = <span class="pl-c1">encodeKey</span>(id, <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(ProtoConstants::FOUR_BYTES));</td>
      </tr>
      <tr>
        <td id="L8695" class="blob-num js-line-number" data-line-number="8695"></td>
        <td id="LC8695" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">toVarInt</span>(m_buffer, key);</td>
      </tr>
      <tr>
        <td id="L8696" class="blob-num js-line-number" data-line-number="8696"></td>
        <td id="LC8696" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">encode</span>(m_buffer, v);</td>
      </tr>
      <tr>
        <td id="L8697" class="blob-num js-line-number" data-line-number="8697"></td>
        <td id="LC8697" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L8698" class="blob-num js-line-number" data-line-number="8698"></td>
        <td id="LC8698" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8699" class="blob-num js-line-number" data-line-number="8699"></td>
        <td id="LC8699" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToProtoVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">double</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L8700" class="blob-num js-line-number" data-line-number="8700"></td>
        <td id="LC8700" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L8701" class="blob-num js-line-number" data-line-number="8701"></td>
        <td id="LC8701" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)name;</td>
      </tr>
      <tr>
        <td id="L8702" class="blob-num js-line-number" data-line-number="8702"></td>
        <td id="LC8702" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">uint64_t</span> key = <span class="pl-c1">encodeKey</span>(id, <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(ProtoConstants::EIGHT_BYTES));</td>
      </tr>
      <tr>
        <td id="L8703" class="blob-num js-line-number" data-line-number="8703"></td>
        <td id="LC8703" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">toVarInt</span>(m_buffer, key);</td>
      </tr>
      <tr>
        <td id="L8704" class="blob-num js-line-number" data-line-number="8704"></td>
        <td id="LC8704" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">encode</span>(m_buffer, v);</td>
      </tr>
      <tr>
        <td id="L8705" class="blob-num js-line-number" data-line-number="8705"></td>
        <td id="LC8705" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L8706" class="blob-num js-line-number" data-line-number="8706"></td>
        <td id="LC8706" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8707" class="blob-num js-line-number" data-line-number="8707"></td>
        <td id="LC8707" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToProtoVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, std::string &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L8708" class="blob-num js-line-number" data-line-number="8708"></td>
        <td id="LC8708" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L8709" class="blob-num js-line-number" data-line-number="8709"></td>
        <td id="LC8709" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)name;</td>
      </tr>
      <tr>
        <td id="L8710" class="blob-num js-line-number" data-line-number="8710"></td>
        <td id="LC8710" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">uint64_t</span> key = <span class="pl-c1">encodeKey</span>(id, <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(ProtoConstants::LENGTH_DELIMITED));</td>
      </tr>
      <tr>
        <td id="L8711" class="blob-num js-line-number" data-line-number="8711"></td>
        <td id="LC8711" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">toVarInt</span>(m_buffer, key);</td>
      </tr>
      <tr>
        <td id="L8712" class="blob-num js-line-number" data-line-number="8712"></td>
        <td id="LC8712" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">encode</span>(m_buffer, v);</td>
      </tr>
      <tr>
        <td id="L8713" class="blob-num js-line-number" data-line-number="8713"></td>
        <td id="LC8713" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L8714" class="blob-num js-line-number" data-line-number="8714"></td>
        <td id="LC8714" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8715" class="blob-num js-line-number" data-line-number="8715"></td>
        <td id="LC8715" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>//////////////////////////////////////////////////////////////////////////////</span></td>
      </tr>
      <tr>
        <td id="L8716" class="blob-num js-line-number" data-line-number="8716"></td>
        <td id="LC8716" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8717" class="blob-num js-line-number" data-line-number="8717"></td>
        <td id="LC8717" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::<span class="pl-c1">size_t</span> <span class="pl-en">ToProtoVisitor::encode</span>(std::ostream &amp;o, <span class="pl-k">bool</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L8718" class="blob-num js-line-number" data-line-number="8718"></td>
        <td id="LC8718" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">uint64_t</span> _v{(v ? <span class="pl-c1">1u</span> : <span class="pl-c1">0u</span>)};</td>
      </tr>
      <tr>
        <td id="L8719" class="blob-num js-line-number" data-line-number="8719"></td>
        <td id="LC8719" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-c1">toVarInt</span>(o, _v);</td>
      </tr>
      <tr>
        <td id="L8720" class="blob-num js-line-number" data-line-number="8720"></td>
        <td id="LC8720" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L8721" class="blob-num js-line-number" data-line-number="8721"></td>
        <td id="LC8721" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8722" class="blob-num js-line-number" data-line-number="8722"></td>
        <td id="LC8722" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::<span class="pl-c1">size_t</span> <span class="pl-en">ToProtoVisitor::encode</span>(std::ostream &amp;o, <span class="pl-c1">int8_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L8723" class="blob-num js-line-number" data-line-number="8723"></td>
        <td id="LC8723" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">uint64_t</span> _v = <span class="pl-c1">toZigZag8</span>(v);</td>
      </tr>
      <tr>
        <td id="L8724" class="blob-num js-line-number" data-line-number="8724"></td>
        <td id="LC8724" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-c1">toVarInt</span>(o, _v);</td>
      </tr>
      <tr>
        <td id="L8725" class="blob-num js-line-number" data-line-number="8725"></td>
        <td id="LC8725" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L8726" class="blob-num js-line-number" data-line-number="8726"></td>
        <td id="LC8726" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8727" class="blob-num js-line-number" data-line-number="8727"></td>
        <td id="LC8727" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::<span class="pl-c1">size_t</span> <span class="pl-en">ToProtoVisitor::encode</span>(std::ostream &amp;o, <span class="pl-c1">uint8_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L8728" class="blob-num js-line-number" data-line-number="8728"></td>
        <td id="LC8728" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">uint64_t</span> _v = v;</td>
      </tr>
      <tr>
        <td id="L8729" class="blob-num js-line-number" data-line-number="8729"></td>
        <td id="LC8729" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-c1">toVarInt</span>(o, _v);</td>
      </tr>
      <tr>
        <td id="L8730" class="blob-num js-line-number" data-line-number="8730"></td>
        <td id="LC8730" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L8731" class="blob-num js-line-number" data-line-number="8731"></td>
        <td id="LC8731" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8732" class="blob-num js-line-number" data-line-number="8732"></td>
        <td id="LC8732" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::<span class="pl-c1">size_t</span> <span class="pl-en">ToProtoVisitor::encode</span>(std::ostream &amp;o, <span class="pl-c1">int16_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L8733" class="blob-num js-line-number" data-line-number="8733"></td>
        <td id="LC8733" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">uint64_t</span> _v = <span class="pl-c1">toZigZag16</span>(v);</td>
      </tr>
      <tr>
        <td id="L8734" class="blob-num js-line-number" data-line-number="8734"></td>
        <td id="LC8734" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-c1">toVarInt</span>(o, _v);</td>
      </tr>
      <tr>
        <td id="L8735" class="blob-num js-line-number" data-line-number="8735"></td>
        <td id="LC8735" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L8736" class="blob-num js-line-number" data-line-number="8736"></td>
        <td id="LC8736" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8737" class="blob-num js-line-number" data-line-number="8737"></td>
        <td id="LC8737" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::<span class="pl-c1">size_t</span> <span class="pl-en">ToProtoVisitor::encode</span>(std::ostream &amp;o, <span class="pl-c1">uint16_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L8738" class="blob-num js-line-number" data-line-number="8738"></td>
        <td id="LC8738" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">uint64_t</span> _v = v;</td>
      </tr>
      <tr>
        <td id="L8739" class="blob-num js-line-number" data-line-number="8739"></td>
        <td id="LC8739" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-c1">toVarInt</span>(o, _v);</td>
      </tr>
      <tr>
        <td id="L8740" class="blob-num js-line-number" data-line-number="8740"></td>
        <td id="LC8740" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L8741" class="blob-num js-line-number" data-line-number="8741"></td>
        <td id="LC8741" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8742" class="blob-num js-line-number" data-line-number="8742"></td>
        <td id="LC8742" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::<span class="pl-c1">size_t</span> <span class="pl-en">ToProtoVisitor::encode</span>(std::ostream &amp;o, <span class="pl-c1">int32_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L8743" class="blob-num js-line-number" data-line-number="8743"></td>
        <td id="LC8743" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">uint64_t</span> _v = <span class="pl-c1">toZigZag32</span>(v);</td>
      </tr>
      <tr>
        <td id="L8744" class="blob-num js-line-number" data-line-number="8744"></td>
        <td id="LC8744" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-c1">toVarInt</span>(o, _v);</td>
      </tr>
      <tr>
        <td id="L8745" class="blob-num js-line-number" data-line-number="8745"></td>
        <td id="LC8745" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L8746" class="blob-num js-line-number" data-line-number="8746"></td>
        <td id="LC8746" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8747" class="blob-num js-line-number" data-line-number="8747"></td>
        <td id="LC8747" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::<span class="pl-c1">size_t</span> <span class="pl-en">ToProtoVisitor::encode</span>(std::ostream &amp;o, <span class="pl-c1">uint32_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L8748" class="blob-num js-line-number" data-line-number="8748"></td>
        <td id="LC8748" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">uint64_t</span> _v = v;</td>
      </tr>
      <tr>
        <td id="L8749" class="blob-num js-line-number" data-line-number="8749"></td>
        <td id="LC8749" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-c1">toVarInt</span>(o, _v);</td>
      </tr>
      <tr>
        <td id="L8750" class="blob-num js-line-number" data-line-number="8750"></td>
        <td id="LC8750" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L8751" class="blob-num js-line-number" data-line-number="8751"></td>
        <td id="LC8751" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8752" class="blob-num js-line-number" data-line-number="8752"></td>
        <td id="LC8752" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::<span class="pl-c1">size_t</span> <span class="pl-en">ToProtoVisitor::encode</span>(std::ostream &amp;o, <span class="pl-c1">int64_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L8753" class="blob-num js-line-number" data-line-number="8753"></td>
        <td id="LC8753" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">uint64_t</span> _v = <span class="pl-c1">toZigZag64</span>(v);</td>
      </tr>
      <tr>
        <td id="L8754" class="blob-num js-line-number" data-line-number="8754"></td>
        <td id="LC8754" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-c1">toVarInt</span>(o, _v);</td>
      </tr>
      <tr>
        <td id="L8755" class="blob-num js-line-number" data-line-number="8755"></td>
        <td id="LC8755" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L8756" class="blob-num js-line-number" data-line-number="8756"></td>
        <td id="LC8756" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8757" class="blob-num js-line-number" data-line-number="8757"></td>
        <td id="LC8757" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::<span class="pl-c1">size_t</span> <span class="pl-en">ToProtoVisitor::encode</span>(std::ostream &amp;o, <span class="pl-c1">uint64_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L8758" class="blob-num js-line-number" data-line-number="8758"></td>
        <td id="LC8758" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-c1">toVarInt</span>(o, v);</td>
      </tr>
      <tr>
        <td id="L8759" class="blob-num js-line-number" data-line-number="8759"></td>
        <td id="LC8759" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L8760" class="blob-num js-line-number" data-line-number="8760"></td>
        <td id="LC8760" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8761" class="blob-num js-line-number" data-line-number="8761"></td>
        <td id="LC8761" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::<span class="pl-c1">size_t</span> <span class="pl-en">ToProtoVisitor::encode</span>(std::ostream &amp;o, <span class="pl-k">float</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L8762" class="blob-num js-line-number" data-line-number="8762"></td>
        <td id="LC8762" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Store 4 bytes as little endian encoding.</span></td>
      </tr>
      <tr>
        <td id="L8763" class="blob-num js-line-number" data-line-number="8763"></td>
        <td id="LC8763" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">uint32_t</span> _v{<span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L8764" class="blob-num js-line-number" data-line-number="8764"></td>
        <td id="LC8764" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">std::memmove</span>(&amp;_v, &amp;v, <span class="pl-k">sizeof</span>(<span class="pl-k">float</span>));</td>
      </tr>
      <tr>
        <td id="L8765" class="blob-num js-line-number" data-line-number="8765"></td>
        <td id="LC8765" class="blob-code blob-code-inner js-file-line">    _v = <span class="pl-c1">htole32</span>(_v);</td>
      </tr>
      <tr>
        <td id="L8766" class="blob-num js-line-number" data-line-number="8766"></td>
        <td id="LC8766" class="blob-code blob-code-inner js-file-line">    o.<span class="pl-c1">write</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">const</span> <span class="pl-k">char</span> *&gt;(&amp;_v), <span class="pl-k">sizeof</span>(<span class="pl-c1">uint32_t</span>)); <span class="pl-c"><span class="pl-c">//</span> NOLINT</span></td>
      </tr>
      <tr>
        <td id="L8767" class="blob-num js-line-number" data-line-number="8767"></td>
        <td id="LC8767" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-k">sizeof</span>(<span class="pl-c1">uint32_t</span>);</td>
      </tr>
      <tr>
        <td id="L8768" class="blob-num js-line-number" data-line-number="8768"></td>
        <td id="LC8768" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L8769" class="blob-num js-line-number" data-line-number="8769"></td>
        <td id="LC8769" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8770" class="blob-num js-line-number" data-line-number="8770"></td>
        <td id="LC8770" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::<span class="pl-c1">size_t</span> <span class="pl-en">ToProtoVisitor::encode</span>(std::ostream &amp;o, <span class="pl-k">double</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L8771" class="blob-num js-line-number" data-line-number="8771"></td>
        <td id="LC8771" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Store 8 bytes as little endian encoding.</span></td>
      </tr>
      <tr>
        <td id="L8772" class="blob-num js-line-number" data-line-number="8772"></td>
        <td id="LC8772" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">uint64_t</span> _v{<span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L8773" class="blob-num js-line-number" data-line-number="8773"></td>
        <td id="LC8773" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">std::memmove</span>(&amp;_v, &amp;v, <span class="pl-k">sizeof</span>(<span class="pl-k">double</span>));</td>
      </tr>
      <tr>
        <td id="L8774" class="blob-num js-line-number" data-line-number="8774"></td>
        <td id="LC8774" class="blob-code blob-code-inner js-file-line">    _v = <span class="pl-c1">htole64</span>(_v);</td>
      </tr>
      <tr>
        <td id="L8775" class="blob-num js-line-number" data-line-number="8775"></td>
        <td id="LC8775" class="blob-code blob-code-inner js-file-line">    o.<span class="pl-c1">write</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">const</span> <span class="pl-k">char</span> *&gt;(&amp;_v), <span class="pl-k">sizeof</span>(<span class="pl-c1">uint64_t</span>)); <span class="pl-c"><span class="pl-c">//</span> NOLINT</span></td>
      </tr>
      <tr>
        <td id="L8776" class="blob-num js-line-number" data-line-number="8776"></td>
        <td id="LC8776" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-k">sizeof</span>(<span class="pl-c1">uint64_t</span>);</td>
      </tr>
      <tr>
        <td id="L8777" class="blob-num js-line-number" data-line-number="8777"></td>
        <td id="LC8777" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L8778" class="blob-num js-line-number" data-line-number="8778"></td>
        <td id="LC8778" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8779" class="blob-num js-line-number" data-line-number="8779"></td>
        <td id="LC8779" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::<span class="pl-c1">size_t</span> <span class="pl-en">ToProtoVisitor::encode</span>(std::ostream &amp;o, <span class="pl-k">const</span> std::string &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L8780" class="blob-num js-line-number" data-line-number="8780"></td>
        <td id="LC8780" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> std::<span class="pl-c1">size_t</span> LENGTH = v.<span class="pl-c1">length</span>();</td>
      </tr>
      <tr>
        <td id="L8781" class="blob-num js-line-number" data-line-number="8781"></td>
        <td id="LC8781" class="blob-code blob-code-inner js-file-line">    std::<span class="pl-c1">size_t</span> size         = <span class="pl-c1">toVarInt</span>(o, LENGTH);</td>
      </tr>
      <tr>
        <td id="L8782" class="blob-num js-line-number" data-line-number="8782"></td>
        <td id="LC8782" class="blob-code blob-code-inner js-file-line">    o.<span class="pl-c1">write</span>(v.<span class="pl-c1">c_str</span>(), <span class="pl-k">static_cast</span>&lt;std::streamsize&gt;(LENGTH)); <span class="pl-c"><span class="pl-c">//</span> LENGTH won&#39;t be negative.</span></td>
      </tr>
      <tr>
        <td id="L8783" class="blob-num js-line-number" data-line-number="8783"></td>
        <td id="LC8783" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> size + LENGTH;</td>
      </tr>
      <tr>
        <td id="L8784" class="blob-num js-line-number" data-line-number="8784"></td>
        <td id="LC8784" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L8785" class="blob-num js-line-number" data-line-number="8785"></td>
        <td id="LC8785" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8786" class="blob-num js-line-number" data-line-number="8786"></td>
        <td id="LC8786" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-c1">uint8_t</span> <span class="pl-en">ToProtoVisitor::toZigZag8</span>(<span class="pl-c1">int8_t</span> v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L8787" class="blob-num js-line-number" data-line-number="8787"></td>
        <td id="LC8787" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;((v &lt;&lt; <span class="pl-c1">1</span>) ^ (v &gt;&gt; ((<span class="pl-k">sizeof</span>(v) * <span class="pl-c1">8</span>) - <span class="pl-c1">1</span>)));</td>
      </tr>
      <tr>
        <td id="L8788" class="blob-num js-line-number" data-line-number="8788"></td>
        <td id="LC8788" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L8789" class="blob-num js-line-number" data-line-number="8789"></td>
        <td id="LC8789" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8790" class="blob-num js-line-number" data-line-number="8790"></td>
        <td id="LC8790" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-c1">uint16_t</span> <span class="pl-en">ToProtoVisitor::toZigZag16</span>(<span class="pl-c1">int16_t</span> v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L8791" class="blob-num js-line-number" data-line-number="8791"></td>
        <td id="LC8791" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint16_t</span>&gt;((v &lt;&lt; <span class="pl-c1">1</span>) ^ (v &gt;&gt; ((<span class="pl-k">sizeof</span>(v) * <span class="pl-c1">8</span>) - <span class="pl-c1">1</span>)));</td>
      </tr>
      <tr>
        <td id="L8792" class="blob-num js-line-number" data-line-number="8792"></td>
        <td id="LC8792" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L8793" class="blob-num js-line-number" data-line-number="8793"></td>
        <td id="LC8793" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8794" class="blob-num js-line-number" data-line-number="8794"></td>
        <td id="LC8794" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-c1">uint32_t</span> <span class="pl-en">ToProtoVisitor::toZigZag32</span>(<span class="pl-c1">int32_t</span> v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L8795" class="blob-num js-line-number" data-line-number="8795"></td>
        <td id="LC8795" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint32_t</span>&gt;((v &lt;&lt; <span class="pl-c1">1</span>) ^ (v &gt;&gt; ((<span class="pl-k">sizeof</span>(v) * <span class="pl-c1">8</span>) - <span class="pl-c1">1</span>)));</td>
      </tr>
      <tr>
        <td id="L8796" class="blob-num js-line-number" data-line-number="8796"></td>
        <td id="LC8796" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L8797" class="blob-num js-line-number" data-line-number="8797"></td>
        <td id="LC8797" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8798" class="blob-num js-line-number" data-line-number="8798"></td>
        <td id="LC8798" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-c1">uint64_t</span> <span class="pl-en">ToProtoVisitor::toZigZag64</span>(<span class="pl-c1">int64_t</span> v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L8799" class="blob-num js-line-number" data-line-number="8799"></td>
        <td id="LC8799" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint64_t</span>&gt;((v &lt;&lt; <span class="pl-c1">1</span>) ^ (v &gt;&gt; ((<span class="pl-k">sizeof</span>(v) * <span class="pl-c1">8</span>) - <span class="pl-c1">1</span>)));</td>
      </tr>
      <tr>
        <td id="L8800" class="blob-num js-line-number" data-line-number="8800"></td>
        <td id="LC8800" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L8801" class="blob-num js-line-number" data-line-number="8801"></td>
        <td id="LC8801" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8802" class="blob-num js-line-number" data-line-number="8802"></td>
        <td id="LC8802" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-c1">uint64_t</span> <span class="pl-en">ToProtoVisitor::encodeKey</span>(<span class="pl-c1">uint32_t</span> fieldIdentifier, <span class="pl-c1">uint8_t</span> protoType) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L8803" class="blob-num js-line-number" data-line-number="8803"></td>
        <td id="LC8803" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> (fieldIdentifier &lt;&lt; <span class="pl-c1">0x3</span>) | protoType;</td>
      </tr>
      <tr>
        <td id="L8804" class="blob-num js-line-number" data-line-number="8804"></td>
        <td id="LC8804" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L8805" class="blob-num js-line-number" data-line-number="8805"></td>
        <td id="LC8805" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8806" class="blob-num js-line-number" data-line-number="8806"></td>
        <td id="LC8806" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::<span class="pl-c1">size_t</span> <span class="pl-en">ToProtoVisitor::toVarInt</span>(std::ostream &amp;out, <span class="pl-c1">uint64_t</span> v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L8807" class="blob-num js-line-number" data-line-number="8807"></td>
        <td id="LC8807" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> VarInt is little endian.</span></td>
      </tr>
      <tr>
        <td id="L8808" class="blob-num js-line-number" data-line-number="8808"></td>
        <td id="LC8808" class="blob-code blob-code-inner js-file-line">    v = <span class="pl-c1">htole64</span>(v);</td>
      </tr>
      <tr>
        <td id="L8809" class="blob-num js-line-number" data-line-number="8809"></td>
        <td id="LC8809" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8810" class="blob-num js-line-number" data-line-number="8810"></td>
        <td id="LC8810" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Minimum size is of the encoded data.</span></td>
      </tr>
      <tr>
        <td id="L8811" class="blob-num js-line-number" data-line-number="8811"></td>
        <td id="LC8811" class="blob-code blob-code-inner js-file-line">    std::<span class="pl-c1">size_t</span> size{<span class="pl-c1">1</span>};</td>
      </tr>
      <tr>
        <td id="L8812" class="blob-num js-line-number" data-line-number="8812"></td>
        <td id="LC8812" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">uint8_t</span> b{<span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L8813" class="blob-num js-line-number" data-line-number="8813"></td>
        <td id="LC8813" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">while</span> (<span class="pl-c1">0x7f</span> &lt; v) {</td>
      </tr>
      <tr>
        <td id="L8814" class="blob-num js-line-number" data-line-number="8814"></td>
        <td id="LC8814" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> Use the MSB to indicate value overflow for more bytes to come.</span></td>
      </tr>
      <tr>
        <td id="L8815" class="blob-num js-line-number" data-line-number="8815"></td>
        <td id="LC8815" class="blob-code blob-code-inner js-file-line">        b = (<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(v &amp; <span class="pl-c1">0x7f</span>)) | <span class="pl-c1">0x80</span>;</td>
      </tr>
      <tr>
        <td id="L8816" class="blob-num js-line-number" data-line-number="8816"></td>
        <td id="LC8816" class="blob-code blob-code-inner js-file-line">        out.<span class="pl-c1">put</span>(<span class="pl-k">static_cast</span>&lt;<span class="pl-k">char</span>&gt;(b));</td>
      </tr>
      <tr>
        <td id="L8817" class="blob-num js-line-number" data-line-number="8817"></td>
        <td id="LC8817" class="blob-code blob-code-inner js-file-line">        v &gt;&gt;= <span class="pl-c1">7</span>;</td>
      </tr>
      <tr>
        <td id="L8818" class="blob-num js-line-number" data-line-number="8818"></td>
        <td id="LC8818" class="blob-code blob-code-inner js-file-line">        size++;</td>
      </tr>
      <tr>
        <td id="L8819" class="blob-num js-line-number" data-line-number="8819"></td>
        <td id="LC8819" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L8820" class="blob-num js-line-number" data-line-number="8820"></td>
        <td id="LC8820" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Write final byte.</span></td>
      </tr>
      <tr>
        <td id="L8821" class="blob-num js-line-number" data-line-number="8821"></td>
        <td id="LC8821" class="blob-code blob-code-inner js-file-line">    b = (<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(v)) &amp; <span class="pl-c1">0x7f</span>;</td>
      </tr>
      <tr>
        <td id="L8822" class="blob-num js-line-number" data-line-number="8822"></td>
        <td id="LC8822" class="blob-code blob-code-inner js-file-line">    out.<span class="pl-c1">put</span>(<span class="pl-k">static_cast</span>&lt;<span class="pl-k">char</span>&gt;(b));</td>
      </tr>
      <tr>
        <td id="L8823" class="blob-num js-line-number" data-line-number="8823"></td>
        <td id="LC8823" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8824" class="blob-num js-line-number" data-line-number="8824"></td>
        <td id="LC8824" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> size;</td>
      </tr>
      <tr>
        <td id="L8825" class="blob-num js-line-number" data-line-number="8825"></td>
        <td id="LC8825" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L8826" class="blob-num js-line-number" data-line-number="8826"></td>
        <td id="LC8826" class="blob-code blob-code-inner js-file-line">} <span class="pl-c"><span class="pl-c">//</span> namespace cluon</span></td>
      </tr>
      <tr>
        <td id="L8827" class="blob-num js-line-number" data-line-number="8827"></td>
        <td id="LC8827" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L8828" class="blob-num js-line-number" data-line-number="8828"></td>
        <td id="LC8828" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Copyright (C) 2017-2018  Christian Berger</span></td>
      </tr>
      <tr>
        <td id="L8829" class="blob-num js-line-number" data-line-number="8829"></td>
        <td id="LC8829" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L8830" class="blob-num js-line-number" data-line-number="8830"></td>
        <td id="LC8830" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is free software: you can redistribute it and/or modify</span></td>
      </tr>
      <tr>
        <td id="L8831" class="blob-num js-line-number" data-line-number="8831"></td>
        <td id="LC8831" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * it under the terms of the GNU General Public License as published by</span></td>
      </tr>
      <tr>
        <td id="L8832" class="blob-num js-line-number" data-line-number="8832"></td>
        <td id="LC8832" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * the Free Software Foundation, either version 3 of the License, or</span></td>
      </tr>
      <tr>
        <td id="L8833" class="blob-num js-line-number" data-line-number="8833"></td>
        <td id="LC8833" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * (at your option) any later version.</span></td>
      </tr>
      <tr>
        <td id="L8834" class="blob-num js-line-number" data-line-number="8834"></td>
        <td id="LC8834" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L8835" class="blob-num js-line-number" data-line-number="8835"></td>
        <td id="LC8835" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is distributed in the hope that it will be useful,</span></td>
      </tr>
      <tr>
        <td id="L8836" class="blob-num js-line-number" data-line-number="8836"></td>
        <td id="LC8836" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></td>
      </tr>
      <tr>
        <td id="L8837" class="blob-num js-line-number" data-line-number="8837"></td>
        <td id="LC8837" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></td>
      </tr>
      <tr>
        <td id="L8838" class="blob-num js-line-number" data-line-number="8838"></td>
        <td id="LC8838" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * GNU General Public License for more details.</span></td>
      </tr>
      <tr>
        <td id="L8839" class="blob-num js-line-number" data-line-number="8839"></td>
        <td id="LC8839" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L8840" class="blob-num js-line-number" data-line-number="8840"></td>
        <td id="LC8840" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * You should have received a copy of the GNU General Public License</span></td>
      </tr>
      <tr>
        <td id="L8841" class="blob-num js-line-number" data-line-number="8841"></td>
        <td id="LC8841" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></td>
      </tr>
      <tr>
        <td id="L8842" class="blob-num js-line-number" data-line-number="8842"></td>
        <td id="LC8842" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L8843" class="blob-num js-line-number" data-line-number="8843"></td>
        <td id="LC8843" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8844" class="blob-num js-line-number" data-line-number="8844"></td>
        <td id="LC8844" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/FromProtoVisitor.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L8845" class="blob-num js-line-number" data-line-number="8845"></td>
        <td id="LC8845" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8846" class="blob-num js-line-number" data-line-number="8846"></td>
        <td id="LC8846" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>cstddef<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L8847" class="blob-num js-line-number" data-line-number="8847"></td>
        <td id="LC8847" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>cstring<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L8848" class="blob-num js-line-number" data-line-number="8848"></td>
        <td id="LC8848" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8849" class="blob-num js-line-number" data-line-number="8849"></td>
        <td id="LC8849" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">cluon</span> {</td>
      </tr>
      <tr>
        <td id="L8850" class="blob-num js-line-number" data-line-number="8850"></td>
        <td id="LC8850" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8851" class="blob-num js-line-number" data-line-number="8851"></td>
        <td id="LC8851" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromProtoVisitor::readBytesFromStream</span>(std::istream &amp;in, std::<span class="pl-c1">size_t</span> bytesToReadFromStream, std::vector&lt;<span class="pl-k">char</span>&gt; &amp;buffer) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L8852" class="blob-num js-line-number" data-line-number="8852"></td>
        <td id="LC8852" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">constexpr</span> std::<span class="pl-c1">size_t</span> CHUNK_SIZE{<span class="pl-c1">1024</span>};</td>
      </tr>
      <tr>
        <td id="L8853" class="blob-num js-line-number" data-line-number="8853"></td>
        <td id="LC8853" class="blob-code blob-code-inner js-file-line">    std::streamsize bufferPosition{<span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L8854" class="blob-num js-line-number" data-line-number="8854"></td>
        <td id="LC8854" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8855" class="blob-num js-line-number" data-line-number="8855"></td>
        <td id="LC8855" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Ensure buffer has enough space to hold the bytes.</span></td>
      </tr>
      <tr>
        <td id="L8856" class="blob-num js-line-number" data-line-number="8856"></td>
        <td id="LC8856" class="blob-code blob-code-inner js-file-line">    buffer.<span class="pl-c1">reserve</span>(bytesToReadFromStream);</td>
      </tr>
      <tr>
        <td id="L8857" class="blob-num js-line-number" data-line-number="8857"></td>
        <td id="LC8857" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8858" class="blob-num js-line-number" data-line-number="8858"></td>
        <td id="LC8858" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">while</span> ((<span class="pl-c1">0</span> &lt; bytesToReadFromStream) &amp;&amp; in.<span class="pl-c1">good</span>()) {</td>
      </tr>
      <tr>
        <td id="L8859" class="blob-num js-line-number" data-line-number="8859"></td>
        <td id="LC8859" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> clang-format off</span></td>
      </tr>
      <tr>
        <td id="L8860" class="blob-num js-line-number" data-line-number="8860"></td>
        <td id="LC8860" class="blob-code blob-code-inner js-file-line">        in.<span class="pl-c1">read</span>(&amp;buffer[<span class="pl-k">static_cast</span>&lt;std::<span class="pl-c1">size_t</span>&gt;(bufferPosition)], <span class="pl-c"><span class="pl-c">/*</span> Flawfinder: ignore <span class="pl-c">*/</span></span> <span class="pl-c"><span class="pl-c">/*</span> Cf. buffer.reserve(...) above.  <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L8861" class="blob-num js-line-number" data-line-number="8861"></td>
        <td id="LC8861" class="blob-code blob-code-inner js-file-line">                (bytesToReadFromStream &gt; CHUNK_SIZE) ? CHUNK_SIZE : <span class="pl-k">static_cast</span>&lt;std::streamsize&gt;(bytesToReadFromStream));</td>
      </tr>
      <tr>
        <td id="L8862" class="blob-num js-line-number" data-line-number="8862"></td>
        <td id="LC8862" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> clang-format on</span></td>
      </tr>
      <tr>
        <td id="L8863" class="blob-num js-line-number" data-line-number="8863"></td>
        <td id="LC8863" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> std::streamsize EXTRACTED_BYTES{in.<span class="pl-c1">gcount</span>()};</td>
      </tr>
      <tr>
        <td id="L8864" class="blob-num js-line-number" data-line-number="8864"></td>
        <td id="LC8864" class="blob-code blob-code-inner js-file-line">        bufferPosition += EXTRACTED_BYTES;</td>
      </tr>
      <tr>
        <td id="L8865" class="blob-num js-line-number" data-line-number="8865"></td>
        <td id="LC8865" class="blob-code blob-code-inner js-file-line">        bytesToReadFromStream -= <span class="pl-k">static_cast</span>&lt;std::<span class="pl-c1">size_t</span>&gt;(EXTRACTED_BYTES);</td>
      </tr>
      <tr>
        <td id="L8866" class="blob-num js-line-number" data-line-number="8866"></td>
        <td id="LC8866" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L8867" class="blob-num js-line-number" data-line-number="8867"></td>
        <td id="LC8867" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L8868" class="blob-num js-line-number" data-line-number="8868"></td>
        <td id="LC8868" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8869" class="blob-num js-line-number" data-line-number="8869"></td>
        <td id="LC8869" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromProtoVisitor::decodeFrom</span>(std::istream &amp;in) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L8870" class="blob-num js-line-number" data-line-number="8870"></td>
        <td id="LC8870" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Reset internal states as this deserializer could be reused.</span></td>
      </tr>
      <tr>
        <td id="L8871" class="blob-num js-line-number" data-line-number="8871"></td>
        <td id="LC8871" class="blob-code blob-code-inner js-file-line">    m_buffer.<span class="pl-c1">str</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L8872" class="blob-num js-line-number" data-line-number="8872"></td>
        <td id="LC8872" class="blob-code blob-code-inner js-file-line">    m_mapOfKeyValues.<span class="pl-c1">clear</span>();</td>
      </tr>
      <tr>
        <td id="L8873" class="blob-num js-line-number" data-line-number="8873"></td>
        <td id="LC8873" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8874" class="blob-num js-line-number" data-line-number="8874"></td>
        <td id="LC8874" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">while</span> (in.<span class="pl-c1">good</span>()) {</td>
      </tr>
      <tr>
        <td id="L8875" class="blob-num js-line-number" data-line-number="8875"></td>
        <td id="LC8875" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> First stage: Read keyFieldType (encoded as VarInt).</span></td>
      </tr>
      <tr>
        <td id="L8876" class="blob-num js-line-number" data-line-number="8876"></td>
        <td id="LC8876" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">uint64_t</span> keyFieldType{<span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L8877" class="blob-num js-line-number" data-line-number="8877"></td>
        <td id="LC8877" class="blob-code blob-code-inner js-file-line">        std::<span class="pl-c1">size_t</span> bytesRead{<span class="pl-c1">fromVarInt</span>(in, keyFieldType)};</td>
      </tr>
      <tr>
        <td id="L8878" class="blob-num js-line-number" data-line-number="8878"></td>
        <td id="LC8878" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8879" class="blob-num js-line-number" data-line-number="8879"></td>
        <td id="LC8879" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (bytesRead &gt; <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L8880" class="blob-num js-line-number" data-line-number="8880"></td>
        <td id="LC8880" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> Succeeded to read keyFieldType entry; extract information.</span></td>
      </tr>
      <tr>
        <td id="L8881" class="blob-num js-line-number" data-line-number="8881"></td>
        <td id="LC8881" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">const</span> <span class="pl-c1">uint32_t</span> fieldId{<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint32_t</span>&gt;(keyFieldType &gt;&gt; <span class="pl-c1">3</span>)};</td>
      </tr>
      <tr>
        <td id="L8882" class="blob-num js-line-number" data-line-number="8882"></td>
        <td id="LC8882" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">const</span> ProtoConstants protoType{<span class="pl-k">static_cast</span>&lt;ProtoConstants&gt;(keyFieldType &amp; <span class="pl-c1">0x7</span>)};</td>
      </tr>
      <tr>
        <td id="L8883" class="blob-num js-line-number" data-line-number="8883"></td>
        <td id="LC8883" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8884" class="blob-num js-line-number" data-line-number="8884"></td>
        <td id="LC8884" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (protoType == ProtoConstants::VARINT) {</td>
      </tr>
      <tr>
        <td id="L8885" class="blob-num js-line-number" data-line-number="8885"></td>
        <td id="LC8885" class="blob-code blob-code-inner js-file-line">                <span class="pl-c"><span class="pl-c">//</span> Directly decode VarInt value.</span></td>
      </tr>
      <tr>
        <td id="L8886" class="blob-num js-line-number" data-line-number="8886"></td>
        <td id="LC8886" class="blob-code blob-code-inner js-file-line">                <span class="pl-c1">uint64_t</span> value{<span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L8887" class="blob-num js-line-number" data-line-number="8887"></td>
        <td id="LC8887" class="blob-code blob-code-inner js-file-line">                <span class="pl-c1">fromVarInt</span>(in, value);</td>
      </tr>
      <tr>
        <td id="L8888" class="blob-num js-line-number" data-line-number="8888"></td>
        <td id="LC8888" class="blob-code blob-code-inner js-file-line">                ProtoKeyValue pkv{fieldId, value};</td>
      </tr>
      <tr>
        <td id="L8889" class="blob-num js-line-number" data-line-number="8889"></td>
        <td id="LC8889" class="blob-code blob-code-inner js-file-line">                m_mapOfKeyValues[pkv.<span class="pl-c1">key</span>()] = <span class="pl-c1">std::move</span>(pkv);</td>
      </tr>
      <tr>
        <td id="L8890" class="blob-num js-line-number" data-line-number="8890"></td>
        <td id="LC8890" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> <span class="pl-k">if</span> (protoType == ProtoConstants::EIGHT_BYTES) {</td>
      </tr>
      <tr>
        <td id="L8891" class="blob-num js-line-number" data-line-number="8891"></td>
        <td id="LC8891" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">constexpr</span> std::<span class="pl-c1">size_t</span> BYTES_TO_READ_FROM_STREAM{<span class="pl-k">sizeof</span>(<span class="pl-k">double</span>)};</td>
      </tr>
      <tr>
        <td id="L8892" class="blob-num js-line-number" data-line-number="8892"></td>
        <td id="LC8892" class="blob-code blob-code-inner js-file-line">                <span class="pl-c"><span class="pl-c">//</span> Create map entry for Proto key/value here to avoid copying data later.</span></td>
      </tr>
      <tr>
        <td id="L8893" class="blob-num js-line-number" data-line-number="8893"></td>
        <td id="LC8893" class="blob-code blob-code-inner js-file-line">                ProtoKeyValue pkv{fieldId, ProtoConstants::EIGHT_BYTES, BYTES_TO_READ_FROM_STREAM};</td>
      </tr>
      <tr>
        <td id="L8894" class="blob-num js-line-number" data-line-number="8894"></td>
        <td id="LC8894" class="blob-code blob-code-inner js-file-line">                <span class="pl-c1">readBytesFromStream</span>(in, BYTES_TO_READ_FROM_STREAM, pkv.<span class="pl-c1">rawBuffer</span>());</td>
      </tr>
      <tr>
        <td id="L8895" class="blob-num js-line-number" data-line-number="8895"></td>
        <td id="LC8895" class="blob-code blob-code-inner js-file-line">                m_mapOfKeyValues[pkv.<span class="pl-c1">key</span>()] = <span class="pl-c1">std::move</span>(pkv);</td>
      </tr>
      <tr>
        <td id="L8896" class="blob-num js-line-number" data-line-number="8896"></td>
        <td id="LC8896" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> <span class="pl-k">if</span> (protoType == ProtoConstants::LENGTH_DELIMITED) {</td>
      </tr>
      <tr>
        <td id="L8897" class="blob-num js-line-number" data-line-number="8897"></td>
        <td id="LC8897" class="blob-code blob-code-inner js-file-line">                <span class="pl-c1">uint64_t</span> length{<span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L8898" class="blob-num js-line-number" data-line-number="8898"></td>
        <td id="LC8898" class="blob-code blob-code-inner js-file-line">                <span class="pl-c1">fromVarInt</span>(in, length);</td>
      </tr>
      <tr>
        <td id="L8899" class="blob-num js-line-number" data-line-number="8899"></td>
        <td id="LC8899" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">const</span> std::<span class="pl-c1">size_t</span> BYTES_TO_READ_FROM_STREAM{<span class="pl-k">static_cast</span>&lt;std::<span class="pl-c1">size_t</span>&gt;(length)};</td>
      </tr>
      <tr>
        <td id="L8900" class="blob-num js-line-number" data-line-number="8900"></td>
        <td id="LC8900" class="blob-code blob-code-inner js-file-line">                <span class="pl-c"><span class="pl-c">//</span> Create map entry for Proto key/value here to avoid copying data later.</span></td>
      </tr>
      <tr>
        <td id="L8901" class="blob-num js-line-number" data-line-number="8901"></td>
        <td id="LC8901" class="blob-code blob-code-inner js-file-line">                ProtoKeyValue pkv{fieldId, ProtoConstants::LENGTH_DELIMITED, BYTES_TO_READ_FROM_STREAM};</td>
      </tr>
      <tr>
        <td id="L8902" class="blob-num js-line-number" data-line-number="8902"></td>
        <td id="LC8902" class="blob-code blob-code-inner js-file-line">                <span class="pl-c1">readBytesFromStream</span>(in, BYTES_TO_READ_FROM_STREAM, pkv.<span class="pl-c1">rawBuffer</span>());</td>
      </tr>
      <tr>
        <td id="L8903" class="blob-num js-line-number" data-line-number="8903"></td>
        <td id="LC8903" class="blob-code blob-code-inner js-file-line">                m_mapOfKeyValues[pkv.<span class="pl-c1">key</span>()] = <span class="pl-c1">std::move</span>(pkv);</td>
      </tr>
      <tr>
        <td id="L8904" class="blob-num js-line-number" data-line-number="8904"></td>
        <td id="LC8904" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> <span class="pl-k">if</span> (protoType == ProtoConstants::FOUR_BYTES) {</td>
      </tr>
      <tr>
        <td id="L8905" class="blob-num js-line-number" data-line-number="8905"></td>
        <td id="LC8905" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">constexpr</span> std::<span class="pl-c1">size_t</span> BYTES_TO_READ_FROM_STREAM{<span class="pl-k">sizeof</span>(<span class="pl-k">float</span>)};</td>
      </tr>
      <tr>
        <td id="L8906" class="blob-num js-line-number" data-line-number="8906"></td>
        <td id="LC8906" class="blob-code blob-code-inner js-file-line">                <span class="pl-c"><span class="pl-c">//</span> Create map entry for Proto key/value here to avoid copying data later.</span></td>
      </tr>
      <tr>
        <td id="L8907" class="blob-num js-line-number" data-line-number="8907"></td>
        <td id="LC8907" class="blob-code blob-code-inner js-file-line">                ProtoKeyValue pkv{fieldId, ProtoConstants::FOUR_BYTES, BYTES_TO_READ_FROM_STREAM};</td>
      </tr>
      <tr>
        <td id="L8908" class="blob-num js-line-number" data-line-number="8908"></td>
        <td id="LC8908" class="blob-code blob-code-inner js-file-line">                <span class="pl-c1">readBytesFromStream</span>(in, BYTES_TO_READ_FROM_STREAM, pkv.<span class="pl-c1">rawBuffer</span>());</td>
      </tr>
      <tr>
        <td id="L8909" class="blob-num js-line-number" data-line-number="8909"></td>
        <td id="LC8909" class="blob-code blob-code-inner js-file-line">                m_mapOfKeyValues[pkv.<span class="pl-c1">key</span>()] = <span class="pl-c1">std::move</span>(pkv);</td>
      </tr>
      <tr>
        <td id="L8910" class="blob-num js-line-number" data-line-number="8910"></td>
        <td id="LC8910" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L8911" class="blob-num js-line-number" data-line-number="8911"></td>
        <td id="LC8911" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L8912" class="blob-num js-line-number" data-line-number="8912"></td>
        <td id="LC8912" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L8913" class="blob-num js-line-number" data-line-number="8913"></td>
        <td id="LC8913" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L8914" class="blob-num js-line-number" data-line-number="8914"></td>
        <td id="LC8914" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8915" class="blob-num js-line-number" data-line-number="8915"></td>
        <td id="LC8915" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>//////////////////////////////////////////////////////////////////////////////</span></td>
      </tr>
      <tr>
        <td id="L8916" class="blob-num js-line-number" data-line-number="8916"></td>
        <td id="LC8916" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8917" class="blob-num js-line-number" data-line-number="8917"></td>
        <td id="LC8917" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-en">FromProtoVisitor::ProtoKeyValue::ProtoKeyValue</span>() <span class="pl-k">noexcept</span></td>
      </tr>
      <tr>
        <td id="L8918" class="blob-num js-line-number" data-line-number="8918"></td>
        <td id="LC8918" class="blob-code blob-code-inner js-file-line">    : m_key{<span class="pl-c1">0</span>}</td>
      </tr>
      <tr>
        <td id="L8919" class="blob-num js-line-number" data-line-number="8919"></td>
        <td id="LC8919" class="blob-code blob-code-inner js-file-line">    , m_type{ProtoConstants::VARINT}</td>
      </tr>
      <tr>
        <td id="L8920" class="blob-num js-line-number" data-line-number="8920"></td>
        <td id="LC8920" class="blob-code blob-code-inner js-file-line">    , m_length{<span class="pl-c1">0</span>}</td>
      </tr>
      <tr>
        <td id="L8921" class="blob-num js-line-number" data-line-number="8921"></td>
        <td id="LC8921" class="blob-code blob-code-inner js-file-line">    , m_value{}</td>
      </tr>
      <tr>
        <td id="L8922" class="blob-num js-line-number" data-line-number="8922"></td>
        <td id="LC8922" class="blob-code blob-code-inner js-file-line">    , m_varIntValue{<span class="pl-c1">0</span>} {}</td>
      </tr>
      <tr>
        <td id="L8923" class="blob-num js-line-number" data-line-number="8923"></td>
        <td id="LC8923" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8924" class="blob-num js-line-number" data-line-number="8924"></td>
        <td id="LC8924" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-en">FromProtoVisitor::ProtoKeyValue::ProtoKeyValue</span>(<span class="pl-c1">uint32_t</span> key, ProtoConstants type, <span class="pl-c1">uint64_t</span> length) <span class="pl-k">noexcept</span></td>
      </tr>
      <tr>
        <td id="L8925" class="blob-num js-line-number" data-line-number="8925"></td>
        <td id="LC8925" class="blob-code blob-code-inner js-file-line">    : m_key{key}</td>
      </tr>
      <tr>
        <td id="L8926" class="blob-num js-line-number" data-line-number="8926"></td>
        <td id="LC8926" class="blob-code blob-code-inner js-file-line">    , m_type{type}</td>
      </tr>
      <tr>
        <td id="L8927" class="blob-num js-line-number" data-line-number="8927"></td>
        <td id="LC8927" class="blob-code blob-code-inner js-file-line">    , m_length{length}</td>
      </tr>
      <tr>
        <td id="L8928" class="blob-num js-line-number" data-line-number="8928"></td>
        <td id="LC8928" class="blob-code blob-code-inner js-file-line">    , m_value(<span class="pl-k">static_cast</span>&lt;std::<span class="pl-c1">size_t</span>&gt;(length))</td>
      </tr>
      <tr>
        <td id="L8929" class="blob-num js-line-number" data-line-number="8929"></td>
        <td id="LC8929" class="blob-code blob-code-inner js-file-line">    , m_varIntValue{<span class="pl-c1">0</span>} {}</td>
      </tr>
      <tr>
        <td id="L8930" class="blob-num js-line-number" data-line-number="8930"></td>
        <td id="LC8930" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8931" class="blob-num js-line-number" data-line-number="8931"></td>
        <td id="LC8931" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-en">FromProtoVisitor::ProtoKeyValue::ProtoKeyValue</span>(<span class="pl-c1">uint32_t</span> key, <span class="pl-c1">uint64_t</span> value) <span class="pl-k">noexcept</span></td>
      </tr>
      <tr>
        <td id="L8932" class="blob-num js-line-number" data-line-number="8932"></td>
        <td id="LC8932" class="blob-code blob-code-inner js-file-line">    : m_key{key}</td>
      </tr>
      <tr>
        <td id="L8933" class="blob-num js-line-number" data-line-number="8933"></td>
        <td id="LC8933" class="blob-code blob-code-inner js-file-line">    , m_type{ProtoConstants::VARINT}</td>
      </tr>
      <tr>
        <td id="L8934" class="blob-num js-line-number" data-line-number="8934"></td>
        <td id="LC8934" class="blob-code blob-code-inner js-file-line">    , m_length{<span class="pl-c1">0</span>}</td>
      </tr>
      <tr>
        <td id="L8935" class="blob-num js-line-number" data-line-number="8935"></td>
        <td id="LC8935" class="blob-code blob-code-inner js-file-line">    , m_value{}</td>
      </tr>
      <tr>
        <td id="L8936" class="blob-num js-line-number" data-line-number="8936"></td>
        <td id="LC8936" class="blob-code blob-code-inner js-file-line">    , m_varIntValue{value} {}</td>
      </tr>
      <tr>
        <td id="L8937" class="blob-num js-line-number" data-line-number="8937"></td>
        <td id="LC8937" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8938" class="blob-num js-line-number" data-line-number="8938"></td>
        <td id="LC8938" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-c1">uint32_t</span> <span class="pl-en">FromProtoVisitor::ProtoKeyValue::key</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L8939" class="blob-num js-line-number" data-line-number="8939"></td>
        <td id="LC8939" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> m_key;</td>
      </tr>
      <tr>
        <td id="L8940" class="blob-num js-line-number" data-line-number="8940"></td>
        <td id="LC8940" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L8941" class="blob-num js-line-number" data-line-number="8941"></td>
        <td id="LC8941" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8942" class="blob-num js-line-number" data-line-number="8942"></td>
        <td id="LC8942" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> ProtoConstants <span class="pl-en">FromProtoVisitor::ProtoKeyValue::type</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L8943" class="blob-num js-line-number" data-line-number="8943"></td>
        <td id="LC8943" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> m_type;</td>
      </tr>
      <tr>
        <td id="L8944" class="blob-num js-line-number" data-line-number="8944"></td>
        <td id="LC8944" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L8945" class="blob-num js-line-number" data-line-number="8945"></td>
        <td id="LC8945" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8946" class="blob-num js-line-number" data-line-number="8946"></td>
        <td id="LC8946" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-c1">uint64_t</span> <span class="pl-en">FromProtoVisitor::ProtoKeyValue::length</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L8947" class="blob-num js-line-number" data-line-number="8947"></td>
        <td id="LC8947" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> m_length;</td>
      </tr>
      <tr>
        <td id="L8948" class="blob-num js-line-number" data-line-number="8948"></td>
        <td id="LC8948" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L8949" class="blob-num js-line-number" data-line-number="8949"></td>
        <td id="LC8949" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8950" class="blob-num js-line-number" data-line-number="8950"></td>
        <td id="LC8950" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-c1">uint64_t</span> <span class="pl-en">FromProtoVisitor::ProtoKeyValue::valueAsVarInt</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L8951" class="blob-num js-line-number" data-line-number="8951"></td>
        <td id="LC8951" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">uint64_t</span> retVal{<span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L8952" class="blob-num js-line-number" data-line-number="8952"></td>
        <td id="LC8952" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-c1">type</span>() == ProtoConstants::VARINT) {</td>
      </tr>
      <tr>
        <td id="L8953" class="blob-num js-line-number" data-line-number="8953"></td>
        <td id="LC8953" class="blob-code blob-code-inner js-file-line">        retVal = m_varIntValue;</td>
      </tr>
      <tr>
        <td id="L8954" class="blob-num js-line-number" data-line-number="8954"></td>
        <td id="LC8954" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L8955" class="blob-num js-line-number" data-line-number="8955"></td>
        <td id="LC8955" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> retVal;</td>
      </tr>
      <tr>
        <td id="L8956" class="blob-num js-line-number" data-line-number="8956"></td>
        <td id="LC8956" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L8957" class="blob-num js-line-number" data-line-number="8957"></td>
        <td id="LC8957" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8958" class="blob-num js-line-number" data-line-number="8958"></td>
        <td id="LC8958" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">float</span> <span class="pl-en">FromProtoVisitor::ProtoKeyValue::valueAsFloat</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L8959" class="blob-num js-line-number" data-line-number="8959"></td>
        <td id="LC8959" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">float</span> retVal{<span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L8960" class="blob-num js-line-number" data-line-number="8960"></td>
        <td id="LC8960" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (!m_value.<span class="pl-c1">empty</span>() &amp;&amp; (<span class="pl-c1">length</span>() == <span class="pl-k">sizeof</span>(<span class="pl-k">float</span>)) &amp;&amp; (m_value.<span class="pl-c1">size</span>() == <span class="pl-k">sizeof</span>(<span class="pl-k">float</span>)) &amp;&amp; (<span class="pl-c1">type</span>() == ProtoConstants::FOUR_BYTES)) {</td>
      </tr>
      <tr>
        <td id="L8961" class="blob-num js-line-number" data-line-number="8961"></td>
        <td id="LC8961" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">std::memmove</span>(&amp;retVal, &amp;m_value[<span class="pl-c1">0</span>], <span class="pl-k">sizeof</span>(<span class="pl-k">float</span>));</td>
      </tr>
      <tr>
        <td id="L8962" class="blob-num js-line-number" data-line-number="8962"></td>
        <td id="LC8962" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L8963" class="blob-num js-line-number" data-line-number="8963"></td>
        <td id="LC8963" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> retVal;</td>
      </tr>
      <tr>
        <td id="L8964" class="blob-num js-line-number" data-line-number="8964"></td>
        <td id="LC8964" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L8965" class="blob-num js-line-number" data-line-number="8965"></td>
        <td id="LC8965" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8966" class="blob-num js-line-number" data-line-number="8966"></td>
        <td id="LC8966" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">double</span> <span class="pl-en">FromProtoVisitor::ProtoKeyValue::valueAsDouble</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L8967" class="blob-num js-line-number" data-line-number="8967"></td>
        <td id="LC8967" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">double</span> retVal{<span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L8968" class="blob-num js-line-number" data-line-number="8968"></td>
        <td id="LC8968" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (!m_value.<span class="pl-c1">empty</span>() &amp;&amp; (<span class="pl-c1">length</span>() == <span class="pl-k">sizeof</span>(<span class="pl-k">double</span>)) &amp;&amp; (m_value.<span class="pl-c1">size</span>() == <span class="pl-k">sizeof</span>(<span class="pl-k">double</span>)) &amp;&amp; (<span class="pl-c1">type</span>() == ProtoConstants::EIGHT_BYTES)) {</td>
      </tr>
      <tr>
        <td id="L8969" class="blob-num js-line-number" data-line-number="8969"></td>
        <td id="LC8969" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">std::memmove</span>(&amp;retVal, &amp;m_value[<span class="pl-c1">0</span>], <span class="pl-k">sizeof</span>(<span class="pl-k">double</span>));</td>
      </tr>
      <tr>
        <td id="L8970" class="blob-num js-line-number" data-line-number="8970"></td>
        <td id="LC8970" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L8971" class="blob-num js-line-number" data-line-number="8971"></td>
        <td id="LC8971" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> retVal;</td>
      </tr>
      <tr>
        <td id="L8972" class="blob-num js-line-number" data-line-number="8972"></td>
        <td id="LC8972" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L8973" class="blob-num js-line-number" data-line-number="8973"></td>
        <td id="LC8973" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8974" class="blob-num js-line-number" data-line-number="8974"></td>
        <td id="LC8974" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::string <span class="pl-en">FromProtoVisitor::ProtoKeyValue::valueAsString</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L8975" class="blob-num js-line-number" data-line-number="8975"></td>
        <td id="LC8975" class="blob-code blob-code-inner js-file-line">    std::string retVal;</td>
      </tr>
      <tr>
        <td id="L8976" class="blob-num js-line-number" data-line-number="8976"></td>
        <td id="LC8976" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (!m_value.<span class="pl-c1">empty</span>() &amp;&amp; (<span class="pl-c1">length</span>() &gt; <span class="pl-c1">0</span>) &amp;&amp; (<span class="pl-c1">type</span>() == ProtoConstants::LENGTH_DELIMITED)) {</td>
      </tr>
      <tr>
        <td id="L8977" class="blob-num js-line-number" data-line-number="8977"></td>
        <td id="LC8977" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> Create string from buffer.</span></td>
      </tr>
      <tr>
        <td id="L8978" class="blob-num js-line-number" data-line-number="8978"></td>
        <td id="LC8978" class="blob-code blob-code-inner js-file-line">        retVal = <span class="pl-c1">std::string</span>(m_value.<span class="pl-c1">data</span>(), <span class="pl-k">static_cast</span>&lt;std::<span class="pl-c1">size_t</span>&gt;(m_length));</td>
      </tr>
      <tr>
        <td id="L8979" class="blob-num js-line-number" data-line-number="8979"></td>
        <td id="LC8979" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L8980" class="blob-num js-line-number" data-line-number="8980"></td>
        <td id="LC8980" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> retVal;</td>
      </tr>
      <tr>
        <td id="L8981" class="blob-num js-line-number" data-line-number="8981"></td>
        <td id="LC8981" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L8982" class="blob-num js-line-number" data-line-number="8982"></td>
        <td id="LC8982" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8983" class="blob-num js-line-number" data-line-number="8983"></td>
        <td id="LC8983" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::vector&lt;<span class="pl-k">char</span>&gt; &amp;<span class="pl-en">FromProtoVisitor::ProtoKeyValue::rawBuffer</span>() <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L8984" class="blob-num js-line-number" data-line-number="8984"></td>
        <td id="LC8984" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> m_value;</td>
      </tr>
      <tr>
        <td id="L8985" class="blob-num js-line-number" data-line-number="8985"></td>
        <td id="LC8985" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L8986" class="blob-num js-line-number" data-line-number="8986"></td>
        <td id="LC8986" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8987" class="blob-num js-line-number" data-line-number="8987"></td>
        <td id="LC8987" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>//////////////////////////////////////////////////////////////////////////////</span></td>
      </tr>
      <tr>
        <td id="L8988" class="blob-num js-line-number" data-line-number="8988"></td>
        <td id="LC8988" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8989" class="blob-num js-line-number" data-line-number="8989"></td>
        <td id="LC8989" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> FromProtoVisitor &amp;FromProtoVisitor::<span class="pl-k">operator</span>=(<span class="pl-k">const</span> FromProtoVisitor &amp;other) noexcept {</td>
      </tr>
      <tr>
        <td id="L8990" class="blob-num js-line-number" data-line-number="8990"></td>
        <td id="LC8990" class="blob-code blob-code-inner js-file-line">    m_buffer.<span class="pl-c1">str</span>(other.<span class="pl-smi">m_buffer</span>.<span class="pl-c1">str</span>());</td>
      </tr>
      <tr>
        <td id="L8991" class="blob-num js-line-number" data-line-number="8991"></td>
        <td id="LC8991" class="blob-code blob-code-inner js-file-line">    m_mapOfKeyValues = other.<span class="pl-smi">m_mapOfKeyValues</span>;</td>
      </tr>
      <tr>
        <td id="L8992" class="blob-num js-line-number" data-line-number="8992"></td>
        <td id="LC8992" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8993" class="blob-num js-line-number" data-line-number="8993"></td>
        <td id="LC8993" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> *<span class="pl-c1">this</span>;</td>
      </tr>
      <tr>
        <td id="L8994" class="blob-num js-line-number" data-line-number="8994"></td>
        <td id="LC8994" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L8995" class="blob-num js-line-number" data-line-number="8995"></td>
        <td id="LC8995" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8996" class="blob-num js-line-number" data-line-number="8996"></td>
        <td id="LC8996" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>//////////////////////////////////////////////////////////////////////////////</span></td>
      </tr>
      <tr>
        <td id="L8997" class="blob-num js-line-number" data-line-number="8997"></td>
        <td id="LC8997" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L8998" class="blob-num js-line-number" data-line-number="8998"></td>
        <td id="LC8998" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromProtoVisitor::preVisit</span>(<span class="pl-c1">int32_t</span> id, <span class="pl-k">const</span> std::string &amp;shortName, <span class="pl-k">const</span> std::string &amp;longName) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L8999" class="blob-num js-line-number" data-line-number="8999"></td>
        <td id="LC8999" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L9000" class="blob-num js-line-number" data-line-number="9000"></td>
        <td id="LC9000" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)shortName;</td>
      </tr>
      <tr>
        <td id="L9001" class="blob-num js-line-number" data-line-number="9001"></td>
        <td id="LC9001" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)longName;</td>
      </tr>
      <tr>
        <td id="L9002" class="blob-num js-line-number" data-line-number="9002"></td>
        <td id="LC9002" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L9003" class="blob-num js-line-number" data-line-number="9003"></td>
        <td id="LC9003" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9004" class="blob-num js-line-number" data-line-number="9004"></td>
        <td id="LC9004" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromProtoVisitor::postVisit</span>() <span class="pl-k">noexcept</span> {}</td>
      </tr>
      <tr>
        <td id="L9005" class="blob-num js-line-number" data-line-number="9005"></td>
        <td id="LC9005" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9006" class="blob-num js-line-number" data-line-number="9006"></td>
        <td id="LC9006" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromProtoVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">bool</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L9007" class="blob-num js-line-number" data-line-number="9007"></td>
        <td id="LC9007" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L9008" class="blob-num js-line-number" data-line-number="9008"></td>
        <td id="LC9008" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)name;</td>
      </tr>
      <tr>
        <td id="L9009" class="blob-num js-line-number" data-line-number="9009"></td>
        <td id="LC9009" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (m_mapOfKeyValues.<span class="pl-c1">count</span>(id) &gt; <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L9010" class="blob-num js-line-number" data-line-number="9010"></td>
        <td id="LC9010" class="blob-code blob-code-inner js-file-line">        v = (<span class="pl-c1">0</span> != m_mapOfKeyValues[id].<span class="pl-c1">valueAsVarInt</span>());</td>
      </tr>
      <tr>
        <td id="L9011" class="blob-num js-line-number" data-line-number="9011"></td>
        <td id="LC9011" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L9012" class="blob-num js-line-number" data-line-number="9012"></td>
        <td id="LC9012" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L9013" class="blob-num js-line-number" data-line-number="9013"></td>
        <td id="LC9013" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9014" class="blob-num js-line-number" data-line-number="9014"></td>
        <td id="LC9014" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromProtoVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">char</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L9015" class="blob-num js-line-number" data-line-number="9015"></td>
        <td id="LC9015" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L9016" class="blob-num js-line-number" data-line-number="9016"></td>
        <td id="LC9016" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)name;</td>
      </tr>
      <tr>
        <td id="L9017" class="blob-num js-line-number" data-line-number="9017"></td>
        <td id="LC9017" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (m_mapOfKeyValues.<span class="pl-c1">count</span>(id) &gt; <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L9018" class="blob-num js-line-number" data-line-number="9018"></td>
        <td id="LC9018" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">uint64_t</span> _v = m_mapOfKeyValues[id].<span class="pl-c1">valueAsVarInt</span>();</td>
      </tr>
      <tr>
        <td id="L9019" class="blob-num js-line-number" data-line-number="9019"></td>
        <td id="LC9019" class="blob-code blob-code-inner js-file-line">        v           = <span class="pl-k">static_cast</span>&lt;<span class="pl-k">char</span>&gt;(_v);</td>
      </tr>
      <tr>
        <td id="L9020" class="blob-num js-line-number" data-line-number="9020"></td>
        <td id="LC9020" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L9021" class="blob-num js-line-number" data-line-number="9021"></td>
        <td id="LC9021" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L9022" class="blob-num js-line-number" data-line-number="9022"></td>
        <td id="LC9022" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9023" class="blob-num js-line-number" data-line-number="9023"></td>
        <td id="LC9023" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromProtoVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int8_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L9024" class="blob-num js-line-number" data-line-number="9024"></td>
        <td id="LC9024" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L9025" class="blob-num js-line-number" data-line-number="9025"></td>
        <td id="LC9025" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)name;</td>
      </tr>
      <tr>
        <td id="L9026" class="blob-num js-line-number" data-line-number="9026"></td>
        <td id="LC9026" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (m_mapOfKeyValues.<span class="pl-c1">count</span>(id) &gt; <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L9027" class="blob-num js-line-number" data-line-number="9027"></td>
        <td id="LC9027" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">uint64_t</span> _v = m_mapOfKeyValues[id].<span class="pl-c1">valueAsVarInt</span>();</td>
      </tr>
      <tr>
        <td id="L9028" class="blob-num js-line-number" data-line-number="9028"></td>
        <td id="LC9028" class="blob-code blob-code-inner js-file-line">        v           = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int8_t</span>&gt;(<span class="pl-c1">fromZigZag8</span>(<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(_v)));</td>
      </tr>
      <tr>
        <td id="L9029" class="blob-num js-line-number" data-line-number="9029"></td>
        <td id="LC9029" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L9030" class="blob-num js-line-number" data-line-number="9030"></td>
        <td id="LC9030" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L9031" class="blob-num js-line-number" data-line-number="9031"></td>
        <td id="LC9031" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9032" class="blob-num js-line-number" data-line-number="9032"></td>
        <td id="LC9032" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromProtoVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint8_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L9033" class="blob-num js-line-number" data-line-number="9033"></td>
        <td id="LC9033" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L9034" class="blob-num js-line-number" data-line-number="9034"></td>
        <td id="LC9034" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)name;</td>
      </tr>
      <tr>
        <td id="L9035" class="blob-num js-line-number" data-line-number="9035"></td>
        <td id="LC9035" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (m_mapOfKeyValues.<span class="pl-c1">count</span>(id) &gt; <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L9036" class="blob-num js-line-number" data-line-number="9036"></td>
        <td id="LC9036" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">uint64_t</span> _v = m_mapOfKeyValues[id].<span class="pl-c1">valueAsVarInt</span>();</td>
      </tr>
      <tr>
        <td id="L9037" class="blob-num js-line-number" data-line-number="9037"></td>
        <td id="LC9037" class="blob-code blob-code-inner js-file-line">        v           = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(_v);</td>
      </tr>
      <tr>
        <td id="L9038" class="blob-num js-line-number" data-line-number="9038"></td>
        <td id="LC9038" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L9039" class="blob-num js-line-number" data-line-number="9039"></td>
        <td id="LC9039" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L9040" class="blob-num js-line-number" data-line-number="9040"></td>
        <td id="LC9040" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9041" class="blob-num js-line-number" data-line-number="9041"></td>
        <td id="LC9041" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromProtoVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int16_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L9042" class="blob-num js-line-number" data-line-number="9042"></td>
        <td id="LC9042" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L9043" class="blob-num js-line-number" data-line-number="9043"></td>
        <td id="LC9043" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)name;</td>
      </tr>
      <tr>
        <td id="L9044" class="blob-num js-line-number" data-line-number="9044"></td>
        <td id="LC9044" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (m_mapOfKeyValues.<span class="pl-c1">count</span>(id) &gt; <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L9045" class="blob-num js-line-number" data-line-number="9045"></td>
        <td id="LC9045" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">uint64_t</span> _v = m_mapOfKeyValues[id].<span class="pl-c1">valueAsVarInt</span>();</td>
      </tr>
      <tr>
        <td id="L9046" class="blob-num js-line-number" data-line-number="9046"></td>
        <td id="LC9046" class="blob-code blob-code-inner js-file-line">        v           = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int16_t</span>&gt;(<span class="pl-c1">fromZigZag16</span>(<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint16_t</span>&gt;(_v)));</td>
      </tr>
      <tr>
        <td id="L9047" class="blob-num js-line-number" data-line-number="9047"></td>
        <td id="LC9047" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L9048" class="blob-num js-line-number" data-line-number="9048"></td>
        <td id="LC9048" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L9049" class="blob-num js-line-number" data-line-number="9049"></td>
        <td id="LC9049" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9050" class="blob-num js-line-number" data-line-number="9050"></td>
        <td id="LC9050" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromProtoVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint16_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L9051" class="blob-num js-line-number" data-line-number="9051"></td>
        <td id="LC9051" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L9052" class="blob-num js-line-number" data-line-number="9052"></td>
        <td id="LC9052" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)name;</td>
      </tr>
      <tr>
        <td id="L9053" class="blob-num js-line-number" data-line-number="9053"></td>
        <td id="LC9053" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (m_mapOfKeyValues.<span class="pl-c1">count</span>(id) &gt; <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L9054" class="blob-num js-line-number" data-line-number="9054"></td>
        <td id="LC9054" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">uint64_t</span> _v = m_mapOfKeyValues[id].<span class="pl-c1">valueAsVarInt</span>();</td>
      </tr>
      <tr>
        <td id="L9055" class="blob-num js-line-number" data-line-number="9055"></td>
        <td id="LC9055" class="blob-code blob-code-inner js-file-line">        v           = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint16_t</span>&gt;(_v);</td>
      </tr>
      <tr>
        <td id="L9056" class="blob-num js-line-number" data-line-number="9056"></td>
        <td id="LC9056" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L9057" class="blob-num js-line-number" data-line-number="9057"></td>
        <td id="LC9057" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L9058" class="blob-num js-line-number" data-line-number="9058"></td>
        <td id="LC9058" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9059" class="blob-num js-line-number" data-line-number="9059"></td>
        <td id="LC9059" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromProtoVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int32_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L9060" class="blob-num js-line-number" data-line-number="9060"></td>
        <td id="LC9060" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L9061" class="blob-num js-line-number" data-line-number="9061"></td>
        <td id="LC9061" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)name;</td>
      </tr>
      <tr>
        <td id="L9062" class="blob-num js-line-number" data-line-number="9062"></td>
        <td id="LC9062" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (m_mapOfKeyValues.<span class="pl-c1">count</span>(id) &gt; <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L9063" class="blob-num js-line-number" data-line-number="9063"></td>
        <td id="LC9063" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">uint64_t</span> _v = m_mapOfKeyValues[id].<span class="pl-c1">valueAsVarInt</span>();</td>
      </tr>
      <tr>
        <td id="L9064" class="blob-num js-line-number" data-line-number="9064"></td>
        <td id="LC9064" class="blob-code blob-code-inner js-file-line">        v           = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int32_t</span>&gt;(<span class="pl-c1">fromZigZag32</span>(<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint32_t</span>&gt;(_v)));</td>
      </tr>
      <tr>
        <td id="L9065" class="blob-num js-line-number" data-line-number="9065"></td>
        <td id="LC9065" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L9066" class="blob-num js-line-number" data-line-number="9066"></td>
        <td id="LC9066" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L9067" class="blob-num js-line-number" data-line-number="9067"></td>
        <td id="LC9067" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9068" class="blob-num js-line-number" data-line-number="9068"></td>
        <td id="LC9068" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromProtoVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint32_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L9069" class="blob-num js-line-number" data-line-number="9069"></td>
        <td id="LC9069" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L9070" class="blob-num js-line-number" data-line-number="9070"></td>
        <td id="LC9070" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)name;</td>
      </tr>
      <tr>
        <td id="L9071" class="blob-num js-line-number" data-line-number="9071"></td>
        <td id="LC9071" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (m_mapOfKeyValues.<span class="pl-c1">count</span>(id) &gt; <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L9072" class="blob-num js-line-number" data-line-number="9072"></td>
        <td id="LC9072" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">uint64_t</span> _v = m_mapOfKeyValues[id].<span class="pl-c1">valueAsVarInt</span>();</td>
      </tr>
      <tr>
        <td id="L9073" class="blob-num js-line-number" data-line-number="9073"></td>
        <td id="LC9073" class="blob-code blob-code-inner js-file-line">        v           = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint32_t</span>&gt;(_v);</td>
      </tr>
      <tr>
        <td id="L9074" class="blob-num js-line-number" data-line-number="9074"></td>
        <td id="LC9074" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L9075" class="blob-num js-line-number" data-line-number="9075"></td>
        <td id="LC9075" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L9076" class="blob-num js-line-number" data-line-number="9076"></td>
        <td id="LC9076" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9077" class="blob-num js-line-number" data-line-number="9077"></td>
        <td id="LC9077" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromProtoVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int64_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L9078" class="blob-num js-line-number" data-line-number="9078"></td>
        <td id="LC9078" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L9079" class="blob-num js-line-number" data-line-number="9079"></td>
        <td id="LC9079" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)name;</td>
      </tr>
      <tr>
        <td id="L9080" class="blob-num js-line-number" data-line-number="9080"></td>
        <td id="LC9080" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (m_mapOfKeyValues.<span class="pl-c1">count</span>(id) &gt; <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L9081" class="blob-num js-line-number" data-line-number="9081"></td>
        <td id="LC9081" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">uint64_t</span> _v = m_mapOfKeyValues[id].<span class="pl-c1">valueAsVarInt</span>();</td>
      </tr>
      <tr>
        <td id="L9082" class="blob-num js-line-number" data-line-number="9082"></td>
        <td id="LC9082" class="blob-code blob-code-inner js-file-line">        v           = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int64_t</span>&gt;(<span class="pl-c1">fromZigZag64</span>(_v));</td>
      </tr>
      <tr>
        <td id="L9083" class="blob-num js-line-number" data-line-number="9083"></td>
        <td id="LC9083" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L9084" class="blob-num js-line-number" data-line-number="9084"></td>
        <td id="LC9084" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L9085" class="blob-num js-line-number" data-line-number="9085"></td>
        <td id="LC9085" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9086" class="blob-num js-line-number" data-line-number="9086"></td>
        <td id="LC9086" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromProtoVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint64_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L9087" class="blob-num js-line-number" data-line-number="9087"></td>
        <td id="LC9087" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L9088" class="blob-num js-line-number" data-line-number="9088"></td>
        <td id="LC9088" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)name;</td>
      </tr>
      <tr>
        <td id="L9089" class="blob-num js-line-number" data-line-number="9089"></td>
        <td id="LC9089" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (m_mapOfKeyValues.<span class="pl-c1">count</span>(id) &gt; <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L9090" class="blob-num js-line-number" data-line-number="9090"></td>
        <td id="LC9090" class="blob-code blob-code-inner js-file-line">        v = m_mapOfKeyValues[id].<span class="pl-c1">valueAsVarInt</span>();</td>
      </tr>
      <tr>
        <td id="L9091" class="blob-num js-line-number" data-line-number="9091"></td>
        <td id="LC9091" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L9092" class="blob-num js-line-number" data-line-number="9092"></td>
        <td id="LC9092" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L9093" class="blob-num js-line-number" data-line-number="9093"></td>
        <td id="LC9093" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9094" class="blob-num js-line-number" data-line-number="9094"></td>
        <td id="LC9094" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromProtoVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">float</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L9095" class="blob-num js-line-number" data-line-number="9095"></td>
        <td id="LC9095" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L9096" class="blob-num js-line-number" data-line-number="9096"></td>
        <td id="LC9096" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)name;</td>
      </tr>
      <tr>
        <td id="L9097" class="blob-num js-line-number" data-line-number="9097"></td>
        <td id="LC9097" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (m_mapOfKeyValues.<span class="pl-c1">count</span>(id) &gt; <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L9098" class="blob-num js-line-number" data-line-number="9098"></td>
        <td id="LC9098" class="blob-code blob-code-inner js-file-line">        v = m_mapOfKeyValues[id].<span class="pl-c1">valueAsFloat</span>();</td>
      </tr>
      <tr>
        <td id="L9099" class="blob-num js-line-number" data-line-number="9099"></td>
        <td id="LC9099" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L9100" class="blob-num js-line-number" data-line-number="9100"></td>
        <td id="LC9100" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L9101" class="blob-num js-line-number" data-line-number="9101"></td>
        <td id="LC9101" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9102" class="blob-num js-line-number" data-line-number="9102"></td>
        <td id="LC9102" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromProtoVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">double</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L9103" class="blob-num js-line-number" data-line-number="9103"></td>
        <td id="LC9103" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L9104" class="blob-num js-line-number" data-line-number="9104"></td>
        <td id="LC9104" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)name;</td>
      </tr>
      <tr>
        <td id="L9105" class="blob-num js-line-number" data-line-number="9105"></td>
        <td id="LC9105" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (m_mapOfKeyValues.<span class="pl-c1">count</span>(id) &gt; <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L9106" class="blob-num js-line-number" data-line-number="9106"></td>
        <td id="LC9106" class="blob-code blob-code-inner js-file-line">        v = m_mapOfKeyValues[id].<span class="pl-c1">valueAsDouble</span>();</td>
      </tr>
      <tr>
        <td id="L9107" class="blob-num js-line-number" data-line-number="9107"></td>
        <td id="LC9107" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L9108" class="blob-num js-line-number" data-line-number="9108"></td>
        <td id="LC9108" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L9109" class="blob-num js-line-number" data-line-number="9109"></td>
        <td id="LC9109" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9110" class="blob-num js-line-number" data-line-number="9110"></td>
        <td id="LC9110" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromProtoVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, std::string &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L9111" class="blob-num js-line-number" data-line-number="9111"></td>
        <td id="LC9111" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L9112" class="blob-num js-line-number" data-line-number="9112"></td>
        <td id="LC9112" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)name;</td>
      </tr>
      <tr>
        <td id="L9113" class="blob-num js-line-number" data-line-number="9113"></td>
        <td id="LC9113" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (m_mapOfKeyValues.<span class="pl-c1">count</span>(id) &gt; <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L9114" class="blob-num js-line-number" data-line-number="9114"></td>
        <td id="LC9114" class="blob-code blob-code-inner js-file-line">        v = m_mapOfKeyValues[id].<span class="pl-c1">valueAsString</span>();</td>
      </tr>
      <tr>
        <td id="L9115" class="blob-num js-line-number" data-line-number="9115"></td>
        <td id="LC9115" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L9116" class="blob-num js-line-number" data-line-number="9116"></td>
        <td id="LC9116" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L9117" class="blob-num js-line-number" data-line-number="9117"></td>
        <td id="LC9117" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9118" class="blob-num js-line-number" data-line-number="9118"></td>
        <td id="LC9118" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>//////////////////////////////////////////////////////////////////////////////</span></td>
      </tr>
      <tr>
        <td id="L9119" class="blob-num js-line-number" data-line-number="9119"></td>
        <td id="LC9119" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9120" class="blob-num js-line-number" data-line-number="9120"></td>
        <td id="LC9120" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-c1">int8_t</span> <span class="pl-en">FromProtoVisitor::fromZigZag8</span>(<span class="pl-c1">uint8_t</span> v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L9121" class="blob-num js-line-number" data-line-number="9121"></td>
        <td id="LC9121" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int8_t</span>&gt;((v &gt;&gt; <span class="pl-c1">1</span>) ^ -(v &amp; <span class="pl-c1">1</span>));</td>
      </tr>
      <tr>
        <td id="L9122" class="blob-num js-line-number" data-line-number="9122"></td>
        <td id="LC9122" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L9123" class="blob-num js-line-number" data-line-number="9123"></td>
        <td id="LC9123" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9124" class="blob-num js-line-number" data-line-number="9124"></td>
        <td id="LC9124" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-c1">int16_t</span> <span class="pl-en">FromProtoVisitor::fromZigZag16</span>(<span class="pl-c1">uint16_t</span> v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L9125" class="blob-num js-line-number" data-line-number="9125"></td>
        <td id="LC9125" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int16_t</span>&gt;((v &gt;&gt; <span class="pl-c1">1</span>) ^ -(v &amp; <span class="pl-c1">1</span>));</td>
      </tr>
      <tr>
        <td id="L9126" class="blob-num js-line-number" data-line-number="9126"></td>
        <td id="LC9126" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L9127" class="blob-num js-line-number" data-line-number="9127"></td>
        <td id="LC9127" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9128" class="blob-num js-line-number" data-line-number="9128"></td>
        <td id="LC9128" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-c1">int32_t</span> <span class="pl-en">FromProtoVisitor::fromZigZag32</span>(<span class="pl-c1">uint32_t</span> v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L9129" class="blob-num js-line-number" data-line-number="9129"></td>
        <td id="LC9129" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int32_t</span>&gt;((v &gt;&gt; <span class="pl-c1">1</span>) ^ -(v &amp; <span class="pl-c1">1</span>));</td>
      </tr>
      <tr>
        <td id="L9130" class="blob-num js-line-number" data-line-number="9130"></td>
        <td id="LC9130" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L9131" class="blob-num js-line-number" data-line-number="9131"></td>
        <td id="LC9131" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9132" class="blob-num js-line-number" data-line-number="9132"></td>
        <td id="LC9132" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-c1">int64_t</span> <span class="pl-en">FromProtoVisitor::fromZigZag64</span>(<span class="pl-c1">uint64_t</span> v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L9133" class="blob-num js-line-number" data-line-number="9133"></td>
        <td id="LC9133" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int64_t</span>&gt;((v &gt;&gt; <span class="pl-c1">1</span>) ^ -(v &amp; <span class="pl-c1">1</span>));</td>
      </tr>
      <tr>
        <td id="L9134" class="blob-num js-line-number" data-line-number="9134"></td>
        <td id="LC9134" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L9135" class="blob-num js-line-number" data-line-number="9135"></td>
        <td id="LC9135" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9136" class="blob-num js-line-number" data-line-number="9136"></td>
        <td id="LC9136" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::<span class="pl-c1">size_t</span> <span class="pl-en">FromProtoVisitor::fromVarInt</span>(std::istream &amp;in, <span class="pl-c1">uint64_t</span> &amp;value) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L9137" class="blob-num js-line-number" data-line-number="9137"></td>
        <td id="LC9137" class="blob-code blob-code-inner js-file-line">    value = <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L9138" class="blob-num js-line-number" data-line-number="9138"></td>
        <td id="LC9138" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9139" class="blob-num js-line-number" data-line-number="9139"></td>
        <td id="LC9139" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">constexpr</span> <span class="pl-c1">uint64_t</span> MASK  = <span class="pl-c1">0x7f</span>;</td>
      </tr>
      <tr>
        <td id="L9140" class="blob-num js-line-number" data-line-number="9140"></td>
        <td id="LC9140" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">constexpr</span> <span class="pl-c1">uint64_t</span> SHIFT = <span class="pl-c1">0x7</span>;</td>
      </tr>
      <tr>
        <td id="L9141" class="blob-num js-line-number" data-line-number="9141"></td>
        <td id="LC9141" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">constexpr</span> <span class="pl-c1">uint64_t</span> MSB   = <span class="pl-c1">0x80</span>;</td>
      </tr>
      <tr>
        <td id="L9142" class="blob-num js-line-number" data-line-number="9142"></td>
        <td id="LC9142" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9143" class="blob-num js-line-number" data-line-number="9143"></td>
        <td id="LC9143" class="blob-code blob-code-inner js-file-line">    std::<span class="pl-c1">size_t</span> size = <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L9144" class="blob-num js-line-number" data-line-number="9144"></td>
        <td id="LC9144" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">while</span> (in.<span class="pl-c1">good</span>()) {</td>
      </tr>
      <tr>
        <td id="L9145" class="blob-num js-line-number" data-line-number="9145"></td>
        <td id="LC9145" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> <span class="pl-k">auto</span> C     = in.<span class="pl-c1">get</span>();</td>
      </tr>
      <tr>
        <td id="L9146" class="blob-num js-line-number" data-line-number="9146"></td>
        <td id="LC9146" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> <span class="pl-c1">uint64_t</span> B = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint64_t</span>&gt;(C) &amp; MASK;</td>
      </tr>
      <tr>
        <td id="L9147" class="blob-num js-line-number" data-line-number="9147"></td>
        <td id="LC9147" class="blob-code blob-code-inner js-file-line">        value |= B &lt;&lt; (SHIFT * size++);</td>
      </tr>
      <tr>
        <td id="L9148" class="blob-num js-line-number" data-line-number="9148"></td>
        <td id="LC9148" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (!(<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint64_t</span>&gt;(C) &amp; MSB)) { <span class="pl-c"><span class="pl-c">//</span> NOLINT</span></td>
      </tr>
      <tr>
        <td id="L9149" class="blob-num js-line-number" data-line-number="9149"></td>
        <td id="LC9149" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L9150" class="blob-num js-line-number" data-line-number="9150"></td>
        <td id="LC9150" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L9151" class="blob-num js-line-number" data-line-number="9151"></td>
        <td id="LC9151" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L9152" class="blob-num js-line-number" data-line-number="9152"></td>
        <td id="LC9152" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9153" class="blob-num js-line-number" data-line-number="9153"></td>
        <td id="LC9153" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> VarInt is little endian.</span></td>
      </tr>
      <tr>
        <td id="L9154" class="blob-num js-line-number" data-line-number="9154"></td>
        <td id="LC9154" class="blob-code blob-code-inner js-file-line">    value = <span class="pl-c1">le64toh</span>(value);</td>
      </tr>
      <tr>
        <td id="L9155" class="blob-num js-line-number" data-line-number="9155"></td>
        <td id="LC9155" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> size;</td>
      </tr>
      <tr>
        <td id="L9156" class="blob-num js-line-number" data-line-number="9156"></td>
        <td id="LC9156" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L9157" class="blob-num js-line-number" data-line-number="9157"></td>
        <td id="LC9157" class="blob-code blob-code-inner js-file-line">} <span class="pl-c"><span class="pl-c">//</span> namespace cluon</span></td>
      </tr>
      <tr>
        <td id="L9158" class="blob-num js-line-number" data-line-number="9158"></td>
        <td id="LC9158" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L9159" class="blob-num js-line-number" data-line-number="9159"></td>
        <td id="LC9159" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Copyright (C) 2017-2018  Christian Berger</span></td>
      </tr>
      <tr>
        <td id="L9160" class="blob-num js-line-number" data-line-number="9160"></td>
        <td id="LC9160" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L9161" class="blob-num js-line-number" data-line-number="9161"></td>
        <td id="LC9161" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is free software: you can redistribute it and/or modify</span></td>
      </tr>
      <tr>
        <td id="L9162" class="blob-num js-line-number" data-line-number="9162"></td>
        <td id="LC9162" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * it under the terms of the GNU General Public License as published by</span></td>
      </tr>
      <tr>
        <td id="L9163" class="blob-num js-line-number" data-line-number="9163"></td>
        <td id="LC9163" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * the Free Software Foundation, either version 3 of the License, or</span></td>
      </tr>
      <tr>
        <td id="L9164" class="blob-num js-line-number" data-line-number="9164"></td>
        <td id="LC9164" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * (at your option) any later version.</span></td>
      </tr>
      <tr>
        <td id="L9165" class="blob-num js-line-number" data-line-number="9165"></td>
        <td id="LC9165" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L9166" class="blob-num js-line-number" data-line-number="9166"></td>
        <td id="LC9166" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is distributed in the hope that it will be useful,</span></td>
      </tr>
      <tr>
        <td id="L9167" class="blob-num js-line-number" data-line-number="9167"></td>
        <td id="LC9167" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></td>
      </tr>
      <tr>
        <td id="L9168" class="blob-num js-line-number" data-line-number="9168"></td>
        <td id="LC9168" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></td>
      </tr>
      <tr>
        <td id="L9169" class="blob-num js-line-number" data-line-number="9169"></td>
        <td id="LC9169" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * GNU General Public License for more details.</span></td>
      </tr>
      <tr>
        <td id="L9170" class="blob-num js-line-number" data-line-number="9170"></td>
        <td id="LC9170" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L9171" class="blob-num js-line-number" data-line-number="9171"></td>
        <td id="LC9171" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * You should have received a copy of the GNU General Public License</span></td>
      </tr>
      <tr>
        <td id="L9172" class="blob-num js-line-number" data-line-number="9172"></td>
        <td id="LC9172" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></td>
      </tr>
      <tr>
        <td id="L9173" class="blob-num js-line-number" data-line-number="9173"></td>
        <td id="LC9173" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L9174" class="blob-num js-line-number" data-line-number="9174"></td>
        <td id="LC9174" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9175" class="blob-num js-line-number" data-line-number="9175"></td>
        <td id="LC9175" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> clang-format off</span></td>
      </tr>
      <tr>
        <td id="L9176" class="blob-num js-line-number" data-line-number="9176"></td>
        <td id="LC9176" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifdef</span> WIN32</td>
      </tr>
      <tr>
        <td id="L9177" class="blob-num js-line-number" data-line-number="9177"></td>
        <td id="LC9177" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>Winsock2.h<span class="pl-pds">&gt;</span></span> <span class="pl-c"><span class="pl-c">//</span> for ntohll</span></td>
      </tr>
      <tr>
        <td id="L9178" class="blob-num js-line-number" data-line-number="9178"></td>
        <td id="LC9178" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L9179" class="blob-num js-line-number" data-line-number="9179"></td>
        <td id="LC9179" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> clang-format on</span></td>
      </tr>
      <tr>
        <td id="L9180" class="blob-num js-line-number" data-line-number="9180"></td>
        <td id="LC9180" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9181" class="blob-num js-line-number" data-line-number="9181"></td>
        <td id="LC9181" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/FromLCMVisitor.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L9182" class="blob-num js-line-number" data-line-number="9182"></td>
        <td id="LC9182" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9183" class="blob-num js-line-number" data-line-number="9183"></td>
        <td id="LC9183" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>cstring<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L9184" class="blob-num js-line-number" data-line-number="9184"></td>
        <td id="LC9184" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>algorithm<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L9185" class="blob-num js-line-number" data-line-number="9185"></td>
        <td id="LC9185" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>iostream<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L9186" class="blob-num js-line-number" data-line-number="9186"></td>
        <td id="LC9186" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>vector<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L9187" class="blob-num js-line-number" data-line-number="9187"></td>
        <td id="LC9187" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9188" class="blob-num js-line-number" data-line-number="9188"></td>
        <td id="LC9188" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">cluon</span> {</td>
      </tr>
      <tr>
        <td id="L9189" class="blob-num js-line-number" data-line-number="9189"></td>
        <td id="LC9189" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9190" class="blob-num js-line-number" data-line-number="9190"></td>
        <td id="LC9190" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-en">FromLCMVisitor::FromLCMVisitor</span>() <span class="pl-k">noexcept</span></td>
      </tr>
      <tr>
        <td id="L9191" class="blob-num js-line-number" data-line-number="9191"></td>
        <td id="LC9191" class="blob-code blob-code-inner js-file-line">    : m_buffer(m_internalBuffer) {}</td>
      </tr>
      <tr>
        <td id="L9192" class="blob-num js-line-number" data-line-number="9192"></td>
        <td id="LC9192" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9193" class="blob-num js-line-number" data-line-number="9193"></td>
        <td id="LC9193" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-en">FromLCMVisitor::FromLCMVisitor</span>(std::stringstream &amp;in) <span class="pl-k">noexcept</span></td>
      </tr>
      <tr>
        <td id="L9194" class="blob-num js-line-number" data-line-number="9194"></td>
        <td id="LC9194" class="blob-code blob-code-inner js-file-line">    : m_expectedHash{<span class="pl-c1">0</span>}</td>
      </tr>
      <tr>
        <td id="L9195" class="blob-num js-line-number" data-line-number="9195"></td>
        <td id="LC9195" class="blob-code blob-code-inner js-file-line">    , m_buffer(in) {}</td>
      </tr>
      <tr>
        <td id="L9196" class="blob-num js-line-number" data-line-number="9196"></td>
        <td id="LC9196" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9197" class="blob-num js-line-number" data-line-number="9197"></td>
        <td id="LC9197" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromLCMVisitor::decodeFrom</span>(std::istream &amp;in) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L9198" class="blob-num js-line-number" data-line-number="9198"></td>
        <td id="LC9198" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Reset internal states as this deserializer could be reused.</span></td>
      </tr>
      <tr>
        <td id="L9199" class="blob-num js-line-number" data-line-number="9199"></td>
        <td id="LC9199" class="blob-code blob-code-inner js-file-line">    m_buffer.<span class="pl-c1">clear</span>();</td>
      </tr>
      <tr>
        <td id="L9200" class="blob-num js-line-number" data-line-number="9200"></td>
        <td id="LC9200" class="blob-code blob-code-inner js-file-line">    m_buffer.<span class="pl-c1">str</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L9201" class="blob-num js-line-number" data-line-number="9201"></td>
        <td id="LC9201" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9202" class="blob-num js-line-number" data-line-number="9202"></td>
        <td id="LC9202" class="blob-code blob-code-inner js-file-line">    in.<span class="pl-c1">read</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">char</span> *&gt;(&amp;m_expectedHash), <span class="pl-k">sizeof</span>(<span class="pl-c1">int64_t</span>));</td>
      </tr>
      <tr>
        <td id="L9203" class="blob-num js-line-number" data-line-number="9203"></td>
        <td id="LC9203" class="blob-code blob-code-inner js-file-line">    m_expectedHash = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int64_t</span>&gt;(<span class="pl-c1">be64toh</span>(m_expectedHash));</td>
      </tr>
      <tr>
        <td id="L9204" class="blob-num js-line-number" data-line-number="9204"></td>
        <td id="LC9204" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9205" class="blob-num js-line-number" data-line-number="9205"></td>
        <td id="LC9205" class="blob-code blob-code-inner js-file-line">    m_buffer &lt;&lt; in.<span class="pl-c1">rdbuf</span>();</td>
      </tr>
      <tr>
        <td id="L9206" class="blob-num js-line-number" data-line-number="9206"></td>
        <td id="LC9206" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L9207" class="blob-num js-line-number" data-line-number="9207"></td>
        <td id="LC9207" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9208" class="blob-num js-line-number" data-line-number="9208"></td>
        <td id="LC9208" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>//////////////////////////////////////////////////////////////////////////////</span></td>
      </tr>
      <tr>
        <td id="L9209" class="blob-num js-line-number" data-line-number="9209"></td>
        <td id="LC9209" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9210" class="blob-num js-line-number" data-line-number="9210"></td>
        <td id="LC9210" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromLCMVisitor::preVisit</span>(<span class="pl-c1">int32_t</span> id, <span class="pl-k">const</span> std::string &amp;shortName, <span class="pl-k">const</span> std::string &amp;longName) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L9211" class="blob-num js-line-number" data-line-number="9211"></td>
        <td id="LC9211" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L9212" class="blob-num js-line-number" data-line-number="9212"></td>
        <td id="LC9212" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)shortName;</td>
      </tr>
      <tr>
        <td id="L9213" class="blob-num js-line-number" data-line-number="9213"></td>
        <td id="LC9213" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)longName;</td>
      </tr>
      <tr>
        <td id="L9214" class="blob-num js-line-number" data-line-number="9214"></td>
        <td id="LC9214" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9215" class="blob-num js-line-number" data-line-number="9215"></td>
        <td id="LC9215" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Reset m_buffer read pointer to beginning only if we are not dealing with</span></td>
      </tr>
      <tr>
        <td id="L9216" class="blob-num js-line-number" data-line-number="9216"></td>
        <td id="LC9216" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> nested complex types as we are sharing our buffer with our parent message.</span></td>
      </tr>
      <tr>
        <td id="L9217" class="blob-num js-line-number" data-line-number="9217"></td>
        <td id="LC9217" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-c1">0</span> != m_expectedHash) {</td>
      </tr>
      <tr>
        <td id="L9218" class="blob-num js-line-number" data-line-number="9218"></td>
        <td id="LC9218" class="blob-code blob-code-inner js-file-line">        m_buffer.<span class="pl-c1">clear</span>();</td>
      </tr>
      <tr>
        <td id="L9219" class="blob-num js-line-number" data-line-number="9219"></td>
        <td id="LC9219" class="blob-code blob-code-inner js-file-line">        m_buffer.<span class="pl-c1">seekg</span>(<span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L9220" class="blob-num js-line-number" data-line-number="9220"></td>
        <td id="LC9220" class="blob-code blob-code-inner js-file-line">        m_calculatedHash = <span class="pl-c1">0x12345678</span>;</td>
      </tr>
      <tr>
        <td id="L9221" class="blob-num js-line-number" data-line-number="9221"></td>
        <td id="LC9221" class="blob-code blob-code-inner js-file-line">        m_hashes.<span class="pl-c1">clear</span>();</td>
      </tr>
      <tr>
        <td id="L9222" class="blob-num js-line-number" data-line-number="9222"></td>
        <td id="LC9222" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L9223" class="blob-num js-line-number" data-line-number="9223"></td>
        <td id="LC9223" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L9224" class="blob-num js-line-number" data-line-number="9224"></td>
        <td id="LC9224" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9225" class="blob-num js-line-number" data-line-number="9225"></td>
        <td id="LC9225" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromLCMVisitor::postVisit</span>() <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L9226" class="blob-num js-line-number" data-line-number="9226"></td>
        <td id="LC9226" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> ((<span class="pl-c1">0</span> != m_expectedHash) &amp;&amp; (m_expectedHash != <span class="pl-c1">hash</span>())) {</td>
      </tr>
      <tr>
        <td id="L9227" class="blob-num js-line-number" data-line-number="9227"></td>
        <td id="LC9227" class="blob-code blob-code-inner js-file-line">        std::cerr &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>[cluon::FromLCMVisitor] Hash mismatch - decoding might have failed<span class="pl-pds">&quot;</span></span> &lt;&lt; std::endl; <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L9228" class="blob-num js-line-number" data-line-number="9228"></td>
        <td id="LC9228" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L9229" class="blob-num js-line-number" data-line-number="9229"></td>
        <td id="LC9229" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L9230" class="blob-num js-line-number" data-line-number="9230"></td>
        <td id="LC9230" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9231" class="blob-num js-line-number" data-line-number="9231"></td>
        <td id="LC9231" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromLCMVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">bool</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L9232" class="blob-num js-line-number" data-line-number="9232"></td>
        <td id="LC9232" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L9233" class="blob-num js-line-number" data-line-number="9233"></td>
        <td id="LC9233" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L9234" class="blob-num js-line-number" data-line-number="9234"></td>
        <td id="LC9234" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(name);</td>
      </tr>
      <tr>
        <td id="L9235" class="blob-num js-line-number" data-line-number="9235"></td>
        <td id="LC9235" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>boolean<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L9236" class="blob-num js-line-number" data-line-number="9236"></td>
        <td id="LC9236" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(<span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L9237" class="blob-num js-line-number" data-line-number="9237"></td>
        <td id="LC9237" class="blob-code blob-code-inner js-file-line">    m_buffer.<span class="pl-c1">read</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">char</span> *&gt;(&amp;v), <span class="pl-k">sizeof</span>(<span class="pl-k">bool</span>));</td>
      </tr>
      <tr>
        <td id="L9238" class="blob-num js-line-number" data-line-number="9238"></td>
        <td id="LC9238" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L9239" class="blob-num js-line-number" data-line-number="9239"></td>
        <td id="LC9239" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9240" class="blob-num js-line-number" data-line-number="9240"></td>
        <td id="LC9240" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromLCMVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">char</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L9241" class="blob-num js-line-number" data-line-number="9241"></td>
        <td id="LC9241" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L9242" class="blob-num js-line-number" data-line-number="9242"></td>
        <td id="LC9242" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L9243" class="blob-num js-line-number" data-line-number="9243"></td>
        <td id="LC9243" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(name);</td>
      </tr>
      <tr>
        <td id="L9244" class="blob-num js-line-number" data-line-number="9244"></td>
        <td id="LC9244" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>int8_t<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L9245" class="blob-num js-line-number" data-line-number="9245"></td>
        <td id="LC9245" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(<span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L9246" class="blob-num js-line-number" data-line-number="9246"></td>
        <td id="LC9246" class="blob-code blob-code-inner js-file-line">    m_buffer.<span class="pl-c1">read</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">char</span> *&gt;(&amp;v), <span class="pl-k">sizeof</span>(<span class="pl-k">char</span>));</td>
      </tr>
      <tr>
        <td id="L9247" class="blob-num js-line-number" data-line-number="9247"></td>
        <td id="LC9247" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L9248" class="blob-num js-line-number" data-line-number="9248"></td>
        <td id="LC9248" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9249" class="blob-num js-line-number" data-line-number="9249"></td>
        <td id="LC9249" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromLCMVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int8_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L9250" class="blob-num js-line-number" data-line-number="9250"></td>
        <td id="LC9250" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L9251" class="blob-num js-line-number" data-line-number="9251"></td>
        <td id="LC9251" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L9252" class="blob-num js-line-number" data-line-number="9252"></td>
        <td id="LC9252" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(name);</td>
      </tr>
      <tr>
        <td id="L9253" class="blob-num js-line-number" data-line-number="9253"></td>
        <td id="LC9253" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>int8_t<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L9254" class="blob-num js-line-number" data-line-number="9254"></td>
        <td id="LC9254" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(<span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L9255" class="blob-num js-line-number" data-line-number="9255"></td>
        <td id="LC9255" class="blob-code blob-code-inner js-file-line">    m_buffer.<span class="pl-c1">read</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">char</span> *&gt;(&amp;v), <span class="pl-k">sizeof</span>(<span class="pl-c1">int8_t</span>));</td>
      </tr>
      <tr>
        <td id="L9256" class="blob-num js-line-number" data-line-number="9256"></td>
        <td id="LC9256" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L9257" class="blob-num js-line-number" data-line-number="9257"></td>
        <td id="LC9257" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9258" class="blob-num js-line-number" data-line-number="9258"></td>
        <td id="LC9258" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromLCMVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint8_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L9259" class="blob-num js-line-number" data-line-number="9259"></td>
        <td id="LC9259" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L9260" class="blob-num js-line-number" data-line-number="9260"></td>
        <td id="LC9260" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L9261" class="blob-num js-line-number" data-line-number="9261"></td>
        <td id="LC9261" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(name);</td>
      </tr>
      <tr>
        <td id="L9262" class="blob-num js-line-number" data-line-number="9262"></td>
        <td id="LC9262" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>int8_t<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L9263" class="blob-num js-line-number" data-line-number="9263"></td>
        <td id="LC9263" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(<span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L9264" class="blob-num js-line-number" data-line-number="9264"></td>
        <td id="LC9264" class="blob-code blob-code-inner js-file-line">    m_buffer.<span class="pl-c1">read</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">char</span> *&gt;(&amp;v), <span class="pl-k">sizeof</span>(<span class="pl-c1">int8_t</span>));</td>
      </tr>
      <tr>
        <td id="L9265" class="blob-num js-line-number" data-line-number="9265"></td>
        <td id="LC9265" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L9266" class="blob-num js-line-number" data-line-number="9266"></td>
        <td id="LC9266" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9267" class="blob-num js-line-number" data-line-number="9267"></td>
        <td id="LC9267" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromLCMVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int16_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L9268" class="blob-num js-line-number" data-line-number="9268"></td>
        <td id="LC9268" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L9269" class="blob-num js-line-number" data-line-number="9269"></td>
        <td id="LC9269" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L9270" class="blob-num js-line-number" data-line-number="9270"></td>
        <td id="LC9270" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(name);</td>
      </tr>
      <tr>
        <td id="L9271" class="blob-num js-line-number" data-line-number="9271"></td>
        <td id="LC9271" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>int16_t<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L9272" class="blob-num js-line-number" data-line-number="9272"></td>
        <td id="LC9272" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(<span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L9273" class="blob-num js-line-number" data-line-number="9273"></td>
        <td id="LC9273" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">int16_t</span> _v{<span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L9274" class="blob-num js-line-number" data-line-number="9274"></td>
        <td id="LC9274" class="blob-code blob-code-inner js-file-line">    m_buffer.<span class="pl-c1">read</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">char</span> *&gt;(&amp;_v), <span class="pl-k">sizeof</span>(<span class="pl-c1">int16_t</span>));</td>
      </tr>
      <tr>
        <td id="L9275" class="blob-num js-line-number" data-line-number="9275"></td>
        <td id="LC9275" class="blob-code blob-code-inner js-file-line">    v = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int16_t</span>&gt;(<span class="pl-c1">be16toh</span>(_v));</td>
      </tr>
      <tr>
        <td id="L9276" class="blob-num js-line-number" data-line-number="9276"></td>
        <td id="LC9276" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L9277" class="blob-num js-line-number" data-line-number="9277"></td>
        <td id="LC9277" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9278" class="blob-num js-line-number" data-line-number="9278"></td>
        <td id="LC9278" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromLCMVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint16_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L9279" class="blob-num js-line-number" data-line-number="9279"></td>
        <td id="LC9279" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L9280" class="blob-num js-line-number" data-line-number="9280"></td>
        <td id="LC9280" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L9281" class="blob-num js-line-number" data-line-number="9281"></td>
        <td id="LC9281" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(name);</td>
      </tr>
      <tr>
        <td id="L9282" class="blob-num js-line-number" data-line-number="9282"></td>
        <td id="LC9282" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>int16_t<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L9283" class="blob-num js-line-number" data-line-number="9283"></td>
        <td id="LC9283" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(<span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L9284" class="blob-num js-line-number" data-line-number="9284"></td>
        <td id="LC9284" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">int16_t</span> _v{<span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L9285" class="blob-num js-line-number" data-line-number="9285"></td>
        <td id="LC9285" class="blob-code blob-code-inner js-file-line">    m_buffer.<span class="pl-c1">read</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">char</span> *&gt;(&amp;_v), <span class="pl-k">sizeof</span>(<span class="pl-c1">int16_t</span>));</td>
      </tr>
      <tr>
        <td id="L9286" class="blob-num js-line-number" data-line-number="9286"></td>
        <td id="LC9286" class="blob-code blob-code-inner js-file-line">    v = <span class="pl-c1">be16toh</span>(_v);</td>
      </tr>
      <tr>
        <td id="L9287" class="blob-num js-line-number" data-line-number="9287"></td>
        <td id="LC9287" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L9288" class="blob-num js-line-number" data-line-number="9288"></td>
        <td id="LC9288" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9289" class="blob-num js-line-number" data-line-number="9289"></td>
        <td id="LC9289" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromLCMVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int32_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L9290" class="blob-num js-line-number" data-line-number="9290"></td>
        <td id="LC9290" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L9291" class="blob-num js-line-number" data-line-number="9291"></td>
        <td id="LC9291" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L9292" class="blob-num js-line-number" data-line-number="9292"></td>
        <td id="LC9292" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(name);</td>
      </tr>
      <tr>
        <td id="L9293" class="blob-num js-line-number" data-line-number="9293"></td>
        <td id="LC9293" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>int32_t<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L9294" class="blob-num js-line-number" data-line-number="9294"></td>
        <td id="LC9294" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(<span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L9295" class="blob-num js-line-number" data-line-number="9295"></td>
        <td id="LC9295" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">int32_t</span> _v{<span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L9296" class="blob-num js-line-number" data-line-number="9296"></td>
        <td id="LC9296" class="blob-code blob-code-inner js-file-line">    m_buffer.<span class="pl-c1">read</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">char</span> *&gt;(&amp;_v), <span class="pl-k">sizeof</span>(<span class="pl-c1">int32_t</span>));</td>
      </tr>
      <tr>
        <td id="L9297" class="blob-num js-line-number" data-line-number="9297"></td>
        <td id="LC9297" class="blob-code blob-code-inner js-file-line">    v = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int32_t</span>&gt;(<span class="pl-c1">be32toh</span>(_v));</td>
      </tr>
      <tr>
        <td id="L9298" class="blob-num js-line-number" data-line-number="9298"></td>
        <td id="LC9298" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L9299" class="blob-num js-line-number" data-line-number="9299"></td>
        <td id="LC9299" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9300" class="blob-num js-line-number" data-line-number="9300"></td>
        <td id="LC9300" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromLCMVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint32_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L9301" class="blob-num js-line-number" data-line-number="9301"></td>
        <td id="LC9301" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L9302" class="blob-num js-line-number" data-line-number="9302"></td>
        <td id="LC9302" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L9303" class="blob-num js-line-number" data-line-number="9303"></td>
        <td id="LC9303" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(name);</td>
      </tr>
      <tr>
        <td id="L9304" class="blob-num js-line-number" data-line-number="9304"></td>
        <td id="LC9304" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>int32_t<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L9305" class="blob-num js-line-number" data-line-number="9305"></td>
        <td id="LC9305" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(<span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L9306" class="blob-num js-line-number" data-line-number="9306"></td>
        <td id="LC9306" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">int32_t</span> _v{<span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L9307" class="blob-num js-line-number" data-line-number="9307"></td>
        <td id="LC9307" class="blob-code blob-code-inner js-file-line">    m_buffer.<span class="pl-c1">read</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">char</span> *&gt;(&amp;_v), <span class="pl-k">sizeof</span>(<span class="pl-c1">int32_t</span>));</td>
      </tr>
      <tr>
        <td id="L9308" class="blob-num js-line-number" data-line-number="9308"></td>
        <td id="LC9308" class="blob-code blob-code-inner js-file-line">    v = <span class="pl-c1">be32toh</span>(_v);</td>
      </tr>
      <tr>
        <td id="L9309" class="blob-num js-line-number" data-line-number="9309"></td>
        <td id="LC9309" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L9310" class="blob-num js-line-number" data-line-number="9310"></td>
        <td id="LC9310" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9311" class="blob-num js-line-number" data-line-number="9311"></td>
        <td id="LC9311" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromLCMVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int64_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L9312" class="blob-num js-line-number" data-line-number="9312"></td>
        <td id="LC9312" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L9313" class="blob-num js-line-number" data-line-number="9313"></td>
        <td id="LC9313" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L9314" class="blob-num js-line-number" data-line-number="9314"></td>
        <td id="LC9314" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(name);</td>
      </tr>
      <tr>
        <td id="L9315" class="blob-num js-line-number" data-line-number="9315"></td>
        <td id="LC9315" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>int64_t<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L9316" class="blob-num js-line-number" data-line-number="9316"></td>
        <td id="LC9316" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(<span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L9317" class="blob-num js-line-number" data-line-number="9317"></td>
        <td id="LC9317" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">int64_t</span> _v{<span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L9318" class="blob-num js-line-number" data-line-number="9318"></td>
        <td id="LC9318" class="blob-code blob-code-inner js-file-line">    m_buffer.<span class="pl-c1">read</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">char</span> *&gt;(&amp;_v), <span class="pl-k">sizeof</span>(<span class="pl-c1">int64_t</span>));</td>
      </tr>
      <tr>
        <td id="L9319" class="blob-num js-line-number" data-line-number="9319"></td>
        <td id="LC9319" class="blob-code blob-code-inner js-file-line">    v = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int64_t</span>&gt;(<span class="pl-c1">be64toh</span>(_v));</td>
      </tr>
      <tr>
        <td id="L9320" class="blob-num js-line-number" data-line-number="9320"></td>
        <td id="LC9320" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L9321" class="blob-num js-line-number" data-line-number="9321"></td>
        <td id="LC9321" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9322" class="blob-num js-line-number" data-line-number="9322"></td>
        <td id="LC9322" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromLCMVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint64_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L9323" class="blob-num js-line-number" data-line-number="9323"></td>
        <td id="LC9323" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L9324" class="blob-num js-line-number" data-line-number="9324"></td>
        <td id="LC9324" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L9325" class="blob-num js-line-number" data-line-number="9325"></td>
        <td id="LC9325" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(name);</td>
      </tr>
      <tr>
        <td id="L9326" class="blob-num js-line-number" data-line-number="9326"></td>
        <td id="LC9326" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>int64_t<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L9327" class="blob-num js-line-number" data-line-number="9327"></td>
        <td id="LC9327" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(<span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L9328" class="blob-num js-line-number" data-line-number="9328"></td>
        <td id="LC9328" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">int64_t</span> _v{<span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L9329" class="blob-num js-line-number" data-line-number="9329"></td>
        <td id="LC9329" class="blob-code blob-code-inner js-file-line">    m_buffer.<span class="pl-c1">read</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">char</span> *&gt;(&amp;_v), <span class="pl-k">sizeof</span>(<span class="pl-c1">int64_t</span>));</td>
      </tr>
      <tr>
        <td id="L9330" class="blob-num js-line-number" data-line-number="9330"></td>
        <td id="LC9330" class="blob-code blob-code-inner js-file-line">    v = <span class="pl-c1">be64toh</span>(_v);</td>
      </tr>
      <tr>
        <td id="L9331" class="blob-num js-line-number" data-line-number="9331"></td>
        <td id="LC9331" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L9332" class="blob-num js-line-number" data-line-number="9332"></td>
        <td id="LC9332" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9333" class="blob-num js-line-number" data-line-number="9333"></td>
        <td id="LC9333" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromLCMVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">float</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L9334" class="blob-num js-line-number" data-line-number="9334"></td>
        <td id="LC9334" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L9335" class="blob-num js-line-number" data-line-number="9335"></td>
        <td id="LC9335" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L9336" class="blob-num js-line-number" data-line-number="9336"></td>
        <td id="LC9336" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(name);</td>
      </tr>
      <tr>
        <td id="L9337" class="blob-num js-line-number" data-line-number="9337"></td>
        <td id="LC9337" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>float<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L9338" class="blob-num js-line-number" data-line-number="9338"></td>
        <td id="LC9338" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(<span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L9339" class="blob-num js-line-number" data-line-number="9339"></td>
        <td id="LC9339" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">int32_t</span> _v{<span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L9340" class="blob-num js-line-number" data-line-number="9340"></td>
        <td id="LC9340" class="blob-code blob-code-inner js-file-line">    m_buffer.<span class="pl-c1">read</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">char</span> *&gt;(&amp;_v), <span class="pl-k">sizeof</span>(<span class="pl-c1">int32_t</span>));</td>
      </tr>
      <tr>
        <td id="L9341" class="blob-num js-line-number" data-line-number="9341"></td>
        <td id="LC9341" class="blob-code blob-code-inner js-file-line">    _v = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int32_t</span>&gt;(<span class="pl-c1">be32toh</span>(_v));</td>
      </tr>
      <tr>
        <td id="L9342" class="blob-num js-line-number" data-line-number="9342"></td>
        <td id="LC9342" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">std::memmove</span>(&amp;v, &amp;_v, <span class="pl-k">sizeof</span>(<span class="pl-c1">int32_t</span>));</td>
      </tr>
      <tr>
        <td id="L9343" class="blob-num js-line-number" data-line-number="9343"></td>
        <td id="LC9343" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L9344" class="blob-num js-line-number" data-line-number="9344"></td>
        <td id="LC9344" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9345" class="blob-num js-line-number" data-line-number="9345"></td>
        <td id="LC9345" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromLCMVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">double</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L9346" class="blob-num js-line-number" data-line-number="9346"></td>
        <td id="LC9346" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L9347" class="blob-num js-line-number" data-line-number="9347"></td>
        <td id="LC9347" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L9348" class="blob-num js-line-number" data-line-number="9348"></td>
        <td id="LC9348" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(name);</td>
      </tr>
      <tr>
        <td id="L9349" class="blob-num js-line-number" data-line-number="9349"></td>
        <td id="LC9349" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>double<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L9350" class="blob-num js-line-number" data-line-number="9350"></td>
        <td id="LC9350" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(<span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L9351" class="blob-num js-line-number" data-line-number="9351"></td>
        <td id="LC9351" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">int64_t</span> _v{<span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L9352" class="blob-num js-line-number" data-line-number="9352"></td>
        <td id="LC9352" class="blob-code blob-code-inner js-file-line">    m_buffer.<span class="pl-c1">read</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">char</span> *&gt;(&amp;_v), <span class="pl-k">sizeof</span>(<span class="pl-c1">int64_t</span>));</td>
      </tr>
      <tr>
        <td id="L9353" class="blob-num js-line-number" data-line-number="9353"></td>
        <td id="LC9353" class="blob-code blob-code-inner js-file-line">    _v = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int64_t</span>&gt;(<span class="pl-c1">be64toh</span>(_v));</td>
      </tr>
      <tr>
        <td id="L9354" class="blob-num js-line-number" data-line-number="9354"></td>
        <td id="LC9354" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">std::memmove</span>(&amp;v, &amp;_v, <span class="pl-k">sizeof</span>(<span class="pl-c1">int64_t</span>));</td>
      </tr>
      <tr>
        <td id="L9355" class="blob-num js-line-number" data-line-number="9355"></td>
        <td id="LC9355" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L9356" class="blob-num js-line-number" data-line-number="9356"></td>
        <td id="LC9356" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9357" class="blob-num js-line-number" data-line-number="9357"></td>
        <td id="LC9357" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromLCMVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, std::string &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L9358" class="blob-num js-line-number" data-line-number="9358"></td>
        <td id="LC9358" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L9359" class="blob-num js-line-number" data-line-number="9359"></td>
        <td id="LC9359" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L9360" class="blob-num js-line-number" data-line-number="9360"></td>
        <td id="LC9360" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)name;</td>
      </tr>
      <tr>
        <td id="L9361" class="blob-num js-line-number" data-line-number="9361"></td>
        <td id="LC9361" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)v;</td>
      </tr>
      <tr>
        <td id="L9362" class="blob-num js-line-number" data-line-number="9362"></td>
        <td id="LC9362" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(name);</td>
      </tr>
      <tr>
        <td id="L9363" class="blob-num js-line-number" data-line-number="9363"></td>
        <td id="LC9363" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>string<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L9364" class="blob-num js-line-number" data-line-number="9364"></td>
        <td id="LC9364" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(<span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L9365" class="blob-num js-line-number" data-line-number="9365"></td>
        <td id="LC9365" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9366" class="blob-num js-line-number" data-line-number="9366"></td>
        <td id="LC9366" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">int32_t</span> length{<span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L9367" class="blob-num js-line-number" data-line-number="9367"></td>
        <td id="LC9367" class="blob-code blob-code-inner js-file-line">    m_buffer.<span class="pl-c1">read</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">char</span> *&gt;(&amp;length), <span class="pl-k">sizeof</span>(<span class="pl-c1">int32_t</span>));</td>
      </tr>
      <tr>
        <td id="L9368" class="blob-num js-line-number" data-line-number="9368"></td>
        <td id="LC9368" class="blob-code blob-code-inner js-file-line">    length = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int32_t</span>&gt;(<span class="pl-c1">be32toh</span>(length));</td>
      </tr>
      <tr>
        <td id="L9369" class="blob-num js-line-number" data-line-number="9369"></td>
        <td id="LC9369" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9370" class="blob-num js-line-number" data-line-number="9370"></td>
        <td id="LC9370" class="blob-code blob-code-inner js-file-line">    v.<span class="pl-c1">clear</span>();</td>
      </tr>
      <tr>
        <td id="L9371" class="blob-num js-line-number" data-line-number="9371"></td>
        <td id="LC9371" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (length &gt; <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L9372" class="blob-num js-line-number" data-line-number="9372"></td>
        <td id="LC9372" class="blob-code blob-code-inner js-file-line">        std::vector&lt;<span class="pl-k">char</span>&gt; buffer;</td>
      </tr>
      <tr>
        <td id="L9373" class="blob-num js-line-number" data-line-number="9373"></td>
        <td id="LC9373" class="blob-code blob-code-inner js-file-line">        buffer.<span class="pl-c1">reserve</span>(<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint32_t</span>&gt;(length));</td>
      </tr>
      <tr>
        <td id="L9374" class="blob-num js-line-number" data-line-number="9374"></td>
        <td id="LC9374" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifdef</span> WIN32</td>
      </tr>
      <tr>
        <td id="L9375" class="blob-num js-line-number" data-line-number="9375"></td>
        <td id="LC9375" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">for</span> (<span class="pl-c1">uint32_t</span> i = <span class="pl-c1">0</span>; i &lt; <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint32_t</span>&gt;(length); i++) {</td>
      </tr>
      <tr>
        <td id="L9376" class="blob-num js-line-number" data-line-number="9376"></td>
        <td id="LC9376" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">char</span> c;</td>
      </tr>
      <tr>
        <td id="L9377" class="blob-num js-line-number" data-line-number="9377"></td>
        <td id="LC9377" class="blob-code blob-code-inner js-file-line">            m_buffer.<span class="pl-c1">get</span>(c);</td>
      </tr>
      <tr>
        <td id="L9378" class="blob-num js-line-number" data-line-number="9378"></td>
        <td id="LC9378" class="blob-code blob-code-inner js-file-line">            buffer.<span class="pl-c1">push_back</span>(c);</td>
      </tr>
      <tr>
        <td id="L9379" class="blob-num js-line-number" data-line-number="9379"></td>
        <td id="LC9379" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L9380" class="blob-num js-line-number" data-line-number="9380"></td>
        <td id="LC9380" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">else</span></td>
      </tr>
      <tr>
        <td id="L9381" class="blob-num js-line-number" data-line-number="9381"></td>
        <td id="LC9381" class="blob-code blob-code-inner js-file-line">        m_buffer.<span class="pl-c1">read</span>(<span class="pl-k">static_cast</span>&lt;<span class="pl-k">char</span> *&gt;(&amp;buffer[<span class="pl-c1">0</span>]), <span class="pl-k">static_cast</span>&lt;std::streamsize&gt;(length));</td>
      </tr>
      <tr>
        <td id="L9382" class="blob-num js-line-number" data-line-number="9382"></td>
        <td id="LC9382" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L9383" class="blob-num js-line-number" data-line-number="9383"></td>
        <td id="LC9383" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> std::string <span class="pl-smi">s</span>(buffer.<span class="pl-c1">begin</span>(), buffer.<span class="pl-c1">begin</span>() + length - <span class="pl-c1">1</span>); <span class="pl-c"><span class="pl-c">//</span> Skip trailing &#39;\0&#39;.</span></td>
      </tr>
      <tr>
        <td id="L9384" class="blob-num js-line-number" data-line-number="9384"></td>
        <td id="LC9384" class="blob-code blob-code-inner js-file-line">        v = s;</td>
      </tr>
      <tr>
        <td id="L9385" class="blob-num js-line-number" data-line-number="9385"></td>
        <td id="LC9385" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L9386" class="blob-num js-line-number" data-line-number="9386"></td>
        <td id="LC9386" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L9387" class="blob-num js-line-number" data-line-number="9387"></td>
        <td id="LC9387" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9388" class="blob-num js-line-number" data-line-number="9388"></td>
        <td id="LC9388" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>//////////////////////////////////////////////////////////////////////////////</span></td>
      </tr>
      <tr>
        <td id="L9389" class="blob-num js-line-number" data-line-number="9389"></td>
        <td id="LC9389" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9390" class="blob-num js-line-number" data-line-number="9390"></td>
        <td id="LC9390" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-c1">int64_t</span> <span class="pl-en">FromLCMVisitor::hash</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L9391" class="blob-num js-line-number" data-line-number="9391"></td>
        <td id="LC9391" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Apply ZigZag encoding for hash from this message&#39;s fields and depending</span></td>
      </tr>
      <tr>
        <td id="L9392" class="blob-num js-line-number" data-line-number="9392"></td>
        <td id="LC9392" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> hashes for complex nested types.</span></td>
      </tr>
      <tr>
        <td id="L9393" class="blob-num js-line-number" data-line-number="9393"></td>
        <td id="LC9393" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">int64_t</span> tmp{m_calculatedHash};</td>
      </tr>
      <tr>
        <td id="L9394" class="blob-num js-line-number" data-line-number="9394"></td>
        <td id="LC9394" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">for</span> (<span class="pl-c1">int64_t</span> v : m_hashes) { tmp += v; }</td>
      </tr>
      <tr>
        <td id="L9395" class="blob-num js-line-number" data-line-number="9395"></td>
        <td id="LC9395" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9396" class="blob-num js-line-number" data-line-number="9396"></td>
        <td id="LC9396" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> <span class="pl-c1">int64_t</span> hash = (tmp &lt;&lt; <span class="pl-c1">1</span>) + ((tmp &gt;&gt; <span class="pl-c1">63</span>) &amp; <span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L9397" class="blob-num js-line-number" data-line-number="9397"></td>
        <td id="LC9397" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> hash;</td>
      </tr>
      <tr>
        <td id="L9398" class="blob-num js-line-number" data-line-number="9398"></td>
        <td id="LC9398" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L9399" class="blob-num js-line-number" data-line-number="9399"></td>
        <td id="LC9399" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9400" class="blob-num js-line-number" data-line-number="9400"></td>
        <td id="LC9400" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromLCMVisitor::calculateHash</span>(<span class="pl-k">char</span> c) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L9401" class="blob-num js-line-number" data-line-number="9401"></td>
        <td id="LC9401" class="blob-code blob-code-inner js-file-line">    m_calculatedHash = ((m_calculatedHash &lt;&lt; <span class="pl-c1">8</span>) ^ (m_calculatedHash &gt;&gt; <span class="pl-c1">55</span>)) + c;</td>
      </tr>
      <tr>
        <td id="L9402" class="blob-num js-line-number" data-line-number="9402"></td>
        <td id="LC9402" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L9403" class="blob-num js-line-number" data-line-number="9403"></td>
        <td id="LC9403" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9404" class="blob-num js-line-number" data-line-number="9404"></td>
        <td id="LC9404" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromLCMVisitor::calculateHash</span>(<span class="pl-k">const</span> std::string &amp;s) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L9405" class="blob-num js-line-number" data-line-number="9405"></td>
        <td id="LC9405" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> std::string tmp{(s.<span class="pl-c1">length</span>() &gt; <span class="pl-c1">255</span> ? s.<span class="pl-c1">substr</span>(<span class="pl-c1">0</span>, <span class="pl-c1">255</span>) : s)};</td>
      </tr>
      <tr>
        <td id="L9406" class="blob-num js-line-number" data-line-number="9406"></td>
        <td id="LC9406" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> <span class="pl-c1">uint8_t</span> length{<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(tmp.<span class="pl-c1">length</span>())};</td>
      </tr>
      <tr>
        <td id="L9407" class="blob-num js-line-number" data-line-number="9407"></td>
        <td id="LC9407" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(<span class="pl-k">static_cast</span>&lt;<span class="pl-k">char</span>&gt;(length));</td>
      </tr>
      <tr>
        <td id="L9408" class="blob-num js-line-number" data-line-number="9408"></td>
        <td id="LC9408" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">for</span> (<span class="pl-k">auto</span> c : tmp) { <span class="pl-c1">calculateHash</span>(c); }</td>
      </tr>
      <tr>
        <td id="L9409" class="blob-num js-line-number" data-line-number="9409"></td>
        <td id="LC9409" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L9410" class="blob-num js-line-number" data-line-number="9410"></td>
        <td id="LC9410" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9411" class="blob-num js-line-number" data-line-number="9411"></td>
        <td id="LC9411" class="blob-code blob-code-inner js-file-line">} <span class="pl-c"><span class="pl-c">//</span> namespace cluon</span></td>
      </tr>
      <tr>
        <td id="L9412" class="blob-num js-line-number" data-line-number="9412"></td>
        <td id="LC9412" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L9413" class="blob-num js-line-number" data-line-number="9413"></td>
        <td id="LC9413" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Copyright (C) 2017-2018  Christian Berger</span></td>
      </tr>
      <tr>
        <td id="L9414" class="blob-num js-line-number" data-line-number="9414"></td>
        <td id="LC9414" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L9415" class="blob-num js-line-number" data-line-number="9415"></td>
        <td id="LC9415" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is free software: you can redistribute it and/or modify</span></td>
      </tr>
      <tr>
        <td id="L9416" class="blob-num js-line-number" data-line-number="9416"></td>
        <td id="LC9416" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * it under the terms of the GNU General Public License as published by</span></td>
      </tr>
      <tr>
        <td id="L9417" class="blob-num js-line-number" data-line-number="9417"></td>
        <td id="LC9417" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * the Free Software Foundation, either version 3 of the License, or</span></td>
      </tr>
      <tr>
        <td id="L9418" class="blob-num js-line-number" data-line-number="9418"></td>
        <td id="LC9418" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * (at your option) any later version.</span></td>
      </tr>
      <tr>
        <td id="L9419" class="blob-num js-line-number" data-line-number="9419"></td>
        <td id="LC9419" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L9420" class="blob-num js-line-number" data-line-number="9420"></td>
        <td id="LC9420" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is distributed in the hope that it will be useful,</span></td>
      </tr>
      <tr>
        <td id="L9421" class="blob-num js-line-number" data-line-number="9421"></td>
        <td id="LC9421" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></td>
      </tr>
      <tr>
        <td id="L9422" class="blob-num js-line-number" data-line-number="9422"></td>
        <td id="LC9422" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></td>
      </tr>
      <tr>
        <td id="L9423" class="blob-num js-line-number" data-line-number="9423"></td>
        <td id="LC9423" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * GNU General Public License for more details.</span></td>
      </tr>
      <tr>
        <td id="L9424" class="blob-num js-line-number" data-line-number="9424"></td>
        <td id="LC9424" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L9425" class="blob-num js-line-number" data-line-number="9425"></td>
        <td id="LC9425" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * You should have received a copy of the GNU General Public License</span></td>
      </tr>
      <tr>
        <td id="L9426" class="blob-num js-line-number" data-line-number="9426"></td>
        <td id="LC9426" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></td>
      </tr>
      <tr>
        <td id="L9427" class="blob-num js-line-number" data-line-number="9427"></td>
        <td id="LC9427" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L9428" class="blob-num js-line-number" data-line-number="9428"></td>
        <td id="LC9428" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9429" class="blob-num js-line-number" data-line-number="9429"></td>
        <td id="LC9429" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> clang-format off</span></td>
      </tr>
      <tr>
        <td id="L9430" class="blob-num js-line-number" data-line-number="9430"></td>
        <td id="LC9430" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifdef</span> WIN32</td>
      </tr>
      <tr>
        <td id="L9431" class="blob-num js-line-number" data-line-number="9431"></td>
        <td id="LC9431" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>Winsock2.h<span class="pl-pds">&gt;</span></span> <span class="pl-c"><span class="pl-c">//</span> for ntohl, ntohs</span></td>
      </tr>
      <tr>
        <td id="L9432" class="blob-num js-line-number" data-line-number="9432"></td>
        <td id="LC9432" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L9433" class="blob-num js-line-number" data-line-number="9433"></td>
        <td id="LC9433" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> clang-format on</span></td>
      </tr>
      <tr>
        <td id="L9434" class="blob-num js-line-number" data-line-number="9434"></td>
        <td id="LC9434" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9435" class="blob-num js-line-number" data-line-number="9435"></td>
        <td id="LC9435" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/FromMsgPackVisitor.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L9436" class="blob-num js-line-number" data-line-number="9436"></td>
        <td id="LC9436" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9437" class="blob-num js-line-number" data-line-number="9437"></td>
        <td id="LC9437" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>cstring<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L9438" class="blob-num js-line-number" data-line-number="9438"></td>
        <td id="LC9438" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>vector<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L9439" class="blob-num js-line-number" data-line-number="9439"></td>
        <td id="LC9439" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9440" class="blob-num js-line-number" data-line-number="9440"></td>
        <td id="LC9440" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">cluon</span> {</td>
      </tr>
      <tr>
        <td id="L9441" class="blob-num js-line-number" data-line-number="9441"></td>
        <td id="LC9441" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9442" class="blob-num js-line-number" data-line-number="9442"></td>
        <td id="LC9442" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-en">FromMsgPackVisitor::FromMsgPackVisitor</span>() <span class="pl-k">noexcept</span></td>
      </tr>
      <tr>
        <td id="L9443" class="blob-num js-line-number" data-line-number="9443"></td>
        <td id="LC9443" class="blob-code blob-code-inner js-file-line">    : m_keyValues{m_data} {}</td>
      </tr>
      <tr>
        <td id="L9444" class="blob-num js-line-number" data-line-number="9444"></td>
        <td id="LC9444" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9445" class="blob-num js-line-number" data-line-number="9445"></td>
        <td id="LC9445" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-en">FromMsgPackVisitor::FromMsgPackVisitor</span>(std::map&lt;std::string, FromMsgPackVisitor::MsgPackKeyValue&gt; &amp;preset) <span class="pl-k">noexcept</span></td>
      </tr>
      <tr>
        <td id="L9446" class="blob-num js-line-number" data-line-number="9446"></td>
        <td id="LC9446" class="blob-code blob-code-inner js-file-line">    : m_keyValues{preset} {}</td>
      </tr>
      <tr>
        <td id="L9447" class="blob-num js-line-number" data-line-number="9447"></td>
        <td id="LC9447" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9448" class="blob-num js-line-number" data-line-number="9448"></td>
        <td id="LC9448" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> MsgPackConstants <span class="pl-en">FromMsgPackVisitor::getFormatFamily</span>(<span class="pl-c1">uint8_t</span> T) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L9449" class="blob-num js-line-number" data-line-number="9449"></td>
        <td id="LC9449" class="blob-code blob-code-inner js-file-line">    MsgPackConstants formatFamily{MsgPackConstants::UNKNOWN_FORMAT};</td>
      </tr>
      <tr>
        <td id="L9450" class="blob-num js-line-number" data-line-number="9450"></td>
        <td id="LC9450" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9451" class="blob-num js-line-number" data-line-number="9451"></td>
        <td id="LC9451" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(MsgPackConstants::IS_FALSE) == T) {</td>
      </tr>
      <tr>
        <td id="L9452" class="blob-num js-line-number" data-line-number="9452"></td>
        <td id="LC9452" class="blob-code blob-code-inner js-file-line">        formatFamily = MsgPackConstants::BOOL_FORMAT;</td>
      </tr>
      <tr>
        <td id="L9453" class="blob-num js-line-number" data-line-number="9453"></td>
        <td id="LC9453" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(MsgPackConstants::IS_TRUE) == T) {</td>
      </tr>
      <tr>
        <td id="L9454" class="blob-num js-line-number" data-line-number="9454"></td>
        <td id="LC9454" class="blob-code blob-code-inner js-file-line">        formatFamily = MsgPackConstants::BOOL_FORMAT;</td>
      </tr>
      <tr>
        <td id="L9455" class="blob-num js-line-number" data-line-number="9455"></td>
        <td id="LC9455" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-c1">0x7F</span> &gt;= T) {</td>
      </tr>
      <tr>
        <td id="L9456" class="blob-num js-line-number" data-line-number="9456"></td>
        <td id="LC9456" class="blob-code blob-code-inner js-file-line">        formatFamily = MsgPackConstants::UINT_FORMAT;</td>
      </tr>
      <tr>
        <td id="L9457" class="blob-num js-line-number" data-line-number="9457"></td>
        <td id="LC9457" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(MsgPackConstants::UINT8) == T) {</td>
      </tr>
      <tr>
        <td id="L9458" class="blob-num js-line-number" data-line-number="9458"></td>
        <td id="LC9458" class="blob-code blob-code-inner js-file-line">        formatFamily = MsgPackConstants::UINT_FORMAT;</td>
      </tr>
      <tr>
        <td id="L9459" class="blob-num js-line-number" data-line-number="9459"></td>
        <td id="LC9459" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(MsgPackConstants::UINT16) == T) {</td>
      </tr>
      <tr>
        <td id="L9460" class="blob-num js-line-number" data-line-number="9460"></td>
        <td id="LC9460" class="blob-code blob-code-inner js-file-line">        formatFamily = MsgPackConstants::UINT_FORMAT;</td>
      </tr>
      <tr>
        <td id="L9461" class="blob-num js-line-number" data-line-number="9461"></td>
        <td id="LC9461" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(MsgPackConstants::UINT32) == T) {</td>
      </tr>
      <tr>
        <td id="L9462" class="blob-num js-line-number" data-line-number="9462"></td>
        <td id="LC9462" class="blob-code blob-code-inner js-file-line">        formatFamily = MsgPackConstants::UINT_FORMAT;</td>
      </tr>
      <tr>
        <td id="L9463" class="blob-num js-line-number" data-line-number="9463"></td>
        <td id="LC9463" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(MsgPackConstants::UINT64) == T) {</td>
      </tr>
      <tr>
        <td id="L9464" class="blob-num js-line-number" data-line-number="9464"></td>
        <td id="LC9464" class="blob-code blob-code-inner js-file-line">        formatFamily = MsgPackConstants::UINT_FORMAT;</td>
      </tr>
      <tr>
        <td id="L9465" class="blob-num js-line-number" data-line-number="9465"></td>
        <td id="LC9465" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-c1">0xE0</span> &lt;= T) {</td>
      </tr>
      <tr>
        <td id="L9466" class="blob-num js-line-number" data-line-number="9466"></td>
        <td id="LC9466" class="blob-code blob-code-inner js-file-line">        formatFamily = MsgPackConstants::INT_FORMAT;</td>
      </tr>
      <tr>
        <td id="L9467" class="blob-num js-line-number" data-line-number="9467"></td>
        <td id="LC9467" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(MsgPackConstants::INT8) == T) {</td>
      </tr>
      <tr>
        <td id="L9468" class="blob-num js-line-number" data-line-number="9468"></td>
        <td id="LC9468" class="blob-code blob-code-inner js-file-line">        formatFamily = MsgPackConstants::INT_FORMAT;</td>
      </tr>
      <tr>
        <td id="L9469" class="blob-num js-line-number" data-line-number="9469"></td>
        <td id="LC9469" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(MsgPackConstants::INT16) == T) {</td>
      </tr>
      <tr>
        <td id="L9470" class="blob-num js-line-number" data-line-number="9470"></td>
        <td id="LC9470" class="blob-code blob-code-inner js-file-line">        formatFamily = MsgPackConstants::INT_FORMAT;</td>
      </tr>
      <tr>
        <td id="L9471" class="blob-num js-line-number" data-line-number="9471"></td>
        <td id="LC9471" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(MsgPackConstants::INT32) == T) {</td>
      </tr>
      <tr>
        <td id="L9472" class="blob-num js-line-number" data-line-number="9472"></td>
        <td id="LC9472" class="blob-code blob-code-inner js-file-line">        formatFamily = MsgPackConstants::INT_FORMAT;</td>
      </tr>
      <tr>
        <td id="L9473" class="blob-num js-line-number" data-line-number="9473"></td>
        <td id="LC9473" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(MsgPackConstants::INT64) == T) {</td>
      </tr>
      <tr>
        <td id="L9474" class="blob-num js-line-number" data-line-number="9474"></td>
        <td id="LC9474" class="blob-code blob-code-inner js-file-line">        formatFamily = MsgPackConstants::INT_FORMAT;</td>
      </tr>
      <tr>
        <td id="L9475" class="blob-num js-line-number" data-line-number="9475"></td>
        <td id="LC9475" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(MsgPackConstants::FLOAT) == T) {</td>
      </tr>
      <tr>
        <td id="L9476" class="blob-num js-line-number" data-line-number="9476"></td>
        <td id="LC9476" class="blob-code blob-code-inner js-file-line">        formatFamily = MsgPackConstants::FLOAT_FORMAT;</td>
      </tr>
      <tr>
        <td id="L9477" class="blob-num js-line-number" data-line-number="9477"></td>
        <td id="LC9477" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(MsgPackConstants::DOUBLE) == T) {</td>
      </tr>
      <tr>
        <td id="L9478" class="blob-num js-line-number" data-line-number="9478"></td>
        <td id="LC9478" class="blob-code blob-code-inner js-file-line">        formatFamily = MsgPackConstants::FLOAT_FORMAT;</td>
      </tr>
      <tr>
        <td id="L9479" class="blob-num js-line-number" data-line-number="9479"></td>
        <td id="LC9479" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">else</span> <span class="pl-k">if</span> ((<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(MsgPackConstants::FIXSTR) &lt;= T) &amp;&amp; (<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(MsgPackConstants::FIXSTR_END) &gt; T)) {</td>
      </tr>
      <tr>
        <td id="L9480" class="blob-num js-line-number" data-line-number="9480"></td>
        <td id="LC9480" class="blob-code blob-code-inner js-file-line">        formatFamily = MsgPackConstants::STR_FORMAT;</td>
      </tr>
      <tr>
        <td id="L9481" class="blob-num js-line-number" data-line-number="9481"></td>
        <td id="LC9481" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(MsgPackConstants::STR8) == T) {</td>
      </tr>
      <tr>
        <td id="L9482" class="blob-num js-line-number" data-line-number="9482"></td>
        <td id="LC9482" class="blob-code blob-code-inner js-file-line">        formatFamily = MsgPackConstants::STR_FORMAT;</td>
      </tr>
      <tr>
        <td id="L9483" class="blob-num js-line-number" data-line-number="9483"></td>
        <td id="LC9483" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(MsgPackConstants::STR16) == T) {</td>
      </tr>
      <tr>
        <td id="L9484" class="blob-num js-line-number" data-line-number="9484"></td>
        <td id="LC9484" class="blob-code blob-code-inner js-file-line">        formatFamily = MsgPackConstants::STR_FORMAT;</td>
      </tr>
      <tr>
        <td id="L9485" class="blob-num js-line-number" data-line-number="9485"></td>
        <td id="LC9485" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(MsgPackConstants::STR32) == T) {</td>
      </tr>
      <tr>
        <td id="L9486" class="blob-num js-line-number" data-line-number="9486"></td>
        <td id="LC9486" class="blob-code blob-code-inner js-file-line">        formatFamily = MsgPackConstants::STR_FORMAT;</td>
      </tr>
      <tr>
        <td id="L9487" class="blob-num js-line-number" data-line-number="9487"></td>
        <td id="LC9487" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">else</span> <span class="pl-k">if</span> ((<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(MsgPackConstants::FIXMAP) &lt;= T) &amp;&amp; (<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(MsgPackConstants::FIXMAP_END) &gt; T)) {</td>
      </tr>
      <tr>
        <td id="L9488" class="blob-num js-line-number" data-line-number="9488"></td>
        <td id="LC9488" class="blob-code blob-code-inner js-file-line">        formatFamily = MsgPackConstants::MAP_FORMAT;</td>
      </tr>
      <tr>
        <td id="L9489" class="blob-num js-line-number" data-line-number="9489"></td>
        <td id="LC9489" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(MsgPackConstants::MAP16) == T) {</td>
      </tr>
      <tr>
        <td id="L9490" class="blob-num js-line-number" data-line-number="9490"></td>
        <td id="LC9490" class="blob-code blob-code-inner js-file-line">        formatFamily = MsgPackConstants::MAP_FORMAT;</td>
      </tr>
      <tr>
        <td id="L9491" class="blob-num js-line-number" data-line-number="9491"></td>
        <td id="LC9491" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(MsgPackConstants::MAP32) == T) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L9492" class="blob-num js-line-number" data-line-number="9492"></td>
        <td id="LC9492" class="blob-code blob-code-inner js-file-line">        formatFamily = MsgPackConstants::MAP_FORMAT;                 <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L9493" class="blob-num js-line-number" data-line-number="9493"></td>
        <td id="LC9493" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L9494" class="blob-num js-line-number" data-line-number="9494"></td>
        <td id="LC9494" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9495" class="blob-num js-line-number" data-line-number="9495"></td>
        <td id="LC9495" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> formatFamily;</td>
      </tr>
      <tr>
        <td id="L9496" class="blob-num js-line-number" data-line-number="9496"></td>
        <td id="LC9496" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L9497" class="blob-num js-line-number" data-line-number="9497"></td>
        <td id="LC9497" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9498" class="blob-num js-line-number" data-line-number="9498"></td>
        <td id="LC9498" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-c1">uint64_t</span> <span class="pl-en">FromMsgPackVisitor::readUint</span>(std::istream &amp;in) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L9499" class="blob-num js-line-number" data-line-number="9499"></td>
        <td id="LC9499" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">uint64_t</span> retVal{<span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L9500" class="blob-num js-line-number" data-line-number="9500"></td>
        <td id="LC9500" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (in.<span class="pl-c1">good</span>()) {</td>
      </tr>
      <tr>
        <td id="L9501" class="blob-num js-line-number" data-line-number="9501"></td>
        <td id="LC9501" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">uint8_t</span> c = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(in.<span class="pl-c1">get</span>());</td>
      </tr>
      <tr>
        <td id="L9502" class="blob-num js-line-number" data-line-number="9502"></td>
        <td id="LC9502" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (MsgPackConstants::UINT_FORMAT == <span class="pl-c1">getFormatFamily</span>(c)) {</td>
      </tr>
      <tr>
        <td id="L9503" class="blob-num js-line-number" data-line-number="9503"></td>
        <td id="LC9503" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-c1">0x7F</span> &gt;= c) {</td>
      </tr>
      <tr>
        <td id="L9504" class="blob-num js-line-number" data-line-number="9504"></td>
        <td id="LC9504" class="blob-code blob-code-inner js-file-line">                retVal = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint64_t</span>&gt;(c);</td>
      </tr>
      <tr>
        <td id="L9505" class="blob-num js-line-number" data-line-number="9505"></td>
        <td id="LC9505" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(MsgPackConstants::UINT8) == c) {</td>
      </tr>
      <tr>
        <td id="L9506" class="blob-num js-line-number" data-line-number="9506"></td>
        <td id="LC9506" class="blob-code blob-code-inner js-file-line">                <span class="pl-c1">uint8_t</span> v{<span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L9507" class="blob-num js-line-number" data-line-number="9507"></td>
        <td id="LC9507" class="blob-code blob-code-inner js-file-line">                in.<span class="pl-c1">read</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">char</span> *&gt;(&amp;v), <span class="pl-k">sizeof</span>(<span class="pl-c1">uint8_t</span>));</td>
      </tr>
      <tr>
        <td id="L9508" class="blob-num js-line-number" data-line-number="9508"></td>
        <td id="LC9508" class="blob-code blob-code-inner js-file-line">                retVal = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint64_t</span>&gt;(v);</td>
      </tr>
      <tr>
        <td id="L9509" class="blob-num js-line-number" data-line-number="9509"></td>
        <td id="LC9509" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(MsgPackConstants::UINT16) == c) {</td>
      </tr>
      <tr>
        <td id="L9510" class="blob-num js-line-number" data-line-number="9510"></td>
        <td id="LC9510" class="blob-code blob-code-inner js-file-line">                <span class="pl-c1">uint16_t</span> v{<span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L9511" class="blob-num js-line-number" data-line-number="9511"></td>
        <td id="LC9511" class="blob-code blob-code-inner js-file-line">                in.<span class="pl-c1">read</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">char</span> *&gt;(&amp;v), <span class="pl-k">sizeof</span>(<span class="pl-c1">uint16_t</span>));</td>
      </tr>
      <tr>
        <td id="L9512" class="blob-num js-line-number" data-line-number="9512"></td>
        <td id="LC9512" class="blob-code blob-code-inner js-file-line">                v      = <span class="pl-c1">be16toh</span>(v);</td>
      </tr>
      <tr>
        <td id="L9513" class="blob-num js-line-number" data-line-number="9513"></td>
        <td id="LC9513" class="blob-code blob-code-inner js-file-line">                retVal = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint64_t</span>&gt;(v);</td>
      </tr>
      <tr>
        <td id="L9514" class="blob-num js-line-number" data-line-number="9514"></td>
        <td id="LC9514" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(MsgPackConstants::UINT32) == c) {</td>
      </tr>
      <tr>
        <td id="L9515" class="blob-num js-line-number" data-line-number="9515"></td>
        <td id="LC9515" class="blob-code blob-code-inner js-file-line">                <span class="pl-c1">uint32_t</span> v{<span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L9516" class="blob-num js-line-number" data-line-number="9516"></td>
        <td id="LC9516" class="blob-code blob-code-inner js-file-line">                in.<span class="pl-c1">read</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">char</span> *&gt;(&amp;v), <span class="pl-k">sizeof</span>(<span class="pl-c1">uint32_t</span>));</td>
      </tr>
      <tr>
        <td id="L9517" class="blob-num js-line-number" data-line-number="9517"></td>
        <td id="LC9517" class="blob-code blob-code-inner js-file-line">                v      = <span class="pl-c1">be32toh</span>(v);</td>
      </tr>
      <tr>
        <td id="L9518" class="blob-num js-line-number" data-line-number="9518"></td>
        <td id="LC9518" class="blob-code blob-code-inner js-file-line">                retVal = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint64_t</span>&gt;(v);</td>
      </tr>
      <tr>
        <td id="L9519" class="blob-num js-line-number" data-line-number="9519"></td>
        <td id="LC9519" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(MsgPackConstants::UINT64) == c) {</td>
      </tr>
      <tr>
        <td id="L9520" class="blob-num js-line-number" data-line-number="9520"></td>
        <td id="LC9520" class="blob-code blob-code-inner js-file-line">                in.<span class="pl-c1">read</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">char</span> *&gt;(&amp;retVal), <span class="pl-k">sizeof</span>(<span class="pl-c1">uint64_t</span>));</td>
      </tr>
      <tr>
        <td id="L9521" class="blob-num js-line-number" data-line-number="9521"></td>
        <td id="LC9521" class="blob-code blob-code-inner js-file-line">                retVal = <span class="pl-c1">be64toh</span>(retVal);</td>
      </tr>
      <tr>
        <td id="L9522" class="blob-num js-line-number" data-line-number="9522"></td>
        <td id="LC9522" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L9523" class="blob-num js-line-number" data-line-number="9523"></td>
        <td id="LC9523" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L9524" class="blob-num js-line-number" data-line-number="9524"></td>
        <td id="LC9524" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L9525" class="blob-num js-line-number" data-line-number="9525"></td>
        <td id="LC9525" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> retVal;</td>
      </tr>
      <tr>
        <td id="L9526" class="blob-num js-line-number" data-line-number="9526"></td>
        <td id="LC9526" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L9527" class="blob-num js-line-number" data-line-number="9527"></td>
        <td id="LC9527" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9528" class="blob-num js-line-number" data-line-number="9528"></td>
        <td id="LC9528" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-c1">int64_t</span> <span class="pl-en">FromMsgPackVisitor::readInt</span>(std::istream &amp;in) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L9529" class="blob-num js-line-number" data-line-number="9529"></td>
        <td id="LC9529" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">int64_t</span> retVal{<span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L9530" class="blob-num js-line-number" data-line-number="9530"></td>
        <td id="LC9530" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (in.<span class="pl-c1">good</span>()) {</td>
      </tr>
      <tr>
        <td id="L9531" class="blob-num js-line-number" data-line-number="9531"></td>
        <td id="LC9531" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">int8_t</span> c = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int8_t</span>&gt;(in.<span class="pl-c1">get</span>());</td>
      </tr>
      <tr>
        <td id="L9532" class="blob-num js-line-number" data-line-number="9532"></td>
        <td id="LC9532" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (MsgPackConstants::INT_FORMAT == <span class="pl-c1">getFormatFamily</span>(<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(c))) {</td>
      </tr>
      <tr>
        <td id="L9533" class="blob-num js-line-number" data-line-number="9533"></td>
        <td id="LC9533" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-c1">0xE0</span> &lt;= <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(c)) {</td>
      </tr>
      <tr>
        <td id="L9534" class="blob-num js-line-number" data-line-number="9534"></td>
        <td id="LC9534" class="blob-code blob-code-inner js-file-line">                retVal = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int64_t</span>&gt;(c);</td>
      </tr>
      <tr>
        <td id="L9535" class="blob-num js-line-number" data-line-number="9535"></td>
        <td id="LC9535" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int8_t</span>&gt;(MsgPackConstants::INT8) == c) {</td>
      </tr>
      <tr>
        <td id="L9536" class="blob-num js-line-number" data-line-number="9536"></td>
        <td id="LC9536" class="blob-code blob-code-inner js-file-line">                <span class="pl-c1">int8_t</span> v{<span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L9537" class="blob-num js-line-number" data-line-number="9537"></td>
        <td id="LC9537" class="blob-code blob-code-inner js-file-line">                in.<span class="pl-c1">read</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">char</span> *&gt;(&amp;v), <span class="pl-k">sizeof</span>(<span class="pl-c1">int8_t</span>));</td>
      </tr>
      <tr>
        <td id="L9538" class="blob-num js-line-number" data-line-number="9538"></td>
        <td id="LC9538" class="blob-code blob-code-inner js-file-line">                retVal = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int64_t</span>&gt;(v);</td>
      </tr>
      <tr>
        <td id="L9539" class="blob-num js-line-number" data-line-number="9539"></td>
        <td id="LC9539" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int8_t</span>&gt;(MsgPackConstants::INT16) == c) {</td>
      </tr>
      <tr>
        <td id="L9540" class="blob-num js-line-number" data-line-number="9540"></td>
        <td id="LC9540" class="blob-code blob-code-inner js-file-line">                <span class="pl-c1">int16_t</span> v{<span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L9541" class="blob-num js-line-number" data-line-number="9541"></td>
        <td id="LC9541" class="blob-code blob-code-inner js-file-line">                in.<span class="pl-c1">read</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">char</span> *&gt;(&amp;v), <span class="pl-k">sizeof</span>(<span class="pl-c1">int16_t</span>));</td>
      </tr>
      <tr>
        <td id="L9542" class="blob-num js-line-number" data-line-number="9542"></td>
        <td id="LC9542" class="blob-code blob-code-inner js-file-line">                v      = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int16_t</span>&gt;(<span class="pl-c1">be16toh</span>(v));</td>
      </tr>
      <tr>
        <td id="L9543" class="blob-num js-line-number" data-line-number="9543"></td>
        <td id="LC9543" class="blob-code blob-code-inner js-file-line">                retVal = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int64_t</span>&gt;(v);</td>
      </tr>
      <tr>
        <td id="L9544" class="blob-num js-line-number" data-line-number="9544"></td>
        <td id="LC9544" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int8_t</span>&gt;(MsgPackConstants::INT32) == c) {</td>
      </tr>
      <tr>
        <td id="L9545" class="blob-num js-line-number" data-line-number="9545"></td>
        <td id="LC9545" class="blob-code blob-code-inner js-file-line">                <span class="pl-c1">int32_t</span> v{<span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L9546" class="blob-num js-line-number" data-line-number="9546"></td>
        <td id="LC9546" class="blob-code blob-code-inner js-file-line">                in.<span class="pl-c1">read</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">char</span> *&gt;(&amp;v), <span class="pl-k">sizeof</span>(<span class="pl-c1">int32_t</span>));</td>
      </tr>
      <tr>
        <td id="L9547" class="blob-num js-line-number" data-line-number="9547"></td>
        <td id="LC9547" class="blob-code blob-code-inner js-file-line">                v      = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int32_t</span>&gt;(<span class="pl-c1">be32toh</span>(v));</td>
      </tr>
      <tr>
        <td id="L9548" class="blob-num js-line-number" data-line-number="9548"></td>
        <td id="LC9548" class="blob-code blob-code-inner js-file-line">                retVal = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int64_t</span>&gt;(v);</td>
      </tr>
      <tr>
        <td id="L9549" class="blob-num js-line-number" data-line-number="9549"></td>
        <td id="LC9549" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int8_t</span>&gt;(MsgPackConstants::INT64) == c) {</td>
      </tr>
      <tr>
        <td id="L9550" class="blob-num js-line-number" data-line-number="9550"></td>
        <td id="LC9550" class="blob-code blob-code-inner js-file-line">                in.<span class="pl-c1">read</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">char</span> *&gt;(&amp;retVal), <span class="pl-k">sizeof</span>(<span class="pl-c1">int64_t</span>));</td>
      </tr>
      <tr>
        <td id="L9551" class="blob-num js-line-number" data-line-number="9551"></td>
        <td id="LC9551" class="blob-code blob-code-inner js-file-line">                retVal = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int64_t</span>&gt;(<span class="pl-c1">be64toh</span>(retVal));</td>
      </tr>
      <tr>
        <td id="L9552" class="blob-num js-line-number" data-line-number="9552"></td>
        <td id="LC9552" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L9553" class="blob-num js-line-number" data-line-number="9553"></td>
        <td id="LC9553" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L9554" class="blob-num js-line-number" data-line-number="9554"></td>
        <td id="LC9554" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L9555" class="blob-num js-line-number" data-line-number="9555"></td>
        <td id="LC9555" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> retVal;</td>
      </tr>
      <tr>
        <td id="L9556" class="blob-num js-line-number" data-line-number="9556"></td>
        <td id="LC9556" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L9557" class="blob-num js-line-number" data-line-number="9557"></td>
        <td id="LC9557" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9558" class="blob-num js-line-number" data-line-number="9558"></td>
        <td id="LC9558" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::string <span class="pl-en">FromMsgPackVisitor::readString</span>(std::istream &amp;in) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L9559" class="blob-num js-line-number" data-line-number="9559"></td>
        <td id="LC9559" class="blob-code blob-code-inner js-file-line">    std::string retVal{<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>};</td>
      </tr>
      <tr>
        <td id="L9560" class="blob-num js-line-number" data-line-number="9560"></td>
        <td id="LC9560" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (in.<span class="pl-c1">good</span>()) {</td>
      </tr>
      <tr>
        <td id="L9561" class="blob-num js-line-number" data-line-number="9561"></td>
        <td id="LC9561" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">uint8_t</span> c = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(in.<span class="pl-c1">get</span>());</td>
      </tr>
      <tr>
        <td id="L9562" class="blob-num js-line-number" data-line-number="9562"></td>
        <td id="LC9562" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (MsgPackConstants::STR_FORMAT == <span class="pl-c1">getFormatFamily</span>(c)) {</td>
      </tr>
      <tr>
        <td id="L9563" class="blob-num js-line-number" data-line-number="9563"></td>
        <td id="LC9563" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">uint32_t</span> length{<span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L9564" class="blob-num js-line-number" data-line-number="9564"></td>
        <td id="LC9564" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">const</span> <span class="pl-c1">uint8_t</span> T = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(c);</td>
      </tr>
      <tr>
        <td id="L9565" class="blob-num js-line-number" data-line-number="9565"></td>
        <td id="LC9565" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> ((<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(MsgPackConstants::FIXSTR) &lt;= T) &amp;&amp; (<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(MsgPackConstants::FIXSTR_END) &gt; T)) {</td>
      </tr>
      <tr>
        <td id="L9566" class="blob-num js-line-number" data-line-number="9566"></td>
        <td id="LC9566" class="blob-code blob-code-inner js-file-line">                length = T - <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(MsgPackConstants::FIXSTR);</td>
      </tr>
      <tr>
        <td id="L9567" class="blob-num js-line-number" data-line-number="9567"></td>
        <td id="LC9567" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(MsgPackConstants::STR8) == T) {</td>
      </tr>
      <tr>
        <td id="L9568" class="blob-num js-line-number" data-line-number="9568"></td>
        <td id="LC9568" class="blob-code blob-code-inner js-file-line">                <span class="pl-c1">uint8_t</span> _length{<span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L9569" class="blob-num js-line-number" data-line-number="9569"></td>
        <td id="LC9569" class="blob-code blob-code-inner js-file-line">                in.<span class="pl-c1">read</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">char</span> *&gt;(&amp;_length), <span class="pl-k">sizeof</span>(<span class="pl-c1">uint8_t</span>));</td>
      </tr>
      <tr>
        <td id="L9570" class="blob-num js-line-number" data-line-number="9570"></td>
        <td id="LC9570" class="blob-code blob-code-inner js-file-line">                length = _length;</td>
      </tr>
      <tr>
        <td id="L9571" class="blob-num js-line-number" data-line-number="9571"></td>
        <td id="LC9571" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(MsgPackConstants::STR16) == T) {</td>
      </tr>
      <tr>
        <td id="L9572" class="blob-num js-line-number" data-line-number="9572"></td>
        <td id="LC9572" class="blob-code blob-code-inner js-file-line">                <span class="pl-c1">uint16_t</span> _length{<span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L9573" class="blob-num js-line-number" data-line-number="9573"></td>
        <td id="LC9573" class="blob-code blob-code-inner js-file-line">                in.<span class="pl-c1">read</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">char</span> *&gt;(&amp;_length), <span class="pl-k">sizeof</span>(<span class="pl-c1">uint16_t</span>));</td>
      </tr>
      <tr>
        <td id="L9574" class="blob-num js-line-number" data-line-number="9574"></td>
        <td id="LC9574" class="blob-code blob-code-inner js-file-line">                length = <span class="pl-c1">be16toh</span>(_length);</td>
      </tr>
      <tr>
        <td id="L9575" class="blob-num js-line-number" data-line-number="9575"></td>
        <td id="LC9575" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(MsgPackConstants::STR32) == T) {</td>
      </tr>
      <tr>
        <td id="L9576" class="blob-num js-line-number" data-line-number="9576"></td>
        <td id="LC9576" class="blob-code blob-code-inner js-file-line">                in.<span class="pl-c1">read</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">char</span> *&gt;(&amp;length), <span class="pl-k">sizeof</span>(<span class="pl-c1">uint32_t</span>));</td>
      </tr>
      <tr>
        <td id="L9577" class="blob-num js-line-number" data-line-number="9577"></td>
        <td id="LC9577" class="blob-code blob-code-inner js-file-line">                length = <span class="pl-c1">be32toh</span>(length);</td>
      </tr>
      <tr>
        <td id="L9578" class="blob-num js-line-number" data-line-number="9578"></td>
        <td id="LC9578" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L9579" class="blob-num js-line-number" data-line-number="9579"></td>
        <td id="LC9579" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9580" class="blob-num js-line-number" data-line-number="9580"></td>
        <td id="LC9580" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-c1">0</span> &lt; length) {</td>
      </tr>
      <tr>
        <td id="L9581" class="blob-num js-line-number" data-line-number="9581"></td>
        <td id="LC9581" class="blob-code blob-code-inner js-file-line">                std::vector&lt;<span class="pl-k">char</span>&gt; buffer;</td>
      </tr>
      <tr>
        <td id="L9582" class="blob-num js-line-number" data-line-number="9582"></td>
        <td id="LC9582" class="blob-code blob-code-inner js-file-line">                buffer.<span class="pl-c1">reserve</span>(length);</td>
      </tr>
      <tr>
        <td id="L9583" class="blob-num js-line-number" data-line-number="9583"></td>
        <td id="LC9583" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifdef</span> WIN32</td>
      </tr>
      <tr>
        <td id="L9584" class="blob-num js-line-number" data-line-number="9584"></td>
        <td id="LC9584" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">for</span> (<span class="pl-c1">uint32_t</span> i = <span class="pl-c1">0</span>; i &lt; <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint32_t</span>&gt;(length); i++) {</td>
      </tr>
      <tr>
        <td id="L9585" class="blob-num js-line-number" data-line-number="9585"></td>
        <td id="LC9585" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">char</span> c;</td>
      </tr>
      <tr>
        <td id="L9586" class="blob-num js-line-number" data-line-number="9586"></td>
        <td id="LC9586" class="blob-code blob-code-inner js-file-line">                    in.<span class="pl-c1">get</span>(c);</td>
      </tr>
      <tr>
        <td id="L9587" class="blob-num js-line-number" data-line-number="9587"></td>
        <td id="LC9587" class="blob-code blob-code-inner js-file-line">                    buffer.<span class="pl-c1">push_back</span>(c);</td>
      </tr>
      <tr>
        <td id="L9588" class="blob-num js-line-number" data-line-number="9588"></td>
        <td id="LC9588" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L9589" class="blob-num js-line-number" data-line-number="9589"></td>
        <td id="LC9589" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">else</span></td>
      </tr>
      <tr>
        <td id="L9590" class="blob-num js-line-number" data-line-number="9590"></td>
        <td id="LC9590" class="blob-code blob-code-inner js-file-line">                in.<span class="pl-c1">read</span>(<span class="pl-k">static_cast</span>&lt;<span class="pl-k">char</span> *&gt;(&amp;buffer[<span class="pl-c1">0</span>]), <span class="pl-k">static_cast</span>&lt;std::streamsize&gt;(length));</td>
      </tr>
      <tr>
        <td id="L9591" class="blob-num js-line-number" data-line-number="9591"></td>
        <td id="LC9591" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L9592" class="blob-num js-line-number" data-line-number="9592"></td>
        <td id="LC9592" class="blob-code blob-code-inner js-file-line">                retVal = <span class="pl-c1">std::string</span>(buffer.<span class="pl-c1">data</span>(), length);</td>
      </tr>
      <tr>
        <td id="L9593" class="blob-num js-line-number" data-line-number="9593"></td>
        <td id="LC9593" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L9594" class="blob-num js-line-number" data-line-number="9594"></td>
        <td id="LC9594" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L9595" class="blob-num js-line-number" data-line-number="9595"></td>
        <td id="LC9595" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L9596" class="blob-num js-line-number" data-line-number="9596"></td>
        <td id="LC9596" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> retVal;</td>
      </tr>
      <tr>
        <td id="L9597" class="blob-num js-line-number" data-line-number="9597"></td>
        <td id="LC9597" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L9598" class="blob-num js-line-number" data-line-number="9598"></td>
        <td id="LC9598" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9599" class="blob-num js-line-number" data-line-number="9599"></td>
        <td id="LC9599" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::map&lt;std::string, FromMsgPackVisitor::MsgPackKeyValue&gt; <span class="pl-en">FromMsgPackVisitor::readKeyValues</span>(std::istream &amp;in) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L9600" class="blob-num js-line-number" data-line-number="9600"></td>
        <td id="LC9600" class="blob-code blob-code-inner js-file-line">    std::map&lt;std::string, FromMsgPackVisitor::MsgPackKeyValue&gt; keyValues;</td>
      </tr>
      <tr>
        <td id="L9601" class="blob-num js-line-number" data-line-number="9601"></td>
        <td id="LC9601" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">while</span> (in.<span class="pl-c1">good</span>()) {</td>
      </tr>
      <tr>
        <td id="L9602" class="blob-num js-line-number" data-line-number="9602"></td>
        <td id="LC9602" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">uint8_t</span> c = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(in.<span class="pl-c1">get</span>());</td>
      </tr>
      <tr>
        <td id="L9603" class="blob-num js-line-number" data-line-number="9603"></td>
        <td id="LC9603" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (MsgPackConstants::MAP_FORMAT == <span class="pl-c1">getFormatFamily</span>(c)) {</td>
      </tr>
      <tr>
        <td id="L9604" class="blob-num js-line-number" data-line-number="9604"></td>
        <td id="LC9604" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> First, search for map opening token.</span></td>
      </tr>
      <tr>
        <td id="L9605" class="blob-num js-line-number" data-line-number="9605"></td>
        <td id="LC9605" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">const</span> <span class="pl-c1">uint8_t</span> T = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(c);</td>
      </tr>
      <tr>
        <td id="L9606" class="blob-num js-line-number" data-line-number="9606"></td>
        <td id="LC9606" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">uint32_t</span> tokensToRead{<span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L9607" class="blob-num js-line-number" data-line-number="9607"></td>
        <td id="LC9607" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> ((<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(MsgPackConstants::FIXMAP) &lt;= T) &amp;&amp; (<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(MsgPackConstants::FIXMAP_END) &gt; T)) {</td>
      </tr>
      <tr>
        <td id="L9608" class="blob-num js-line-number" data-line-number="9608"></td>
        <td id="LC9608" class="blob-code blob-code-inner js-file-line">                tokensToRead = T - <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(MsgPackConstants::FIXMAP);</td>
      </tr>
      <tr>
        <td id="L9609" class="blob-num js-line-number" data-line-number="9609"></td>
        <td id="LC9609" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(MsgPackConstants::MAP16) == T) {</td>
      </tr>
      <tr>
        <td id="L9610" class="blob-num js-line-number" data-line-number="9610"></td>
        <td id="LC9610" class="blob-code blob-code-inner js-file-line">                <span class="pl-c1">uint16_t</span> tokens{<span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L9611" class="blob-num js-line-number" data-line-number="9611"></td>
        <td id="LC9611" class="blob-code blob-code-inner js-file-line">                in.<span class="pl-c1">read</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">char</span> *&gt;(&amp;tokens), <span class="pl-k">sizeof</span>(<span class="pl-c1">uint16_t</span>));</td>
      </tr>
      <tr>
        <td id="L9612" class="blob-num js-line-number" data-line-number="9612"></td>
        <td id="LC9612" class="blob-code blob-code-inner js-file-line">                tokensToRead = <span class="pl-c1">be16toh</span>(tokens);</td>
      </tr>
      <tr>
        <td id="L9613" class="blob-num js-line-number" data-line-number="9613"></td>
        <td id="LC9613" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(MsgPackConstants::MAP32) == T) {        <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L9614" class="blob-num js-line-number" data-line-number="9614"></td>
        <td id="LC9614" class="blob-code blob-code-inner js-file-line">                in.<span class="pl-c1">read</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">char</span> *&gt;(&amp;tokensToRead), <span class="pl-k">sizeof</span>(<span class="pl-c1">uint32_t</span>)); <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L9615" class="blob-num js-line-number" data-line-number="9615"></td>
        <td id="LC9615" class="blob-code blob-code-inner js-file-line">                tokensToRead = <span class="pl-c1">be32toh</span>(tokensToRead);                               <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L9616" class="blob-num js-line-number" data-line-number="9616"></td>
        <td id="LC9616" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L9617" class="blob-num js-line-number" data-line-number="9617"></td>
        <td id="LC9617" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9618" class="blob-num js-line-number" data-line-number="9618"></td>
        <td id="LC9618" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> Next, read pairs string/value.</span></td>
      </tr>
      <tr>
        <td id="L9619" class="blob-num js-line-number" data-line-number="9619"></td>
        <td id="LC9619" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">while</span> (<span class="pl-c1">0</span> &lt; tokensToRead) {</td>
      </tr>
      <tr>
        <td id="L9620" class="blob-num js-line-number" data-line-number="9620"></td>
        <td id="LC9620" class="blob-code blob-code-inner js-file-line">                MsgPackKeyValue entry;</td>
      </tr>
      <tr>
        <td id="L9621" class="blob-num js-line-number" data-line-number="9621"></td>
        <td id="LC9621" class="blob-code blob-code-inner js-file-line">                entry.<span class="pl-smi">m_key</span> = <span class="pl-c1">readString</span>(in);</td>
      </tr>
      <tr>
        <td id="L9622" class="blob-num js-line-number" data-line-number="9622"></td>
        <td id="LC9622" class="blob-code blob-code-inner js-file-line">                <span class="pl-c"><span class="pl-c">//</span> Read next byte and determine format family.</span></td>
      </tr>
      <tr>
        <td id="L9623" class="blob-num js-line-number" data-line-number="9623"></td>
        <td id="LC9623" class="blob-code blob-code-inner js-file-line">                c                    = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(in.<span class="pl-c1">get</span>());</td>
      </tr>
      <tr>
        <td id="L9624" class="blob-num js-line-number" data-line-number="9624"></td>
        <td id="LC9624" class="blob-code blob-code-inner js-file-line">                entry.<span class="pl-smi">m_formatFamily</span> = <span class="pl-c1">getFormatFamily</span>(c);</td>
      </tr>
      <tr>
        <td id="L9625" class="blob-num js-line-number" data-line-number="9625"></td>
        <td id="LC9625" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9626" class="blob-num js-line-number" data-line-number="9626"></td>
        <td id="LC9626" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">if</span> (MsgPackConstants::BOOL_FORMAT == entry.<span class="pl-smi">m_formatFamily</span>) {</td>
      </tr>
      <tr>
        <td id="L9627" class="blob-num js-line-number" data-line-number="9627"></td>
        <td id="LC9627" class="blob-code blob-code-inner js-file-line">                    entry.<span class="pl-smi">m_value</span> = <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L9628" class="blob-num js-line-number" data-line-number="9628"></td>
        <td id="LC9628" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">if</span> (<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(c) == <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(MsgPackConstants::IS_TRUE)) {</td>
      </tr>
      <tr>
        <td id="L9629" class="blob-num js-line-number" data-line-number="9629"></td>
        <td id="LC9629" class="blob-code blob-code-inner js-file-line">                        entry.<span class="pl-smi">m_value</span> = <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L9630" class="blob-num js-line-number" data-line-number="9630"></td>
        <td id="LC9630" class="blob-code blob-code-inner js-file-line">                    } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(c) == <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(MsgPackConstants::IS_FALSE)) {</td>
      </tr>
      <tr>
        <td id="L9631" class="blob-num js-line-number" data-line-number="9631"></td>
        <td id="LC9631" class="blob-code blob-code-inner js-file-line">                        entry.<span class="pl-smi">m_value</span> = <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L9632" class="blob-num js-line-number" data-line-number="9632"></td>
        <td id="LC9632" class="blob-code blob-code-inner js-file-line">                    }</td>
      </tr>
      <tr>
        <td id="L9633" class="blob-num js-line-number" data-line-number="9633"></td>
        <td id="LC9633" class="blob-code blob-code-inner js-file-line">                } <span class="pl-k">else</span> <span class="pl-k">if</span> (MsgPackConstants::UINT_FORMAT == entry.<span class="pl-smi">m_formatFamily</span>) {</td>
      </tr>
      <tr>
        <td id="L9634" class="blob-num js-line-number" data-line-number="9634"></td>
        <td id="LC9634" class="blob-code blob-code-inner js-file-line">                    in.<span class="pl-c1">unget</span>(); <span class="pl-c"><span class="pl-c">//</span> Last character needs to be put back to process the uints correctly as it might</span></td>
      </tr>
      <tr>
        <td id="L9635" class="blob-num js-line-number" data-line-number="9635"></td>
        <td id="LC9635" class="blob-code blob-code-inner js-file-line">                                <span class="pl-c"><span class="pl-c">//</span> contain the value.</span></td>
      </tr>
      <tr>
        <td id="L9636" class="blob-num js-line-number" data-line-number="9636"></td>
        <td id="LC9636" class="blob-code blob-code-inner js-file-line">                    entry.<span class="pl-smi">m_value</span> = <span class="pl-c1">readUint</span>(in);</td>
      </tr>
      <tr>
        <td id="L9637" class="blob-num js-line-number" data-line-number="9637"></td>
        <td id="LC9637" class="blob-code blob-code-inner js-file-line">                } <span class="pl-k">else</span> <span class="pl-k">if</span> (MsgPackConstants::INT_FORMAT == entry.<span class="pl-smi">m_formatFamily</span>) {</td>
      </tr>
      <tr>
        <td id="L9638" class="blob-num js-line-number" data-line-number="9638"></td>
        <td id="LC9638" class="blob-code blob-code-inner js-file-line">                    in.<span class="pl-c1">unget</span>(); <span class="pl-c"><span class="pl-c">//</span> Last character needs to be put back to process the ints correctly as it might contain</span></td>
      </tr>
      <tr>
        <td id="L9639" class="blob-num js-line-number" data-line-number="9639"></td>
        <td id="LC9639" class="blob-code blob-code-inner js-file-line">                                <span class="pl-c"><span class="pl-c">//</span> the value.</span></td>
      </tr>
      <tr>
        <td id="L9640" class="blob-num js-line-number" data-line-number="9640"></td>
        <td id="LC9640" class="blob-code blob-code-inner js-file-line">                    entry.<span class="pl-smi">m_value</span> = <span class="pl-c1">readInt</span>(in);</td>
      </tr>
      <tr>
        <td id="L9641" class="blob-num js-line-number" data-line-number="9641"></td>
        <td id="LC9641" class="blob-code blob-code-inner js-file-line">                } <span class="pl-k">else</span> <span class="pl-k">if</span> (MsgPackConstants::FLOAT_FORMAT == entry.<span class="pl-smi">m_formatFamily</span>) {</td>
      </tr>
      <tr>
        <td id="L9642" class="blob-num js-line-number" data-line-number="9642"></td>
        <td id="LC9642" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">if</span> (<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(c) == <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(MsgPackConstants::FLOAT)) {</td>
      </tr>
      <tr>
        <td id="L9643" class="blob-num js-line-number" data-line-number="9643"></td>
        <td id="LC9643" class="blob-code blob-code-inner js-file-line">                        <span class="pl-c1">uint32_t</span> _v{<span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L9644" class="blob-num js-line-number" data-line-number="9644"></td>
        <td id="LC9644" class="blob-code blob-code-inner js-file-line">                        in.<span class="pl-c1">read</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">char</span> *&gt;(&amp;_v), <span class="pl-k">sizeof</span>(<span class="pl-c1">uint32_t</span>));</td>
      </tr>
      <tr>
        <td id="L9645" class="blob-num js-line-number" data-line-number="9645"></td>
        <td id="LC9645" class="blob-code blob-code-inner js-file-line">                        _v = <span class="pl-c1">be32toh</span>(_v);</td>
      </tr>
      <tr>
        <td id="L9646" class="blob-num js-line-number" data-line-number="9646"></td>
        <td id="LC9646" class="blob-code blob-code-inner js-file-line">                        <span class="pl-k">float</span> v{<span class="pl-c1">0</span>.<span class="pl-c1">0f</span>};</td>
      </tr>
      <tr>
        <td id="L9647" class="blob-num js-line-number" data-line-number="9647"></td>
        <td id="LC9647" class="blob-code blob-code-inner js-file-line">                        <span class="pl-c1">std::memmove</span>(&amp;v, &amp;_v, <span class="pl-k">sizeof</span>(<span class="pl-k">float</span>));</td>
      </tr>
      <tr>
        <td id="L9648" class="blob-num js-line-number" data-line-number="9648"></td>
        <td id="LC9648" class="blob-code blob-code-inner js-file-line">                        entry.<span class="pl-smi">m_value</span> = v;</td>
      </tr>
      <tr>
        <td id="L9649" class="blob-num js-line-number" data-line-number="9649"></td>
        <td id="LC9649" class="blob-code blob-code-inner js-file-line">                    }</td>
      </tr>
      <tr>
        <td id="L9650" class="blob-num js-line-number" data-line-number="9650"></td>
        <td id="LC9650" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">if</span> (<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(c) == <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(MsgPackConstants::DOUBLE)) {</td>
      </tr>
      <tr>
        <td id="L9651" class="blob-num js-line-number" data-line-number="9651"></td>
        <td id="LC9651" class="blob-code blob-code-inner js-file-line">                        <span class="pl-c1">uint64_t</span> _v{<span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L9652" class="blob-num js-line-number" data-line-number="9652"></td>
        <td id="LC9652" class="blob-code blob-code-inner js-file-line">                        in.<span class="pl-c1">read</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">char</span> *&gt;(&amp;_v), <span class="pl-k">sizeof</span>(<span class="pl-c1">uint64_t</span>));</td>
      </tr>
      <tr>
        <td id="L9653" class="blob-num js-line-number" data-line-number="9653"></td>
        <td id="LC9653" class="blob-code blob-code-inner js-file-line">                        _v = <span class="pl-c1">be64toh</span>(_v);</td>
      </tr>
      <tr>
        <td id="L9654" class="blob-num js-line-number" data-line-number="9654"></td>
        <td id="LC9654" class="blob-code blob-code-inner js-file-line">                        <span class="pl-k">double</span> v{<span class="pl-c1">0.0</span>};</td>
      </tr>
      <tr>
        <td id="L9655" class="blob-num js-line-number" data-line-number="9655"></td>
        <td id="LC9655" class="blob-code blob-code-inner js-file-line">                        <span class="pl-c1">std::memmove</span>(&amp;v, &amp;_v, <span class="pl-k">sizeof</span>(<span class="pl-k">double</span>));</td>
      </tr>
      <tr>
        <td id="L9656" class="blob-num js-line-number" data-line-number="9656"></td>
        <td id="LC9656" class="blob-code blob-code-inner js-file-line">                        entry.<span class="pl-smi">m_value</span> = v;</td>
      </tr>
      <tr>
        <td id="L9657" class="blob-num js-line-number" data-line-number="9657"></td>
        <td id="LC9657" class="blob-code blob-code-inner js-file-line">                    }</td>
      </tr>
      <tr>
        <td id="L9658" class="blob-num js-line-number" data-line-number="9658"></td>
        <td id="LC9658" class="blob-code blob-code-inner js-file-line">                } <span class="pl-k">else</span> <span class="pl-k">if</span> (MsgPackConstants::STR_FORMAT == entry.<span class="pl-smi">m_formatFamily</span>) {</td>
      </tr>
      <tr>
        <td id="L9659" class="blob-num js-line-number" data-line-number="9659"></td>
        <td id="LC9659" class="blob-code blob-code-inner js-file-line">                    in.<span class="pl-c1">unget</span>(); <span class="pl-c"><span class="pl-c">//</span> Last character needs to be put back to process the string correctly as it might</span></td>
      </tr>
      <tr>
        <td id="L9660" class="blob-num js-line-number" data-line-number="9660"></td>
        <td id="LC9660" class="blob-code blob-code-inner js-file-line">                                <span class="pl-c"><span class="pl-c">//</span> encode its length.</span></td>
      </tr>
      <tr>
        <td id="L9661" class="blob-num js-line-number" data-line-number="9661"></td>
        <td id="LC9661" class="blob-code blob-code-inner js-file-line">                    entry.<span class="pl-smi">m_value</span> = <span class="pl-c1">readString</span>(in);</td>
      </tr>
      <tr>
        <td id="L9662" class="blob-num js-line-number" data-line-number="9662"></td>
        <td id="LC9662" class="blob-code blob-code-inner js-file-line">                } <span class="pl-k">else</span> <span class="pl-k">if</span> (MsgPackConstants::MAP_FORMAT == entry.<span class="pl-smi">m_formatFamily</span>) {</td>
      </tr>
      <tr>
        <td id="L9663" class="blob-num js-line-number" data-line-number="9663"></td>
        <td id="LC9663" class="blob-code blob-code-inner js-file-line">                    in.<span class="pl-c1">unget</span>(); <span class="pl-c"><span class="pl-c">//</span> Last character needs to be put back to process the contained nested map correctly as</span></td>
      </tr>
      <tr>
        <td id="L9664" class="blob-num js-line-number" data-line-number="9664"></td>
        <td id="LC9664" class="blob-code blob-code-inner js-file-line">                                <span class="pl-c"><span class="pl-c">//</span> it might encode its length.</span></td>
      </tr>
      <tr>
        <td id="L9665" class="blob-num js-line-number" data-line-number="9665"></td>
        <td id="LC9665" class="blob-code blob-code-inner js-file-line">                    entry.<span class="pl-smi">m_value</span> = <span class="pl-c1">readKeyValues</span>(in);</td>
      </tr>
      <tr>
        <td id="L9666" class="blob-num js-line-number" data-line-number="9666"></td>
        <td id="LC9666" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L9667" class="blob-num js-line-number" data-line-number="9667"></td>
        <td id="LC9667" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9668" class="blob-num js-line-number" data-line-number="9668"></td>
        <td id="LC9668" class="blob-code blob-code-inner js-file-line">                keyValues[entry.<span class="pl-smi">m_key</span>] = entry;</td>
      </tr>
      <tr>
        <td id="L9669" class="blob-num js-line-number" data-line-number="9669"></td>
        <td id="LC9669" class="blob-code blob-code-inner js-file-line">                tokensToRead--;</td>
      </tr>
      <tr>
        <td id="L9670" class="blob-num js-line-number" data-line-number="9670"></td>
        <td id="LC9670" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L9671" class="blob-num js-line-number" data-line-number="9671"></td>
        <td id="LC9671" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> Stop processing further tokens (might be handled from outer decoder).</span></td>
      </tr>
      <tr>
        <td id="L9672" class="blob-num js-line-number" data-line-number="9672"></td>
        <td id="LC9672" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L9673" class="blob-num js-line-number" data-line-number="9673"></td>
        <td id="LC9673" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L9674" class="blob-num js-line-number" data-line-number="9674"></td>
        <td id="LC9674" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L9675" class="blob-num js-line-number" data-line-number="9675"></td>
        <td id="LC9675" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> keyValues;</td>
      </tr>
      <tr>
        <td id="L9676" class="blob-num js-line-number" data-line-number="9676"></td>
        <td id="LC9676" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L9677" class="blob-num js-line-number" data-line-number="9677"></td>
        <td id="LC9677" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9678" class="blob-num js-line-number" data-line-number="9678"></td>
        <td id="LC9678" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromMsgPackVisitor::decodeFrom</span>(std::istream &amp;in) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L9679" class="blob-num js-line-number" data-line-number="9679"></td>
        <td id="LC9679" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)in;</td>
      </tr>
      <tr>
        <td id="L9680" class="blob-num js-line-number" data-line-number="9680"></td>
        <td id="LC9680" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9681" class="blob-num js-line-number" data-line-number="9681"></td>
        <td id="LC9681" class="blob-code blob-code-inner js-file-line">    m_keyValues = <span class="pl-c1">readKeyValues</span>(in);</td>
      </tr>
      <tr>
        <td id="L9682" class="blob-num js-line-number" data-line-number="9682"></td>
        <td id="LC9682" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L9683" class="blob-num js-line-number" data-line-number="9683"></td>
        <td id="LC9683" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9684" class="blob-num js-line-number" data-line-number="9684"></td>
        <td id="LC9684" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromMsgPackVisitor::preVisit</span>(<span class="pl-c1">int32_t</span> id, <span class="pl-k">const</span> std::string &amp;shortName, <span class="pl-k">const</span> std::string &amp;longName) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L9685" class="blob-num js-line-number" data-line-number="9685"></td>
        <td id="LC9685" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L9686" class="blob-num js-line-number" data-line-number="9686"></td>
        <td id="LC9686" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)shortName;</td>
      </tr>
      <tr>
        <td id="L9687" class="blob-num js-line-number" data-line-number="9687"></td>
        <td id="LC9687" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)longName;</td>
      </tr>
      <tr>
        <td id="L9688" class="blob-num js-line-number" data-line-number="9688"></td>
        <td id="LC9688" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L9689" class="blob-num js-line-number" data-line-number="9689"></td>
        <td id="LC9689" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9690" class="blob-num js-line-number" data-line-number="9690"></td>
        <td id="LC9690" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromMsgPackVisitor::postVisit</span>() <span class="pl-k">noexcept</span> {}</td>
      </tr>
      <tr>
        <td id="L9691" class="blob-num js-line-number" data-line-number="9691"></td>
        <td id="LC9691" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9692" class="blob-num js-line-number" data-line-number="9692"></td>
        <td id="LC9692" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromMsgPackVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">bool</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L9693" class="blob-num js-line-number" data-line-number="9693"></td>
        <td id="LC9693" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L9694" class="blob-num js-line-number" data-line-number="9694"></td>
        <td id="LC9694" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L9695" class="blob-num js-line-number" data-line-number="9695"></td>
        <td id="LC9695" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-c1">0</span> &lt; m_keyValues.<span class="pl-c1">count</span>(name)) {</td>
      </tr>
      <tr>
        <td id="L9696" class="blob-num js-line-number" data-line-number="9696"></td>
        <td id="LC9696" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L9697" class="blob-num js-line-number" data-line-number="9697"></td>
        <td id="LC9697" class="blob-code blob-code-inner js-file-line">            v = linb::any_cast&lt;<span class="pl-k">bool</span>&gt;(m_keyValues[name].<span class="pl-smi">m_value</span>);</td>
      </tr>
      <tr>
        <td id="L9698" class="blob-num js-line-number" data-line-number="9698"></td>
        <td id="LC9698" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L9699" class="blob-num js-line-number" data-line-number="9699"></td>
        <td id="LC9699" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L9700" class="blob-num js-line-number" data-line-number="9700"></td>
        <td id="LC9700" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L9701" class="blob-num js-line-number" data-line-number="9701"></td>
        <td id="LC9701" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L9702" class="blob-num js-line-number" data-line-number="9702"></td>
        <td id="LC9702" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9703" class="blob-num js-line-number" data-line-number="9703"></td>
        <td id="LC9703" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromMsgPackVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">char</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L9704" class="blob-num js-line-number" data-line-number="9704"></td>
        <td id="LC9704" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L9705" class="blob-num js-line-number" data-line-number="9705"></td>
        <td id="LC9705" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L9706" class="blob-num js-line-number" data-line-number="9706"></td>
        <td id="LC9706" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-c1">0</span> &lt; m_keyValues.<span class="pl-c1">count</span>(name)) {</td>
      </tr>
      <tr>
        <td id="L9707" class="blob-num js-line-number" data-line-number="9707"></td>
        <td id="LC9707" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L9708" class="blob-num js-line-number" data-line-number="9708"></td>
        <td id="LC9708" class="blob-code blob-code-inner js-file-line">            v = linb::any_cast&lt;std::string&gt;(m_keyValues[name].<span class="pl-smi">m_value</span>).<span class="pl-c1">at</span>(<span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L9709" class="blob-num js-line-number" data-line-number="9709"></td>
        <td id="LC9709" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L9710" class="blob-num js-line-number" data-line-number="9710"></td>
        <td id="LC9710" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L9711" class="blob-num js-line-number" data-line-number="9711"></td>
        <td id="LC9711" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L9712" class="blob-num js-line-number" data-line-number="9712"></td>
        <td id="LC9712" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L9713" class="blob-num js-line-number" data-line-number="9713"></td>
        <td id="LC9713" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9714" class="blob-num js-line-number" data-line-number="9714"></td>
        <td id="LC9714" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromMsgPackVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int8_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L9715" class="blob-num js-line-number" data-line-number="9715"></td>
        <td id="LC9715" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L9716" class="blob-num js-line-number" data-line-number="9716"></td>
        <td id="LC9716" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L9717" class="blob-num js-line-number" data-line-number="9717"></td>
        <td id="LC9717" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-c1">0</span> &lt; m_keyValues.<span class="pl-c1">count</span>(name)) {</td>
      </tr>
      <tr>
        <td id="L9718" class="blob-num js-line-number" data-line-number="9718"></td>
        <td id="LC9718" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L9719" class="blob-num js-line-number" data-line-number="9719"></td>
        <td id="LC9719" class="blob-code blob-code-inner js-file-line">            v = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int8_t</span>&gt;(linb::any_cast&lt;<span class="pl-c1">int64_t</span>&gt;(m_keyValues[name].<span class="pl-smi">m_value</span>));</td>
      </tr>
      <tr>
        <td id="L9720" class="blob-num js-line-number" data-line-number="9720"></td>
        <td id="LC9720" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) {</td>
      </tr>
      <tr>
        <td id="L9721" class="blob-num js-line-number" data-line-number="9721"></td>
        <td id="LC9721" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> A positive value was stored.</span></td>
      </tr>
      <tr>
        <td id="L9722" class="blob-num js-line-number" data-line-number="9722"></td>
        <td id="LC9722" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L9723" class="blob-num js-line-number" data-line-number="9723"></td>
        <td id="LC9723" class="blob-code blob-code-inner js-file-line">                v = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int8_t</span>&gt;(linb::any_cast&lt;<span class="pl-c1">uint64_t</span>&gt;(m_keyValues[name].<span class="pl-smi">m_value</span>));</td>
      </tr>
      <tr>
        <td id="L9724" class="blob-num js-line-number" data-line-number="9724"></td>
        <td id="LC9724" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L9725" class="blob-num js-line-number" data-line-number="9725"></td>
        <td id="LC9725" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L9726" class="blob-num js-line-number" data-line-number="9726"></td>
        <td id="LC9726" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L9727" class="blob-num js-line-number" data-line-number="9727"></td>
        <td id="LC9727" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L9728" class="blob-num js-line-number" data-line-number="9728"></td>
        <td id="LC9728" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L9729" class="blob-num js-line-number" data-line-number="9729"></td>
        <td id="LC9729" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9730" class="blob-num js-line-number" data-line-number="9730"></td>
        <td id="LC9730" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromMsgPackVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint8_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L9731" class="blob-num js-line-number" data-line-number="9731"></td>
        <td id="LC9731" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L9732" class="blob-num js-line-number" data-line-number="9732"></td>
        <td id="LC9732" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L9733" class="blob-num js-line-number" data-line-number="9733"></td>
        <td id="LC9733" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-c1">0</span> &lt; m_keyValues.<span class="pl-c1">count</span>(name)) {</td>
      </tr>
      <tr>
        <td id="L9734" class="blob-num js-line-number" data-line-number="9734"></td>
        <td id="LC9734" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L9735" class="blob-num js-line-number" data-line-number="9735"></td>
        <td id="LC9735" class="blob-code blob-code-inner js-file-line">            v = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(linb::any_cast&lt;<span class="pl-c1">uint64_t</span>&gt;(m_keyValues[name].<span class="pl-smi">m_value</span>));</td>
      </tr>
      <tr>
        <td id="L9736" class="blob-num js-line-number" data-line-number="9736"></td>
        <td id="LC9736" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L9737" class="blob-num js-line-number" data-line-number="9737"></td>
        <td id="LC9737" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L9738" class="blob-num js-line-number" data-line-number="9738"></td>
        <td id="LC9738" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L9739" class="blob-num js-line-number" data-line-number="9739"></td>
        <td id="LC9739" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L9740" class="blob-num js-line-number" data-line-number="9740"></td>
        <td id="LC9740" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9741" class="blob-num js-line-number" data-line-number="9741"></td>
        <td id="LC9741" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromMsgPackVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int16_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L9742" class="blob-num js-line-number" data-line-number="9742"></td>
        <td id="LC9742" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L9743" class="blob-num js-line-number" data-line-number="9743"></td>
        <td id="LC9743" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L9744" class="blob-num js-line-number" data-line-number="9744"></td>
        <td id="LC9744" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-c1">0</span> &lt; m_keyValues.<span class="pl-c1">count</span>(name)) {</td>
      </tr>
      <tr>
        <td id="L9745" class="blob-num js-line-number" data-line-number="9745"></td>
        <td id="LC9745" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L9746" class="blob-num js-line-number" data-line-number="9746"></td>
        <td id="LC9746" class="blob-code blob-code-inner js-file-line">            v = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int16_t</span>&gt;(linb::any_cast&lt;<span class="pl-c1">int64_t</span>&gt;(m_keyValues[name].<span class="pl-smi">m_value</span>));</td>
      </tr>
      <tr>
        <td id="L9747" class="blob-num js-line-number" data-line-number="9747"></td>
        <td id="LC9747" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) {</td>
      </tr>
      <tr>
        <td id="L9748" class="blob-num js-line-number" data-line-number="9748"></td>
        <td id="LC9748" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> A positive value was stored.</span></td>
      </tr>
      <tr>
        <td id="L9749" class="blob-num js-line-number" data-line-number="9749"></td>
        <td id="LC9749" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L9750" class="blob-num js-line-number" data-line-number="9750"></td>
        <td id="LC9750" class="blob-code blob-code-inner js-file-line">                v = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int16_t</span>&gt;(linb::any_cast&lt;<span class="pl-c1">uint64_t</span>&gt;(m_keyValues[name].<span class="pl-smi">m_value</span>));</td>
      </tr>
      <tr>
        <td id="L9751" class="blob-num js-line-number" data-line-number="9751"></td>
        <td id="LC9751" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L9752" class="blob-num js-line-number" data-line-number="9752"></td>
        <td id="LC9752" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L9753" class="blob-num js-line-number" data-line-number="9753"></td>
        <td id="LC9753" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L9754" class="blob-num js-line-number" data-line-number="9754"></td>
        <td id="LC9754" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L9755" class="blob-num js-line-number" data-line-number="9755"></td>
        <td id="LC9755" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L9756" class="blob-num js-line-number" data-line-number="9756"></td>
        <td id="LC9756" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9757" class="blob-num js-line-number" data-line-number="9757"></td>
        <td id="LC9757" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromMsgPackVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint16_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L9758" class="blob-num js-line-number" data-line-number="9758"></td>
        <td id="LC9758" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L9759" class="blob-num js-line-number" data-line-number="9759"></td>
        <td id="LC9759" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L9760" class="blob-num js-line-number" data-line-number="9760"></td>
        <td id="LC9760" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-c1">0</span> &lt; m_keyValues.<span class="pl-c1">count</span>(name)) {</td>
      </tr>
      <tr>
        <td id="L9761" class="blob-num js-line-number" data-line-number="9761"></td>
        <td id="LC9761" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L9762" class="blob-num js-line-number" data-line-number="9762"></td>
        <td id="LC9762" class="blob-code blob-code-inner js-file-line">            v = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint16_t</span>&gt;(linb::any_cast&lt;<span class="pl-c1">uint64_t</span>&gt;(m_keyValues[name].<span class="pl-smi">m_value</span>));</td>
      </tr>
      <tr>
        <td id="L9763" class="blob-num js-line-number" data-line-number="9763"></td>
        <td id="LC9763" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L9764" class="blob-num js-line-number" data-line-number="9764"></td>
        <td id="LC9764" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L9765" class="blob-num js-line-number" data-line-number="9765"></td>
        <td id="LC9765" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L9766" class="blob-num js-line-number" data-line-number="9766"></td>
        <td id="LC9766" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L9767" class="blob-num js-line-number" data-line-number="9767"></td>
        <td id="LC9767" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9768" class="blob-num js-line-number" data-line-number="9768"></td>
        <td id="LC9768" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromMsgPackVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int32_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L9769" class="blob-num js-line-number" data-line-number="9769"></td>
        <td id="LC9769" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L9770" class="blob-num js-line-number" data-line-number="9770"></td>
        <td id="LC9770" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L9771" class="blob-num js-line-number" data-line-number="9771"></td>
        <td id="LC9771" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-c1">0</span> &lt; m_keyValues.<span class="pl-c1">count</span>(name)) {</td>
      </tr>
      <tr>
        <td id="L9772" class="blob-num js-line-number" data-line-number="9772"></td>
        <td id="LC9772" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L9773" class="blob-num js-line-number" data-line-number="9773"></td>
        <td id="LC9773" class="blob-code blob-code-inner js-file-line">            v = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int32_t</span>&gt;(linb::any_cast&lt;<span class="pl-c1">int64_t</span>&gt;(m_keyValues[name].<span class="pl-smi">m_value</span>));</td>
      </tr>
      <tr>
        <td id="L9774" class="blob-num js-line-number" data-line-number="9774"></td>
        <td id="LC9774" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) {</td>
      </tr>
      <tr>
        <td id="L9775" class="blob-num js-line-number" data-line-number="9775"></td>
        <td id="LC9775" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> A positive value was stored.</span></td>
      </tr>
      <tr>
        <td id="L9776" class="blob-num js-line-number" data-line-number="9776"></td>
        <td id="LC9776" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L9777" class="blob-num js-line-number" data-line-number="9777"></td>
        <td id="LC9777" class="blob-code blob-code-inner js-file-line">                v = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int32_t</span>&gt;(linb::any_cast&lt;<span class="pl-c1">uint64_t</span>&gt;(m_keyValues[name].<span class="pl-smi">m_value</span>));</td>
      </tr>
      <tr>
        <td id="L9778" class="blob-num js-line-number" data-line-number="9778"></td>
        <td id="LC9778" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L9779" class="blob-num js-line-number" data-line-number="9779"></td>
        <td id="LC9779" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L9780" class="blob-num js-line-number" data-line-number="9780"></td>
        <td id="LC9780" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L9781" class="blob-num js-line-number" data-line-number="9781"></td>
        <td id="LC9781" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L9782" class="blob-num js-line-number" data-line-number="9782"></td>
        <td id="LC9782" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L9783" class="blob-num js-line-number" data-line-number="9783"></td>
        <td id="LC9783" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9784" class="blob-num js-line-number" data-line-number="9784"></td>
        <td id="LC9784" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromMsgPackVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint32_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L9785" class="blob-num js-line-number" data-line-number="9785"></td>
        <td id="LC9785" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L9786" class="blob-num js-line-number" data-line-number="9786"></td>
        <td id="LC9786" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L9787" class="blob-num js-line-number" data-line-number="9787"></td>
        <td id="LC9787" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-c1">0</span> &lt; m_keyValues.<span class="pl-c1">count</span>(name)) {</td>
      </tr>
      <tr>
        <td id="L9788" class="blob-num js-line-number" data-line-number="9788"></td>
        <td id="LC9788" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L9789" class="blob-num js-line-number" data-line-number="9789"></td>
        <td id="LC9789" class="blob-code blob-code-inner js-file-line">            v = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint32_t</span>&gt;(linb::any_cast&lt;<span class="pl-c1">uint64_t</span>&gt;(m_keyValues[name].<span class="pl-smi">m_value</span>));</td>
      </tr>
      <tr>
        <td id="L9790" class="blob-num js-line-number" data-line-number="9790"></td>
        <td id="LC9790" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L9791" class="blob-num js-line-number" data-line-number="9791"></td>
        <td id="LC9791" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L9792" class="blob-num js-line-number" data-line-number="9792"></td>
        <td id="LC9792" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L9793" class="blob-num js-line-number" data-line-number="9793"></td>
        <td id="LC9793" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L9794" class="blob-num js-line-number" data-line-number="9794"></td>
        <td id="LC9794" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9795" class="blob-num js-line-number" data-line-number="9795"></td>
        <td id="LC9795" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromMsgPackVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int64_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L9796" class="blob-num js-line-number" data-line-number="9796"></td>
        <td id="LC9796" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L9797" class="blob-num js-line-number" data-line-number="9797"></td>
        <td id="LC9797" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L9798" class="blob-num js-line-number" data-line-number="9798"></td>
        <td id="LC9798" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-c1">0</span> &lt; m_keyValues.<span class="pl-c1">count</span>(name)) {</td>
      </tr>
      <tr>
        <td id="L9799" class="blob-num js-line-number" data-line-number="9799"></td>
        <td id="LC9799" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L9800" class="blob-num js-line-number" data-line-number="9800"></td>
        <td id="LC9800" class="blob-code blob-code-inner js-file-line">            v = linb::any_cast&lt;<span class="pl-c1">int64_t</span>&gt;(m_keyValues[name].<span class="pl-smi">m_value</span>);</td>
      </tr>
      <tr>
        <td id="L9801" class="blob-num js-line-number" data-line-number="9801"></td>
        <td id="LC9801" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) {</td>
      </tr>
      <tr>
        <td id="L9802" class="blob-num js-line-number" data-line-number="9802"></td>
        <td id="LC9802" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> A positive value was stored.</span></td>
      </tr>
      <tr>
        <td id="L9803" class="blob-num js-line-number" data-line-number="9803"></td>
        <td id="LC9803" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L9804" class="blob-num js-line-number" data-line-number="9804"></td>
        <td id="LC9804" class="blob-code blob-code-inner js-file-line">                v = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int64_t</span>&gt;(linb::any_cast&lt;<span class="pl-c1">uint64_t</span>&gt;(m_keyValues[name].<span class="pl-smi">m_value</span>));</td>
      </tr>
      <tr>
        <td id="L9805" class="blob-num js-line-number" data-line-number="9805"></td>
        <td id="LC9805" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L9806" class="blob-num js-line-number" data-line-number="9806"></td>
        <td id="LC9806" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L9807" class="blob-num js-line-number" data-line-number="9807"></td>
        <td id="LC9807" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L9808" class="blob-num js-line-number" data-line-number="9808"></td>
        <td id="LC9808" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L9809" class="blob-num js-line-number" data-line-number="9809"></td>
        <td id="LC9809" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L9810" class="blob-num js-line-number" data-line-number="9810"></td>
        <td id="LC9810" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9811" class="blob-num js-line-number" data-line-number="9811"></td>
        <td id="LC9811" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromMsgPackVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint64_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L9812" class="blob-num js-line-number" data-line-number="9812"></td>
        <td id="LC9812" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L9813" class="blob-num js-line-number" data-line-number="9813"></td>
        <td id="LC9813" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L9814" class="blob-num js-line-number" data-line-number="9814"></td>
        <td id="LC9814" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-c1">0</span> &lt; m_keyValues.<span class="pl-c1">count</span>(name)) {</td>
      </tr>
      <tr>
        <td id="L9815" class="blob-num js-line-number" data-line-number="9815"></td>
        <td id="LC9815" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L9816" class="blob-num js-line-number" data-line-number="9816"></td>
        <td id="LC9816" class="blob-code blob-code-inner js-file-line">            v = linb::any_cast&lt;<span class="pl-c1">uint64_t</span>&gt;(m_keyValues[name].<span class="pl-smi">m_value</span>);</td>
      </tr>
      <tr>
        <td id="L9817" class="blob-num js-line-number" data-line-number="9817"></td>
        <td id="LC9817" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L9818" class="blob-num js-line-number" data-line-number="9818"></td>
        <td id="LC9818" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L9819" class="blob-num js-line-number" data-line-number="9819"></td>
        <td id="LC9819" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L9820" class="blob-num js-line-number" data-line-number="9820"></td>
        <td id="LC9820" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L9821" class="blob-num js-line-number" data-line-number="9821"></td>
        <td id="LC9821" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9822" class="blob-num js-line-number" data-line-number="9822"></td>
        <td id="LC9822" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromMsgPackVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">float</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L9823" class="blob-num js-line-number" data-line-number="9823"></td>
        <td id="LC9823" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L9824" class="blob-num js-line-number" data-line-number="9824"></td>
        <td id="LC9824" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L9825" class="blob-num js-line-number" data-line-number="9825"></td>
        <td id="LC9825" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-c1">0</span> &lt; m_keyValues.<span class="pl-c1">count</span>(name)) {</td>
      </tr>
      <tr>
        <td id="L9826" class="blob-num js-line-number" data-line-number="9826"></td>
        <td id="LC9826" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L9827" class="blob-num js-line-number" data-line-number="9827"></td>
        <td id="LC9827" class="blob-code blob-code-inner js-file-line">            v = linb::any_cast&lt;<span class="pl-k">float</span>&gt;(m_keyValues[name].<span class="pl-smi">m_value</span>);</td>
      </tr>
      <tr>
        <td id="L9828" class="blob-num js-line-number" data-line-number="9828"></td>
        <td id="LC9828" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L9829" class="blob-num js-line-number" data-line-number="9829"></td>
        <td id="LC9829" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L9830" class="blob-num js-line-number" data-line-number="9830"></td>
        <td id="LC9830" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L9831" class="blob-num js-line-number" data-line-number="9831"></td>
        <td id="LC9831" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L9832" class="blob-num js-line-number" data-line-number="9832"></td>
        <td id="LC9832" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9833" class="blob-num js-line-number" data-line-number="9833"></td>
        <td id="LC9833" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromMsgPackVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">double</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L9834" class="blob-num js-line-number" data-line-number="9834"></td>
        <td id="LC9834" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L9835" class="blob-num js-line-number" data-line-number="9835"></td>
        <td id="LC9835" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L9836" class="blob-num js-line-number" data-line-number="9836"></td>
        <td id="LC9836" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-c1">0</span> &lt; m_keyValues.<span class="pl-c1">count</span>(name)) {</td>
      </tr>
      <tr>
        <td id="L9837" class="blob-num js-line-number" data-line-number="9837"></td>
        <td id="LC9837" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L9838" class="blob-num js-line-number" data-line-number="9838"></td>
        <td id="LC9838" class="blob-code blob-code-inner js-file-line">            v = linb::any_cast&lt;<span class="pl-k">double</span>&gt;(m_keyValues[name].<span class="pl-smi">m_value</span>);</td>
      </tr>
      <tr>
        <td id="L9839" class="blob-num js-line-number" data-line-number="9839"></td>
        <td id="LC9839" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L9840" class="blob-num js-line-number" data-line-number="9840"></td>
        <td id="LC9840" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L9841" class="blob-num js-line-number" data-line-number="9841"></td>
        <td id="LC9841" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L9842" class="blob-num js-line-number" data-line-number="9842"></td>
        <td id="LC9842" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L9843" class="blob-num js-line-number" data-line-number="9843"></td>
        <td id="LC9843" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9844" class="blob-num js-line-number" data-line-number="9844"></td>
        <td id="LC9844" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromMsgPackVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, std::string &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L9845" class="blob-num js-line-number" data-line-number="9845"></td>
        <td id="LC9845" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L9846" class="blob-num js-line-number" data-line-number="9846"></td>
        <td id="LC9846" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L9847" class="blob-num js-line-number" data-line-number="9847"></td>
        <td id="LC9847" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-c1">0</span> &lt; m_keyValues.<span class="pl-c1">count</span>(name)) {</td>
      </tr>
      <tr>
        <td id="L9848" class="blob-num js-line-number" data-line-number="9848"></td>
        <td id="LC9848" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L9849" class="blob-num js-line-number" data-line-number="9849"></td>
        <td id="LC9849" class="blob-code blob-code-inner js-file-line">            v = linb::any_cast&lt;std::string&gt;(m_keyValues[name].<span class="pl-smi">m_value</span>);</td>
      </tr>
      <tr>
        <td id="L9850" class="blob-num js-line-number" data-line-number="9850"></td>
        <td id="LC9850" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L9851" class="blob-num js-line-number" data-line-number="9851"></td>
        <td id="LC9851" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L9852" class="blob-num js-line-number" data-line-number="9852"></td>
        <td id="LC9852" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L9853" class="blob-num js-line-number" data-line-number="9853"></td>
        <td id="LC9853" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L9854" class="blob-num js-line-number" data-line-number="9854"></td>
        <td id="LC9854" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9855" class="blob-num js-line-number" data-line-number="9855"></td>
        <td id="LC9855" class="blob-code blob-code-inner js-file-line">} <span class="pl-c"><span class="pl-c">//</span> namespace cluon</span></td>
      </tr>
      <tr>
        <td id="L9856" class="blob-num js-line-number" data-line-number="9856"></td>
        <td id="LC9856" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L9857" class="blob-num js-line-number" data-line-number="9857"></td>
        <td id="LC9857" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Copyright (C) 2018  Christian Berger</span></td>
      </tr>
      <tr>
        <td id="L9858" class="blob-num js-line-number" data-line-number="9858"></td>
        <td id="LC9858" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L9859" class="blob-num js-line-number" data-line-number="9859"></td>
        <td id="LC9859" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is free software: you can redistribute it and/or modify</span></td>
      </tr>
      <tr>
        <td id="L9860" class="blob-num js-line-number" data-line-number="9860"></td>
        <td id="LC9860" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * it under the terms of the GNU General Public License as published by</span></td>
      </tr>
      <tr>
        <td id="L9861" class="blob-num js-line-number" data-line-number="9861"></td>
        <td id="LC9861" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * the Free Software Foundation, either version 3 of the License, or</span></td>
      </tr>
      <tr>
        <td id="L9862" class="blob-num js-line-number" data-line-number="9862"></td>
        <td id="LC9862" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * (at your option) any later version.</span></td>
      </tr>
      <tr>
        <td id="L9863" class="blob-num js-line-number" data-line-number="9863"></td>
        <td id="LC9863" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L9864" class="blob-num js-line-number" data-line-number="9864"></td>
        <td id="LC9864" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is distributed in the hope that it will be useful,</span></td>
      </tr>
      <tr>
        <td id="L9865" class="blob-num js-line-number" data-line-number="9865"></td>
        <td id="LC9865" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></td>
      </tr>
      <tr>
        <td id="L9866" class="blob-num js-line-number" data-line-number="9866"></td>
        <td id="LC9866" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></td>
      </tr>
      <tr>
        <td id="L9867" class="blob-num js-line-number" data-line-number="9867"></td>
        <td id="LC9867" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * GNU General Public License for more details.</span></td>
      </tr>
      <tr>
        <td id="L9868" class="blob-num js-line-number" data-line-number="9868"></td>
        <td id="LC9868" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L9869" class="blob-num js-line-number" data-line-number="9869"></td>
        <td id="LC9869" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * You should have received a copy of the GNU General Public License</span></td>
      </tr>
      <tr>
        <td id="L9870" class="blob-num js-line-number" data-line-number="9870"></td>
        <td id="LC9870" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></td>
      </tr>
      <tr>
        <td id="L9871" class="blob-num js-line-number" data-line-number="9871"></td>
        <td id="LC9871" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L9872" class="blob-num js-line-number" data-line-number="9872"></td>
        <td id="LC9872" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9873" class="blob-num js-line-number" data-line-number="9873"></td>
        <td id="LC9873" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/FromJSONVisitor.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L9874" class="blob-num js-line-number" data-line-number="9874"></td>
        <td id="LC9874" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/stringtoolbox.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L9875" class="blob-num js-line-number" data-line-number="9875"></td>
        <td id="LC9875" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9876" class="blob-num js-line-number" data-line-number="9876"></td>
        <td id="LC9876" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>algorithm<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L9877" class="blob-num js-line-number" data-line-number="9877"></td>
        <td id="LC9877" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>array<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L9878" class="blob-num js-line-number" data-line-number="9878"></td>
        <td id="LC9878" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>cstring<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L9879" class="blob-num js-line-number" data-line-number="9879"></td>
        <td id="LC9879" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>iterator<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L9880" class="blob-num js-line-number" data-line-number="9880"></td>
        <td id="LC9880" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>regex<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L9881" class="blob-num js-line-number" data-line-number="9881"></td>
        <td id="LC9881" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>sstream<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L9882" class="blob-num js-line-number" data-line-number="9882"></td>
        <td id="LC9882" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>vector<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L9883" class="blob-num js-line-number" data-line-number="9883"></td>
        <td id="LC9883" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9884" class="blob-num js-line-number" data-line-number="9884"></td>
        <td id="LC9884" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>iostream<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L9885" class="blob-num js-line-number" data-line-number="9885"></td>
        <td id="LC9885" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">cluon</span> {</td>
      </tr>
      <tr>
        <td id="L9886" class="blob-num js-line-number" data-line-number="9886"></td>
        <td id="LC9886" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9887" class="blob-num js-line-number" data-line-number="9887"></td>
        <td id="LC9887" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-en">FromJSONVisitor::FromJSONVisitor</span>() <span class="pl-k">noexcept</span></td>
      </tr>
      <tr>
        <td id="L9888" class="blob-num js-line-number" data-line-number="9888"></td>
        <td id="LC9888" class="blob-code blob-code-inner js-file-line">    : m_keyValues{m_data} {}</td>
      </tr>
      <tr>
        <td id="L9889" class="blob-num js-line-number" data-line-number="9889"></td>
        <td id="LC9889" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9890" class="blob-num js-line-number" data-line-number="9890"></td>
        <td id="LC9890" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-en">FromJSONVisitor::FromJSONVisitor</span>(std::map&lt;std::string, FromJSONVisitor::JSONKeyValue&gt; &amp;preset) <span class="pl-k">noexcept</span></td>
      </tr>
      <tr>
        <td id="L9891" class="blob-num js-line-number" data-line-number="9891"></td>
        <td id="LC9891" class="blob-code blob-code-inner js-file-line">    : m_keyValues{preset} {}</td>
      </tr>
      <tr>
        <td id="L9892" class="blob-num js-line-number" data-line-number="9892"></td>
        <td id="LC9892" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9893" class="blob-num js-line-number" data-line-number="9893"></td>
        <td id="LC9893" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::map&lt;std::string, FromJSONVisitor::JSONKeyValue&gt; <span class="pl-en">FromJSONVisitor::readKeyValues</span>(std::string &amp;input) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L9894" class="blob-num js-line-number" data-line-number="9894"></td>
        <td id="LC9894" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> std::string MATCH_JSON</td>
      </tr>
      <tr>
        <td id="L9895" class="blob-num js-line-number" data-line-number="9895"></td>
        <td id="LC9895" class="blob-code blob-code-inner js-file-line">        = <span class="pl-s"><span class="pl-pds">R&quot;(</span>(?:\&quot;|\&#39;)(?:[^&quot;]*)(?:\&quot;|\&#39;)(?=:)(?:\:\s*)(?:\&quot;|\&#39;)?(?:true|false|[\-]{0,1}[0-9]+[\.][0-9]+|[\-]{0,1}[0-9]+|[0-9a-zA-Z\+\-\,\.\$\ \=]*)(?:\&quot;|\&#39;)?<span class="pl-pds">)&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L9896" class="blob-num js-line-number" data-line-number="9896"></td>
        <td id="LC9896" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9897" class="blob-num js-line-number" data-line-number="9897"></td>
        <td id="LC9897" class="blob-code blob-code-inner js-file-line">    std::map&lt;std::string, FromJSONVisitor::JSONKeyValue&gt; result;</td>
      </tr>
      <tr>
        <td id="L9898" class="blob-num js-line-number" data-line-number="9898"></td>
        <td id="LC9898" class="blob-code blob-code-inner js-file-line">    std::string oldInput;</td>
      </tr>
      <tr>
        <td id="L9899" class="blob-num js-line-number" data-line-number="9899"></td>
        <td id="LC9899" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L9900" class="blob-num js-line-number" data-line-number="9900"></td>
        <td id="LC9900" class="blob-code blob-code-inner js-file-line">        std::smatch m;</td>
      </tr>
      <tr>
        <td id="L9901" class="blob-num js-line-number" data-line-number="9901"></td>
        <td id="LC9901" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">do</span> {</td>
      </tr>
      <tr>
        <td id="L9902" class="blob-num js-line-number" data-line-number="9902"></td>
        <td id="LC9902" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">std::regex_search</span>(input, m, <span class="pl-c1">std::regex</span>(MATCH_JSON));</td>
      </tr>
      <tr>
        <td id="L9903" class="blob-num js-line-number" data-line-number="9903"></td>
        <td id="LC9903" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9904" class="blob-num js-line-number" data-line-number="9904"></td>
        <td id="LC9904" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (m.<span class="pl-c1">size</span>() &gt; <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L9905" class="blob-num js-line-number" data-line-number="9905"></td>
        <td id="LC9905" class="blob-code blob-code-inner js-file-line">                std::string match{m[<span class="pl-c1">0</span>]};</td>
      </tr>
      <tr>
        <td id="L9906" class="blob-num js-line-number" data-line-number="9906"></td>
        <td id="LC9906" class="blob-code blob-code-inner js-file-line">                std::vector&lt;std::string&gt; retVal = <span class="pl-c1">stringtoolbox::split</span>(match, <span class="pl-s"><span class="pl-pds">&#39;</span>:<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L9907" class="blob-num js-line-number" data-line-number="9907"></td>
        <td id="LC9907" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">if</span> ((retVal.<span class="pl-c1">size</span>() == <span class="pl-c1">1</span>) || ((retVal.<span class="pl-c1">size</span>() == <span class="pl-c1">2</span>) &amp;&amp; (<span class="pl-c1">stringtoolbox::trim</span>(retVal[<span class="pl-c1">1</span>]).<span class="pl-c1">size</span>() == <span class="pl-c1">0</span>))) {</td>
      </tr>
      <tr>
        <td id="L9908" class="blob-num js-line-number" data-line-number="9908"></td>
        <td id="LC9908" class="blob-code blob-code-inner js-file-line">                    std::string keyOfNestedObject{<span class="pl-c1">stringtoolbox::trim</span>(retVal[<span class="pl-c1">0</span>])};</td>
      </tr>
      <tr>
        <td id="L9909" class="blob-num js-line-number" data-line-number="9909"></td>
        <td id="LC9909" class="blob-code blob-code-inner js-file-line">                    keyOfNestedObject = <span class="pl-c1">stringtoolbox::split</span>(keyOfNestedObject, <span class="pl-s"><span class="pl-pds">&#39;</span>&quot;<span class="pl-pds">&#39;</span></span>)[<span class="pl-c1">0</span>];</td>
      </tr>
      <tr>
        <td id="L9910" class="blob-num js-line-number" data-line-number="9910"></td>
        <td id="LC9910" class="blob-code blob-code-inner js-file-line">                    {</td>
      </tr>
      <tr>
        <td id="L9911" class="blob-num js-line-number" data-line-number="9911"></td>
        <td id="LC9911" class="blob-code blob-code-inner js-file-line">                        std::string <span class="pl-smi">suffix</span>(m.<span class="pl-c1">suffix</span>());</td>
      </tr>
      <tr>
        <td id="L9912" class="blob-num js-line-number" data-line-number="9912"></td>
        <td id="LC9912" class="blob-code blob-code-inner js-file-line">                        suffix   = <span class="pl-c1">stringtoolbox::trim</span>(suffix);</td>
      </tr>
      <tr>
        <td id="L9913" class="blob-num js-line-number" data-line-number="9913"></td>
        <td id="LC9913" class="blob-code blob-code-inner js-file-line">                        oldInput = input;</td>
      </tr>
      <tr>
        <td id="L9914" class="blob-num js-line-number" data-line-number="9914"></td>
        <td id="LC9914" class="blob-code blob-code-inner js-file-line">                        input    = suffix;</td>
      </tr>
      <tr>
        <td id="L9915" class="blob-num js-line-number" data-line-number="9915"></td>
        <td id="LC9915" class="blob-code blob-code-inner js-file-line">                    }</td>
      </tr>
      <tr>
        <td id="L9916" class="blob-num js-line-number" data-line-number="9916"></td>
        <td id="LC9916" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9917" class="blob-num js-line-number" data-line-number="9917"></td>
        <td id="LC9917" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">auto</span> mapOfNestedValues = <span class="pl-c1">readKeyValues</span>(input);</td>
      </tr>
      <tr>
        <td id="L9918" class="blob-num js-line-number" data-line-number="9918"></td>
        <td id="LC9918" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9919" class="blob-num js-line-number" data-line-number="9919"></td>
        <td id="LC9919" class="blob-code blob-code-inner js-file-line">                    JSONKeyValue kv;</td>
      </tr>
      <tr>
        <td id="L9920" class="blob-num js-line-number" data-line-number="9920"></td>
        <td id="LC9920" class="blob-code blob-code-inner js-file-line">                    kv.<span class="pl-smi">m_key</span>   = keyOfNestedObject;</td>
      </tr>
      <tr>
        <td id="L9921" class="blob-num js-line-number" data-line-number="9921"></td>
        <td id="LC9921" class="blob-code blob-code-inner js-file-line">                    kv.<span class="pl-smi">m_type</span>  = JSONConstants::OBJECT;</td>
      </tr>
      <tr>
        <td id="L9922" class="blob-num js-line-number" data-line-number="9922"></td>
        <td id="LC9922" class="blob-code blob-code-inner js-file-line">                    kv.<span class="pl-smi">m_value</span> = mapOfNestedValues;</td>
      </tr>
      <tr>
        <td id="L9923" class="blob-num js-line-number" data-line-number="9923"></td>
        <td id="LC9923" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9924" class="blob-num js-line-number" data-line-number="9924"></td>
        <td id="LC9924" class="blob-code blob-code-inner js-file-line">                    result[keyOfNestedObject] = kv;</td>
      </tr>
      <tr>
        <td id="L9925" class="blob-num js-line-number" data-line-number="9925"></td>
        <td id="LC9925" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L9926" class="blob-num js-line-number" data-line-number="9926"></td>
        <td id="LC9926" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">if</span> ((retVal.<span class="pl-c1">size</span>() == <span class="pl-c1">2</span>) &amp;&amp; (<span class="pl-c1">stringtoolbox::trim</span>(retVal[<span class="pl-c1">1</span>]).<span class="pl-c1">size</span>() &gt; <span class="pl-c1">0</span>)) {</td>
      </tr>
      <tr>
        <td id="L9927" class="blob-num js-line-number" data-line-number="9927"></td>
        <td id="LC9927" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">auto</span> e = <span class="pl-c1">std::make_pair</span>(<span class="pl-c1">stringtoolbox::trim</span>(retVal[<span class="pl-c1">0</span>]), <span class="pl-c1">stringtoolbox::trim</span>(retVal[<span class="pl-c1">1</span>]));</td>
      </tr>
      <tr>
        <td id="L9928" class="blob-num js-line-number" data-line-number="9928"></td>
        <td id="LC9928" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9929" class="blob-num js-line-number" data-line-number="9929"></td>
        <td id="LC9929" class="blob-code blob-code-inner js-file-line">                    JSONKeyValue kv;</td>
      </tr>
      <tr>
        <td id="L9930" class="blob-num js-line-number" data-line-number="9930"></td>
        <td id="LC9930" class="blob-code blob-code-inner js-file-line">                    kv.<span class="pl-smi">m_key</span> = <span class="pl-c1">stringtoolbox::split</span>(e.<span class="pl-smi">first</span>, <span class="pl-s"><span class="pl-pds">&#39;</span>&quot;<span class="pl-pds">&#39;</span></span>)[<span class="pl-c1">0</span>];</td>
      </tr>
      <tr>
        <td id="L9931" class="blob-num js-line-number" data-line-number="9931"></td>
        <td id="LC9931" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9932" class="blob-num js-line-number" data-line-number="9932"></td>
        <td id="LC9932" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">if</span> ((e.<span class="pl-smi">second</span>.<span class="pl-c1">size</span>() &gt; <span class="pl-c1">0</span>) &amp;&amp; (e.<span class="pl-smi">second</span>.<span class="pl-c1">at</span>(<span class="pl-c1">0</span>) == <span class="pl-s"><span class="pl-pds">&#39;</span>&quot;<span class="pl-pds">&#39;</span></span>)) {</td>
      </tr>
      <tr>
        <td id="L9933" class="blob-num js-line-number" data-line-number="9933"></td>
        <td id="LC9933" class="blob-code blob-code-inner js-file-line">                        kv.<span class="pl-smi">m_type</span>  = JSONConstants::STRING;</td>
      </tr>
      <tr>
        <td id="L9934" class="blob-num js-line-number" data-line-number="9934"></td>
        <td id="LC9934" class="blob-code blob-code-inner js-file-line">                        kv.<span class="pl-smi">m_value</span> = <span class="pl-c1">std::string</span>(e.<span class="pl-smi">second</span>).<span class="pl-c1">substr</span>(<span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L9935" class="blob-num js-line-number" data-line-number="9935"></td>
        <td id="LC9935" class="blob-code blob-code-inner js-file-line">                    } <span class="pl-k">else</span> <span class="pl-k">if</span> ((e.<span class="pl-smi">second</span>.<span class="pl-c1">size</span>() &gt; <span class="pl-c1">0</span>) &amp;&amp; ((e.<span class="pl-smi">second</span> == <span class="pl-s"><span class="pl-pds">&quot;</span>false<span class="pl-pds">&quot;</span></span>) || (e.<span class="pl-smi">second</span> == <span class="pl-s"><span class="pl-pds">&quot;</span>true<span class="pl-pds">&quot;</span></span>))) {</td>
      </tr>
      <tr>
        <td id="L9936" class="blob-num js-line-number" data-line-number="9936"></td>
        <td id="LC9936" class="blob-code blob-code-inner js-file-line">                        kv.<span class="pl-smi">m_type</span>  = (e.<span class="pl-smi">second</span> == <span class="pl-s"><span class="pl-pds">&quot;</span>true<span class="pl-pds">&quot;</span></span> ? JSONConstants::IS_TRUE : JSONConstants::IS_FALSE);</td>
      </tr>
      <tr>
        <td id="L9937" class="blob-num js-line-number" data-line-number="9937"></td>
        <td id="LC9937" class="blob-code blob-code-inner js-file-line">                        kv.<span class="pl-smi">m_value</span> = e.<span class="pl-smi">second</span> == <span class="pl-s"><span class="pl-pds">&quot;</span>true<span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L9938" class="blob-num js-line-number" data-line-number="9938"></td>
        <td id="LC9938" class="blob-code blob-code-inner js-file-line">                    } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L9939" class="blob-num js-line-number" data-line-number="9939"></td>
        <td id="LC9939" class="blob-code blob-code-inner js-file-line">                        kv.<span class="pl-smi">m_type</span> = JSONConstants::NUMBER;</td>
      </tr>
      <tr>
        <td id="L9940" class="blob-num js-line-number" data-line-number="9940"></td>
        <td id="LC9940" class="blob-code blob-code-inner js-file-line">                        std::stringstream <span class="pl-smi">tmp</span>(e.<span class="pl-smi">second</span>);</td>
      </tr>
      <tr>
        <td id="L9941" class="blob-num js-line-number" data-line-number="9941"></td>
        <td id="LC9941" class="blob-code blob-code-inner js-file-line">                        <span class="pl-k">double</span> v;</td>
      </tr>
      <tr>
        <td id="L9942" class="blob-num js-line-number" data-line-number="9942"></td>
        <td id="LC9942" class="blob-code blob-code-inner js-file-line">                        tmp &gt;&gt; v;</td>
      </tr>
      <tr>
        <td id="L9943" class="blob-num js-line-number" data-line-number="9943"></td>
        <td id="LC9943" class="blob-code blob-code-inner js-file-line">                        kv.<span class="pl-smi">m_value</span> = v;</td>
      </tr>
      <tr>
        <td id="L9944" class="blob-num js-line-number" data-line-number="9944"></td>
        <td id="LC9944" class="blob-code blob-code-inner js-file-line">                    }</td>
      </tr>
      <tr>
        <td id="L9945" class="blob-num js-line-number" data-line-number="9945"></td>
        <td id="LC9945" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9946" class="blob-num js-line-number" data-line-number="9946"></td>
        <td id="LC9946" class="blob-code blob-code-inner js-file-line">                    result[kv.<span class="pl-smi">m_key</span>] = kv;</td>
      </tr>
      <tr>
        <td id="L9947" class="blob-num js-line-number" data-line-number="9947"></td>
        <td id="LC9947" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9948" class="blob-num js-line-number" data-line-number="9948"></td>
        <td id="LC9948" class="blob-code blob-code-inner js-file-line">                    {</td>
      </tr>
      <tr>
        <td id="L9949" class="blob-num js-line-number" data-line-number="9949"></td>
        <td id="LC9949" class="blob-code blob-code-inner js-file-line">                        std::string <span class="pl-smi">suffix</span>(m.<span class="pl-c1">suffix</span>());</td>
      </tr>
      <tr>
        <td id="L9950" class="blob-num js-line-number" data-line-number="9950"></td>
        <td id="LC9950" class="blob-code blob-code-inner js-file-line">                        suffix   = <span class="pl-c1">stringtoolbox::trim</span>(suffix);</td>
      </tr>
      <tr>
        <td id="L9951" class="blob-num js-line-number" data-line-number="9951"></td>
        <td id="LC9951" class="blob-code blob-code-inner js-file-line">                        oldInput = input;</td>
      </tr>
      <tr>
        <td id="L9952" class="blob-num js-line-number" data-line-number="9952"></td>
        <td id="LC9952" class="blob-code blob-code-inner js-file-line">                        input    = suffix;</td>
      </tr>
      <tr>
        <td id="L9953" class="blob-num js-line-number" data-line-number="9953"></td>
        <td id="LC9953" class="blob-code blob-code-inner js-file-line">                        <span class="pl-k">if</span> (suffix.<span class="pl-c1">size</span>() &gt; <span class="pl-c1">0</span> &amp;&amp; suffix.<span class="pl-c1">at</span>(<span class="pl-c1">0</span>) == <span class="pl-s"><span class="pl-pds">&#39;</span>}<span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L9954" class="blob-num js-line-number" data-line-number="9954"></td>
        <td id="LC9954" class="blob-code blob-code-inner js-file-line">                            <span class="pl-k">break</span>; <span class="pl-c"><span class="pl-c">//</span> Nested payload complete; return.</span></td>
      </tr>
      <tr>
        <td id="L9955" class="blob-num js-line-number" data-line-number="9955"></td>
        <td id="LC9955" class="blob-code blob-code-inner js-file-line">                        }</td>
      </tr>
      <tr>
        <td id="L9956" class="blob-num js-line-number" data-line-number="9956"></td>
        <td id="LC9956" class="blob-code blob-code-inner js-file-line">                    }</td>
      </tr>
      <tr>
        <td id="L9957" class="blob-num js-line-number" data-line-number="9957"></td>
        <td id="LC9957" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L9958" class="blob-num js-line-number" data-line-number="9958"></td>
        <td id="LC9958" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L9959" class="blob-num js-line-number" data-line-number="9959"></td>
        <td id="LC9959" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">while</span> (!m.<span class="pl-c1">empty</span>() &amp;&amp; (oldInput != input));</td>
      </tr>
      <tr>
        <td id="L9960" class="blob-num js-line-number" data-line-number="9960"></td>
        <td id="LC9960" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">catch</span> (std::regex_error &amp;) {</td>
      </tr>
      <tr>
        <td id="L9961" class="blob-num js-line-number" data-line-number="9961"></td>
        <td id="LC9961" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">catch</span> (std::bad_cast &amp;) {}</td>
      </tr>
      <tr>
        <td id="L9962" class="blob-num js-line-number" data-line-number="9962"></td>
        <td id="LC9962" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9963" class="blob-num js-line-number" data-line-number="9963"></td>
        <td id="LC9963" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> result;</td>
      </tr>
      <tr>
        <td id="L9964" class="blob-num js-line-number" data-line-number="9964"></td>
        <td id="LC9964" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L9965" class="blob-num js-line-number" data-line-number="9965"></td>
        <td id="LC9965" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9966" class="blob-num js-line-number" data-line-number="9966"></td>
        <td id="LC9966" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromJSONVisitor::decodeFrom</span>(std::istream &amp;in) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L9967" class="blob-num js-line-number" data-line-number="9967"></td>
        <td id="LC9967" class="blob-code blob-code-inner js-file-line">    m_keyValues.<span class="pl-c1">clear</span>();</td>
      </tr>
      <tr>
        <td id="L9968" class="blob-num js-line-number" data-line-number="9968"></td>
        <td id="LC9968" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9969" class="blob-num js-line-number" data-line-number="9969"></td>
        <td id="LC9969" class="blob-code blob-code-inner js-file-line">    std::string s;</td>
      </tr>
      <tr>
        <td id="L9970" class="blob-num js-line-number" data-line-number="9970"></td>
        <td id="LC9970" class="blob-code blob-code-inner js-file-line">    std::istream_iterator&lt;<span class="pl-k">char</span>&gt; <span class="pl-c1">it</span>(in), it_end;</td>
      </tr>
      <tr>
        <td id="L9971" class="blob-num js-line-number" data-line-number="9971"></td>
        <td id="LC9971" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">std::copy</span>(it, it_end, std::insert_iterator&lt;std::string&gt;(s, s.<span class="pl-c1">begin</span>()));</td>
      </tr>
      <tr>
        <td id="L9972" class="blob-num js-line-number" data-line-number="9972"></td>
        <td id="LC9972" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9973" class="blob-num js-line-number" data-line-number="9973"></td>
        <td id="LC9973" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Remove whitespace characters like newline, carriage return, or tab.</span></td>
      </tr>
      <tr>
        <td id="L9974" class="blob-num js-line-number" data-line-number="9974"></td>
        <td id="LC9974" class="blob-code blob-code-inner js-file-line">    s.<span class="pl-c1">erase</span>(<span class="pl-c1">std::remove_if</span>(s.<span class="pl-c1">begin</span>(), s.<span class="pl-c1">end</span>(), [](<span class="pl-k">char</span> c) { <span class="pl-k">return</span> (c == <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\r</span><span class="pl-pds">&#39;</span></span> || c == <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\t</span><span class="pl-pds">&#39;</span></span> || c == <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\n</span><span class="pl-pds">&#39;</span></span>); }), s.<span class="pl-c1">end</span>());</td>
      </tr>
      <tr>
        <td id="L9975" class="blob-num js-line-number" data-line-number="9975"></td>
        <td id="LC9975" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9976" class="blob-num js-line-number" data-line-number="9976"></td>
        <td id="LC9976" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Parse JSON from in.</span></td>
      </tr>
      <tr>
        <td id="L9977" class="blob-num js-line-number" data-line-number="9977"></td>
        <td id="LC9977" class="blob-code blob-code-inner js-file-line">    m_keyValues = <span class="pl-c1">readKeyValues</span>(s);</td>
      </tr>
      <tr>
        <td id="L9978" class="blob-num js-line-number" data-line-number="9978"></td>
        <td id="LC9978" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L9979" class="blob-num js-line-number" data-line-number="9979"></td>
        <td id="LC9979" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9980" class="blob-num js-line-number" data-line-number="9980"></td>
        <td id="LC9980" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::string <span class="pl-en">FromJSONVisitor::decodeBase64</span>(<span class="pl-k">const</span> std::string &amp;input) <span class="pl-k">const</span> <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L9981" class="blob-num js-line-number" data-line-number="9981"></td>
        <td id="LC9981" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> std::string ALPHABET{<span class="pl-s"><span class="pl-pds">&quot;</span>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/<span class="pl-pds">&quot;</span></span>};</td>
      </tr>
      <tr>
        <td id="L9982" class="blob-num js-line-number" data-line-number="9982"></td>
        <td id="LC9982" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">uint8_t</span> counter{<span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L9983" class="blob-num js-line-number" data-line-number="9983"></td>
        <td id="LC9983" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">char</span> buffer[<span class="pl-c1">4</span>];</td>
      </tr>
      <tr>
        <td id="L9984" class="blob-num js-line-number" data-line-number="9984"></td>
        <td id="LC9984" class="blob-code blob-code-inner js-file-line">    std::string decoded;</td>
      </tr>
      <tr>
        <td id="L9985" class="blob-num js-line-number" data-line-number="9985"></td>
        <td id="LC9985" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">for</span> (<span class="pl-c1">uint32_t</span> i{<span class="pl-c1">0</span>}; i &lt; input.<span class="pl-c1">size</span>(); i++) {</td>
      </tr>
      <tr>
        <td id="L9986" class="blob-num js-line-number" data-line-number="9986"></td>
        <td id="LC9986" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">char</span> c;</td>
      </tr>
      <tr>
        <td id="L9987" class="blob-num js-line-number" data-line-number="9987"></td>
        <td id="LC9987" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">for</span> (c = <span class="pl-c1">0</span>; c &lt; <span class="pl-c1">64</span> &amp;&amp; (ALPHABET.<span class="pl-c1">at</span>(<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(c)) != input.<span class="pl-c1">at</span>(i)); c++)</td>
      </tr>
      <tr>
        <td id="L9988" class="blob-num js-line-number" data-line-number="9988"></td>
        <td id="LC9988" class="blob-code blob-code-inner js-file-line">            ;</td>
      </tr>
      <tr>
        <td id="L9989" class="blob-num js-line-number" data-line-number="9989"></td>
        <td id="LC9989" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L9990" class="blob-num js-line-number" data-line-number="9990"></td>
        <td id="LC9990" class="blob-code blob-code-inner js-file-line">        buffer[counter++] = c;</td>
      </tr>
      <tr>
        <td id="L9991" class="blob-num js-line-number" data-line-number="9991"></td>
        <td id="LC9991" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-c1">4</span> == counter) {</td>
      </tr>
      <tr>
        <td id="L9992" class="blob-num js-line-number" data-line-number="9992"></td>
        <td id="LC9992" class="blob-code blob-code-inner js-file-line">            decoded.<span class="pl-c1">push_back</span>(<span class="pl-k">static_cast</span>&lt;<span class="pl-k">char</span>&gt;((buffer[<span class="pl-c1">0</span>] &lt;&lt; <span class="pl-c1">2</span>) + (buffer[<span class="pl-c1">1</span>] &gt;&gt; <span class="pl-c1">4</span>)));</td>
      </tr>
      <tr>
        <td id="L9993" class="blob-num js-line-number" data-line-number="9993"></td>
        <td id="LC9993" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-c1">64</span> != buffer[<span class="pl-c1">2</span>]) {</td>
      </tr>
      <tr>
        <td id="L9994" class="blob-num js-line-number" data-line-number="9994"></td>
        <td id="LC9994" class="blob-code blob-code-inner js-file-line">                decoded.<span class="pl-c1">push_back</span>(<span class="pl-k">static_cast</span>&lt;<span class="pl-k">char</span>&gt;((buffer[<span class="pl-c1">1</span>] &lt;&lt; <span class="pl-c1">4</span>) + (buffer[<span class="pl-c1">2</span>] &gt;&gt; <span class="pl-c1">2</span>)));</td>
      </tr>
      <tr>
        <td id="L9995" class="blob-num js-line-number" data-line-number="9995"></td>
        <td id="LC9995" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L9996" class="blob-num js-line-number" data-line-number="9996"></td>
        <td id="LC9996" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-c1">64</span> != buffer[<span class="pl-c1">3</span>]) {</td>
      </tr>
      <tr>
        <td id="L9997" class="blob-num js-line-number" data-line-number="9997"></td>
        <td id="LC9997" class="blob-code blob-code-inner js-file-line">                decoded.<span class="pl-c1">push_back</span>(<span class="pl-k">static_cast</span>&lt;<span class="pl-k">char</span>&gt;((buffer[<span class="pl-c1">2</span>] &lt;&lt; <span class="pl-c1">6</span>) + buffer[<span class="pl-c1">3</span>]));</td>
      </tr>
      <tr>
        <td id="L9998" class="blob-num js-line-number" data-line-number="9998"></td>
        <td id="LC9998" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L9999" class="blob-num js-line-number" data-line-number="9999"></td>
        <td id="LC9999" class="blob-code blob-code-inner js-file-line">            counter = <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L10000" class="blob-num js-line-number" data-line-number="10000"></td>
        <td id="LC10000" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L10001" class="blob-num js-line-number" data-line-number="10001"></td>
        <td id="LC10001" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L10002" class="blob-num js-line-number" data-line-number="10002"></td>
        <td id="LC10002" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> decoded;</td>
      </tr>
      <tr>
        <td id="L10003" class="blob-num js-line-number" data-line-number="10003"></td>
        <td id="LC10003" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10004" class="blob-num js-line-number" data-line-number="10004"></td>
        <td id="LC10004" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10005" class="blob-num js-line-number" data-line-number="10005"></td>
        <td id="LC10005" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromJSONVisitor::preVisit</span>(<span class="pl-c1">int32_t</span> id, <span class="pl-k">const</span> std::string &amp;shortName, <span class="pl-k">const</span> std::string &amp;longName) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10006" class="blob-num js-line-number" data-line-number="10006"></td>
        <td id="LC10006" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L10007" class="blob-num js-line-number" data-line-number="10007"></td>
        <td id="LC10007" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)shortName;</td>
      </tr>
      <tr>
        <td id="L10008" class="blob-num js-line-number" data-line-number="10008"></td>
        <td id="LC10008" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)longName;</td>
      </tr>
      <tr>
        <td id="L10009" class="blob-num js-line-number" data-line-number="10009"></td>
        <td id="LC10009" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10010" class="blob-num js-line-number" data-line-number="10010"></td>
        <td id="LC10010" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10011" class="blob-num js-line-number" data-line-number="10011"></td>
        <td id="LC10011" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromJSONVisitor::postVisit</span>() <span class="pl-k">noexcept</span> {}</td>
      </tr>
      <tr>
        <td id="L10012" class="blob-num js-line-number" data-line-number="10012"></td>
        <td id="LC10012" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10013" class="blob-num js-line-number" data-line-number="10013"></td>
        <td id="LC10013" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromJSONVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">bool</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10014" class="blob-num js-line-number" data-line-number="10014"></td>
        <td id="LC10014" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L10015" class="blob-num js-line-number" data-line-number="10015"></td>
        <td id="LC10015" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L10016" class="blob-num js-line-number" data-line-number="10016"></td>
        <td id="LC10016" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-c1">0</span> &lt; m_keyValues.<span class="pl-c1">count</span>(name)) {</td>
      </tr>
      <tr>
        <td id="L10017" class="blob-num js-line-number" data-line-number="10017"></td>
        <td id="LC10017" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L10018" class="blob-num js-line-number" data-line-number="10018"></td>
        <td id="LC10018" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (JSONConstants::IS_FALSE == m_keyValues[name].<span class="pl-smi">m_type</span>) {</td>
      </tr>
      <tr>
        <td id="L10019" class="blob-num js-line-number" data-line-number="10019"></td>
        <td id="LC10019" class="blob-code blob-code-inner js-file-line">                v = <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L10020" class="blob-num js-line-number" data-line-number="10020"></td>
        <td id="LC10020" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> <span class="pl-k">if</span> (JSONConstants::IS_TRUE == m_keyValues[name].<span class="pl-smi">m_type</span>) {</td>
      </tr>
      <tr>
        <td id="L10021" class="blob-num js-line-number" data-line-number="10021"></td>
        <td id="LC10021" class="blob-code blob-code-inner js-file-line">                v = <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L10022" class="blob-num js-line-number" data-line-number="10022"></td>
        <td id="LC10022" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> <span class="pl-k">if</span> (JSONConstants::NUMBER == m_keyValues[name].<span class="pl-smi">m_type</span>) {</td>
      </tr>
      <tr>
        <td id="L10023" class="blob-num js-line-number" data-line-number="10023"></td>
        <td id="LC10023" class="blob-code blob-code-inner js-file-line">                v = (<span class="pl-c1">1</span> == <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint32_t</span>&gt;(linb::any_cast&lt;<span class="pl-k">double</span>&gt;(m_keyValues[name].<span class="pl-smi">m_value</span>)));</td>
      </tr>
      <tr>
        <td id="L10024" class="blob-num js-line-number" data-line-number="10024"></td>
        <td id="LC10024" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L10025" class="blob-num js-line-number" data-line-number="10025"></td>
        <td id="LC10025" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L10026" class="blob-num js-line-number" data-line-number="10026"></td>
        <td id="LC10026" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L10027" class="blob-num js-line-number" data-line-number="10027"></td>
        <td id="LC10027" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L10028" class="blob-num js-line-number" data-line-number="10028"></td>
        <td id="LC10028" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10029" class="blob-num js-line-number" data-line-number="10029"></td>
        <td id="LC10029" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10030" class="blob-num js-line-number" data-line-number="10030"></td>
        <td id="LC10030" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromJSONVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">char</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10031" class="blob-num js-line-number" data-line-number="10031"></td>
        <td id="LC10031" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L10032" class="blob-num js-line-number" data-line-number="10032"></td>
        <td id="LC10032" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L10033" class="blob-num js-line-number" data-line-number="10033"></td>
        <td id="LC10033" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-c1">0</span> &lt; m_keyValues.<span class="pl-c1">count</span>(name)) {</td>
      </tr>
      <tr>
        <td id="L10034" class="blob-num js-line-number" data-line-number="10034"></td>
        <td id="LC10034" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L10035" class="blob-num js-line-number" data-line-number="10035"></td>
        <td id="LC10035" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (JSONConstants::STRING == m_keyValues[name].<span class="pl-smi">m_type</span>) {</td>
      </tr>
      <tr>
        <td id="L10036" class="blob-num js-line-number" data-line-number="10036"></td>
        <td id="LC10036" class="blob-code blob-code-inner js-file-line">                v = linb::any_cast&lt;std::string&gt;(m_keyValues[name].<span class="pl-smi">m_value</span>).<span class="pl-c1">at</span>(<span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L10037" class="blob-num js-line-number" data-line-number="10037"></td>
        <td id="LC10037" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L10038" class="blob-num js-line-number" data-line-number="10038"></td>
        <td id="LC10038" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L10039" class="blob-num js-line-number" data-line-number="10039"></td>
        <td id="LC10039" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L10040" class="blob-num js-line-number" data-line-number="10040"></td>
        <td id="LC10040" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L10041" class="blob-num js-line-number" data-line-number="10041"></td>
        <td id="LC10041" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10042" class="blob-num js-line-number" data-line-number="10042"></td>
        <td id="LC10042" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10043" class="blob-num js-line-number" data-line-number="10043"></td>
        <td id="LC10043" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromJSONVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int8_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10044" class="blob-num js-line-number" data-line-number="10044"></td>
        <td id="LC10044" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L10045" class="blob-num js-line-number" data-line-number="10045"></td>
        <td id="LC10045" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L10046" class="blob-num js-line-number" data-line-number="10046"></td>
        <td id="LC10046" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-c1">0</span> &lt; m_keyValues.<span class="pl-c1">count</span>(name)) {</td>
      </tr>
      <tr>
        <td id="L10047" class="blob-num js-line-number" data-line-number="10047"></td>
        <td id="LC10047" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L10048" class="blob-num js-line-number" data-line-number="10048"></td>
        <td id="LC10048" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (JSONConstants::NUMBER == m_keyValues[name].<span class="pl-smi">m_type</span>) {</td>
      </tr>
      <tr>
        <td id="L10049" class="blob-num js-line-number" data-line-number="10049"></td>
        <td id="LC10049" class="blob-code blob-code-inner js-file-line">                v = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int8_t</span>&gt;(linb::any_cast&lt;<span class="pl-k">double</span>&gt;(m_keyValues[name].<span class="pl-smi">m_value</span>));</td>
      </tr>
      <tr>
        <td id="L10050" class="blob-num js-line-number" data-line-number="10050"></td>
        <td id="LC10050" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L10051" class="blob-num js-line-number" data-line-number="10051"></td>
        <td id="LC10051" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L10052" class="blob-num js-line-number" data-line-number="10052"></td>
        <td id="LC10052" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L10053" class="blob-num js-line-number" data-line-number="10053"></td>
        <td id="LC10053" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L10054" class="blob-num js-line-number" data-line-number="10054"></td>
        <td id="LC10054" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10055" class="blob-num js-line-number" data-line-number="10055"></td>
        <td id="LC10055" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10056" class="blob-num js-line-number" data-line-number="10056"></td>
        <td id="LC10056" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromJSONVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint8_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10057" class="blob-num js-line-number" data-line-number="10057"></td>
        <td id="LC10057" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L10058" class="blob-num js-line-number" data-line-number="10058"></td>
        <td id="LC10058" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L10059" class="blob-num js-line-number" data-line-number="10059"></td>
        <td id="LC10059" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-c1">0</span> &lt; m_keyValues.<span class="pl-c1">count</span>(name)) {</td>
      </tr>
      <tr>
        <td id="L10060" class="blob-num js-line-number" data-line-number="10060"></td>
        <td id="LC10060" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L10061" class="blob-num js-line-number" data-line-number="10061"></td>
        <td id="LC10061" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (JSONConstants::NUMBER == m_keyValues[name].<span class="pl-smi">m_type</span>) {</td>
      </tr>
      <tr>
        <td id="L10062" class="blob-num js-line-number" data-line-number="10062"></td>
        <td id="LC10062" class="blob-code blob-code-inner js-file-line">                v = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(linb::any_cast&lt;<span class="pl-k">double</span>&gt;(m_keyValues[name].<span class="pl-smi">m_value</span>));</td>
      </tr>
      <tr>
        <td id="L10063" class="blob-num js-line-number" data-line-number="10063"></td>
        <td id="LC10063" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L10064" class="blob-num js-line-number" data-line-number="10064"></td>
        <td id="LC10064" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L10065" class="blob-num js-line-number" data-line-number="10065"></td>
        <td id="LC10065" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L10066" class="blob-num js-line-number" data-line-number="10066"></td>
        <td id="LC10066" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L10067" class="blob-num js-line-number" data-line-number="10067"></td>
        <td id="LC10067" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10068" class="blob-num js-line-number" data-line-number="10068"></td>
        <td id="LC10068" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10069" class="blob-num js-line-number" data-line-number="10069"></td>
        <td id="LC10069" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromJSONVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int16_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10070" class="blob-num js-line-number" data-line-number="10070"></td>
        <td id="LC10070" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L10071" class="blob-num js-line-number" data-line-number="10071"></td>
        <td id="LC10071" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L10072" class="blob-num js-line-number" data-line-number="10072"></td>
        <td id="LC10072" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-c1">0</span> &lt; m_keyValues.<span class="pl-c1">count</span>(name)) {</td>
      </tr>
      <tr>
        <td id="L10073" class="blob-num js-line-number" data-line-number="10073"></td>
        <td id="LC10073" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L10074" class="blob-num js-line-number" data-line-number="10074"></td>
        <td id="LC10074" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (JSONConstants::NUMBER == m_keyValues[name].<span class="pl-smi">m_type</span>) {</td>
      </tr>
      <tr>
        <td id="L10075" class="blob-num js-line-number" data-line-number="10075"></td>
        <td id="LC10075" class="blob-code blob-code-inner js-file-line">                v = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int16_t</span>&gt;(linb::any_cast&lt;<span class="pl-k">double</span>&gt;(m_keyValues[name].<span class="pl-smi">m_value</span>));</td>
      </tr>
      <tr>
        <td id="L10076" class="blob-num js-line-number" data-line-number="10076"></td>
        <td id="LC10076" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L10077" class="blob-num js-line-number" data-line-number="10077"></td>
        <td id="LC10077" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L10078" class="blob-num js-line-number" data-line-number="10078"></td>
        <td id="LC10078" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L10079" class="blob-num js-line-number" data-line-number="10079"></td>
        <td id="LC10079" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L10080" class="blob-num js-line-number" data-line-number="10080"></td>
        <td id="LC10080" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10081" class="blob-num js-line-number" data-line-number="10081"></td>
        <td id="LC10081" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10082" class="blob-num js-line-number" data-line-number="10082"></td>
        <td id="LC10082" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromJSONVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint16_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10083" class="blob-num js-line-number" data-line-number="10083"></td>
        <td id="LC10083" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L10084" class="blob-num js-line-number" data-line-number="10084"></td>
        <td id="LC10084" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L10085" class="blob-num js-line-number" data-line-number="10085"></td>
        <td id="LC10085" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-c1">0</span> &lt; m_keyValues.<span class="pl-c1">count</span>(name)) {</td>
      </tr>
      <tr>
        <td id="L10086" class="blob-num js-line-number" data-line-number="10086"></td>
        <td id="LC10086" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L10087" class="blob-num js-line-number" data-line-number="10087"></td>
        <td id="LC10087" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (JSONConstants::NUMBER == m_keyValues[name].<span class="pl-smi">m_type</span>) {</td>
      </tr>
      <tr>
        <td id="L10088" class="blob-num js-line-number" data-line-number="10088"></td>
        <td id="LC10088" class="blob-code blob-code-inner js-file-line">                v = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint16_t</span>&gt;(linb::any_cast&lt;<span class="pl-k">double</span>&gt;(m_keyValues[name].<span class="pl-smi">m_value</span>));</td>
      </tr>
      <tr>
        <td id="L10089" class="blob-num js-line-number" data-line-number="10089"></td>
        <td id="LC10089" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L10090" class="blob-num js-line-number" data-line-number="10090"></td>
        <td id="LC10090" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L10091" class="blob-num js-line-number" data-line-number="10091"></td>
        <td id="LC10091" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L10092" class="blob-num js-line-number" data-line-number="10092"></td>
        <td id="LC10092" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L10093" class="blob-num js-line-number" data-line-number="10093"></td>
        <td id="LC10093" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10094" class="blob-num js-line-number" data-line-number="10094"></td>
        <td id="LC10094" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10095" class="blob-num js-line-number" data-line-number="10095"></td>
        <td id="LC10095" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromJSONVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int32_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10096" class="blob-num js-line-number" data-line-number="10096"></td>
        <td id="LC10096" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L10097" class="blob-num js-line-number" data-line-number="10097"></td>
        <td id="LC10097" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L10098" class="blob-num js-line-number" data-line-number="10098"></td>
        <td id="LC10098" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-c1">0</span> &lt; m_keyValues.<span class="pl-c1">count</span>(name)) {</td>
      </tr>
      <tr>
        <td id="L10099" class="blob-num js-line-number" data-line-number="10099"></td>
        <td id="LC10099" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L10100" class="blob-num js-line-number" data-line-number="10100"></td>
        <td id="LC10100" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (JSONConstants::NUMBER == m_keyValues[name].<span class="pl-smi">m_type</span>) {</td>
      </tr>
      <tr>
        <td id="L10101" class="blob-num js-line-number" data-line-number="10101"></td>
        <td id="LC10101" class="blob-code blob-code-inner js-file-line">                v = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int32_t</span>&gt;(linb::any_cast&lt;<span class="pl-k">double</span>&gt;(m_keyValues[name].<span class="pl-smi">m_value</span>));</td>
      </tr>
      <tr>
        <td id="L10102" class="blob-num js-line-number" data-line-number="10102"></td>
        <td id="LC10102" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L10103" class="blob-num js-line-number" data-line-number="10103"></td>
        <td id="LC10103" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L10104" class="blob-num js-line-number" data-line-number="10104"></td>
        <td id="LC10104" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L10105" class="blob-num js-line-number" data-line-number="10105"></td>
        <td id="LC10105" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L10106" class="blob-num js-line-number" data-line-number="10106"></td>
        <td id="LC10106" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10107" class="blob-num js-line-number" data-line-number="10107"></td>
        <td id="LC10107" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10108" class="blob-num js-line-number" data-line-number="10108"></td>
        <td id="LC10108" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromJSONVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint32_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10109" class="blob-num js-line-number" data-line-number="10109"></td>
        <td id="LC10109" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L10110" class="blob-num js-line-number" data-line-number="10110"></td>
        <td id="LC10110" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L10111" class="blob-num js-line-number" data-line-number="10111"></td>
        <td id="LC10111" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-c1">0</span> &lt; m_keyValues.<span class="pl-c1">count</span>(name)) {</td>
      </tr>
      <tr>
        <td id="L10112" class="blob-num js-line-number" data-line-number="10112"></td>
        <td id="LC10112" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L10113" class="blob-num js-line-number" data-line-number="10113"></td>
        <td id="LC10113" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (JSONConstants::NUMBER == m_keyValues[name].<span class="pl-smi">m_type</span>) {</td>
      </tr>
      <tr>
        <td id="L10114" class="blob-num js-line-number" data-line-number="10114"></td>
        <td id="LC10114" class="blob-code blob-code-inner js-file-line">                v = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint32_t</span>&gt;(linb::any_cast&lt;<span class="pl-k">double</span>&gt;(m_keyValues[name].<span class="pl-smi">m_value</span>));</td>
      </tr>
      <tr>
        <td id="L10115" class="blob-num js-line-number" data-line-number="10115"></td>
        <td id="LC10115" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L10116" class="blob-num js-line-number" data-line-number="10116"></td>
        <td id="LC10116" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L10117" class="blob-num js-line-number" data-line-number="10117"></td>
        <td id="LC10117" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L10118" class="blob-num js-line-number" data-line-number="10118"></td>
        <td id="LC10118" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L10119" class="blob-num js-line-number" data-line-number="10119"></td>
        <td id="LC10119" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10120" class="blob-num js-line-number" data-line-number="10120"></td>
        <td id="LC10120" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10121" class="blob-num js-line-number" data-line-number="10121"></td>
        <td id="LC10121" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromJSONVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int64_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10122" class="blob-num js-line-number" data-line-number="10122"></td>
        <td id="LC10122" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L10123" class="blob-num js-line-number" data-line-number="10123"></td>
        <td id="LC10123" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L10124" class="blob-num js-line-number" data-line-number="10124"></td>
        <td id="LC10124" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-c1">0</span> &lt; m_keyValues.<span class="pl-c1">count</span>(name)) {</td>
      </tr>
      <tr>
        <td id="L10125" class="blob-num js-line-number" data-line-number="10125"></td>
        <td id="LC10125" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L10126" class="blob-num js-line-number" data-line-number="10126"></td>
        <td id="LC10126" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (JSONConstants::NUMBER == m_keyValues[name].<span class="pl-smi">m_type</span>) {</td>
      </tr>
      <tr>
        <td id="L10127" class="blob-num js-line-number" data-line-number="10127"></td>
        <td id="LC10127" class="blob-code blob-code-inner js-file-line">                v = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int64_t</span>&gt;(linb::any_cast&lt;<span class="pl-k">double</span>&gt;(m_keyValues[name].<span class="pl-smi">m_value</span>));</td>
      </tr>
      <tr>
        <td id="L10128" class="blob-num js-line-number" data-line-number="10128"></td>
        <td id="LC10128" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L10129" class="blob-num js-line-number" data-line-number="10129"></td>
        <td id="LC10129" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L10130" class="blob-num js-line-number" data-line-number="10130"></td>
        <td id="LC10130" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L10131" class="blob-num js-line-number" data-line-number="10131"></td>
        <td id="LC10131" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L10132" class="blob-num js-line-number" data-line-number="10132"></td>
        <td id="LC10132" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10133" class="blob-num js-line-number" data-line-number="10133"></td>
        <td id="LC10133" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10134" class="blob-num js-line-number" data-line-number="10134"></td>
        <td id="LC10134" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromJSONVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint64_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10135" class="blob-num js-line-number" data-line-number="10135"></td>
        <td id="LC10135" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L10136" class="blob-num js-line-number" data-line-number="10136"></td>
        <td id="LC10136" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L10137" class="blob-num js-line-number" data-line-number="10137"></td>
        <td id="LC10137" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-c1">0</span> &lt; m_keyValues.<span class="pl-c1">count</span>(name)) {</td>
      </tr>
      <tr>
        <td id="L10138" class="blob-num js-line-number" data-line-number="10138"></td>
        <td id="LC10138" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L10139" class="blob-num js-line-number" data-line-number="10139"></td>
        <td id="LC10139" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (JSONConstants::NUMBER == m_keyValues[name].<span class="pl-smi">m_type</span>) {</td>
      </tr>
      <tr>
        <td id="L10140" class="blob-num js-line-number" data-line-number="10140"></td>
        <td id="LC10140" class="blob-code blob-code-inner js-file-line">                v = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint64_t</span>&gt;(linb::any_cast&lt;<span class="pl-k">double</span>&gt;(m_keyValues[name].<span class="pl-smi">m_value</span>));</td>
      </tr>
      <tr>
        <td id="L10141" class="blob-num js-line-number" data-line-number="10141"></td>
        <td id="LC10141" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L10142" class="blob-num js-line-number" data-line-number="10142"></td>
        <td id="LC10142" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L10143" class="blob-num js-line-number" data-line-number="10143"></td>
        <td id="LC10143" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L10144" class="blob-num js-line-number" data-line-number="10144"></td>
        <td id="LC10144" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L10145" class="blob-num js-line-number" data-line-number="10145"></td>
        <td id="LC10145" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10146" class="blob-num js-line-number" data-line-number="10146"></td>
        <td id="LC10146" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10147" class="blob-num js-line-number" data-line-number="10147"></td>
        <td id="LC10147" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromJSONVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">float</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10148" class="blob-num js-line-number" data-line-number="10148"></td>
        <td id="LC10148" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L10149" class="blob-num js-line-number" data-line-number="10149"></td>
        <td id="LC10149" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L10150" class="blob-num js-line-number" data-line-number="10150"></td>
        <td id="LC10150" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-c1">0</span> &lt; m_keyValues.<span class="pl-c1">count</span>(name)) {</td>
      </tr>
      <tr>
        <td id="L10151" class="blob-num js-line-number" data-line-number="10151"></td>
        <td id="LC10151" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L10152" class="blob-num js-line-number" data-line-number="10152"></td>
        <td id="LC10152" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (JSONConstants::NUMBER == m_keyValues[name].<span class="pl-smi">m_type</span>) {</td>
      </tr>
      <tr>
        <td id="L10153" class="blob-num js-line-number" data-line-number="10153"></td>
        <td id="LC10153" class="blob-code blob-code-inner js-file-line">                v = <span class="pl-k">static_cast</span>&lt;<span class="pl-k">float</span>&gt;(linb::any_cast&lt;<span class="pl-k">double</span>&gt;(m_keyValues[name].<span class="pl-smi">m_value</span>));</td>
      </tr>
      <tr>
        <td id="L10154" class="blob-num js-line-number" data-line-number="10154"></td>
        <td id="LC10154" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L10155" class="blob-num js-line-number" data-line-number="10155"></td>
        <td id="LC10155" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L10156" class="blob-num js-line-number" data-line-number="10156"></td>
        <td id="LC10156" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L10157" class="blob-num js-line-number" data-line-number="10157"></td>
        <td id="LC10157" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L10158" class="blob-num js-line-number" data-line-number="10158"></td>
        <td id="LC10158" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10159" class="blob-num js-line-number" data-line-number="10159"></td>
        <td id="LC10159" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10160" class="blob-num js-line-number" data-line-number="10160"></td>
        <td id="LC10160" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromJSONVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">double</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10161" class="blob-num js-line-number" data-line-number="10161"></td>
        <td id="LC10161" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L10162" class="blob-num js-line-number" data-line-number="10162"></td>
        <td id="LC10162" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L10163" class="blob-num js-line-number" data-line-number="10163"></td>
        <td id="LC10163" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-c1">0</span> &lt; m_keyValues.<span class="pl-c1">count</span>(name)) {</td>
      </tr>
      <tr>
        <td id="L10164" class="blob-num js-line-number" data-line-number="10164"></td>
        <td id="LC10164" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L10165" class="blob-num js-line-number" data-line-number="10165"></td>
        <td id="LC10165" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (JSONConstants::NUMBER == m_keyValues[name].<span class="pl-smi">m_type</span>) {</td>
      </tr>
      <tr>
        <td id="L10166" class="blob-num js-line-number" data-line-number="10166"></td>
        <td id="LC10166" class="blob-code blob-code-inner js-file-line">                v = linb::any_cast&lt;<span class="pl-k">double</span>&gt;(m_keyValues[name].<span class="pl-smi">m_value</span>);</td>
      </tr>
      <tr>
        <td id="L10167" class="blob-num js-line-number" data-line-number="10167"></td>
        <td id="LC10167" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L10168" class="blob-num js-line-number" data-line-number="10168"></td>
        <td id="LC10168" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L10169" class="blob-num js-line-number" data-line-number="10169"></td>
        <td id="LC10169" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L10170" class="blob-num js-line-number" data-line-number="10170"></td>
        <td id="LC10170" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L10171" class="blob-num js-line-number" data-line-number="10171"></td>
        <td id="LC10171" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10172" class="blob-num js-line-number" data-line-number="10172"></td>
        <td id="LC10172" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10173" class="blob-num js-line-number" data-line-number="10173"></td>
        <td id="LC10173" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">FromJSONVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, std::string &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10174" class="blob-num js-line-number" data-line-number="10174"></td>
        <td id="LC10174" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L10175" class="blob-num js-line-number" data-line-number="10175"></td>
        <td id="LC10175" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L10176" class="blob-num js-line-number" data-line-number="10176"></td>
        <td id="LC10176" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-c1">0</span> &lt; m_keyValues.<span class="pl-c1">count</span>(name)) {</td>
      </tr>
      <tr>
        <td id="L10177" class="blob-num js-line-number" data-line-number="10177"></td>
        <td id="LC10177" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L10178" class="blob-num js-line-number" data-line-number="10178"></td>
        <td id="LC10178" class="blob-code blob-code-inner js-file-line">            std::string tmp{linb::any_cast&lt;std::string&gt;(m_keyValues[name].<span class="pl-smi">m_value</span>)};</td>
      </tr>
      <tr>
        <td id="L10179" class="blob-num js-line-number" data-line-number="10179"></td>
        <td id="LC10179" class="blob-code blob-code-inner js-file-line">            v = <span class="pl-c1">decodeBase64</span>(tmp);</td>
      </tr>
      <tr>
        <td id="L10180" class="blob-num js-line-number" data-line-number="10180"></td>
        <td id="LC10180" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L10181" class="blob-num js-line-number" data-line-number="10181"></td>
        <td id="LC10181" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L10182" class="blob-num js-line-number" data-line-number="10182"></td>
        <td id="LC10182" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L10183" class="blob-num js-line-number" data-line-number="10183"></td>
        <td id="LC10183" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10184" class="blob-num js-line-number" data-line-number="10184"></td>
        <td id="LC10184" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10185" class="blob-num js-line-number" data-line-number="10185"></td>
        <td id="LC10185" class="blob-code blob-code-inner js-file-line">} <span class="pl-c"><span class="pl-c">//</span> namespace cluon</span></td>
      </tr>
      <tr>
        <td id="L10186" class="blob-num js-line-number" data-line-number="10186"></td>
        <td id="LC10186" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L10187" class="blob-num js-line-number" data-line-number="10187"></td>
        <td id="LC10187" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Copyright (C) 2017-2018  Christian Berger</span></td>
      </tr>
      <tr>
        <td id="L10188" class="blob-num js-line-number" data-line-number="10188"></td>
        <td id="LC10188" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L10189" class="blob-num js-line-number" data-line-number="10189"></td>
        <td id="LC10189" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is free software: you can redistribute it and/or modify</span></td>
      </tr>
      <tr>
        <td id="L10190" class="blob-num js-line-number" data-line-number="10190"></td>
        <td id="LC10190" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * it under the terms of the GNU General Public License as published by</span></td>
      </tr>
      <tr>
        <td id="L10191" class="blob-num js-line-number" data-line-number="10191"></td>
        <td id="LC10191" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * the Free Software Foundation, either version 3 of the License, or</span></td>
      </tr>
      <tr>
        <td id="L10192" class="blob-num js-line-number" data-line-number="10192"></td>
        <td id="LC10192" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * (at your option) any later version.</span></td>
      </tr>
      <tr>
        <td id="L10193" class="blob-num js-line-number" data-line-number="10193"></td>
        <td id="LC10193" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L10194" class="blob-num js-line-number" data-line-number="10194"></td>
        <td id="LC10194" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is distributed in the hope that it will be useful,</span></td>
      </tr>
      <tr>
        <td id="L10195" class="blob-num js-line-number" data-line-number="10195"></td>
        <td id="LC10195" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></td>
      </tr>
      <tr>
        <td id="L10196" class="blob-num js-line-number" data-line-number="10196"></td>
        <td id="LC10196" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></td>
      </tr>
      <tr>
        <td id="L10197" class="blob-num js-line-number" data-line-number="10197"></td>
        <td id="LC10197" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * GNU General Public License for more details.</span></td>
      </tr>
      <tr>
        <td id="L10198" class="blob-num js-line-number" data-line-number="10198"></td>
        <td id="LC10198" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L10199" class="blob-num js-line-number" data-line-number="10199"></td>
        <td id="LC10199" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * You should have received a copy of the GNU General Public License</span></td>
      </tr>
      <tr>
        <td id="L10200" class="blob-num js-line-number" data-line-number="10200"></td>
        <td id="LC10200" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></td>
      </tr>
      <tr>
        <td id="L10201" class="blob-num js-line-number" data-line-number="10201"></td>
        <td id="LC10201" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L10202" class="blob-num js-line-number" data-line-number="10202"></td>
        <td id="LC10202" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10203" class="blob-num js-line-number" data-line-number="10203"></td>
        <td id="LC10203" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/GenericMessage.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L10204" class="blob-num js-line-number" data-line-number="10204"></td>
        <td id="LC10204" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10205" class="blob-num js-line-number" data-line-number="10205"></td>
        <td id="LC10205" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>istream<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L10206" class="blob-num js-line-number" data-line-number="10206"></td>
        <td id="LC10206" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>iterator<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L10207" class="blob-num js-line-number" data-line-number="10207"></td>
        <td id="LC10207" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>regex<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L10208" class="blob-num js-line-number" data-line-number="10208"></td>
        <td id="LC10208" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10209" class="blob-num js-line-number" data-line-number="10209"></td>
        <td id="LC10209" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">cluon</span> {</td>
      </tr>
      <tr>
        <td id="L10210" class="blob-num js-line-number" data-line-number="10210"></td>
        <td id="LC10210" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10211" class="blob-num js-line-number" data-line-number="10211"></td>
        <td id="LC10211" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">GenericMessage::GenericMessageVisitor::preVisit</span>(<span class="pl-c1">int32_t</span> id, <span class="pl-k">const</span> std::string &amp;shortName, <span class="pl-k">const</span> std::string &amp;longName) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10212" class="blob-num js-line-number" data-line-number="10212"></td>
        <td id="LC10212" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)longName;</td>
      </tr>
      <tr>
        <td id="L10213" class="blob-num js-line-number" data-line-number="10213"></td>
        <td id="LC10213" class="blob-code blob-code-inner js-file-line">    m_metaMessage.<span class="pl-c1">messageIdentifier</span>(id).<span class="pl-c1">messageName</span>(shortName);</td>
      </tr>
      <tr>
        <td id="L10214" class="blob-num js-line-number" data-line-number="10214"></td>
        <td id="LC10214" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (!longName.<span class="pl-c1">empty</span>()) {</td>
      </tr>
      <tr>
        <td id="L10215" class="blob-num js-line-number" data-line-number="10215"></td>
        <td id="LC10215" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> <span class="pl-k">auto</span> pos = longName.<span class="pl-c1">rfind</span>(shortName);</td>
      </tr>
      <tr>
        <td id="L10216" class="blob-num js-line-number" data-line-number="10216"></td>
        <td id="LC10216" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (std::string::npos != pos) {</td>
      </tr>
      <tr>
        <td id="L10217" class="blob-num js-line-number" data-line-number="10217"></td>
        <td id="LC10217" class="blob-code blob-code-inner js-file-line">            m_metaMessage.<span class="pl-c1">packageName</span>(longName.<span class="pl-c1">substr</span>(<span class="pl-c1">0</span>, pos - <span class="pl-c1">1</span>));</td>
      </tr>
      <tr>
        <td id="L10218" class="blob-num js-line-number" data-line-number="10218"></td>
        <td id="LC10218" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L10219" class="blob-num js-line-number" data-line-number="10219"></td>
        <td id="LC10219" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L10220" class="blob-num js-line-number" data-line-number="10220"></td>
        <td id="LC10220" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10221" class="blob-num js-line-number" data-line-number="10221"></td>
        <td id="LC10221" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10222" class="blob-num js-line-number" data-line-number="10222"></td>
        <td id="LC10222" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">GenericMessage::GenericMessageVisitor::postVisit</span>() <span class="pl-k">noexcept</span> {}</td>
      </tr>
      <tr>
        <td id="L10223" class="blob-num js-line-number" data-line-number="10223"></td>
        <td id="LC10223" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10224" class="blob-num js-line-number" data-line-number="10224"></td>
        <td id="LC10224" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">GenericMessage::GenericMessageVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">bool</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10225" class="blob-num js-line-number" data-line-number="10225"></td>
        <td id="LC10225" class="blob-code blob-code-inner js-file-line">    cluon::MetaMessage::MetaField mf;</td>
      </tr>
      <tr>
        <td id="L10226" class="blob-num js-line-number" data-line-number="10226"></td>
        <td id="LC10226" class="blob-code blob-code-inner js-file-line">    mf.<span class="pl-c1">fieldIdentifier</span>(id).<span class="pl-c1">fieldDataType</span>(cluon::MetaMessage::MetaField::BOOL_T).<span class="pl-c1">fieldDataTypeName</span>(typeName).<span class="pl-c1">fieldName</span>(name);</td>
      </tr>
      <tr>
        <td id="L10227" class="blob-num js-line-number" data-line-number="10227"></td>
        <td id="LC10227" class="blob-code blob-code-inner js-file-line">    m_intermediateDataRepresentation[mf.<span class="pl-c1">fieldIdentifier</span>()] = linb::any{v};</td>
      </tr>
      <tr>
        <td id="L10228" class="blob-num js-line-number" data-line-number="10228"></td>
        <td id="LC10228" class="blob-code blob-code-inner js-file-line">    m_metaMessage.<span class="pl-c1">add</span>(<span class="pl-c1">std::move</span>(mf));</td>
      </tr>
      <tr>
        <td id="L10229" class="blob-num js-line-number" data-line-number="10229"></td>
        <td id="LC10229" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10230" class="blob-num js-line-number" data-line-number="10230"></td>
        <td id="LC10230" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10231" class="blob-num js-line-number" data-line-number="10231"></td>
        <td id="LC10231" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">GenericMessage::GenericMessageVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">char</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10232" class="blob-num js-line-number" data-line-number="10232"></td>
        <td id="LC10232" class="blob-code blob-code-inner js-file-line">    cluon::MetaMessage::MetaField mf;</td>
      </tr>
      <tr>
        <td id="L10233" class="blob-num js-line-number" data-line-number="10233"></td>
        <td id="LC10233" class="blob-code blob-code-inner js-file-line">    mf.<span class="pl-c1">fieldIdentifier</span>(id).<span class="pl-c1">fieldDataType</span>(cluon::MetaMessage::MetaField::CHAR_T).<span class="pl-c1">fieldDataTypeName</span>(typeName).<span class="pl-c1">fieldName</span>(name);</td>
      </tr>
      <tr>
        <td id="L10234" class="blob-num js-line-number" data-line-number="10234"></td>
        <td id="LC10234" class="blob-code blob-code-inner js-file-line">    m_intermediateDataRepresentation[mf.<span class="pl-c1">fieldIdentifier</span>()] = linb::any{v};</td>
      </tr>
      <tr>
        <td id="L10235" class="blob-num js-line-number" data-line-number="10235"></td>
        <td id="LC10235" class="blob-code blob-code-inner js-file-line">    m_metaMessage.<span class="pl-c1">add</span>(<span class="pl-c1">std::move</span>(mf));</td>
      </tr>
      <tr>
        <td id="L10236" class="blob-num js-line-number" data-line-number="10236"></td>
        <td id="LC10236" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10237" class="blob-num js-line-number" data-line-number="10237"></td>
        <td id="LC10237" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10238" class="blob-num js-line-number" data-line-number="10238"></td>
        <td id="LC10238" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">GenericMessage::GenericMessageVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int8_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10239" class="blob-num js-line-number" data-line-number="10239"></td>
        <td id="LC10239" class="blob-code blob-code-inner js-file-line">    cluon::MetaMessage::MetaField mf;</td>
      </tr>
      <tr>
        <td id="L10240" class="blob-num js-line-number" data-line-number="10240"></td>
        <td id="LC10240" class="blob-code blob-code-inner js-file-line">    mf.<span class="pl-c1">fieldIdentifier</span>(id).<span class="pl-c1">fieldDataType</span>(cluon::MetaMessage::MetaField::INT8_T).<span class="pl-c1">fieldDataTypeName</span>(typeName).<span class="pl-c1">fieldName</span>(name);</td>
      </tr>
      <tr>
        <td id="L10241" class="blob-num js-line-number" data-line-number="10241"></td>
        <td id="LC10241" class="blob-code blob-code-inner js-file-line">    m_intermediateDataRepresentation[mf.<span class="pl-c1">fieldIdentifier</span>()] = linb::any{v};</td>
      </tr>
      <tr>
        <td id="L10242" class="blob-num js-line-number" data-line-number="10242"></td>
        <td id="LC10242" class="blob-code blob-code-inner js-file-line">    m_metaMessage.<span class="pl-c1">add</span>(<span class="pl-c1">std::move</span>(mf));</td>
      </tr>
      <tr>
        <td id="L10243" class="blob-num js-line-number" data-line-number="10243"></td>
        <td id="LC10243" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10244" class="blob-num js-line-number" data-line-number="10244"></td>
        <td id="LC10244" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10245" class="blob-num js-line-number" data-line-number="10245"></td>
        <td id="LC10245" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">GenericMessage::GenericMessageVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint8_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10246" class="blob-num js-line-number" data-line-number="10246"></td>
        <td id="LC10246" class="blob-code blob-code-inner js-file-line">    cluon::MetaMessage::MetaField mf;</td>
      </tr>
      <tr>
        <td id="L10247" class="blob-num js-line-number" data-line-number="10247"></td>
        <td id="LC10247" class="blob-code blob-code-inner js-file-line">    mf.<span class="pl-c1">fieldIdentifier</span>(id).<span class="pl-c1">fieldDataType</span>(cluon::MetaMessage::MetaField::UINT8_T).<span class="pl-c1">fieldDataTypeName</span>(typeName).<span class="pl-c1">fieldName</span>(name);</td>
      </tr>
      <tr>
        <td id="L10248" class="blob-num js-line-number" data-line-number="10248"></td>
        <td id="LC10248" class="blob-code blob-code-inner js-file-line">    m_intermediateDataRepresentation[mf.<span class="pl-c1">fieldIdentifier</span>()] = linb::any{v};</td>
      </tr>
      <tr>
        <td id="L10249" class="blob-num js-line-number" data-line-number="10249"></td>
        <td id="LC10249" class="blob-code blob-code-inner js-file-line">    m_metaMessage.<span class="pl-c1">add</span>(<span class="pl-c1">std::move</span>(mf));</td>
      </tr>
      <tr>
        <td id="L10250" class="blob-num js-line-number" data-line-number="10250"></td>
        <td id="LC10250" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10251" class="blob-num js-line-number" data-line-number="10251"></td>
        <td id="LC10251" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10252" class="blob-num js-line-number" data-line-number="10252"></td>
        <td id="LC10252" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">GenericMessage::GenericMessageVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int16_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10253" class="blob-num js-line-number" data-line-number="10253"></td>
        <td id="LC10253" class="blob-code blob-code-inner js-file-line">    cluon::MetaMessage::MetaField mf;</td>
      </tr>
      <tr>
        <td id="L10254" class="blob-num js-line-number" data-line-number="10254"></td>
        <td id="LC10254" class="blob-code blob-code-inner js-file-line">    mf.<span class="pl-c1">fieldIdentifier</span>(id).<span class="pl-c1">fieldDataType</span>(cluon::MetaMessage::MetaField::INT16_T).<span class="pl-c1">fieldDataTypeName</span>(typeName).<span class="pl-c1">fieldName</span>(name);</td>
      </tr>
      <tr>
        <td id="L10255" class="blob-num js-line-number" data-line-number="10255"></td>
        <td id="LC10255" class="blob-code blob-code-inner js-file-line">    m_intermediateDataRepresentation[mf.<span class="pl-c1">fieldIdentifier</span>()] = linb::any{v};</td>
      </tr>
      <tr>
        <td id="L10256" class="blob-num js-line-number" data-line-number="10256"></td>
        <td id="LC10256" class="blob-code blob-code-inner js-file-line">    m_metaMessage.<span class="pl-c1">add</span>(<span class="pl-c1">std::move</span>(mf));</td>
      </tr>
      <tr>
        <td id="L10257" class="blob-num js-line-number" data-line-number="10257"></td>
        <td id="LC10257" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10258" class="blob-num js-line-number" data-line-number="10258"></td>
        <td id="LC10258" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10259" class="blob-num js-line-number" data-line-number="10259"></td>
        <td id="LC10259" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">GenericMessage::GenericMessageVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint16_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10260" class="blob-num js-line-number" data-line-number="10260"></td>
        <td id="LC10260" class="blob-code blob-code-inner js-file-line">    cluon::MetaMessage::MetaField mf;</td>
      </tr>
      <tr>
        <td id="L10261" class="blob-num js-line-number" data-line-number="10261"></td>
        <td id="LC10261" class="blob-code blob-code-inner js-file-line">    mf.<span class="pl-c1">fieldIdentifier</span>(id).<span class="pl-c1">fieldDataType</span>(cluon::MetaMessage::MetaField::UINT16_T).<span class="pl-c1">fieldDataTypeName</span>(typeName).<span class="pl-c1">fieldName</span>(name);</td>
      </tr>
      <tr>
        <td id="L10262" class="blob-num js-line-number" data-line-number="10262"></td>
        <td id="LC10262" class="blob-code blob-code-inner js-file-line">    m_intermediateDataRepresentation[mf.<span class="pl-c1">fieldIdentifier</span>()] = linb::any{v};</td>
      </tr>
      <tr>
        <td id="L10263" class="blob-num js-line-number" data-line-number="10263"></td>
        <td id="LC10263" class="blob-code blob-code-inner js-file-line">    m_metaMessage.<span class="pl-c1">add</span>(<span class="pl-c1">std::move</span>(mf));</td>
      </tr>
      <tr>
        <td id="L10264" class="blob-num js-line-number" data-line-number="10264"></td>
        <td id="LC10264" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10265" class="blob-num js-line-number" data-line-number="10265"></td>
        <td id="LC10265" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10266" class="blob-num js-line-number" data-line-number="10266"></td>
        <td id="LC10266" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">GenericMessage::GenericMessageVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int32_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10267" class="blob-num js-line-number" data-line-number="10267"></td>
        <td id="LC10267" class="blob-code blob-code-inner js-file-line">    cluon::MetaMessage::MetaField mf;</td>
      </tr>
      <tr>
        <td id="L10268" class="blob-num js-line-number" data-line-number="10268"></td>
        <td id="LC10268" class="blob-code blob-code-inner js-file-line">    mf.<span class="pl-c1">fieldIdentifier</span>(id).<span class="pl-c1">fieldDataType</span>(cluon::MetaMessage::MetaField::INT32_T).<span class="pl-c1">fieldDataTypeName</span>(typeName).<span class="pl-c1">fieldName</span>(name);</td>
      </tr>
      <tr>
        <td id="L10269" class="blob-num js-line-number" data-line-number="10269"></td>
        <td id="LC10269" class="blob-code blob-code-inner js-file-line">    m_intermediateDataRepresentation[mf.<span class="pl-c1">fieldIdentifier</span>()] = linb::any{v};</td>
      </tr>
      <tr>
        <td id="L10270" class="blob-num js-line-number" data-line-number="10270"></td>
        <td id="LC10270" class="blob-code blob-code-inner js-file-line">    m_metaMessage.<span class="pl-c1">add</span>(<span class="pl-c1">std::move</span>(mf));</td>
      </tr>
      <tr>
        <td id="L10271" class="blob-num js-line-number" data-line-number="10271"></td>
        <td id="LC10271" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10272" class="blob-num js-line-number" data-line-number="10272"></td>
        <td id="LC10272" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10273" class="blob-num js-line-number" data-line-number="10273"></td>
        <td id="LC10273" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">GenericMessage::GenericMessageVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint32_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10274" class="blob-num js-line-number" data-line-number="10274"></td>
        <td id="LC10274" class="blob-code blob-code-inner js-file-line">    cluon::MetaMessage::MetaField mf;</td>
      </tr>
      <tr>
        <td id="L10275" class="blob-num js-line-number" data-line-number="10275"></td>
        <td id="LC10275" class="blob-code blob-code-inner js-file-line">    mf.<span class="pl-c1">fieldIdentifier</span>(id).<span class="pl-c1">fieldDataType</span>(cluon::MetaMessage::MetaField::UINT32_T).<span class="pl-c1">fieldDataTypeName</span>(typeName).<span class="pl-c1">fieldName</span>(name);</td>
      </tr>
      <tr>
        <td id="L10276" class="blob-num js-line-number" data-line-number="10276"></td>
        <td id="LC10276" class="blob-code blob-code-inner js-file-line">    m_intermediateDataRepresentation[mf.<span class="pl-c1">fieldIdentifier</span>()] = linb::any{v};</td>
      </tr>
      <tr>
        <td id="L10277" class="blob-num js-line-number" data-line-number="10277"></td>
        <td id="LC10277" class="blob-code blob-code-inner js-file-line">    m_metaMessage.<span class="pl-c1">add</span>(<span class="pl-c1">std::move</span>(mf));</td>
      </tr>
      <tr>
        <td id="L10278" class="blob-num js-line-number" data-line-number="10278"></td>
        <td id="LC10278" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10279" class="blob-num js-line-number" data-line-number="10279"></td>
        <td id="LC10279" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10280" class="blob-num js-line-number" data-line-number="10280"></td>
        <td id="LC10280" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">GenericMessage::GenericMessageVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int64_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10281" class="blob-num js-line-number" data-line-number="10281"></td>
        <td id="LC10281" class="blob-code blob-code-inner js-file-line">    cluon::MetaMessage::MetaField mf;</td>
      </tr>
      <tr>
        <td id="L10282" class="blob-num js-line-number" data-line-number="10282"></td>
        <td id="LC10282" class="blob-code blob-code-inner js-file-line">    mf.<span class="pl-c1">fieldIdentifier</span>(id).<span class="pl-c1">fieldDataType</span>(cluon::MetaMessage::MetaField::INT64_T).<span class="pl-c1">fieldDataTypeName</span>(typeName).<span class="pl-c1">fieldName</span>(name);</td>
      </tr>
      <tr>
        <td id="L10283" class="blob-num js-line-number" data-line-number="10283"></td>
        <td id="LC10283" class="blob-code blob-code-inner js-file-line">    m_intermediateDataRepresentation[mf.<span class="pl-c1">fieldIdentifier</span>()] = linb::any{v};</td>
      </tr>
      <tr>
        <td id="L10284" class="blob-num js-line-number" data-line-number="10284"></td>
        <td id="LC10284" class="blob-code blob-code-inner js-file-line">    m_metaMessage.<span class="pl-c1">add</span>(<span class="pl-c1">std::move</span>(mf));</td>
      </tr>
      <tr>
        <td id="L10285" class="blob-num js-line-number" data-line-number="10285"></td>
        <td id="LC10285" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10286" class="blob-num js-line-number" data-line-number="10286"></td>
        <td id="LC10286" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10287" class="blob-num js-line-number" data-line-number="10287"></td>
        <td id="LC10287" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">GenericMessage::GenericMessageVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint64_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10288" class="blob-num js-line-number" data-line-number="10288"></td>
        <td id="LC10288" class="blob-code blob-code-inner js-file-line">    cluon::MetaMessage::MetaField mf;</td>
      </tr>
      <tr>
        <td id="L10289" class="blob-num js-line-number" data-line-number="10289"></td>
        <td id="LC10289" class="blob-code blob-code-inner js-file-line">    mf.<span class="pl-c1">fieldIdentifier</span>(id).<span class="pl-c1">fieldDataType</span>(cluon::MetaMessage::MetaField::UINT64_T).<span class="pl-c1">fieldDataTypeName</span>(typeName).<span class="pl-c1">fieldName</span>(name);</td>
      </tr>
      <tr>
        <td id="L10290" class="blob-num js-line-number" data-line-number="10290"></td>
        <td id="LC10290" class="blob-code blob-code-inner js-file-line">    m_intermediateDataRepresentation[mf.<span class="pl-c1">fieldIdentifier</span>()] = linb::any{v};</td>
      </tr>
      <tr>
        <td id="L10291" class="blob-num js-line-number" data-line-number="10291"></td>
        <td id="LC10291" class="blob-code blob-code-inner js-file-line">    m_metaMessage.<span class="pl-c1">add</span>(<span class="pl-c1">std::move</span>(mf));</td>
      </tr>
      <tr>
        <td id="L10292" class="blob-num js-line-number" data-line-number="10292"></td>
        <td id="LC10292" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10293" class="blob-num js-line-number" data-line-number="10293"></td>
        <td id="LC10293" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10294" class="blob-num js-line-number" data-line-number="10294"></td>
        <td id="LC10294" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">GenericMessage::GenericMessageVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">float</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10295" class="blob-num js-line-number" data-line-number="10295"></td>
        <td id="LC10295" class="blob-code blob-code-inner js-file-line">    cluon::MetaMessage::MetaField mf;</td>
      </tr>
      <tr>
        <td id="L10296" class="blob-num js-line-number" data-line-number="10296"></td>
        <td id="LC10296" class="blob-code blob-code-inner js-file-line">    mf.<span class="pl-c1">fieldIdentifier</span>(id).<span class="pl-c1">fieldDataType</span>(cluon::MetaMessage::MetaField::FLOAT_T).<span class="pl-c1">fieldDataTypeName</span>(typeName).<span class="pl-c1">fieldName</span>(name);</td>
      </tr>
      <tr>
        <td id="L10297" class="blob-num js-line-number" data-line-number="10297"></td>
        <td id="LC10297" class="blob-code blob-code-inner js-file-line">    m_intermediateDataRepresentation[mf.<span class="pl-c1">fieldIdentifier</span>()] = linb::any{v};</td>
      </tr>
      <tr>
        <td id="L10298" class="blob-num js-line-number" data-line-number="10298"></td>
        <td id="LC10298" class="blob-code blob-code-inner js-file-line">    m_metaMessage.<span class="pl-c1">add</span>(<span class="pl-c1">std::move</span>(mf));</td>
      </tr>
      <tr>
        <td id="L10299" class="blob-num js-line-number" data-line-number="10299"></td>
        <td id="LC10299" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10300" class="blob-num js-line-number" data-line-number="10300"></td>
        <td id="LC10300" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10301" class="blob-num js-line-number" data-line-number="10301"></td>
        <td id="LC10301" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">GenericMessage::GenericMessageVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">double</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10302" class="blob-num js-line-number" data-line-number="10302"></td>
        <td id="LC10302" class="blob-code blob-code-inner js-file-line">    cluon::MetaMessage::MetaField mf;</td>
      </tr>
      <tr>
        <td id="L10303" class="blob-num js-line-number" data-line-number="10303"></td>
        <td id="LC10303" class="blob-code blob-code-inner js-file-line">    mf.<span class="pl-c1">fieldIdentifier</span>(id).<span class="pl-c1">fieldDataType</span>(cluon::MetaMessage::MetaField::DOUBLE_T).<span class="pl-c1">fieldDataTypeName</span>(typeName).<span class="pl-c1">fieldName</span>(name);</td>
      </tr>
      <tr>
        <td id="L10304" class="blob-num js-line-number" data-line-number="10304"></td>
        <td id="LC10304" class="blob-code blob-code-inner js-file-line">    m_intermediateDataRepresentation[mf.<span class="pl-c1">fieldIdentifier</span>()] = linb::any{v};</td>
      </tr>
      <tr>
        <td id="L10305" class="blob-num js-line-number" data-line-number="10305"></td>
        <td id="LC10305" class="blob-code blob-code-inner js-file-line">    m_metaMessage.<span class="pl-c1">add</span>(<span class="pl-c1">std::move</span>(mf));</td>
      </tr>
      <tr>
        <td id="L10306" class="blob-num js-line-number" data-line-number="10306"></td>
        <td id="LC10306" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10307" class="blob-num js-line-number" data-line-number="10307"></td>
        <td id="LC10307" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10308" class="blob-num js-line-number" data-line-number="10308"></td>
        <td id="LC10308" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">GenericMessage::GenericMessageVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, std::string &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10309" class="blob-num js-line-number" data-line-number="10309"></td>
        <td id="LC10309" class="blob-code blob-code-inner js-file-line">    cluon::MetaMessage::MetaField mf;</td>
      </tr>
      <tr>
        <td id="L10310" class="blob-num js-line-number" data-line-number="10310"></td>
        <td id="LC10310" class="blob-code blob-code-inner js-file-line">    mf.<span class="pl-c1">fieldIdentifier</span>(id).<span class="pl-c1">fieldDataType</span>(cluon::MetaMessage::MetaField::STRING_T).<span class="pl-c1">fieldDataTypeName</span>(typeName).<span class="pl-c1">fieldName</span>(name);</td>
      </tr>
      <tr>
        <td id="L10311" class="blob-num js-line-number" data-line-number="10311"></td>
        <td id="LC10311" class="blob-code blob-code-inner js-file-line">    m_intermediateDataRepresentation[mf.<span class="pl-c1">fieldIdentifier</span>()] = linb::any{v};</td>
      </tr>
      <tr>
        <td id="L10312" class="blob-num js-line-number" data-line-number="10312"></td>
        <td id="LC10312" class="blob-code blob-code-inner js-file-line">    m_metaMessage.<span class="pl-c1">add</span>(<span class="pl-c1">std::move</span>(mf));</td>
      </tr>
      <tr>
        <td id="L10313" class="blob-num js-line-number" data-line-number="10313"></td>
        <td id="LC10313" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10314" class="blob-num js-line-number" data-line-number="10314"></td>
        <td id="LC10314" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10315" class="blob-num js-line-number" data-line-number="10315"></td>
        <td id="LC10315" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> MetaMessage <span class="pl-en">GenericMessage::GenericMessageVisitor::metaMessage</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10316" class="blob-num js-line-number" data-line-number="10316"></td>
        <td id="LC10316" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> m_metaMessage;</td>
      </tr>
      <tr>
        <td id="L10317" class="blob-num js-line-number" data-line-number="10317"></td>
        <td id="LC10317" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10318" class="blob-num js-line-number" data-line-number="10318"></td>
        <td id="LC10318" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10319" class="blob-num js-line-number" data-line-number="10319"></td>
        <td id="LC10319" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::map&lt;<span class="pl-c1">uint32_t</span>, linb::any&gt; <span class="pl-en">GenericMessage::GenericMessageVisitor::intermediateDataRepresentation</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10320" class="blob-num js-line-number" data-line-number="10320"></td>
        <td id="LC10320" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> m_intermediateDataRepresentation;</td>
      </tr>
      <tr>
        <td id="L10321" class="blob-num js-line-number" data-line-number="10321"></td>
        <td id="LC10321" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10322" class="blob-num js-line-number" data-line-number="10322"></td>
        <td id="LC10322" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10323" class="blob-num js-line-number" data-line-number="10323"></td>
        <td id="LC10323" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>//////////////////////////////////////////////////////////////////////////////</span></td>
      </tr>
      <tr>
        <td id="L10324" class="blob-num js-line-number" data-line-number="10324"></td>
        <td id="LC10324" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10325" class="blob-num js-line-number" data-line-number="10325"></td>
        <td id="LC10325" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-c1">int32_t</span> <span class="pl-en">GenericMessage::ID</span>() {</td>
      </tr>
      <tr>
        <td id="L10326" class="blob-num js-line-number" data-line-number="10326"></td>
        <td id="LC10326" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> m_metaMessage.<span class="pl-c1">messageIdentifier</span>();</td>
      </tr>
      <tr>
        <td id="L10327" class="blob-num js-line-number" data-line-number="10327"></td>
        <td id="LC10327" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10328" class="blob-num js-line-number" data-line-number="10328"></td>
        <td id="LC10328" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10329" class="blob-num js-line-number" data-line-number="10329"></td>
        <td id="LC10329" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">const</span> std::string <span class="pl-en">GenericMessage::ShortName</span>() {</td>
      </tr>
      <tr>
        <td id="L10330" class="blob-num js-line-number" data-line-number="10330"></td>
        <td id="LC10330" class="blob-code blob-code-inner js-file-line">    std::string tmp{<span class="pl-c1">LongName</span>()};</td>
      </tr>
      <tr>
        <td id="L10331" class="blob-num js-line-number" data-line-number="10331"></td>
        <td id="LC10331" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">std::replace</span>(tmp.<span class="pl-c1">begin</span>(), tmp.<span class="pl-c1">end</span>(), <span class="pl-s"><span class="pl-pds">&#39;</span>.<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span> <span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L10332" class="blob-num js-line-number" data-line-number="10332"></td>
        <td id="LC10332" class="blob-code blob-code-inner js-file-line">    std::istringstream sstr{tmp};</td>
      </tr>
      <tr>
        <td id="L10333" class="blob-num js-line-number" data-line-number="10333"></td>
        <td id="LC10333" class="blob-code blob-code-inner js-file-line">    std::vector&lt;std::string&gt; tokens{std::istream_iterator&lt;std::string&gt;(sstr), std::istream_iterator&lt;std::string&gt;()};</td>
      </tr>
      <tr>
        <td id="L10334" class="blob-num js-line-number" data-line-number="10334"></td>
        <td id="LC10334" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10335" class="blob-num js-line-number" data-line-number="10335"></td>
        <td id="LC10335" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> tokens.<span class="pl-c1">back</span>();</td>
      </tr>
      <tr>
        <td id="L10336" class="blob-num js-line-number" data-line-number="10336"></td>
        <td id="LC10336" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10337" class="blob-num js-line-number" data-line-number="10337"></td>
        <td id="LC10337" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10338" class="blob-num js-line-number" data-line-number="10338"></td>
        <td id="LC10338" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">const</span> std::string <span class="pl-en">GenericMessage::LongName</span>() {</td>
      </tr>
      <tr>
        <td id="L10339" class="blob-num js-line-number" data-line-number="10339"></td>
        <td id="LC10339" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> m_metaMessage.<span class="pl-c1">packageName</span>() + (!m_metaMessage.<span class="pl-c1">packageName</span>().<span class="pl-c1">empty</span>() ? <span class="pl-s"><span class="pl-pds">&quot;</span>.<span class="pl-pds">&quot;</span></span> : <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>) + m_metaMessage.<span class="pl-c1">messageName</span>();</td>
      </tr>
      <tr>
        <td id="L10340" class="blob-num js-line-number" data-line-number="10340"></td>
        <td id="LC10340" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10341" class="blob-num js-line-number" data-line-number="10341"></td>
        <td id="LC10341" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10342" class="blob-num js-line-number" data-line-number="10342"></td>
        <td id="LC10342" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">GenericMessage::preVisit</span>(<span class="pl-c1">int32_t</span> id, <span class="pl-k">const</span> std::string &amp;shortName, <span class="pl-k">const</span> std::string &amp;longName) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10343" class="blob-num js-line-number" data-line-number="10343"></td>
        <td id="LC10343" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L10344" class="blob-num js-line-number" data-line-number="10344"></td>
        <td id="LC10344" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)shortName;</td>
      </tr>
      <tr>
        <td id="L10345" class="blob-num js-line-number" data-line-number="10345"></td>
        <td id="LC10345" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)longName;</td>
      </tr>
      <tr>
        <td id="L10346" class="blob-num js-line-number" data-line-number="10346"></td>
        <td id="LC10346" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10347" class="blob-num js-line-number" data-line-number="10347"></td>
        <td id="LC10347" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10348" class="blob-num js-line-number" data-line-number="10348"></td>
        <td id="LC10348" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">GenericMessage::postVisit</span>() <span class="pl-k">noexcept</span> {}</td>
      </tr>
      <tr>
        <td id="L10349" class="blob-num js-line-number" data-line-number="10349"></td>
        <td id="LC10349" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10350" class="blob-num js-line-number" data-line-number="10350"></td>
        <td id="LC10350" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">GenericMessage::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">bool</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10351" class="blob-num js-line-number" data-line-number="10351"></td>
        <td id="LC10351" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L10352" class="blob-num js-line-number" data-line-number="10352"></td>
        <td id="LC10352" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)name;</td>
      </tr>
      <tr>
        <td id="L10353" class="blob-num js-line-number" data-line-number="10353"></td>
        <td id="LC10353" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-c1">0</span> &lt; m_intermediateDataRepresentation.<span class="pl-c1">count</span>(id)) {</td>
      </tr>
      <tr>
        <td id="L10354" class="blob-num js-line-number" data-line-number="10354"></td>
        <td id="LC10354" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L10355" class="blob-num js-line-number" data-line-number="10355"></td>
        <td id="LC10355" class="blob-code blob-code-inner js-file-line">            v = linb::any_cast&lt;<span class="pl-k">bool</span>&gt;(m_intermediateDataRepresentation[id]);</td>
      </tr>
      <tr>
        <td id="L10356" class="blob-num js-line-number" data-line-number="10356"></td>
        <td id="LC10356" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L10357" class="blob-num js-line-number" data-line-number="10357"></td>
        <td id="LC10357" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L10358" class="blob-num js-line-number" data-line-number="10358"></td>
        <td id="LC10358" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L10359" class="blob-num js-line-number" data-line-number="10359"></td>
        <td id="LC10359" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10360" class="blob-num js-line-number" data-line-number="10360"></td>
        <td id="LC10360" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10361" class="blob-num js-line-number" data-line-number="10361"></td>
        <td id="LC10361" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">GenericMessage::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">char</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10362" class="blob-num js-line-number" data-line-number="10362"></td>
        <td id="LC10362" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L10363" class="blob-num js-line-number" data-line-number="10363"></td>
        <td id="LC10363" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)name;</td>
      </tr>
      <tr>
        <td id="L10364" class="blob-num js-line-number" data-line-number="10364"></td>
        <td id="LC10364" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-c1">0</span> &lt; m_intermediateDataRepresentation.<span class="pl-c1">count</span>(id)) {</td>
      </tr>
      <tr>
        <td id="L10365" class="blob-num js-line-number" data-line-number="10365"></td>
        <td id="LC10365" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L10366" class="blob-num js-line-number" data-line-number="10366"></td>
        <td id="LC10366" class="blob-code blob-code-inner js-file-line">            v = linb::any_cast&lt;<span class="pl-k">char</span>&gt;(m_intermediateDataRepresentation[id]);</td>
      </tr>
      <tr>
        <td id="L10367" class="blob-num js-line-number" data-line-number="10367"></td>
        <td id="LC10367" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L10368" class="blob-num js-line-number" data-line-number="10368"></td>
        <td id="LC10368" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L10369" class="blob-num js-line-number" data-line-number="10369"></td>
        <td id="LC10369" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L10370" class="blob-num js-line-number" data-line-number="10370"></td>
        <td id="LC10370" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10371" class="blob-num js-line-number" data-line-number="10371"></td>
        <td id="LC10371" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10372" class="blob-num js-line-number" data-line-number="10372"></td>
        <td id="LC10372" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">GenericMessage::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int8_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10373" class="blob-num js-line-number" data-line-number="10373"></td>
        <td id="LC10373" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L10374" class="blob-num js-line-number" data-line-number="10374"></td>
        <td id="LC10374" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)name;</td>
      </tr>
      <tr>
        <td id="L10375" class="blob-num js-line-number" data-line-number="10375"></td>
        <td id="LC10375" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-c1">0</span> &lt; m_intermediateDataRepresentation.<span class="pl-c1">count</span>(id)) {</td>
      </tr>
      <tr>
        <td id="L10376" class="blob-num js-line-number" data-line-number="10376"></td>
        <td id="LC10376" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L10377" class="blob-num js-line-number" data-line-number="10377"></td>
        <td id="LC10377" class="blob-code blob-code-inner js-file-line">            v = linb::any_cast&lt;<span class="pl-c1">int8_t</span>&gt;(m_intermediateDataRepresentation[id]);</td>
      </tr>
      <tr>
        <td id="L10378" class="blob-num js-line-number" data-line-number="10378"></td>
        <td id="LC10378" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L10379" class="blob-num js-line-number" data-line-number="10379"></td>
        <td id="LC10379" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L10380" class="blob-num js-line-number" data-line-number="10380"></td>
        <td id="LC10380" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L10381" class="blob-num js-line-number" data-line-number="10381"></td>
        <td id="LC10381" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10382" class="blob-num js-line-number" data-line-number="10382"></td>
        <td id="LC10382" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10383" class="blob-num js-line-number" data-line-number="10383"></td>
        <td id="LC10383" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">GenericMessage::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint8_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10384" class="blob-num js-line-number" data-line-number="10384"></td>
        <td id="LC10384" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L10385" class="blob-num js-line-number" data-line-number="10385"></td>
        <td id="LC10385" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)name;</td>
      </tr>
      <tr>
        <td id="L10386" class="blob-num js-line-number" data-line-number="10386"></td>
        <td id="LC10386" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-c1">0</span> &lt; m_intermediateDataRepresentation.<span class="pl-c1">count</span>(id)) {</td>
      </tr>
      <tr>
        <td id="L10387" class="blob-num js-line-number" data-line-number="10387"></td>
        <td id="LC10387" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L10388" class="blob-num js-line-number" data-line-number="10388"></td>
        <td id="LC10388" class="blob-code blob-code-inner js-file-line">            v = linb::any_cast&lt;<span class="pl-c1">uint8_t</span>&gt;(m_intermediateDataRepresentation[id]);</td>
      </tr>
      <tr>
        <td id="L10389" class="blob-num js-line-number" data-line-number="10389"></td>
        <td id="LC10389" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L10390" class="blob-num js-line-number" data-line-number="10390"></td>
        <td id="LC10390" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L10391" class="blob-num js-line-number" data-line-number="10391"></td>
        <td id="LC10391" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L10392" class="blob-num js-line-number" data-line-number="10392"></td>
        <td id="LC10392" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10393" class="blob-num js-line-number" data-line-number="10393"></td>
        <td id="LC10393" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10394" class="blob-num js-line-number" data-line-number="10394"></td>
        <td id="LC10394" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">GenericMessage::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int16_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10395" class="blob-num js-line-number" data-line-number="10395"></td>
        <td id="LC10395" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L10396" class="blob-num js-line-number" data-line-number="10396"></td>
        <td id="LC10396" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)name;</td>
      </tr>
      <tr>
        <td id="L10397" class="blob-num js-line-number" data-line-number="10397"></td>
        <td id="LC10397" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-c1">0</span> &lt; m_intermediateDataRepresentation.<span class="pl-c1">count</span>(id)) {</td>
      </tr>
      <tr>
        <td id="L10398" class="blob-num js-line-number" data-line-number="10398"></td>
        <td id="LC10398" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L10399" class="blob-num js-line-number" data-line-number="10399"></td>
        <td id="LC10399" class="blob-code blob-code-inner js-file-line">            v = linb::any_cast&lt;<span class="pl-c1">int16_t</span>&gt;(m_intermediateDataRepresentation[id]);</td>
      </tr>
      <tr>
        <td id="L10400" class="blob-num js-line-number" data-line-number="10400"></td>
        <td id="LC10400" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L10401" class="blob-num js-line-number" data-line-number="10401"></td>
        <td id="LC10401" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L10402" class="blob-num js-line-number" data-line-number="10402"></td>
        <td id="LC10402" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L10403" class="blob-num js-line-number" data-line-number="10403"></td>
        <td id="LC10403" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10404" class="blob-num js-line-number" data-line-number="10404"></td>
        <td id="LC10404" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10405" class="blob-num js-line-number" data-line-number="10405"></td>
        <td id="LC10405" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">GenericMessage::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint16_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10406" class="blob-num js-line-number" data-line-number="10406"></td>
        <td id="LC10406" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L10407" class="blob-num js-line-number" data-line-number="10407"></td>
        <td id="LC10407" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)name;</td>
      </tr>
      <tr>
        <td id="L10408" class="blob-num js-line-number" data-line-number="10408"></td>
        <td id="LC10408" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-c1">0</span> &lt; m_intermediateDataRepresentation.<span class="pl-c1">count</span>(id)) {</td>
      </tr>
      <tr>
        <td id="L10409" class="blob-num js-line-number" data-line-number="10409"></td>
        <td id="LC10409" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L10410" class="blob-num js-line-number" data-line-number="10410"></td>
        <td id="LC10410" class="blob-code blob-code-inner js-file-line">            v = linb::any_cast&lt;<span class="pl-c1">uint16_t</span>&gt;(m_intermediateDataRepresentation[id]);</td>
      </tr>
      <tr>
        <td id="L10411" class="blob-num js-line-number" data-line-number="10411"></td>
        <td id="LC10411" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L10412" class="blob-num js-line-number" data-line-number="10412"></td>
        <td id="LC10412" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L10413" class="blob-num js-line-number" data-line-number="10413"></td>
        <td id="LC10413" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L10414" class="blob-num js-line-number" data-line-number="10414"></td>
        <td id="LC10414" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10415" class="blob-num js-line-number" data-line-number="10415"></td>
        <td id="LC10415" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10416" class="blob-num js-line-number" data-line-number="10416"></td>
        <td id="LC10416" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">GenericMessage::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int32_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10417" class="blob-num js-line-number" data-line-number="10417"></td>
        <td id="LC10417" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L10418" class="blob-num js-line-number" data-line-number="10418"></td>
        <td id="LC10418" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)name;</td>
      </tr>
      <tr>
        <td id="L10419" class="blob-num js-line-number" data-line-number="10419"></td>
        <td id="LC10419" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-c1">0</span> &lt; m_intermediateDataRepresentation.<span class="pl-c1">count</span>(id)) {</td>
      </tr>
      <tr>
        <td id="L10420" class="blob-num js-line-number" data-line-number="10420"></td>
        <td id="LC10420" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L10421" class="blob-num js-line-number" data-line-number="10421"></td>
        <td id="LC10421" class="blob-code blob-code-inner js-file-line">            v = linb::any_cast&lt;<span class="pl-c1">int32_t</span>&gt;(m_intermediateDataRepresentation[id]);</td>
      </tr>
      <tr>
        <td id="L10422" class="blob-num js-line-number" data-line-number="10422"></td>
        <td id="LC10422" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L10423" class="blob-num js-line-number" data-line-number="10423"></td>
        <td id="LC10423" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L10424" class="blob-num js-line-number" data-line-number="10424"></td>
        <td id="LC10424" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L10425" class="blob-num js-line-number" data-line-number="10425"></td>
        <td id="LC10425" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10426" class="blob-num js-line-number" data-line-number="10426"></td>
        <td id="LC10426" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10427" class="blob-num js-line-number" data-line-number="10427"></td>
        <td id="LC10427" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">GenericMessage::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint32_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10428" class="blob-num js-line-number" data-line-number="10428"></td>
        <td id="LC10428" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L10429" class="blob-num js-line-number" data-line-number="10429"></td>
        <td id="LC10429" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)name;</td>
      </tr>
      <tr>
        <td id="L10430" class="blob-num js-line-number" data-line-number="10430"></td>
        <td id="LC10430" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-c1">0</span> &lt; m_intermediateDataRepresentation.<span class="pl-c1">count</span>(id)) {</td>
      </tr>
      <tr>
        <td id="L10431" class="blob-num js-line-number" data-line-number="10431"></td>
        <td id="LC10431" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L10432" class="blob-num js-line-number" data-line-number="10432"></td>
        <td id="LC10432" class="blob-code blob-code-inner js-file-line">            v = linb::any_cast&lt;<span class="pl-c1">uint32_t</span>&gt;(m_intermediateDataRepresentation[id]);</td>
      </tr>
      <tr>
        <td id="L10433" class="blob-num js-line-number" data-line-number="10433"></td>
        <td id="LC10433" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L10434" class="blob-num js-line-number" data-line-number="10434"></td>
        <td id="LC10434" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L10435" class="blob-num js-line-number" data-line-number="10435"></td>
        <td id="LC10435" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L10436" class="blob-num js-line-number" data-line-number="10436"></td>
        <td id="LC10436" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10437" class="blob-num js-line-number" data-line-number="10437"></td>
        <td id="LC10437" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10438" class="blob-num js-line-number" data-line-number="10438"></td>
        <td id="LC10438" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">GenericMessage::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int64_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10439" class="blob-num js-line-number" data-line-number="10439"></td>
        <td id="LC10439" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L10440" class="blob-num js-line-number" data-line-number="10440"></td>
        <td id="LC10440" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)name;</td>
      </tr>
      <tr>
        <td id="L10441" class="blob-num js-line-number" data-line-number="10441"></td>
        <td id="LC10441" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-c1">0</span> &lt; m_intermediateDataRepresentation.<span class="pl-c1">count</span>(id)) {</td>
      </tr>
      <tr>
        <td id="L10442" class="blob-num js-line-number" data-line-number="10442"></td>
        <td id="LC10442" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L10443" class="blob-num js-line-number" data-line-number="10443"></td>
        <td id="LC10443" class="blob-code blob-code-inner js-file-line">            v = linb::any_cast&lt;<span class="pl-c1">int64_t</span>&gt;(m_intermediateDataRepresentation[id]);</td>
      </tr>
      <tr>
        <td id="L10444" class="blob-num js-line-number" data-line-number="10444"></td>
        <td id="LC10444" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L10445" class="blob-num js-line-number" data-line-number="10445"></td>
        <td id="LC10445" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L10446" class="blob-num js-line-number" data-line-number="10446"></td>
        <td id="LC10446" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L10447" class="blob-num js-line-number" data-line-number="10447"></td>
        <td id="LC10447" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10448" class="blob-num js-line-number" data-line-number="10448"></td>
        <td id="LC10448" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10449" class="blob-num js-line-number" data-line-number="10449"></td>
        <td id="LC10449" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">GenericMessage::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint64_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10450" class="blob-num js-line-number" data-line-number="10450"></td>
        <td id="LC10450" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L10451" class="blob-num js-line-number" data-line-number="10451"></td>
        <td id="LC10451" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)name;</td>
      </tr>
      <tr>
        <td id="L10452" class="blob-num js-line-number" data-line-number="10452"></td>
        <td id="LC10452" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-c1">0</span> &lt; m_intermediateDataRepresentation.<span class="pl-c1">count</span>(id)) {</td>
      </tr>
      <tr>
        <td id="L10453" class="blob-num js-line-number" data-line-number="10453"></td>
        <td id="LC10453" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L10454" class="blob-num js-line-number" data-line-number="10454"></td>
        <td id="LC10454" class="blob-code blob-code-inner js-file-line">            v = linb::any_cast&lt;<span class="pl-c1">uint64_t</span>&gt;(m_intermediateDataRepresentation[id]);</td>
      </tr>
      <tr>
        <td id="L10455" class="blob-num js-line-number" data-line-number="10455"></td>
        <td id="LC10455" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L10456" class="blob-num js-line-number" data-line-number="10456"></td>
        <td id="LC10456" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L10457" class="blob-num js-line-number" data-line-number="10457"></td>
        <td id="LC10457" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L10458" class="blob-num js-line-number" data-line-number="10458"></td>
        <td id="LC10458" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10459" class="blob-num js-line-number" data-line-number="10459"></td>
        <td id="LC10459" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10460" class="blob-num js-line-number" data-line-number="10460"></td>
        <td id="LC10460" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">GenericMessage::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">float</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10461" class="blob-num js-line-number" data-line-number="10461"></td>
        <td id="LC10461" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L10462" class="blob-num js-line-number" data-line-number="10462"></td>
        <td id="LC10462" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)name;</td>
      </tr>
      <tr>
        <td id="L10463" class="blob-num js-line-number" data-line-number="10463"></td>
        <td id="LC10463" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-c1">0</span> &lt; m_intermediateDataRepresentation.<span class="pl-c1">count</span>(id)) {</td>
      </tr>
      <tr>
        <td id="L10464" class="blob-num js-line-number" data-line-number="10464"></td>
        <td id="LC10464" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L10465" class="blob-num js-line-number" data-line-number="10465"></td>
        <td id="LC10465" class="blob-code blob-code-inner js-file-line">            v = linb::any_cast&lt;<span class="pl-k">float</span>&gt;(m_intermediateDataRepresentation[id]);</td>
      </tr>
      <tr>
        <td id="L10466" class="blob-num js-line-number" data-line-number="10466"></td>
        <td id="LC10466" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L10467" class="blob-num js-line-number" data-line-number="10467"></td>
        <td id="LC10467" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L10468" class="blob-num js-line-number" data-line-number="10468"></td>
        <td id="LC10468" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L10469" class="blob-num js-line-number" data-line-number="10469"></td>
        <td id="LC10469" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10470" class="blob-num js-line-number" data-line-number="10470"></td>
        <td id="LC10470" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10471" class="blob-num js-line-number" data-line-number="10471"></td>
        <td id="LC10471" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">GenericMessage::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">double</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10472" class="blob-num js-line-number" data-line-number="10472"></td>
        <td id="LC10472" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L10473" class="blob-num js-line-number" data-line-number="10473"></td>
        <td id="LC10473" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)name;</td>
      </tr>
      <tr>
        <td id="L10474" class="blob-num js-line-number" data-line-number="10474"></td>
        <td id="LC10474" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-c1">0</span> &lt; m_intermediateDataRepresentation.<span class="pl-c1">count</span>(id)) {</td>
      </tr>
      <tr>
        <td id="L10475" class="blob-num js-line-number" data-line-number="10475"></td>
        <td id="LC10475" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L10476" class="blob-num js-line-number" data-line-number="10476"></td>
        <td id="LC10476" class="blob-code blob-code-inner js-file-line">            v = linb::any_cast&lt;<span class="pl-k">double</span>&gt;(m_intermediateDataRepresentation[id]);</td>
      </tr>
      <tr>
        <td id="L10477" class="blob-num js-line-number" data-line-number="10477"></td>
        <td id="LC10477" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L10478" class="blob-num js-line-number" data-line-number="10478"></td>
        <td id="LC10478" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L10479" class="blob-num js-line-number" data-line-number="10479"></td>
        <td id="LC10479" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L10480" class="blob-num js-line-number" data-line-number="10480"></td>
        <td id="LC10480" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10481" class="blob-num js-line-number" data-line-number="10481"></td>
        <td id="LC10481" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10482" class="blob-num js-line-number" data-line-number="10482"></td>
        <td id="LC10482" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">GenericMessage::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, std::string &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10483" class="blob-num js-line-number" data-line-number="10483"></td>
        <td id="LC10483" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L10484" class="blob-num js-line-number" data-line-number="10484"></td>
        <td id="LC10484" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)name;</td>
      </tr>
      <tr>
        <td id="L10485" class="blob-num js-line-number" data-line-number="10485"></td>
        <td id="LC10485" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-c1">0</span> &lt; m_intermediateDataRepresentation.<span class="pl-c1">count</span>(id)) {</td>
      </tr>
      <tr>
        <td id="L10486" class="blob-num js-line-number" data-line-number="10486"></td>
        <td id="LC10486" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L10487" class="blob-num js-line-number" data-line-number="10487"></td>
        <td id="LC10487" class="blob-code blob-code-inner js-file-line">            v = linb::any_cast&lt;std::string&gt;(m_intermediateDataRepresentation[id]);</td>
      </tr>
      <tr>
        <td id="L10488" class="blob-num js-line-number" data-line-number="10488"></td>
        <td id="LC10488" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L10489" class="blob-num js-line-number" data-line-number="10489"></td>
        <td id="LC10489" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L10490" class="blob-num js-line-number" data-line-number="10490"></td>
        <td id="LC10490" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L10491" class="blob-num js-line-number" data-line-number="10491"></td>
        <td id="LC10491" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10492" class="blob-num js-line-number" data-line-number="10492"></td>
        <td id="LC10492" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10493" class="blob-num js-line-number" data-line-number="10493"></td>
        <td id="LC10493" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>//////////////////////////////////////////////////////////////////////////////</span></td>
      </tr>
      <tr>
        <td id="L10494" class="blob-num js-line-number" data-line-number="10494"></td>
        <td id="LC10494" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10495" class="blob-num js-line-number" data-line-number="10495"></td>
        <td id="LC10495" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">GenericMessage::createFrom</span>(<span class="pl-k">const</span> MetaMessage &amp;mm, <span class="pl-k">const</span> std::vector&lt;MetaMessage&gt; &amp;mms) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10496" class="blob-num js-line-number" data-line-number="10496"></td>
        <td id="LC10496" class="blob-code blob-code-inner js-file-line">    m_metaMessage = mm;</td>
      </tr>
      <tr>
        <td id="L10497" class="blob-num js-line-number" data-line-number="10497"></td>
        <td id="LC10497" class="blob-code blob-code-inner js-file-line">    m_longName    = m_metaMessage.<span class="pl-c1">messageName</span>();</td>
      </tr>
      <tr>
        <td id="L10498" class="blob-num js-line-number" data-line-number="10498"></td>
        <td id="LC10498" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10499" class="blob-num js-line-number" data-line-number="10499"></td>
        <td id="LC10499" class="blob-code blob-code-inner js-file-line">    m_scopeOfMetaMessages.<span class="pl-c1">clear</span>();</td>
      </tr>
      <tr>
        <td id="L10500" class="blob-num js-line-number" data-line-number="10500"></td>
        <td id="LC10500" class="blob-code blob-code-inner js-file-line">    m_scopeOfMetaMessages = mms;</td>
      </tr>
      <tr>
        <td id="L10501" class="blob-num js-line-number" data-line-number="10501"></td>
        <td id="LC10501" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10502" class="blob-num js-line-number" data-line-number="10502"></td>
        <td id="LC10502" class="blob-code blob-code-inner js-file-line">    m_mapForScopeOfMetaMessages.<span class="pl-c1">clear</span>();</td>
      </tr>
      <tr>
        <td id="L10503" class="blob-num js-line-number" data-line-number="10503"></td>
        <td id="LC10503" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">for</span> (<span class="pl-k">const</span> <span class="pl-k">auto</span> &amp;e : m_scopeOfMetaMessages) { m_mapForScopeOfMetaMessages[e.<span class="pl-c1">messageName</span>()] = e; }</td>
      </tr>
      <tr>
        <td id="L10504" class="blob-num js-line-number" data-line-number="10504"></td>
        <td id="LC10504" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10505" class="blob-num js-line-number" data-line-number="10505"></td>
        <td id="LC10505" class="blob-code blob-code-inner js-file-line">    m_intermediateDataRepresentation.<span class="pl-c1">clear</span>();</td>
      </tr>
      <tr>
        <td id="L10506" class="blob-num js-line-number" data-line-number="10506"></td>
        <td id="LC10506" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">for</span> (<span class="pl-k">const</span> <span class="pl-k">auto</span> &amp;f : m_metaMessage.<span class="pl-c1">listOfMetaFields</span>()) {</td>
      </tr>
      <tr>
        <td id="L10507" class="blob-num js-line-number" data-line-number="10507"></td>
        <td id="LC10507" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (f.<span class="pl-c1">fieldDataType</span>() == MetaMessage::MetaField::BOOL_T) {</td>
      </tr>
      <tr>
        <td id="L10508" class="blob-num js-line-number" data-line-number="10508"></td>
        <td id="LC10508" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L10509" class="blob-num js-line-number" data-line-number="10509"></td>
        <td id="LC10509" class="blob-code blob-code-inner js-file-line">                linb::any _v{<span class="pl-c1">false</span>};</td>
      </tr>
      <tr>
        <td id="L10510" class="blob-num js-line-number" data-line-number="10510"></td>
        <td id="LC10510" class="blob-code blob-code-inner js-file-line">                m_intermediateDataRepresentation[f.<span class="pl-c1">fieldIdentifier</span>()] = _v;</td>
      </tr>
      <tr>
        <td id="L10511" class="blob-num js-line-number" data-line-number="10511"></td>
        <td id="LC10511" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L10512" class="blob-num js-line-number" data-line-number="10512"></td>
        <td id="LC10512" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L10513" class="blob-num js-line-number" data-line-number="10513"></td>
        <td id="LC10513" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> <span class="pl-k">if</span> (f.<span class="pl-c1">fieldDataType</span>() == MetaMessage::MetaField::CHAR_T) {</td>
      </tr>
      <tr>
        <td id="L10514" class="blob-num js-line-number" data-line-number="10514"></td>
        <td id="LC10514" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L10515" class="blob-num js-line-number" data-line-number="10515"></td>
        <td id="LC10515" class="blob-code blob-code-inner js-file-line">                linb::any _v{<span class="pl-k">static_cast</span>&lt;<span class="pl-k">char</span>&gt;(<span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\0</span><span class="pl-pds">&#39;</span></span>)};</td>
      </tr>
      <tr>
        <td id="L10516" class="blob-num js-line-number" data-line-number="10516"></td>
        <td id="LC10516" class="blob-code blob-code-inner js-file-line">                m_intermediateDataRepresentation[f.<span class="pl-c1">fieldIdentifier</span>()] = _v;</td>
      </tr>
      <tr>
        <td id="L10517" class="blob-num js-line-number" data-line-number="10517"></td>
        <td id="LC10517" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L10518" class="blob-num js-line-number" data-line-number="10518"></td>
        <td id="LC10518" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L10519" class="blob-num js-line-number" data-line-number="10519"></td>
        <td id="LC10519" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> <span class="pl-k">if</span> (f.<span class="pl-c1">fieldDataType</span>() == MetaMessage::MetaField::UINT8_T) {</td>
      </tr>
      <tr>
        <td id="L10520" class="blob-num js-line-number" data-line-number="10520"></td>
        <td id="LC10520" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L10521" class="blob-num js-line-number" data-line-number="10521"></td>
        <td id="LC10521" class="blob-code blob-code-inner js-file-line">                linb::any _v{<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(<span class="pl-c1">0</span>)};</td>
      </tr>
      <tr>
        <td id="L10522" class="blob-num js-line-number" data-line-number="10522"></td>
        <td id="LC10522" class="blob-code blob-code-inner js-file-line">                m_intermediateDataRepresentation[f.<span class="pl-c1">fieldIdentifier</span>()] = _v;</td>
      </tr>
      <tr>
        <td id="L10523" class="blob-num js-line-number" data-line-number="10523"></td>
        <td id="LC10523" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L10524" class="blob-num js-line-number" data-line-number="10524"></td>
        <td id="LC10524" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L10525" class="blob-num js-line-number" data-line-number="10525"></td>
        <td id="LC10525" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> <span class="pl-k">if</span> (f.<span class="pl-c1">fieldDataType</span>() == MetaMessage::MetaField::INT8_T) {</td>
      </tr>
      <tr>
        <td id="L10526" class="blob-num js-line-number" data-line-number="10526"></td>
        <td id="LC10526" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L10527" class="blob-num js-line-number" data-line-number="10527"></td>
        <td id="LC10527" class="blob-code blob-code-inner js-file-line">                linb::any _v{<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int8_t</span>&gt;(<span class="pl-c1">0</span>)};</td>
      </tr>
      <tr>
        <td id="L10528" class="blob-num js-line-number" data-line-number="10528"></td>
        <td id="LC10528" class="blob-code blob-code-inner js-file-line">                m_intermediateDataRepresentation[f.<span class="pl-c1">fieldIdentifier</span>()] = _v;</td>
      </tr>
      <tr>
        <td id="L10529" class="blob-num js-line-number" data-line-number="10529"></td>
        <td id="LC10529" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L10530" class="blob-num js-line-number" data-line-number="10530"></td>
        <td id="LC10530" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L10531" class="blob-num js-line-number" data-line-number="10531"></td>
        <td id="LC10531" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> <span class="pl-k">if</span> (f.<span class="pl-c1">fieldDataType</span>() == MetaMessage::MetaField::UINT16_T) {</td>
      </tr>
      <tr>
        <td id="L10532" class="blob-num js-line-number" data-line-number="10532"></td>
        <td id="LC10532" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L10533" class="blob-num js-line-number" data-line-number="10533"></td>
        <td id="LC10533" class="blob-code blob-code-inner js-file-line">                linb::any _v{<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint16_t</span>&gt;(<span class="pl-c1">0</span>)};</td>
      </tr>
      <tr>
        <td id="L10534" class="blob-num js-line-number" data-line-number="10534"></td>
        <td id="LC10534" class="blob-code blob-code-inner js-file-line">                m_intermediateDataRepresentation[f.<span class="pl-c1">fieldIdentifier</span>()] = _v;</td>
      </tr>
      <tr>
        <td id="L10535" class="blob-num js-line-number" data-line-number="10535"></td>
        <td id="LC10535" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L10536" class="blob-num js-line-number" data-line-number="10536"></td>
        <td id="LC10536" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L10537" class="blob-num js-line-number" data-line-number="10537"></td>
        <td id="LC10537" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> <span class="pl-k">if</span> (f.<span class="pl-c1">fieldDataType</span>() == MetaMessage::MetaField::INT16_T) {</td>
      </tr>
      <tr>
        <td id="L10538" class="blob-num js-line-number" data-line-number="10538"></td>
        <td id="LC10538" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L10539" class="blob-num js-line-number" data-line-number="10539"></td>
        <td id="LC10539" class="blob-code blob-code-inner js-file-line">                linb::any _v{<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int16_t</span>&gt;(<span class="pl-c1">0</span>)};</td>
      </tr>
      <tr>
        <td id="L10540" class="blob-num js-line-number" data-line-number="10540"></td>
        <td id="LC10540" class="blob-code blob-code-inner js-file-line">                m_intermediateDataRepresentation[f.<span class="pl-c1">fieldIdentifier</span>()] = _v;</td>
      </tr>
      <tr>
        <td id="L10541" class="blob-num js-line-number" data-line-number="10541"></td>
        <td id="LC10541" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L10542" class="blob-num js-line-number" data-line-number="10542"></td>
        <td id="LC10542" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L10543" class="blob-num js-line-number" data-line-number="10543"></td>
        <td id="LC10543" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> <span class="pl-k">if</span> (f.<span class="pl-c1">fieldDataType</span>() == MetaMessage::MetaField::UINT32_T) {</td>
      </tr>
      <tr>
        <td id="L10544" class="blob-num js-line-number" data-line-number="10544"></td>
        <td id="LC10544" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L10545" class="blob-num js-line-number" data-line-number="10545"></td>
        <td id="LC10545" class="blob-code blob-code-inner js-file-line">                linb::any _v{<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint32_t</span>&gt;(<span class="pl-c1">0</span>)};</td>
      </tr>
      <tr>
        <td id="L10546" class="blob-num js-line-number" data-line-number="10546"></td>
        <td id="LC10546" class="blob-code blob-code-inner js-file-line">                m_intermediateDataRepresentation[f.<span class="pl-c1">fieldIdentifier</span>()] = _v;</td>
      </tr>
      <tr>
        <td id="L10547" class="blob-num js-line-number" data-line-number="10547"></td>
        <td id="LC10547" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L10548" class="blob-num js-line-number" data-line-number="10548"></td>
        <td id="LC10548" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L10549" class="blob-num js-line-number" data-line-number="10549"></td>
        <td id="LC10549" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> <span class="pl-k">if</span> (f.<span class="pl-c1">fieldDataType</span>() == MetaMessage::MetaField::INT32_T) {</td>
      </tr>
      <tr>
        <td id="L10550" class="blob-num js-line-number" data-line-number="10550"></td>
        <td id="LC10550" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L10551" class="blob-num js-line-number" data-line-number="10551"></td>
        <td id="LC10551" class="blob-code blob-code-inner js-file-line">                linb::any _v{<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int32_t</span>&gt;(<span class="pl-c1">0</span>)};</td>
      </tr>
      <tr>
        <td id="L10552" class="blob-num js-line-number" data-line-number="10552"></td>
        <td id="LC10552" class="blob-code blob-code-inner js-file-line">                m_intermediateDataRepresentation[f.<span class="pl-c1">fieldIdentifier</span>()] = _v;</td>
      </tr>
      <tr>
        <td id="L10553" class="blob-num js-line-number" data-line-number="10553"></td>
        <td id="LC10553" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L10554" class="blob-num js-line-number" data-line-number="10554"></td>
        <td id="LC10554" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L10555" class="blob-num js-line-number" data-line-number="10555"></td>
        <td id="LC10555" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> <span class="pl-k">if</span> (f.<span class="pl-c1">fieldDataType</span>() == MetaMessage::MetaField::UINT64_T) {</td>
      </tr>
      <tr>
        <td id="L10556" class="blob-num js-line-number" data-line-number="10556"></td>
        <td id="LC10556" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L10557" class="blob-num js-line-number" data-line-number="10557"></td>
        <td id="LC10557" class="blob-code blob-code-inner js-file-line">                linb::any _v{<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint64_t</span>&gt;(<span class="pl-c1">0</span>)};</td>
      </tr>
      <tr>
        <td id="L10558" class="blob-num js-line-number" data-line-number="10558"></td>
        <td id="LC10558" class="blob-code blob-code-inner js-file-line">                m_intermediateDataRepresentation[f.<span class="pl-c1">fieldIdentifier</span>()] = _v;</td>
      </tr>
      <tr>
        <td id="L10559" class="blob-num js-line-number" data-line-number="10559"></td>
        <td id="LC10559" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L10560" class="blob-num js-line-number" data-line-number="10560"></td>
        <td id="LC10560" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L10561" class="blob-num js-line-number" data-line-number="10561"></td>
        <td id="LC10561" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> <span class="pl-k">if</span> (f.<span class="pl-c1">fieldDataType</span>() == MetaMessage::MetaField::INT64_T) {</td>
      </tr>
      <tr>
        <td id="L10562" class="blob-num js-line-number" data-line-number="10562"></td>
        <td id="LC10562" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L10563" class="blob-num js-line-number" data-line-number="10563"></td>
        <td id="LC10563" class="blob-code blob-code-inner js-file-line">                linb::any _v{<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int64_t</span>&gt;(<span class="pl-c1">0</span>)};</td>
      </tr>
      <tr>
        <td id="L10564" class="blob-num js-line-number" data-line-number="10564"></td>
        <td id="LC10564" class="blob-code blob-code-inner js-file-line">                m_intermediateDataRepresentation[f.<span class="pl-c1">fieldIdentifier</span>()] = _v;</td>
      </tr>
      <tr>
        <td id="L10565" class="blob-num js-line-number" data-line-number="10565"></td>
        <td id="LC10565" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L10566" class="blob-num js-line-number" data-line-number="10566"></td>
        <td id="LC10566" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L10567" class="blob-num js-line-number" data-line-number="10567"></td>
        <td id="LC10567" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> <span class="pl-k">if</span> (f.<span class="pl-c1">fieldDataType</span>() == MetaMessage::MetaField::FLOAT_T) {</td>
      </tr>
      <tr>
        <td id="L10568" class="blob-num js-line-number" data-line-number="10568"></td>
        <td id="LC10568" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L10569" class="blob-num js-line-number" data-line-number="10569"></td>
        <td id="LC10569" class="blob-code blob-code-inner js-file-line">                linb::any _v{<span class="pl-k">static_cast</span>&lt;<span class="pl-k">float</span>&gt;(<span class="pl-c1">0</span>.<span class="pl-c1">0f</span>)};</td>
      </tr>
      <tr>
        <td id="L10570" class="blob-num js-line-number" data-line-number="10570"></td>
        <td id="LC10570" class="blob-code blob-code-inner js-file-line">                m_intermediateDataRepresentation[f.<span class="pl-c1">fieldIdentifier</span>()] = _v;</td>
      </tr>
      <tr>
        <td id="L10571" class="blob-num js-line-number" data-line-number="10571"></td>
        <td id="LC10571" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L10572" class="blob-num js-line-number" data-line-number="10572"></td>
        <td id="LC10572" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L10573" class="blob-num js-line-number" data-line-number="10573"></td>
        <td id="LC10573" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> <span class="pl-k">if</span> (f.<span class="pl-c1">fieldDataType</span>() == MetaMessage::MetaField::DOUBLE_T) {</td>
      </tr>
      <tr>
        <td id="L10574" class="blob-num js-line-number" data-line-number="10574"></td>
        <td id="LC10574" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L10575" class="blob-num js-line-number" data-line-number="10575"></td>
        <td id="LC10575" class="blob-code blob-code-inner js-file-line">                linb::any _v{<span class="pl-k">static_cast</span>&lt;<span class="pl-k">double</span>&gt;(<span class="pl-c1">0.0</span>)};</td>
      </tr>
      <tr>
        <td id="L10576" class="blob-num js-line-number" data-line-number="10576"></td>
        <td id="LC10576" class="blob-code blob-code-inner js-file-line">                m_intermediateDataRepresentation[f.<span class="pl-c1">fieldIdentifier</span>()] = _v;</td>
      </tr>
      <tr>
        <td id="L10577" class="blob-num js-line-number" data-line-number="10577"></td>
        <td id="LC10577" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L10578" class="blob-num js-line-number" data-line-number="10578"></td>
        <td id="LC10578" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L10579" class="blob-num js-line-number" data-line-number="10579"></td>
        <td id="LC10579" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> <span class="pl-k">if</span> ((f.<span class="pl-c1">fieldDataType</span>() == MetaMessage::MetaField::STRING_T) || (f.<span class="pl-c1">fieldDataType</span>() == MetaMessage::MetaField::BYTES_T)) {</td>
      </tr>
      <tr>
        <td id="L10580" class="blob-num js-line-number" data-line-number="10580"></td>
        <td id="LC10580" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L10581" class="blob-num js-line-number" data-line-number="10581"></td>
        <td id="LC10581" class="blob-code blob-code-inner js-file-line">                linb::any _v                                          = std::string{};</td>
      </tr>
      <tr>
        <td id="L10582" class="blob-num js-line-number" data-line-number="10582"></td>
        <td id="LC10582" class="blob-code blob-code-inner js-file-line">                m_intermediateDataRepresentation[f.<span class="pl-c1">fieldIdentifier</span>()] = _v;</td>
      </tr>
      <tr>
        <td id="L10583" class="blob-num js-line-number" data-line-number="10583"></td>
        <td id="LC10583" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">catch</span> (<span class="pl-k">const</span> linb::bad_any_cast &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L10584" class="blob-num js-line-number" data-line-number="10584"></td>
        <td id="LC10584" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L10585" class="blob-num js-line-number" data-line-number="10585"></td>
        <td id="LC10585" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> <span class="pl-k">if</span> (f.<span class="pl-c1">fieldDataType</span>() == MetaMessage::MetaField::MESSAGE_T) {</td>
      </tr>
      <tr>
        <td id="L10586" class="blob-num js-line-number" data-line-number="10586"></td>
        <td id="LC10586" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-c1">0</span> &lt; m_mapForScopeOfMetaMessages.<span class="pl-c1">count</span>(f.<span class="pl-c1">fieldDataTypeName</span>())) {</td>
      </tr>
      <tr>
        <td id="L10587" class="blob-num js-line-number" data-line-number="10587"></td>
        <td id="LC10587" class="blob-code blob-code-inner js-file-line">                <span class="pl-c"><span class="pl-c">//</span> Create a GenericMessage from the decoded Proto-data.</span></td>
      </tr>
      <tr>
        <td id="L10588" class="blob-num js-line-number" data-line-number="10588"></td>
        <td id="LC10588" class="blob-code blob-code-inner js-file-line">                cluon::GenericMessage gm;</td>
      </tr>
      <tr>
        <td id="L10589" class="blob-num js-line-number" data-line-number="10589"></td>
        <td id="LC10589" class="blob-code blob-code-inner js-file-line">                gm.<span class="pl-c1">createFrom</span>(m_mapForScopeOfMetaMessages[f.<span class="pl-c1">fieldDataTypeName</span>()], m_scopeOfMetaMessages);</td>
      </tr>
      <tr>
        <td id="L10590" class="blob-num js-line-number" data-line-number="10590"></td>
        <td id="LC10590" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10591" class="blob-num js-line-number" data-line-number="10591"></td>
        <td id="LC10591" class="blob-code blob-code-inner js-file-line">                m_intermediateDataRepresentation[f.<span class="pl-c1">fieldIdentifier</span>()] = linb::any{gm};</td>
      </tr>
      <tr>
        <td id="L10592" class="blob-num js-line-number" data-line-number="10592"></td>
        <td id="LC10592" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L10593" class="blob-num js-line-number" data-line-number="10593"></td>
        <td id="LC10593" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L10594" class="blob-num js-line-number" data-line-number="10594"></td>
        <td id="LC10594" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L10595" class="blob-num js-line-number" data-line-number="10595"></td>
        <td id="LC10595" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10596" class="blob-num js-line-number" data-line-number="10596"></td>
        <td id="LC10596" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10597" class="blob-num js-line-number" data-line-number="10597"></td>
        <td id="LC10597" class="blob-code blob-code-inner js-file-line">} <span class="pl-c"><span class="pl-c">//</span> namespace cluon</span></td>
      </tr>
      <tr>
        <td id="L10598" class="blob-num js-line-number" data-line-number="10598"></td>
        <td id="LC10598" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L10599" class="blob-num js-line-number" data-line-number="10599"></td>
        <td id="LC10599" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Copyright (C) 2017-2018  Christian Berger</span></td>
      </tr>
      <tr>
        <td id="L10600" class="blob-num js-line-number" data-line-number="10600"></td>
        <td id="LC10600" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L10601" class="blob-num js-line-number" data-line-number="10601"></td>
        <td id="LC10601" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is free software: you can redistribute it and/or modify</span></td>
      </tr>
      <tr>
        <td id="L10602" class="blob-num js-line-number" data-line-number="10602"></td>
        <td id="LC10602" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * it under the terms of the GNU General Public License as published by</span></td>
      </tr>
      <tr>
        <td id="L10603" class="blob-num js-line-number" data-line-number="10603"></td>
        <td id="LC10603" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * the Free Software Foundation, either version 3 of the License, or</span></td>
      </tr>
      <tr>
        <td id="L10604" class="blob-num js-line-number" data-line-number="10604"></td>
        <td id="LC10604" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * (at your option) any later version.</span></td>
      </tr>
      <tr>
        <td id="L10605" class="blob-num js-line-number" data-line-number="10605"></td>
        <td id="LC10605" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L10606" class="blob-num js-line-number" data-line-number="10606"></td>
        <td id="LC10606" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is distributed in the hope that it will be useful,</span></td>
      </tr>
      <tr>
        <td id="L10607" class="blob-num js-line-number" data-line-number="10607"></td>
        <td id="LC10607" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></td>
      </tr>
      <tr>
        <td id="L10608" class="blob-num js-line-number" data-line-number="10608"></td>
        <td id="LC10608" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></td>
      </tr>
      <tr>
        <td id="L10609" class="blob-num js-line-number" data-line-number="10609"></td>
        <td id="LC10609" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * GNU General Public License for more details.</span></td>
      </tr>
      <tr>
        <td id="L10610" class="blob-num js-line-number" data-line-number="10610"></td>
        <td id="LC10610" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L10611" class="blob-num js-line-number" data-line-number="10611"></td>
        <td id="LC10611" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * You should have received a copy of the GNU General Public License</span></td>
      </tr>
      <tr>
        <td id="L10612" class="blob-num js-line-number" data-line-number="10612"></td>
        <td id="LC10612" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></td>
      </tr>
      <tr>
        <td id="L10613" class="blob-num js-line-number" data-line-number="10613"></td>
        <td id="LC10613" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L10614" class="blob-num js-line-number" data-line-number="10614"></td>
        <td id="LC10614" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10615" class="blob-num js-line-number" data-line-number="10615"></td>
        <td id="LC10615" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/ToJSONVisitor.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L10616" class="blob-num js-line-number" data-line-number="10616"></td>
        <td id="LC10616" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10617" class="blob-num js-line-number" data-line-number="10617"></td>
        <td id="LC10617" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>iomanip<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L10618" class="blob-num js-line-number" data-line-number="10618"></td>
        <td id="LC10618" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>sstream<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L10619" class="blob-num js-line-number" data-line-number="10619"></td>
        <td id="LC10619" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10620" class="blob-num js-line-number" data-line-number="10620"></td>
        <td id="LC10620" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">cluon</span> {</td>
      </tr>
      <tr>
        <td id="L10621" class="blob-num js-line-number" data-line-number="10621"></td>
        <td id="LC10621" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10622" class="blob-num js-line-number" data-line-number="10622"></td>
        <td id="LC10622" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-en">ToJSONVisitor::ToJSONVisitor</span>(<span class="pl-k">bool</span> withOuterCurlyBraces, <span class="pl-k">const</span> std::map&lt;<span class="pl-c1">uint32_t</span>, <span class="pl-k">bool</span>&gt; &amp;mask) <span class="pl-k">noexcept</span></td>
      </tr>
      <tr>
        <td id="L10623" class="blob-num js-line-number" data-line-number="10623"></td>
        <td id="LC10623" class="blob-code blob-code-inner js-file-line">    : m_withOuterCurlyBraces(withOuterCurlyBraces)</td>
      </tr>
      <tr>
        <td id="L10624" class="blob-num js-line-number" data-line-number="10624"></td>
        <td id="LC10624" class="blob-code blob-code-inner js-file-line">    , m_mask(mask) {}</td>
      </tr>
      <tr>
        <td id="L10625" class="blob-num js-line-number" data-line-number="10625"></td>
        <td id="LC10625" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10626" class="blob-num js-line-number" data-line-number="10626"></td>
        <td id="LC10626" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::string <span class="pl-en">ToJSONVisitor::json</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10627" class="blob-num js-line-number" data-line-number="10627"></td>
        <td id="LC10627" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> std::string tmp{m_buffer.<span class="pl-c1">str</span>()};</td>
      </tr>
      <tr>
        <td id="L10628" class="blob-num js-line-number" data-line-number="10628"></td>
        <td id="LC10628" class="blob-code blob-code-inner js-file-line">    std::string retVal{<span class="pl-s"><span class="pl-pds">&quot;</span>{}<span class="pl-pds">&quot;</span></span>};</td>
      </tr>
      <tr>
        <td id="L10629" class="blob-num js-line-number" data-line-number="10629"></td>
        <td id="LC10629" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-c1">2</span> &lt; tmp.<span class="pl-c1">size</span>()) {</td>
      </tr>
      <tr>
        <td id="L10630" class="blob-num js-line-number" data-line-number="10630"></td>
        <td id="LC10630" class="blob-code blob-code-inner js-file-line">        retVal = {(m_withOuterCurlyBraces ? <span class="pl-s"><span class="pl-pds">&quot;</span>{<span class="pl-pds">&quot;</span></span> : <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>) + tmp.<span class="pl-c1">substr</span>(<span class="pl-c1">0</span>, tmp.<span class="pl-c1">size</span>() - <span class="pl-c1">2</span>) + (m_withOuterCurlyBraces ? <span class="pl-s"><span class="pl-pds">&quot;</span>}<span class="pl-pds">&quot;</span></span> : <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>)};</td>
      </tr>
      <tr>
        <td id="L10631" class="blob-num js-line-number" data-line-number="10631"></td>
        <td id="LC10631" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L10632" class="blob-num js-line-number" data-line-number="10632"></td>
        <td id="LC10632" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> retVal;</td>
      </tr>
      <tr>
        <td id="L10633" class="blob-num js-line-number" data-line-number="10633"></td>
        <td id="LC10633" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10634" class="blob-num js-line-number" data-line-number="10634"></td>
        <td id="LC10634" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10635" class="blob-num js-line-number" data-line-number="10635"></td>
        <td id="LC10635" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToJSONVisitor::preVisit</span>(<span class="pl-c1">int32_t</span> id, <span class="pl-k">const</span> std::string &amp;shortName, <span class="pl-k">const</span> std::string &amp;longName) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10636" class="blob-num js-line-number" data-line-number="10636"></td>
        <td id="LC10636" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L10637" class="blob-num js-line-number" data-line-number="10637"></td>
        <td id="LC10637" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)longName;</td>
      </tr>
      <tr>
        <td id="L10638" class="blob-num js-line-number" data-line-number="10638"></td>
        <td id="LC10638" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)shortName;</td>
      </tr>
      <tr>
        <td id="L10639" class="blob-num js-line-number" data-line-number="10639"></td>
        <td id="LC10639" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10640" class="blob-num js-line-number" data-line-number="10640"></td>
        <td id="LC10640" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10641" class="blob-num js-line-number" data-line-number="10641"></td>
        <td id="LC10641" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToJSONVisitor::postVisit</span>() <span class="pl-k">noexcept</span> {}</td>
      </tr>
      <tr>
        <td id="L10642" class="blob-num js-line-number" data-line-number="10642"></td>
        <td id="LC10642" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10643" class="blob-num js-line-number" data-line-number="10643"></td>
        <td id="LC10643" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToJSONVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">bool</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10644" class="blob-num js-line-number" data-line-number="10644"></td>
        <td id="LC10644" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L10645" class="blob-num js-line-number" data-line-number="10645"></td>
        <td id="LC10645" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> ((<span class="pl-c1">0</span> == m_mask.<span class="pl-c1">count</span>(id)) || m_mask[id]) {</td>
      </tr>
      <tr>
        <td id="L10646" class="blob-num js-line-number" data-line-number="10646"></td>
        <td id="LC10646" class="blob-code blob-code-inner js-file-line">        m_buffer &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\&quot;</span><span class="pl-pds">&#39;</span></span> &lt;&lt; name &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\&quot;</span><span class="pl-pds">&#39;</span></span> &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span>:<span class="pl-pds">&#39;</span></span> &lt;&lt; v &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span>,<span class="pl-pds">&#39;</span></span> &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\n</span><span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L10647" class="blob-num js-line-number" data-line-number="10647"></td>
        <td id="LC10647" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L10648" class="blob-num js-line-number" data-line-number="10648"></td>
        <td id="LC10648" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10649" class="blob-num js-line-number" data-line-number="10649"></td>
        <td id="LC10649" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10650" class="blob-num js-line-number" data-line-number="10650"></td>
        <td id="LC10650" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToJSONVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">char</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10651" class="blob-num js-line-number" data-line-number="10651"></td>
        <td id="LC10651" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L10652" class="blob-num js-line-number" data-line-number="10652"></td>
        <td id="LC10652" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> ((<span class="pl-c1">0</span> == m_mask.<span class="pl-c1">count</span>(id)) || m_mask[id]) {</td>
      </tr>
      <tr>
        <td id="L10653" class="blob-num js-line-number" data-line-number="10653"></td>
        <td id="LC10653" class="blob-code blob-code-inner js-file-line">        m_buffer &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\&quot;</span><span class="pl-pds">&#39;</span></span> &lt;&lt; name &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\&quot;</span><span class="pl-pds">&#39;</span></span> &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span>:<span class="pl-pds">&#39;</span></span> &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\&quot;</span><span class="pl-pds">&#39;</span></span> &lt;&lt; v &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\&quot;</span><span class="pl-pds">&#39;</span></span> &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span>,<span class="pl-pds">&#39;</span></span> &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\n</span><span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L10654" class="blob-num js-line-number" data-line-number="10654"></td>
        <td id="LC10654" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L10655" class="blob-num js-line-number" data-line-number="10655"></td>
        <td id="LC10655" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10656" class="blob-num js-line-number" data-line-number="10656"></td>
        <td id="LC10656" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10657" class="blob-num js-line-number" data-line-number="10657"></td>
        <td id="LC10657" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToJSONVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int8_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10658" class="blob-num js-line-number" data-line-number="10658"></td>
        <td id="LC10658" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L10659" class="blob-num js-line-number" data-line-number="10659"></td>
        <td id="LC10659" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> ((<span class="pl-c1">0</span> == m_mask.<span class="pl-c1">count</span>(id)) || m_mask[id]) {</td>
      </tr>
      <tr>
        <td id="L10660" class="blob-num js-line-number" data-line-number="10660"></td>
        <td id="LC10660" class="blob-code blob-code-inner js-file-line">        m_buffer &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\&quot;</span><span class="pl-pds">&#39;</span></span> &lt;&lt; name &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\&quot;</span><span class="pl-pds">&#39;</span></span> &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span>:<span class="pl-pds">&#39;</span></span> &lt;&lt; +v &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span>,<span class="pl-pds">&#39;</span></span> &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\n</span><span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L10661" class="blob-num js-line-number" data-line-number="10661"></td>
        <td id="LC10661" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L10662" class="blob-num js-line-number" data-line-number="10662"></td>
        <td id="LC10662" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10663" class="blob-num js-line-number" data-line-number="10663"></td>
        <td id="LC10663" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10664" class="blob-num js-line-number" data-line-number="10664"></td>
        <td id="LC10664" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToJSONVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint8_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10665" class="blob-num js-line-number" data-line-number="10665"></td>
        <td id="LC10665" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L10666" class="blob-num js-line-number" data-line-number="10666"></td>
        <td id="LC10666" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> ((<span class="pl-c1">0</span> == m_mask.<span class="pl-c1">count</span>(id)) || m_mask[id]) {</td>
      </tr>
      <tr>
        <td id="L10667" class="blob-num js-line-number" data-line-number="10667"></td>
        <td id="LC10667" class="blob-code blob-code-inner js-file-line">        m_buffer &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\&quot;</span><span class="pl-pds">&#39;</span></span> &lt;&lt; name &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\&quot;</span><span class="pl-pds">&#39;</span></span> &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span>:<span class="pl-pds">&#39;</span></span> &lt;&lt; +v &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span>,<span class="pl-pds">&#39;</span></span> &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\n</span><span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L10668" class="blob-num js-line-number" data-line-number="10668"></td>
        <td id="LC10668" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L10669" class="blob-num js-line-number" data-line-number="10669"></td>
        <td id="LC10669" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10670" class="blob-num js-line-number" data-line-number="10670"></td>
        <td id="LC10670" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10671" class="blob-num js-line-number" data-line-number="10671"></td>
        <td id="LC10671" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToJSONVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int16_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10672" class="blob-num js-line-number" data-line-number="10672"></td>
        <td id="LC10672" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L10673" class="blob-num js-line-number" data-line-number="10673"></td>
        <td id="LC10673" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> ((<span class="pl-c1">0</span> == m_mask.<span class="pl-c1">count</span>(id)) || m_mask[id]) {</td>
      </tr>
      <tr>
        <td id="L10674" class="blob-num js-line-number" data-line-number="10674"></td>
        <td id="LC10674" class="blob-code blob-code-inner js-file-line">        m_buffer &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\&quot;</span><span class="pl-pds">&#39;</span></span> &lt;&lt; name &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\&quot;</span><span class="pl-pds">&#39;</span></span> &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span>:<span class="pl-pds">&#39;</span></span> &lt;&lt; +v &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span>,<span class="pl-pds">&#39;</span></span> &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\n</span><span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L10675" class="blob-num js-line-number" data-line-number="10675"></td>
        <td id="LC10675" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L10676" class="blob-num js-line-number" data-line-number="10676"></td>
        <td id="LC10676" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10677" class="blob-num js-line-number" data-line-number="10677"></td>
        <td id="LC10677" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10678" class="blob-num js-line-number" data-line-number="10678"></td>
        <td id="LC10678" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToJSONVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint16_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10679" class="blob-num js-line-number" data-line-number="10679"></td>
        <td id="LC10679" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L10680" class="blob-num js-line-number" data-line-number="10680"></td>
        <td id="LC10680" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> ((<span class="pl-c1">0</span> == m_mask.<span class="pl-c1">count</span>(id)) || m_mask[id]) {</td>
      </tr>
      <tr>
        <td id="L10681" class="blob-num js-line-number" data-line-number="10681"></td>
        <td id="LC10681" class="blob-code blob-code-inner js-file-line">        m_buffer &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\&quot;</span><span class="pl-pds">&#39;</span></span> &lt;&lt; name &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\&quot;</span><span class="pl-pds">&#39;</span></span> &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span>:<span class="pl-pds">&#39;</span></span> &lt;&lt; +v &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span>,<span class="pl-pds">&#39;</span></span> &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\n</span><span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L10682" class="blob-num js-line-number" data-line-number="10682"></td>
        <td id="LC10682" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L10683" class="blob-num js-line-number" data-line-number="10683"></td>
        <td id="LC10683" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10684" class="blob-num js-line-number" data-line-number="10684"></td>
        <td id="LC10684" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10685" class="blob-num js-line-number" data-line-number="10685"></td>
        <td id="LC10685" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToJSONVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int32_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10686" class="blob-num js-line-number" data-line-number="10686"></td>
        <td id="LC10686" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L10687" class="blob-num js-line-number" data-line-number="10687"></td>
        <td id="LC10687" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> ((<span class="pl-c1">0</span> == m_mask.<span class="pl-c1">count</span>(id)) || m_mask[id]) {</td>
      </tr>
      <tr>
        <td id="L10688" class="blob-num js-line-number" data-line-number="10688"></td>
        <td id="LC10688" class="blob-code blob-code-inner js-file-line">        m_buffer &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\&quot;</span><span class="pl-pds">&#39;</span></span> &lt;&lt; name &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\&quot;</span><span class="pl-pds">&#39;</span></span> &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span>:<span class="pl-pds">&#39;</span></span> &lt;&lt; v &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span>,<span class="pl-pds">&#39;</span></span> &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\n</span><span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L10689" class="blob-num js-line-number" data-line-number="10689"></td>
        <td id="LC10689" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L10690" class="blob-num js-line-number" data-line-number="10690"></td>
        <td id="LC10690" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10691" class="blob-num js-line-number" data-line-number="10691"></td>
        <td id="LC10691" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10692" class="blob-num js-line-number" data-line-number="10692"></td>
        <td id="LC10692" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToJSONVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint32_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10693" class="blob-num js-line-number" data-line-number="10693"></td>
        <td id="LC10693" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L10694" class="blob-num js-line-number" data-line-number="10694"></td>
        <td id="LC10694" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> ((<span class="pl-c1">0</span> == m_mask.<span class="pl-c1">count</span>(id)) || m_mask[id]) {</td>
      </tr>
      <tr>
        <td id="L10695" class="blob-num js-line-number" data-line-number="10695"></td>
        <td id="LC10695" class="blob-code blob-code-inner js-file-line">        m_buffer &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\&quot;</span><span class="pl-pds">&#39;</span></span> &lt;&lt; name &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\&quot;</span><span class="pl-pds">&#39;</span></span> &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span>:<span class="pl-pds">&#39;</span></span> &lt;&lt; v &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span>,<span class="pl-pds">&#39;</span></span> &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\n</span><span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L10696" class="blob-num js-line-number" data-line-number="10696"></td>
        <td id="LC10696" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L10697" class="blob-num js-line-number" data-line-number="10697"></td>
        <td id="LC10697" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10698" class="blob-num js-line-number" data-line-number="10698"></td>
        <td id="LC10698" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10699" class="blob-num js-line-number" data-line-number="10699"></td>
        <td id="LC10699" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToJSONVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int64_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10700" class="blob-num js-line-number" data-line-number="10700"></td>
        <td id="LC10700" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L10701" class="blob-num js-line-number" data-line-number="10701"></td>
        <td id="LC10701" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> ((<span class="pl-c1">0</span> == m_mask.<span class="pl-c1">count</span>(id)) || m_mask[id]) {</td>
      </tr>
      <tr>
        <td id="L10702" class="blob-num js-line-number" data-line-number="10702"></td>
        <td id="LC10702" class="blob-code blob-code-inner js-file-line">        m_buffer &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\&quot;</span><span class="pl-pds">&#39;</span></span> &lt;&lt; name &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\&quot;</span><span class="pl-pds">&#39;</span></span> &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span>:<span class="pl-pds">&#39;</span></span> &lt;&lt; v &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span>,<span class="pl-pds">&#39;</span></span> &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\n</span><span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L10703" class="blob-num js-line-number" data-line-number="10703"></td>
        <td id="LC10703" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L10704" class="blob-num js-line-number" data-line-number="10704"></td>
        <td id="LC10704" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10705" class="blob-num js-line-number" data-line-number="10705"></td>
        <td id="LC10705" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10706" class="blob-num js-line-number" data-line-number="10706"></td>
        <td id="LC10706" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToJSONVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint64_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10707" class="blob-num js-line-number" data-line-number="10707"></td>
        <td id="LC10707" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L10708" class="blob-num js-line-number" data-line-number="10708"></td>
        <td id="LC10708" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> ((<span class="pl-c1">0</span> == m_mask.<span class="pl-c1">count</span>(id)) || m_mask[id]) {</td>
      </tr>
      <tr>
        <td id="L10709" class="blob-num js-line-number" data-line-number="10709"></td>
        <td id="LC10709" class="blob-code blob-code-inner js-file-line">        m_buffer &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\&quot;</span><span class="pl-pds">&#39;</span></span> &lt;&lt; name &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\&quot;</span><span class="pl-pds">&#39;</span></span> &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span>:<span class="pl-pds">&#39;</span></span> &lt;&lt; v &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span>,<span class="pl-pds">&#39;</span></span> &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\n</span><span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L10710" class="blob-num js-line-number" data-line-number="10710"></td>
        <td id="LC10710" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L10711" class="blob-num js-line-number" data-line-number="10711"></td>
        <td id="LC10711" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10712" class="blob-num js-line-number" data-line-number="10712"></td>
        <td id="LC10712" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10713" class="blob-num js-line-number" data-line-number="10713"></td>
        <td id="LC10713" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToJSONVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">float</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10714" class="blob-num js-line-number" data-line-number="10714"></td>
        <td id="LC10714" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L10715" class="blob-num js-line-number" data-line-number="10715"></td>
        <td id="LC10715" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> ((<span class="pl-c1">0</span> == m_mask.<span class="pl-c1">count</span>(id)) || m_mask[id]) {</td>
      </tr>
      <tr>
        <td id="L10716" class="blob-num js-line-number" data-line-number="10716"></td>
        <td id="LC10716" class="blob-code blob-code-inner js-file-line">        m_buffer &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\&quot;</span><span class="pl-pds">&#39;</span></span> &lt;&lt; name &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\&quot;</span><span class="pl-pds">&#39;</span></span> &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span>:<span class="pl-pds">&#39;</span></span> &lt;&lt; <span class="pl-c1">std::setprecision</span>(<span class="pl-c1">7</span>) &lt;&lt; v &lt;&lt; <span class="pl-c1">std::setprecision</span>(<span class="pl-c1">6</span>) &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span>,<span class="pl-pds">&#39;</span></span> &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\n</span><span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L10717" class="blob-num js-line-number" data-line-number="10717"></td>
        <td id="LC10717" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L10718" class="blob-num js-line-number" data-line-number="10718"></td>
        <td id="LC10718" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10719" class="blob-num js-line-number" data-line-number="10719"></td>
        <td id="LC10719" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10720" class="blob-num js-line-number" data-line-number="10720"></td>
        <td id="LC10720" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToJSONVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">double</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10721" class="blob-num js-line-number" data-line-number="10721"></td>
        <td id="LC10721" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L10722" class="blob-num js-line-number" data-line-number="10722"></td>
        <td id="LC10722" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> ((<span class="pl-c1">0</span> == m_mask.<span class="pl-c1">count</span>(id)) || m_mask[id]) {</td>
      </tr>
      <tr>
        <td id="L10723" class="blob-num js-line-number" data-line-number="10723"></td>
        <td id="LC10723" class="blob-code blob-code-inner js-file-line">        m_buffer &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\&quot;</span><span class="pl-pds">&#39;</span></span> &lt;&lt; name &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\&quot;</span><span class="pl-pds">&#39;</span></span> &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span>:<span class="pl-pds">&#39;</span></span> &lt;&lt; <span class="pl-c1">std::setprecision</span>(<span class="pl-c1">11</span>) &lt;&lt; v &lt;&lt; <span class="pl-c1">std::setprecision</span>(<span class="pl-c1">6</span>) &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span>,<span class="pl-pds">&#39;</span></span> &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\n</span><span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L10724" class="blob-num js-line-number" data-line-number="10724"></td>
        <td id="LC10724" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L10725" class="blob-num js-line-number" data-line-number="10725"></td>
        <td id="LC10725" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10726" class="blob-num js-line-number" data-line-number="10726"></td>
        <td id="LC10726" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10727" class="blob-num js-line-number" data-line-number="10727"></td>
        <td id="LC10727" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToJSONVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, std::string &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10728" class="blob-num js-line-number" data-line-number="10728"></td>
        <td id="LC10728" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L10729" class="blob-num js-line-number" data-line-number="10729"></td>
        <td id="LC10729" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> ((<span class="pl-c1">0</span> == m_mask.<span class="pl-c1">count</span>(id)) || m_mask[id]) {</td>
      </tr>
      <tr>
        <td id="L10730" class="blob-num js-line-number" data-line-number="10730"></td>
        <td id="LC10730" class="blob-code blob-code-inner js-file-line">        m_buffer &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\&quot;</span><span class="pl-pds">&#39;</span></span> &lt;&lt; name &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\&quot;</span><span class="pl-pds">&#39;</span></span> &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span>:<span class="pl-pds">&#39;</span></span> &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\&quot;</span><span class="pl-pds">&#39;</span></span> &lt;&lt; <span class="pl-c1">encodeBase64</span>(v) &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\&quot;</span><span class="pl-pds">&#39;</span></span> &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span>,<span class="pl-pds">&#39;</span></span> &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\n</span><span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L10731" class="blob-num js-line-number" data-line-number="10731"></td>
        <td id="LC10731" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L10732" class="blob-num js-line-number" data-line-number="10732"></td>
        <td id="LC10732" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10733" class="blob-num js-line-number" data-line-number="10733"></td>
        <td id="LC10733" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10734" class="blob-num js-line-number" data-line-number="10734"></td>
        <td id="LC10734" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::string <span class="pl-en">ToJSONVisitor::encodeBase64</span>(<span class="pl-k">const</span> std::string &amp;input) <span class="pl-k">const</span> <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10735" class="blob-num js-line-number" data-line-number="10735"></td>
        <td id="LC10735" class="blob-code blob-code-inner js-file-line">    std::string retVal;</td>
      </tr>
      <tr>
        <td id="L10736" class="blob-num js-line-number" data-line-number="10736"></td>
        <td id="LC10736" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10737" class="blob-num js-line-number" data-line-number="10737"></td>
        <td id="LC10737" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> std::string ALPHABET{<span class="pl-s"><span class="pl-pds">&quot;</span>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/<span class="pl-pds">&quot;</span></span>};</td>
      </tr>
      <tr>
        <td id="L10738" class="blob-num js-line-number" data-line-number="10738"></td>
        <td id="LC10738" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">auto</span> length{input.<span class="pl-c1">length</span>()};</td>
      </tr>
      <tr>
        <td id="L10739" class="blob-num js-line-number" data-line-number="10739"></td>
        <td id="LC10739" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">uint32_t</span> <span class="pl-c1">index</span>{<span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L10740" class="blob-num js-line-number" data-line-number="10740"></td>
        <td id="LC10740" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">uint32_t</span> value{<span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L10741" class="blob-num js-line-number" data-line-number="10741"></td>
        <td id="LC10741" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10742" class="blob-num js-line-number" data-line-number="10742"></td>
        <td id="LC10742" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">while</span> (length &gt; <span class="pl-c1">2</span>) {</td>
      </tr>
      <tr>
        <td id="L10743" class="blob-num js-line-number" data-line-number="10743"></td>
        <td id="LC10743" class="blob-code blob-code-inner js-file-line">        value = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint32_t</span>&gt;(input.<span class="pl-c1">at</span>(<span class="pl-c1">index</span>++)) &lt;&lt; <span class="pl-c1">16</span>;</td>
      </tr>
      <tr>
        <td id="L10744" class="blob-num js-line-number" data-line-number="10744"></td>
        <td id="LC10744" class="blob-code blob-code-inner js-file-line">        value |= <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint32_t</span>&gt;(input.<span class="pl-c1">at</span>(<span class="pl-c1">index</span>++)) &lt;&lt; <span class="pl-c1">8</span>;</td>
      </tr>
      <tr>
        <td id="L10745" class="blob-num js-line-number" data-line-number="10745"></td>
        <td id="LC10745" class="blob-code blob-code-inner js-file-line">        value |= <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint32_t</span>&gt;(input.<span class="pl-c1">at</span>(<span class="pl-c1">index</span>++));</td>
      </tr>
      <tr>
        <td id="L10746" class="blob-num js-line-number" data-line-number="10746"></td>
        <td id="LC10746" class="blob-code blob-code-inner js-file-line">        retVal += ALPHABET.<span class="pl-c1">at</span>(value &gt;&gt; <span class="pl-c1">18</span> &amp; <span class="pl-c1">63</span>);</td>
      </tr>
      <tr>
        <td id="L10747" class="blob-num js-line-number" data-line-number="10747"></td>
        <td id="LC10747" class="blob-code blob-code-inner js-file-line">        retVal += ALPHABET.<span class="pl-c1">at</span>((value &gt;&gt; <span class="pl-c1">12</span>) &amp; <span class="pl-c1">63</span>);</td>
      </tr>
      <tr>
        <td id="L10748" class="blob-num js-line-number" data-line-number="10748"></td>
        <td id="LC10748" class="blob-code blob-code-inner js-file-line">        retVal += ALPHABET.<span class="pl-c1">at</span>((value &gt;&gt; <span class="pl-c1">6</span>) &amp; <span class="pl-c1">63</span>);</td>
      </tr>
      <tr>
        <td id="L10749" class="blob-num js-line-number" data-line-number="10749"></td>
        <td id="LC10749" class="blob-code blob-code-inner js-file-line">        retVal += ALPHABET.<span class="pl-c1">at</span>((value)&amp;<span class="pl-c1">63</span>);</td>
      </tr>
      <tr>
        <td id="L10750" class="blob-num js-line-number" data-line-number="10750"></td>
        <td id="LC10750" class="blob-code blob-code-inner js-file-line">        length -= <span class="pl-c1">3</span>;</td>
      </tr>
      <tr>
        <td id="L10751" class="blob-num js-line-number" data-line-number="10751"></td>
        <td id="LC10751" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L10752" class="blob-num js-line-number" data-line-number="10752"></td>
        <td id="LC10752" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (length == <span class="pl-c1">2</span>) {</td>
      </tr>
      <tr>
        <td id="L10753" class="blob-num js-line-number" data-line-number="10753"></td>
        <td id="LC10753" class="blob-code blob-code-inner js-file-line">        value = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint32_t</span>&gt;(input.<span class="pl-c1">at</span>(<span class="pl-c1">index</span>++)) &lt;&lt; <span class="pl-c1">16</span>;</td>
      </tr>
      <tr>
        <td id="L10754" class="blob-num js-line-number" data-line-number="10754"></td>
        <td id="LC10754" class="blob-code blob-code-inner js-file-line">        value |= <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint32_t</span>&gt;(input.<span class="pl-c1">at</span>(<span class="pl-c1">index</span>++)) &lt;&lt; <span class="pl-c1">8</span>;</td>
      </tr>
      <tr>
        <td id="L10755" class="blob-num js-line-number" data-line-number="10755"></td>
        <td id="LC10755" class="blob-code blob-code-inner js-file-line">        retVal += ALPHABET.<span class="pl-c1">at</span>(value &gt;&gt; <span class="pl-c1">18</span> &amp; <span class="pl-c1">63</span>);</td>
      </tr>
      <tr>
        <td id="L10756" class="blob-num js-line-number" data-line-number="10756"></td>
        <td id="LC10756" class="blob-code blob-code-inner js-file-line">        retVal += ALPHABET.<span class="pl-c1">at</span>((value &gt;&gt; <span class="pl-c1">12</span>) &amp; <span class="pl-c1">63</span>);</td>
      </tr>
      <tr>
        <td id="L10757" class="blob-num js-line-number" data-line-number="10757"></td>
        <td id="LC10757" class="blob-code blob-code-inner js-file-line">        retVal += ALPHABET.<span class="pl-c1">at</span>((value &gt;&gt; <span class="pl-c1">6</span>) &amp; <span class="pl-c1">63</span>);</td>
      </tr>
      <tr>
        <td id="L10758" class="blob-num js-line-number" data-line-number="10758"></td>
        <td id="LC10758" class="blob-code blob-code-inner js-file-line">        retVal += <span class="pl-s"><span class="pl-pds">&quot;</span>=<span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L10759" class="blob-num js-line-number" data-line-number="10759"></td>
        <td id="LC10759" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">else</span> <span class="pl-k">if</span> (length == <span class="pl-c1">1</span>) {</td>
      </tr>
      <tr>
        <td id="L10760" class="blob-num js-line-number" data-line-number="10760"></td>
        <td id="LC10760" class="blob-code blob-code-inner js-file-line">        value = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint32_t</span>&gt;(input.<span class="pl-c1">at</span>(<span class="pl-c1">index</span>++)) &lt;&lt; <span class="pl-c1">16</span>;</td>
      </tr>
      <tr>
        <td id="L10761" class="blob-num js-line-number" data-line-number="10761"></td>
        <td id="LC10761" class="blob-code blob-code-inner js-file-line">        retVal += ALPHABET.<span class="pl-c1">at</span>(value &gt;&gt; <span class="pl-c1">18</span> &amp; <span class="pl-c1">63</span>);</td>
      </tr>
      <tr>
        <td id="L10762" class="blob-num js-line-number" data-line-number="10762"></td>
        <td id="LC10762" class="blob-code blob-code-inner js-file-line">        retVal += ALPHABET.<span class="pl-c1">at</span>((value &gt;&gt; <span class="pl-c1">12</span>) &amp; <span class="pl-c1">63</span>);</td>
      </tr>
      <tr>
        <td id="L10763" class="blob-num js-line-number" data-line-number="10763"></td>
        <td id="LC10763" class="blob-code blob-code-inner js-file-line">        retVal += <span class="pl-s"><span class="pl-pds">&quot;</span>==<span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L10764" class="blob-num js-line-number" data-line-number="10764"></td>
        <td id="LC10764" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L10765" class="blob-num js-line-number" data-line-number="10765"></td>
        <td id="LC10765" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10766" class="blob-num js-line-number" data-line-number="10766"></td>
        <td id="LC10766" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> retVal;</td>
      </tr>
      <tr>
        <td id="L10767" class="blob-num js-line-number" data-line-number="10767"></td>
        <td id="LC10767" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10768" class="blob-num js-line-number" data-line-number="10768"></td>
        <td id="LC10768" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10769" class="blob-num js-line-number" data-line-number="10769"></td>
        <td id="LC10769" class="blob-code blob-code-inner js-file-line">} <span class="pl-c"><span class="pl-c">//</span> namespace cluon</span></td>
      </tr>
      <tr>
        <td id="L10770" class="blob-num js-line-number" data-line-number="10770"></td>
        <td id="LC10770" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L10771" class="blob-num js-line-number" data-line-number="10771"></td>
        <td id="LC10771" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Copyright (C) 2017-2018  Christian Berger</span></td>
      </tr>
      <tr>
        <td id="L10772" class="blob-num js-line-number" data-line-number="10772"></td>
        <td id="LC10772" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L10773" class="blob-num js-line-number" data-line-number="10773"></td>
        <td id="LC10773" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is free software: you can redistribute it and/or modify</span></td>
      </tr>
      <tr>
        <td id="L10774" class="blob-num js-line-number" data-line-number="10774"></td>
        <td id="LC10774" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * it under the terms of the GNU General Public License as published by</span></td>
      </tr>
      <tr>
        <td id="L10775" class="blob-num js-line-number" data-line-number="10775"></td>
        <td id="LC10775" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * the Free Software Foundation, either version 3 of the License, or</span></td>
      </tr>
      <tr>
        <td id="L10776" class="blob-num js-line-number" data-line-number="10776"></td>
        <td id="LC10776" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * (at your option) any later version.</span></td>
      </tr>
      <tr>
        <td id="L10777" class="blob-num js-line-number" data-line-number="10777"></td>
        <td id="LC10777" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L10778" class="blob-num js-line-number" data-line-number="10778"></td>
        <td id="LC10778" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is distributed in the hope that it will be useful,</span></td>
      </tr>
      <tr>
        <td id="L10779" class="blob-num js-line-number" data-line-number="10779"></td>
        <td id="LC10779" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></td>
      </tr>
      <tr>
        <td id="L10780" class="blob-num js-line-number" data-line-number="10780"></td>
        <td id="LC10780" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></td>
      </tr>
      <tr>
        <td id="L10781" class="blob-num js-line-number" data-line-number="10781"></td>
        <td id="LC10781" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * GNU General Public License for more details.</span></td>
      </tr>
      <tr>
        <td id="L10782" class="blob-num js-line-number" data-line-number="10782"></td>
        <td id="LC10782" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L10783" class="blob-num js-line-number" data-line-number="10783"></td>
        <td id="LC10783" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * You should have received a copy of the GNU General Public License</span></td>
      </tr>
      <tr>
        <td id="L10784" class="blob-num js-line-number" data-line-number="10784"></td>
        <td id="LC10784" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></td>
      </tr>
      <tr>
        <td id="L10785" class="blob-num js-line-number" data-line-number="10785"></td>
        <td id="LC10785" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L10786" class="blob-num js-line-number" data-line-number="10786"></td>
        <td id="LC10786" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10787" class="blob-num js-line-number" data-line-number="10787"></td>
        <td id="LC10787" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/ToCSVVisitor.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L10788" class="blob-num js-line-number" data-line-number="10788"></td>
        <td id="LC10788" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10789" class="blob-num js-line-number" data-line-number="10789"></td>
        <td id="LC10789" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>iomanip<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L10790" class="blob-num js-line-number" data-line-number="10790"></td>
        <td id="LC10790" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>sstream<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L10791" class="blob-num js-line-number" data-line-number="10791"></td>
        <td id="LC10791" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10792" class="blob-num js-line-number" data-line-number="10792"></td>
        <td id="LC10792" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">cluon</span> {</td>
      </tr>
      <tr>
        <td id="L10793" class="blob-num js-line-number" data-line-number="10793"></td>
        <td id="LC10793" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10794" class="blob-num js-line-number" data-line-number="10794"></td>
        <td id="LC10794" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-en">ToCSVVisitor::ToCSVVisitor</span>(<span class="pl-k">char</span> delimiter, <span class="pl-k">bool</span> withHeader) <span class="pl-k">noexcept</span></td>
      </tr>
      <tr>
        <td id="L10795" class="blob-num js-line-number" data-line-number="10795"></td>
        <td id="LC10795" class="blob-code blob-code-inner js-file-line">    : ToCSVVisitor::ToCSVVisitor(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>, delimiter, withHeader, <span class="pl-c1">false</span>) {}</td>
      </tr>
      <tr>
        <td id="L10796" class="blob-num js-line-number" data-line-number="10796"></td>
        <td id="LC10796" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10797" class="blob-num js-line-number" data-line-number="10797"></td>
        <td id="LC10797" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-en">ToCSVVisitor::ToCSVVisitor</span>(<span class="pl-k">const</span> std::string &amp;prefix, <span class="pl-k">char</span> delimiter, <span class="pl-k">bool</span> withHeader, <span class="pl-k">bool</span> isNested) <span class="pl-k">noexcept</span></td>
      </tr>
      <tr>
        <td id="L10798" class="blob-num js-line-number" data-line-number="10798"></td>
        <td id="LC10798" class="blob-code blob-code-inner js-file-line">    : m_prefix(prefix)</td>
      </tr>
      <tr>
        <td id="L10799" class="blob-num js-line-number" data-line-number="10799"></td>
        <td id="LC10799" class="blob-code blob-code-inner js-file-line">    , m_delimiter(delimiter)</td>
      </tr>
      <tr>
        <td id="L10800" class="blob-num js-line-number" data-line-number="10800"></td>
        <td id="LC10800" class="blob-code blob-code-inner js-file-line">    , m_withHeader(withHeader)</td>
      </tr>
      <tr>
        <td id="L10801" class="blob-num js-line-number" data-line-number="10801"></td>
        <td id="LC10801" class="blob-code blob-code-inner js-file-line">    , m_isNested(isNested) {}</td>
      </tr>
      <tr>
        <td id="L10802" class="blob-num js-line-number" data-line-number="10802"></td>
        <td id="LC10802" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10803" class="blob-num js-line-number" data-line-number="10803"></td>
        <td id="LC10803" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToCSVVisitor::clear</span>() <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10804" class="blob-num js-line-number" data-line-number="10804"></td>
        <td id="LC10804" class="blob-code blob-code-inner js-file-line">    m_bufferHeader.<span class="pl-c1">str</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L10805" class="blob-num js-line-number" data-line-number="10805"></td>
        <td id="LC10805" class="blob-code blob-code-inner js-file-line">    m_bufferValues.<span class="pl-c1">str</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L10806" class="blob-num js-line-number" data-line-number="10806"></td>
        <td id="LC10806" class="blob-code blob-code-inner js-file-line">    m_fillHeader = <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L10807" class="blob-num js-line-number" data-line-number="10807"></td>
        <td id="LC10807" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10808" class="blob-num js-line-number" data-line-number="10808"></td>
        <td id="LC10808" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10809" class="blob-num js-line-number" data-line-number="10809"></td>
        <td id="LC10809" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::string <span class="pl-en">ToCSVVisitor::csv</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10810" class="blob-num js-line-number" data-line-number="10810"></td>
        <td id="LC10810" class="blob-code blob-code-inner js-file-line">    std::stringstream tmp;</td>
      </tr>
      <tr>
        <td id="L10811" class="blob-num js-line-number" data-line-number="10811"></td>
        <td id="LC10811" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (m_withHeader) {</td>
      </tr>
      <tr>
        <td id="L10812" class="blob-num js-line-number" data-line-number="10812"></td>
        <td id="LC10812" class="blob-code blob-code-inner js-file-line">        tmp &lt;&lt; m_bufferHeader.<span class="pl-c1">str</span>();</td>
      </tr>
      <tr>
        <td id="L10813" class="blob-num js-line-number" data-line-number="10813"></td>
        <td id="LC10813" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L10814" class="blob-num js-line-number" data-line-number="10814"></td>
        <td id="LC10814" class="blob-code blob-code-inner js-file-line">    tmp &lt;&lt; m_bufferValues.<span class="pl-c1">str</span>();</td>
      </tr>
      <tr>
        <td id="L10815" class="blob-num js-line-number" data-line-number="10815"></td>
        <td id="LC10815" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> std::string retVal{tmp.<span class="pl-c1">str</span>()};</td>
      </tr>
      <tr>
        <td id="L10816" class="blob-num js-line-number" data-line-number="10816"></td>
        <td id="LC10816" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> retVal;</td>
      </tr>
      <tr>
        <td id="L10817" class="blob-num js-line-number" data-line-number="10817"></td>
        <td id="LC10817" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10818" class="blob-num js-line-number" data-line-number="10818"></td>
        <td id="LC10818" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10819" class="blob-num js-line-number" data-line-number="10819"></td>
        <td id="LC10819" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToCSVVisitor::preVisit</span>(<span class="pl-c1">int32_t</span> id, <span class="pl-k">const</span> std::string &amp;shortName, <span class="pl-k">const</span> std::string &amp;longName) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10820" class="blob-num js-line-number" data-line-number="10820"></td>
        <td id="LC10820" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L10821" class="blob-num js-line-number" data-line-number="10821"></td>
        <td id="LC10821" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)shortName;</td>
      </tr>
      <tr>
        <td id="L10822" class="blob-num js-line-number" data-line-number="10822"></td>
        <td id="LC10822" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)longName;</td>
      </tr>
      <tr>
        <td id="L10823" class="blob-num js-line-number" data-line-number="10823"></td>
        <td id="LC10823" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10824" class="blob-num js-line-number" data-line-number="10824"></td>
        <td id="LC10824" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10825" class="blob-num js-line-number" data-line-number="10825"></td>
        <td id="LC10825" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToCSVVisitor::postVisit</span>() <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10826" class="blob-num js-line-number" data-line-number="10826"></td>
        <td id="LC10826" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (m_fillHeader) {</td>
      </tr>
      <tr>
        <td id="L10827" class="blob-num js-line-number" data-line-number="10827"></td>
        <td id="LC10827" class="blob-code blob-code-inner js-file-line">        m_bufferHeader &lt;&lt; (m_isNested ? <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span> : <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L10828" class="blob-num js-line-number" data-line-number="10828"></td>
        <td id="LC10828" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L10829" class="blob-num js-line-number" data-line-number="10829"></td>
        <td id="LC10829" class="blob-code blob-code-inner js-file-line">    m_fillHeader = <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L10830" class="blob-num js-line-number" data-line-number="10830"></td>
        <td id="LC10830" class="blob-code blob-code-inner js-file-line">    m_bufferValues &lt;&lt; (m_isNested ? <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span> : <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\n</span><span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L10831" class="blob-num js-line-number" data-line-number="10831"></td>
        <td id="LC10831" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10832" class="blob-num js-line-number" data-line-number="10832"></td>
        <td id="LC10832" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10833" class="blob-num js-line-number" data-line-number="10833"></td>
        <td id="LC10833" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToCSVVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">bool</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10834" class="blob-num js-line-number" data-line-number="10834"></td>
        <td id="LC10834" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L10835" class="blob-num js-line-number" data-line-number="10835"></td>
        <td id="LC10835" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L10836" class="blob-num js-line-number" data-line-number="10836"></td>
        <td id="LC10836" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (m_fillHeader) {</td>
      </tr>
      <tr>
        <td id="L10837" class="blob-num js-line-number" data-line-number="10837"></td>
        <td id="LC10837" class="blob-code blob-code-inner js-file-line">        m_bufferHeader &lt;&lt; m_prefix &lt;&lt; (!m_prefix.<span class="pl-c1">empty</span>() ? <span class="pl-s"><span class="pl-pds">&quot;</span>.<span class="pl-pds">&quot;</span></span> : <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>) &lt;&lt; name &lt;&lt; m_delimiter;</td>
      </tr>
      <tr>
        <td id="L10838" class="blob-num js-line-number" data-line-number="10838"></td>
        <td id="LC10838" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L10839" class="blob-num js-line-number" data-line-number="10839"></td>
        <td id="LC10839" class="blob-code blob-code-inner js-file-line">    m_bufferValues &lt;&lt; v &lt;&lt; m_delimiter;</td>
      </tr>
      <tr>
        <td id="L10840" class="blob-num js-line-number" data-line-number="10840"></td>
        <td id="LC10840" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10841" class="blob-num js-line-number" data-line-number="10841"></td>
        <td id="LC10841" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10842" class="blob-num js-line-number" data-line-number="10842"></td>
        <td id="LC10842" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToCSVVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">char</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10843" class="blob-num js-line-number" data-line-number="10843"></td>
        <td id="LC10843" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L10844" class="blob-num js-line-number" data-line-number="10844"></td>
        <td id="LC10844" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L10845" class="blob-num js-line-number" data-line-number="10845"></td>
        <td id="LC10845" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (m_fillHeader) {</td>
      </tr>
      <tr>
        <td id="L10846" class="blob-num js-line-number" data-line-number="10846"></td>
        <td id="LC10846" class="blob-code blob-code-inner js-file-line">        m_bufferHeader &lt;&lt; m_prefix &lt;&lt; (!m_prefix.<span class="pl-c1">empty</span>() ? <span class="pl-s"><span class="pl-pds">&quot;</span>.<span class="pl-pds">&quot;</span></span> : <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>) &lt;&lt; name &lt;&lt; m_delimiter;</td>
      </tr>
      <tr>
        <td id="L10847" class="blob-num js-line-number" data-line-number="10847"></td>
        <td id="LC10847" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L10848" class="blob-num js-line-number" data-line-number="10848"></td>
        <td id="LC10848" class="blob-code blob-code-inner js-file-line">    m_bufferValues &lt;&lt; v &lt;&lt; m_delimiter;</td>
      </tr>
      <tr>
        <td id="L10849" class="blob-num js-line-number" data-line-number="10849"></td>
        <td id="LC10849" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10850" class="blob-num js-line-number" data-line-number="10850"></td>
        <td id="LC10850" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10851" class="blob-num js-line-number" data-line-number="10851"></td>
        <td id="LC10851" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToCSVVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int8_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10852" class="blob-num js-line-number" data-line-number="10852"></td>
        <td id="LC10852" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L10853" class="blob-num js-line-number" data-line-number="10853"></td>
        <td id="LC10853" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L10854" class="blob-num js-line-number" data-line-number="10854"></td>
        <td id="LC10854" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (m_fillHeader) {</td>
      </tr>
      <tr>
        <td id="L10855" class="blob-num js-line-number" data-line-number="10855"></td>
        <td id="LC10855" class="blob-code blob-code-inner js-file-line">        m_bufferHeader &lt;&lt; m_prefix &lt;&lt; (!m_prefix.<span class="pl-c1">empty</span>() ? <span class="pl-s"><span class="pl-pds">&quot;</span>.<span class="pl-pds">&quot;</span></span> : <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>) &lt;&lt; name &lt;&lt; m_delimiter;</td>
      </tr>
      <tr>
        <td id="L10856" class="blob-num js-line-number" data-line-number="10856"></td>
        <td id="LC10856" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L10857" class="blob-num js-line-number" data-line-number="10857"></td>
        <td id="LC10857" class="blob-code blob-code-inner js-file-line">    m_bufferValues &lt;&lt; +v &lt;&lt; m_delimiter;</td>
      </tr>
      <tr>
        <td id="L10858" class="blob-num js-line-number" data-line-number="10858"></td>
        <td id="LC10858" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10859" class="blob-num js-line-number" data-line-number="10859"></td>
        <td id="LC10859" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10860" class="blob-num js-line-number" data-line-number="10860"></td>
        <td id="LC10860" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToCSVVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint8_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10861" class="blob-num js-line-number" data-line-number="10861"></td>
        <td id="LC10861" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L10862" class="blob-num js-line-number" data-line-number="10862"></td>
        <td id="LC10862" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L10863" class="blob-num js-line-number" data-line-number="10863"></td>
        <td id="LC10863" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (m_fillHeader) {</td>
      </tr>
      <tr>
        <td id="L10864" class="blob-num js-line-number" data-line-number="10864"></td>
        <td id="LC10864" class="blob-code blob-code-inner js-file-line">        m_bufferHeader &lt;&lt; m_prefix &lt;&lt; (!m_prefix.<span class="pl-c1">empty</span>() ? <span class="pl-s"><span class="pl-pds">&quot;</span>.<span class="pl-pds">&quot;</span></span> : <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>) &lt;&lt; name &lt;&lt; m_delimiter;</td>
      </tr>
      <tr>
        <td id="L10865" class="blob-num js-line-number" data-line-number="10865"></td>
        <td id="LC10865" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L10866" class="blob-num js-line-number" data-line-number="10866"></td>
        <td id="LC10866" class="blob-code blob-code-inner js-file-line">    m_bufferValues &lt;&lt; +v &lt;&lt; m_delimiter;</td>
      </tr>
      <tr>
        <td id="L10867" class="blob-num js-line-number" data-line-number="10867"></td>
        <td id="LC10867" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10868" class="blob-num js-line-number" data-line-number="10868"></td>
        <td id="LC10868" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10869" class="blob-num js-line-number" data-line-number="10869"></td>
        <td id="LC10869" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToCSVVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int16_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10870" class="blob-num js-line-number" data-line-number="10870"></td>
        <td id="LC10870" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L10871" class="blob-num js-line-number" data-line-number="10871"></td>
        <td id="LC10871" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L10872" class="blob-num js-line-number" data-line-number="10872"></td>
        <td id="LC10872" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (m_fillHeader) {</td>
      </tr>
      <tr>
        <td id="L10873" class="blob-num js-line-number" data-line-number="10873"></td>
        <td id="LC10873" class="blob-code blob-code-inner js-file-line">        m_bufferHeader &lt;&lt; m_prefix &lt;&lt; (!m_prefix.<span class="pl-c1">empty</span>() ? <span class="pl-s"><span class="pl-pds">&quot;</span>.<span class="pl-pds">&quot;</span></span> : <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>) &lt;&lt; name &lt;&lt; m_delimiter;</td>
      </tr>
      <tr>
        <td id="L10874" class="blob-num js-line-number" data-line-number="10874"></td>
        <td id="LC10874" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L10875" class="blob-num js-line-number" data-line-number="10875"></td>
        <td id="LC10875" class="blob-code blob-code-inner js-file-line">    m_bufferValues &lt;&lt; v &lt;&lt; m_delimiter;</td>
      </tr>
      <tr>
        <td id="L10876" class="blob-num js-line-number" data-line-number="10876"></td>
        <td id="LC10876" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10877" class="blob-num js-line-number" data-line-number="10877"></td>
        <td id="LC10877" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10878" class="blob-num js-line-number" data-line-number="10878"></td>
        <td id="LC10878" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToCSVVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint16_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10879" class="blob-num js-line-number" data-line-number="10879"></td>
        <td id="LC10879" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L10880" class="blob-num js-line-number" data-line-number="10880"></td>
        <td id="LC10880" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L10881" class="blob-num js-line-number" data-line-number="10881"></td>
        <td id="LC10881" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (m_fillHeader) {</td>
      </tr>
      <tr>
        <td id="L10882" class="blob-num js-line-number" data-line-number="10882"></td>
        <td id="LC10882" class="blob-code blob-code-inner js-file-line">        m_bufferHeader &lt;&lt; m_prefix &lt;&lt; (!m_prefix.<span class="pl-c1">empty</span>() ? <span class="pl-s"><span class="pl-pds">&quot;</span>.<span class="pl-pds">&quot;</span></span> : <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>) &lt;&lt; name &lt;&lt; m_delimiter;</td>
      </tr>
      <tr>
        <td id="L10883" class="blob-num js-line-number" data-line-number="10883"></td>
        <td id="LC10883" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L10884" class="blob-num js-line-number" data-line-number="10884"></td>
        <td id="LC10884" class="blob-code blob-code-inner js-file-line">    m_bufferValues &lt;&lt; v &lt;&lt; m_delimiter;</td>
      </tr>
      <tr>
        <td id="L10885" class="blob-num js-line-number" data-line-number="10885"></td>
        <td id="LC10885" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10886" class="blob-num js-line-number" data-line-number="10886"></td>
        <td id="LC10886" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10887" class="blob-num js-line-number" data-line-number="10887"></td>
        <td id="LC10887" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToCSVVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int32_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10888" class="blob-num js-line-number" data-line-number="10888"></td>
        <td id="LC10888" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L10889" class="blob-num js-line-number" data-line-number="10889"></td>
        <td id="LC10889" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L10890" class="blob-num js-line-number" data-line-number="10890"></td>
        <td id="LC10890" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (m_fillHeader) {</td>
      </tr>
      <tr>
        <td id="L10891" class="blob-num js-line-number" data-line-number="10891"></td>
        <td id="LC10891" class="blob-code blob-code-inner js-file-line">        m_bufferHeader &lt;&lt; m_prefix &lt;&lt; (!m_prefix.<span class="pl-c1">empty</span>() ? <span class="pl-s"><span class="pl-pds">&quot;</span>.<span class="pl-pds">&quot;</span></span> : <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>) &lt;&lt; name &lt;&lt; m_delimiter;</td>
      </tr>
      <tr>
        <td id="L10892" class="blob-num js-line-number" data-line-number="10892"></td>
        <td id="LC10892" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L10893" class="blob-num js-line-number" data-line-number="10893"></td>
        <td id="LC10893" class="blob-code blob-code-inner js-file-line">    m_bufferValues &lt;&lt; v &lt;&lt; m_delimiter;</td>
      </tr>
      <tr>
        <td id="L10894" class="blob-num js-line-number" data-line-number="10894"></td>
        <td id="LC10894" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10895" class="blob-num js-line-number" data-line-number="10895"></td>
        <td id="LC10895" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10896" class="blob-num js-line-number" data-line-number="10896"></td>
        <td id="LC10896" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToCSVVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint32_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10897" class="blob-num js-line-number" data-line-number="10897"></td>
        <td id="LC10897" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L10898" class="blob-num js-line-number" data-line-number="10898"></td>
        <td id="LC10898" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L10899" class="blob-num js-line-number" data-line-number="10899"></td>
        <td id="LC10899" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (m_fillHeader) {</td>
      </tr>
      <tr>
        <td id="L10900" class="blob-num js-line-number" data-line-number="10900"></td>
        <td id="LC10900" class="blob-code blob-code-inner js-file-line">        m_bufferHeader &lt;&lt; m_prefix &lt;&lt; (!m_prefix.<span class="pl-c1">empty</span>() ? <span class="pl-s"><span class="pl-pds">&quot;</span>.<span class="pl-pds">&quot;</span></span> : <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>) &lt;&lt; name &lt;&lt; m_delimiter;</td>
      </tr>
      <tr>
        <td id="L10901" class="blob-num js-line-number" data-line-number="10901"></td>
        <td id="LC10901" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L10902" class="blob-num js-line-number" data-line-number="10902"></td>
        <td id="LC10902" class="blob-code blob-code-inner js-file-line">    m_bufferValues &lt;&lt; v &lt;&lt; m_delimiter;</td>
      </tr>
      <tr>
        <td id="L10903" class="blob-num js-line-number" data-line-number="10903"></td>
        <td id="LC10903" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10904" class="blob-num js-line-number" data-line-number="10904"></td>
        <td id="LC10904" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10905" class="blob-num js-line-number" data-line-number="10905"></td>
        <td id="LC10905" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToCSVVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int64_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10906" class="blob-num js-line-number" data-line-number="10906"></td>
        <td id="LC10906" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L10907" class="blob-num js-line-number" data-line-number="10907"></td>
        <td id="LC10907" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L10908" class="blob-num js-line-number" data-line-number="10908"></td>
        <td id="LC10908" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (m_fillHeader) {</td>
      </tr>
      <tr>
        <td id="L10909" class="blob-num js-line-number" data-line-number="10909"></td>
        <td id="LC10909" class="blob-code blob-code-inner js-file-line">        m_bufferHeader &lt;&lt; m_prefix &lt;&lt; (!m_prefix.<span class="pl-c1">empty</span>() ? <span class="pl-s"><span class="pl-pds">&quot;</span>.<span class="pl-pds">&quot;</span></span> : <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>) &lt;&lt; name &lt;&lt; m_delimiter;</td>
      </tr>
      <tr>
        <td id="L10910" class="blob-num js-line-number" data-line-number="10910"></td>
        <td id="LC10910" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L10911" class="blob-num js-line-number" data-line-number="10911"></td>
        <td id="LC10911" class="blob-code blob-code-inner js-file-line">    m_bufferValues &lt;&lt; v &lt;&lt; m_delimiter;</td>
      </tr>
      <tr>
        <td id="L10912" class="blob-num js-line-number" data-line-number="10912"></td>
        <td id="LC10912" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10913" class="blob-num js-line-number" data-line-number="10913"></td>
        <td id="LC10913" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10914" class="blob-num js-line-number" data-line-number="10914"></td>
        <td id="LC10914" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToCSVVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint64_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10915" class="blob-num js-line-number" data-line-number="10915"></td>
        <td id="LC10915" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L10916" class="blob-num js-line-number" data-line-number="10916"></td>
        <td id="LC10916" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L10917" class="blob-num js-line-number" data-line-number="10917"></td>
        <td id="LC10917" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (m_fillHeader) {</td>
      </tr>
      <tr>
        <td id="L10918" class="blob-num js-line-number" data-line-number="10918"></td>
        <td id="LC10918" class="blob-code blob-code-inner js-file-line">        m_bufferHeader &lt;&lt; m_prefix &lt;&lt; (!m_prefix.<span class="pl-c1">empty</span>() ? <span class="pl-s"><span class="pl-pds">&quot;</span>.<span class="pl-pds">&quot;</span></span> : <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>) &lt;&lt; name &lt;&lt; m_delimiter;</td>
      </tr>
      <tr>
        <td id="L10919" class="blob-num js-line-number" data-line-number="10919"></td>
        <td id="LC10919" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L10920" class="blob-num js-line-number" data-line-number="10920"></td>
        <td id="LC10920" class="blob-code blob-code-inner js-file-line">    m_bufferValues &lt;&lt; v &lt;&lt; m_delimiter;</td>
      </tr>
      <tr>
        <td id="L10921" class="blob-num js-line-number" data-line-number="10921"></td>
        <td id="LC10921" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10922" class="blob-num js-line-number" data-line-number="10922"></td>
        <td id="LC10922" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10923" class="blob-num js-line-number" data-line-number="10923"></td>
        <td id="LC10923" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToCSVVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">float</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10924" class="blob-num js-line-number" data-line-number="10924"></td>
        <td id="LC10924" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L10925" class="blob-num js-line-number" data-line-number="10925"></td>
        <td id="LC10925" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L10926" class="blob-num js-line-number" data-line-number="10926"></td>
        <td id="LC10926" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (m_fillHeader) {</td>
      </tr>
      <tr>
        <td id="L10927" class="blob-num js-line-number" data-line-number="10927"></td>
        <td id="LC10927" class="blob-code blob-code-inner js-file-line">        m_bufferHeader &lt;&lt; m_prefix &lt;&lt; (!m_prefix.<span class="pl-c1">empty</span>() ? <span class="pl-s"><span class="pl-pds">&quot;</span>.<span class="pl-pds">&quot;</span></span> : <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>) &lt;&lt; name &lt;&lt; m_delimiter;</td>
      </tr>
      <tr>
        <td id="L10928" class="blob-num js-line-number" data-line-number="10928"></td>
        <td id="LC10928" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L10929" class="blob-num js-line-number" data-line-number="10929"></td>
        <td id="LC10929" class="blob-code blob-code-inner js-file-line">    m_bufferValues &lt;&lt; <span class="pl-c1">std::setprecision</span>(<span class="pl-c1">7</span>) &lt;&lt; v &lt;&lt; <span class="pl-c1">std::setprecision</span>(<span class="pl-c1">6</span>) &lt;&lt; m_delimiter;</td>
      </tr>
      <tr>
        <td id="L10930" class="blob-num js-line-number" data-line-number="10930"></td>
        <td id="LC10930" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10931" class="blob-num js-line-number" data-line-number="10931"></td>
        <td id="LC10931" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10932" class="blob-num js-line-number" data-line-number="10932"></td>
        <td id="LC10932" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToCSVVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">double</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10933" class="blob-num js-line-number" data-line-number="10933"></td>
        <td id="LC10933" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L10934" class="blob-num js-line-number" data-line-number="10934"></td>
        <td id="LC10934" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L10935" class="blob-num js-line-number" data-line-number="10935"></td>
        <td id="LC10935" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (m_fillHeader) {</td>
      </tr>
      <tr>
        <td id="L10936" class="blob-num js-line-number" data-line-number="10936"></td>
        <td id="LC10936" class="blob-code blob-code-inner js-file-line">        m_bufferHeader &lt;&lt; m_prefix &lt;&lt; (!m_prefix.<span class="pl-c1">empty</span>() ? <span class="pl-s"><span class="pl-pds">&quot;</span>.<span class="pl-pds">&quot;</span></span> : <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>) &lt;&lt; name &lt;&lt; m_delimiter;</td>
      </tr>
      <tr>
        <td id="L10937" class="blob-num js-line-number" data-line-number="10937"></td>
        <td id="LC10937" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L10938" class="blob-num js-line-number" data-line-number="10938"></td>
        <td id="LC10938" class="blob-code blob-code-inner js-file-line">    m_bufferValues &lt;&lt; <span class="pl-c1">std::setprecision</span>(<span class="pl-c1">11</span>) &lt;&lt; v &lt;&lt; <span class="pl-c1">std::setprecision</span>(<span class="pl-c1">6</span>) &lt;&lt; m_delimiter;</td>
      </tr>
      <tr>
        <td id="L10939" class="blob-num js-line-number" data-line-number="10939"></td>
        <td id="LC10939" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10940" class="blob-num js-line-number" data-line-number="10940"></td>
        <td id="LC10940" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10941" class="blob-num js-line-number" data-line-number="10941"></td>
        <td id="LC10941" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToCSVVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, std::string &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10942" class="blob-num js-line-number" data-line-number="10942"></td>
        <td id="LC10942" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L10943" class="blob-num js-line-number" data-line-number="10943"></td>
        <td id="LC10943" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L10944" class="blob-num js-line-number" data-line-number="10944"></td>
        <td id="LC10944" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (m_fillHeader) {</td>
      </tr>
      <tr>
        <td id="L10945" class="blob-num js-line-number" data-line-number="10945"></td>
        <td id="LC10945" class="blob-code blob-code-inner js-file-line">        m_bufferHeader &lt;&lt; m_prefix &lt;&lt; (!m_prefix.<span class="pl-c1">empty</span>() ? <span class="pl-s"><span class="pl-pds">&quot;</span>.<span class="pl-pds">&quot;</span></span> : <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>) &lt;&lt; name &lt;&lt; m_delimiter;</td>
      </tr>
      <tr>
        <td id="L10946" class="blob-num js-line-number" data-line-number="10946"></td>
        <td id="LC10946" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L10947" class="blob-num js-line-number" data-line-number="10947"></td>
        <td id="LC10947" class="blob-code blob-code-inner js-file-line">    m_bufferValues &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\&quot;</span><span class="pl-pds">&#39;</span></span> &lt;&lt; v &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\&quot;</span><span class="pl-pds">&#39;</span></span> &lt;&lt; m_delimiter;</td>
      </tr>
      <tr>
        <td id="L10948" class="blob-num js-line-number" data-line-number="10948"></td>
        <td id="LC10948" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10949" class="blob-num js-line-number" data-line-number="10949"></td>
        <td id="LC10949" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10950" class="blob-num js-line-number" data-line-number="10950"></td>
        <td id="LC10950" class="blob-code blob-code-inner js-file-line">} <span class="pl-c"><span class="pl-c">//</span> namespace cluon</span></td>
      </tr>
      <tr>
        <td id="L10951" class="blob-num js-line-number" data-line-number="10951"></td>
        <td id="LC10951" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L10952" class="blob-num js-line-number" data-line-number="10952"></td>
        <td id="LC10952" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Copyright (C) 2017-2018  Christian Berger</span></td>
      </tr>
      <tr>
        <td id="L10953" class="blob-num js-line-number" data-line-number="10953"></td>
        <td id="LC10953" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L10954" class="blob-num js-line-number" data-line-number="10954"></td>
        <td id="LC10954" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is free software: you can redistribute it and/or modify</span></td>
      </tr>
      <tr>
        <td id="L10955" class="blob-num js-line-number" data-line-number="10955"></td>
        <td id="LC10955" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * it under the terms of the GNU General Public License as published by</span></td>
      </tr>
      <tr>
        <td id="L10956" class="blob-num js-line-number" data-line-number="10956"></td>
        <td id="LC10956" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * the Free Software Foundation, either version 3 of the License, or</span></td>
      </tr>
      <tr>
        <td id="L10957" class="blob-num js-line-number" data-line-number="10957"></td>
        <td id="LC10957" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * (at your option) any later version.</span></td>
      </tr>
      <tr>
        <td id="L10958" class="blob-num js-line-number" data-line-number="10958"></td>
        <td id="LC10958" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L10959" class="blob-num js-line-number" data-line-number="10959"></td>
        <td id="LC10959" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is distributed in the hope that it will be useful,</span></td>
      </tr>
      <tr>
        <td id="L10960" class="blob-num js-line-number" data-line-number="10960"></td>
        <td id="LC10960" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></td>
      </tr>
      <tr>
        <td id="L10961" class="blob-num js-line-number" data-line-number="10961"></td>
        <td id="LC10961" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></td>
      </tr>
      <tr>
        <td id="L10962" class="blob-num js-line-number" data-line-number="10962"></td>
        <td id="LC10962" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * GNU General Public License for more details.</span></td>
      </tr>
      <tr>
        <td id="L10963" class="blob-num js-line-number" data-line-number="10963"></td>
        <td id="LC10963" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L10964" class="blob-num js-line-number" data-line-number="10964"></td>
        <td id="LC10964" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * You should have received a copy of the GNU General Public License</span></td>
      </tr>
      <tr>
        <td id="L10965" class="blob-num js-line-number" data-line-number="10965"></td>
        <td id="LC10965" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></td>
      </tr>
      <tr>
        <td id="L10966" class="blob-num js-line-number" data-line-number="10966"></td>
        <td id="LC10966" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L10967" class="blob-num js-line-number" data-line-number="10967"></td>
        <td id="LC10967" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10968" class="blob-num js-line-number" data-line-number="10968"></td>
        <td id="LC10968" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> clang-format off</span></td>
      </tr>
      <tr>
        <td id="L10969" class="blob-num js-line-number" data-line-number="10969"></td>
        <td id="LC10969" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifdef</span> WIN32</td>
      </tr>
      <tr>
        <td id="L10970" class="blob-num js-line-number" data-line-number="10970"></td>
        <td id="LC10970" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>Winsock2.h<span class="pl-pds">&gt;</span></span> <span class="pl-c"><span class="pl-c">//</span> for htonll</span></td>
      </tr>
      <tr>
        <td id="L10971" class="blob-num js-line-number" data-line-number="10971"></td>
        <td id="LC10971" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L10972" class="blob-num js-line-number" data-line-number="10972"></td>
        <td id="LC10972" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> clang-format on</span></td>
      </tr>
      <tr>
        <td id="L10973" class="blob-num js-line-number" data-line-number="10973"></td>
        <td id="LC10973" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10974" class="blob-num js-line-number" data-line-number="10974"></td>
        <td id="LC10974" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/ToLCMVisitor.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L10975" class="blob-num js-line-number" data-line-number="10975"></td>
        <td id="LC10975" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10976" class="blob-num js-line-number" data-line-number="10976"></td>
        <td id="LC10976" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>cstring<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L10977" class="blob-num js-line-number" data-line-number="10977"></td>
        <td id="LC10977" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10978" class="blob-num js-line-number" data-line-number="10978"></td>
        <td id="LC10978" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">cluon</span> {</td>
      </tr>
      <tr>
        <td id="L10979" class="blob-num js-line-number" data-line-number="10979"></td>
        <td id="LC10979" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10980" class="blob-num js-line-number" data-line-number="10980"></td>
        <td id="LC10980" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::string <span class="pl-en">ToLCMVisitor::encodedData</span>(<span class="pl-k">bool</span> withHash) <span class="pl-k">const</span> <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10981" class="blob-num js-line-number" data-line-number="10981"></td>
        <td id="LC10981" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">int64_t</span> _hash = <span class="pl-c1">hash</span>();</td>
      </tr>
      <tr>
        <td id="L10982" class="blob-num js-line-number" data-line-number="10982"></td>
        <td id="LC10982" class="blob-code blob-code-inner js-file-line">    _hash         = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int64_t</span>&gt;(<span class="pl-c1">htobe64</span>(_hash));</td>
      </tr>
      <tr>
        <td id="L10983" class="blob-num js-line-number" data-line-number="10983"></td>
        <td id="LC10983" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10984" class="blob-num js-line-number" data-line-number="10984"></td>
        <td id="LC10984" class="blob-code blob-code-inner js-file-line">    std::stringstream hashBuffer;</td>
      </tr>
      <tr>
        <td id="L10985" class="blob-num js-line-number" data-line-number="10985"></td>
        <td id="LC10985" class="blob-code blob-code-inner js-file-line">    hashBuffer.<span class="pl-c1">write</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">const</span> <span class="pl-k">char</span> *&gt;(&amp;_hash), <span class="pl-k">sizeof</span>(<span class="pl-c1">int64_t</span>));</td>
      </tr>
      <tr>
        <td id="L10986" class="blob-num js-line-number" data-line-number="10986"></td>
        <td id="LC10986" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10987" class="blob-num js-line-number" data-line-number="10987"></td>
        <td id="LC10987" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> std::string s{(withHash ? hashBuffer.<span class="pl-c1">str</span>() : <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>) + m_buffer.<span class="pl-c1">str</span>()};</td>
      </tr>
      <tr>
        <td id="L10988" class="blob-num js-line-number" data-line-number="10988"></td>
        <td id="LC10988" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> s;</td>
      </tr>
      <tr>
        <td id="L10989" class="blob-num js-line-number" data-line-number="10989"></td>
        <td id="LC10989" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10990" class="blob-num js-line-number" data-line-number="10990"></td>
        <td id="LC10990" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10991" class="blob-num js-line-number" data-line-number="10991"></td>
        <td id="LC10991" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>//////////////////////////////////////////////////////////////////////////////</span></td>
      </tr>
      <tr>
        <td id="L10992" class="blob-num js-line-number" data-line-number="10992"></td>
        <td id="LC10992" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10993" class="blob-num js-line-number" data-line-number="10993"></td>
        <td id="LC10993" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToLCMVisitor::preVisit</span>(<span class="pl-c1">int32_t</span> id, <span class="pl-k">const</span> std::string &amp;shortName, <span class="pl-k">const</span> std::string &amp;longName) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L10994" class="blob-num js-line-number" data-line-number="10994"></td>
        <td id="LC10994" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L10995" class="blob-num js-line-number" data-line-number="10995"></td>
        <td id="LC10995" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)shortName;</td>
      </tr>
      <tr>
        <td id="L10996" class="blob-num js-line-number" data-line-number="10996"></td>
        <td id="LC10996" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)longName;</td>
      </tr>
      <tr>
        <td id="L10997" class="blob-num js-line-number" data-line-number="10997"></td>
        <td id="LC10997" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L10998" class="blob-num js-line-number" data-line-number="10998"></td>
        <td id="LC10998" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L10999" class="blob-num js-line-number" data-line-number="10999"></td>
        <td id="LC10999" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToLCMVisitor::postVisit</span>() <span class="pl-k">noexcept</span> {}</td>
      </tr>
      <tr>
        <td id="L11000" class="blob-num js-line-number" data-line-number="11000"></td>
        <td id="LC11000" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11001" class="blob-num js-line-number" data-line-number="11001"></td>
        <td id="LC11001" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToLCMVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">bool</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L11002" class="blob-num js-line-number" data-line-number="11002"></td>
        <td id="LC11002" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L11003" class="blob-num js-line-number" data-line-number="11003"></td>
        <td id="LC11003" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L11004" class="blob-num js-line-number" data-line-number="11004"></td>
        <td id="LC11004" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(name);</td>
      </tr>
      <tr>
        <td id="L11005" class="blob-num js-line-number" data-line-number="11005"></td>
        <td id="LC11005" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>boolean<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L11006" class="blob-num js-line-number" data-line-number="11006"></td>
        <td id="LC11006" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(<span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L11007" class="blob-num js-line-number" data-line-number="11007"></td>
        <td id="LC11007" class="blob-code blob-code-inner js-file-line">    m_buffer.<span class="pl-c1">write</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">char</span> *&gt;(&amp;v), <span class="pl-k">sizeof</span>(<span class="pl-k">bool</span>));</td>
      </tr>
      <tr>
        <td id="L11008" class="blob-num js-line-number" data-line-number="11008"></td>
        <td id="LC11008" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L11009" class="blob-num js-line-number" data-line-number="11009"></td>
        <td id="LC11009" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11010" class="blob-num js-line-number" data-line-number="11010"></td>
        <td id="LC11010" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToLCMVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">char</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L11011" class="blob-num js-line-number" data-line-number="11011"></td>
        <td id="LC11011" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L11012" class="blob-num js-line-number" data-line-number="11012"></td>
        <td id="LC11012" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L11013" class="blob-num js-line-number" data-line-number="11013"></td>
        <td id="LC11013" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(name);</td>
      </tr>
      <tr>
        <td id="L11014" class="blob-num js-line-number" data-line-number="11014"></td>
        <td id="LC11014" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>int8_t<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L11015" class="blob-num js-line-number" data-line-number="11015"></td>
        <td id="LC11015" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(<span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L11016" class="blob-num js-line-number" data-line-number="11016"></td>
        <td id="LC11016" class="blob-code blob-code-inner js-file-line">    m_buffer.<span class="pl-c1">write</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">char</span> *&gt;(&amp;v), <span class="pl-k">sizeof</span>(<span class="pl-k">char</span>));</td>
      </tr>
      <tr>
        <td id="L11017" class="blob-num js-line-number" data-line-number="11017"></td>
        <td id="LC11017" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L11018" class="blob-num js-line-number" data-line-number="11018"></td>
        <td id="LC11018" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11019" class="blob-num js-line-number" data-line-number="11019"></td>
        <td id="LC11019" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToLCMVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int8_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L11020" class="blob-num js-line-number" data-line-number="11020"></td>
        <td id="LC11020" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L11021" class="blob-num js-line-number" data-line-number="11021"></td>
        <td id="LC11021" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L11022" class="blob-num js-line-number" data-line-number="11022"></td>
        <td id="LC11022" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(name);</td>
      </tr>
      <tr>
        <td id="L11023" class="blob-num js-line-number" data-line-number="11023"></td>
        <td id="LC11023" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>int8_t<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L11024" class="blob-num js-line-number" data-line-number="11024"></td>
        <td id="LC11024" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(<span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L11025" class="blob-num js-line-number" data-line-number="11025"></td>
        <td id="LC11025" class="blob-code blob-code-inner js-file-line">    m_buffer.<span class="pl-c1">write</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">char</span> *&gt;(&amp;v), <span class="pl-k">sizeof</span>(<span class="pl-c1">int8_t</span>));</td>
      </tr>
      <tr>
        <td id="L11026" class="blob-num js-line-number" data-line-number="11026"></td>
        <td id="LC11026" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L11027" class="blob-num js-line-number" data-line-number="11027"></td>
        <td id="LC11027" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11028" class="blob-num js-line-number" data-line-number="11028"></td>
        <td id="LC11028" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToLCMVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint8_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L11029" class="blob-num js-line-number" data-line-number="11029"></td>
        <td id="LC11029" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L11030" class="blob-num js-line-number" data-line-number="11030"></td>
        <td id="LC11030" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L11031" class="blob-num js-line-number" data-line-number="11031"></td>
        <td id="LC11031" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(name);</td>
      </tr>
      <tr>
        <td id="L11032" class="blob-num js-line-number" data-line-number="11032"></td>
        <td id="LC11032" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>int8_t<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L11033" class="blob-num js-line-number" data-line-number="11033"></td>
        <td id="LC11033" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(<span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L11034" class="blob-num js-line-number" data-line-number="11034"></td>
        <td id="LC11034" class="blob-code blob-code-inner js-file-line">    m_buffer.<span class="pl-c1">write</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">char</span> *&gt;(&amp;v), <span class="pl-k">sizeof</span>(<span class="pl-c1">uint8_t</span>));</td>
      </tr>
      <tr>
        <td id="L11035" class="blob-num js-line-number" data-line-number="11035"></td>
        <td id="LC11035" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L11036" class="blob-num js-line-number" data-line-number="11036"></td>
        <td id="LC11036" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11037" class="blob-num js-line-number" data-line-number="11037"></td>
        <td id="LC11037" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToLCMVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int16_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L11038" class="blob-num js-line-number" data-line-number="11038"></td>
        <td id="LC11038" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L11039" class="blob-num js-line-number" data-line-number="11039"></td>
        <td id="LC11039" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L11040" class="blob-num js-line-number" data-line-number="11040"></td>
        <td id="LC11040" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(name);</td>
      </tr>
      <tr>
        <td id="L11041" class="blob-num js-line-number" data-line-number="11041"></td>
        <td id="LC11041" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>int16_t<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L11042" class="blob-num js-line-number" data-line-number="11042"></td>
        <td id="LC11042" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(<span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L11043" class="blob-num js-line-number" data-line-number="11043"></td>
        <td id="LC11043" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">int16_t</span> _v = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int16_t</span>&gt;(<span class="pl-c1">htobe16</span>(v));</td>
      </tr>
      <tr>
        <td id="L11044" class="blob-num js-line-number" data-line-number="11044"></td>
        <td id="LC11044" class="blob-code blob-code-inner js-file-line">    m_buffer.<span class="pl-c1">write</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">char</span> *&gt;(&amp;_v), <span class="pl-k">sizeof</span>(<span class="pl-c1">int16_t</span>));</td>
      </tr>
      <tr>
        <td id="L11045" class="blob-num js-line-number" data-line-number="11045"></td>
        <td id="LC11045" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L11046" class="blob-num js-line-number" data-line-number="11046"></td>
        <td id="LC11046" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11047" class="blob-num js-line-number" data-line-number="11047"></td>
        <td id="LC11047" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToLCMVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint16_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L11048" class="blob-num js-line-number" data-line-number="11048"></td>
        <td id="LC11048" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L11049" class="blob-num js-line-number" data-line-number="11049"></td>
        <td id="LC11049" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L11050" class="blob-num js-line-number" data-line-number="11050"></td>
        <td id="LC11050" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(name);</td>
      </tr>
      <tr>
        <td id="L11051" class="blob-num js-line-number" data-line-number="11051"></td>
        <td id="LC11051" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>int16_t<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L11052" class="blob-num js-line-number" data-line-number="11052"></td>
        <td id="LC11052" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(<span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L11053" class="blob-num js-line-number" data-line-number="11053"></td>
        <td id="LC11053" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">int16_t</span> _v = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int16_t</span>&gt;(<span class="pl-c1">htobe16</span>(v));</td>
      </tr>
      <tr>
        <td id="L11054" class="blob-num js-line-number" data-line-number="11054"></td>
        <td id="LC11054" class="blob-code blob-code-inner js-file-line">    m_buffer.<span class="pl-c1">write</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">char</span> *&gt;(&amp;_v), <span class="pl-k">sizeof</span>(<span class="pl-c1">int16_t</span>));</td>
      </tr>
      <tr>
        <td id="L11055" class="blob-num js-line-number" data-line-number="11055"></td>
        <td id="LC11055" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L11056" class="blob-num js-line-number" data-line-number="11056"></td>
        <td id="LC11056" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11057" class="blob-num js-line-number" data-line-number="11057"></td>
        <td id="LC11057" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToLCMVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int32_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L11058" class="blob-num js-line-number" data-line-number="11058"></td>
        <td id="LC11058" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L11059" class="blob-num js-line-number" data-line-number="11059"></td>
        <td id="LC11059" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L11060" class="blob-num js-line-number" data-line-number="11060"></td>
        <td id="LC11060" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(name);</td>
      </tr>
      <tr>
        <td id="L11061" class="blob-num js-line-number" data-line-number="11061"></td>
        <td id="LC11061" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>int32_t<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L11062" class="blob-num js-line-number" data-line-number="11062"></td>
        <td id="LC11062" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(<span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L11063" class="blob-num js-line-number" data-line-number="11063"></td>
        <td id="LC11063" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">int32_t</span> _v = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int32_t</span>&gt;(<span class="pl-c1">htobe32</span>(v));</td>
      </tr>
      <tr>
        <td id="L11064" class="blob-num js-line-number" data-line-number="11064"></td>
        <td id="LC11064" class="blob-code blob-code-inner js-file-line">    m_buffer.<span class="pl-c1">write</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">char</span> *&gt;(&amp;_v), <span class="pl-k">sizeof</span>(<span class="pl-c1">int32_t</span>));</td>
      </tr>
      <tr>
        <td id="L11065" class="blob-num js-line-number" data-line-number="11065"></td>
        <td id="LC11065" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L11066" class="blob-num js-line-number" data-line-number="11066"></td>
        <td id="LC11066" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11067" class="blob-num js-line-number" data-line-number="11067"></td>
        <td id="LC11067" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToLCMVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint32_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L11068" class="blob-num js-line-number" data-line-number="11068"></td>
        <td id="LC11068" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L11069" class="blob-num js-line-number" data-line-number="11069"></td>
        <td id="LC11069" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L11070" class="blob-num js-line-number" data-line-number="11070"></td>
        <td id="LC11070" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(name);</td>
      </tr>
      <tr>
        <td id="L11071" class="blob-num js-line-number" data-line-number="11071"></td>
        <td id="LC11071" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>int32_t<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L11072" class="blob-num js-line-number" data-line-number="11072"></td>
        <td id="LC11072" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(<span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L11073" class="blob-num js-line-number" data-line-number="11073"></td>
        <td id="LC11073" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">int32_t</span> _v = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int32_t</span>&gt;(<span class="pl-c1">htobe32</span>(v));</td>
      </tr>
      <tr>
        <td id="L11074" class="blob-num js-line-number" data-line-number="11074"></td>
        <td id="LC11074" class="blob-code blob-code-inner js-file-line">    m_buffer.<span class="pl-c1">write</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">char</span> *&gt;(&amp;_v), <span class="pl-k">sizeof</span>(<span class="pl-c1">int32_t</span>));</td>
      </tr>
      <tr>
        <td id="L11075" class="blob-num js-line-number" data-line-number="11075"></td>
        <td id="LC11075" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L11076" class="blob-num js-line-number" data-line-number="11076"></td>
        <td id="LC11076" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11077" class="blob-num js-line-number" data-line-number="11077"></td>
        <td id="LC11077" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToLCMVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int64_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L11078" class="blob-num js-line-number" data-line-number="11078"></td>
        <td id="LC11078" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L11079" class="blob-num js-line-number" data-line-number="11079"></td>
        <td id="LC11079" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L11080" class="blob-num js-line-number" data-line-number="11080"></td>
        <td id="LC11080" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(name);</td>
      </tr>
      <tr>
        <td id="L11081" class="blob-num js-line-number" data-line-number="11081"></td>
        <td id="LC11081" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>int64_t<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L11082" class="blob-num js-line-number" data-line-number="11082"></td>
        <td id="LC11082" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(<span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L11083" class="blob-num js-line-number" data-line-number="11083"></td>
        <td id="LC11083" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">int64_t</span> _v = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int64_t</span>&gt;(<span class="pl-c1">htobe64</span>(v));</td>
      </tr>
      <tr>
        <td id="L11084" class="blob-num js-line-number" data-line-number="11084"></td>
        <td id="LC11084" class="blob-code blob-code-inner js-file-line">    m_buffer.<span class="pl-c1">write</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">char</span> *&gt;(&amp;_v), <span class="pl-k">sizeof</span>(<span class="pl-c1">int64_t</span>));</td>
      </tr>
      <tr>
        <td id="L11085" class="blob-num js-line-number" data-line-number="11085"></td>
        <td id="LC11085" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L11086" class="blob-num js-line-number" data-line-number="11086"></td>
        <td id="LC11086" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11087" class="blob-num js-line-number" data-line-number="11087"></td>
        <td id="LC11087" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToLCMVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint64_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L11088" class="blob-num js-line-number" data-line-number="11088"></td>
        <td id="LC11088" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L11089" class="blob-num js-line-number" data-line-number="11089"></td>
        <td id="LC11089" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L11090" class="blob-num js-line-number" data-line-number="11090"></td>
        <td id="LC11090" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(name);</td>
      </tr>
      <tr>
        <td id="L11091" class="blob-num js-line-number" data-line-number="11091"></td>
        <td id="LC11091" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>int64_t<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L11092" class="blob-num js-line-number" data-line-number="11092"></td>
        <td id="LC11092" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(<span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L11093" class="blob-num js-line-number" data-line-number="11093"></td>
        <td id="LC11093" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">int64_t</span> _v = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int64_t</span>&gt;(<span class="pl-c1">htobe64</span>(v));</td>
      </tr>
      <tr>
        <td id="L11094" class="blob-num js-line-number" data-line-number="11094"></td>
        <td id="LC11094" class="blob-code blob-code-inner js-file-line">    m_buffer.<span class="pl-c1">write</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">char</span> *&gt;(&amp;_v), <span class="pl-k">sizeof</span>(<span class="pl-c1">int64_t</span>));</td>
      </tr>
      <tr>
        <td id="L11095" class="blob-num js-line-number" data-line-number="11095"></td>
        <td id="LC11095" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L11096" class="blob-num js-line-number" data-line-number="11096"></td>
        <td id="LC11096" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11097" class="blob-num js-line-number" data-line-number="11097"></td>
        <td id="LC11097" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToLCMVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">float</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L11098" class="blob-num js-line-number" data-line-number="11098"></td>
        <td id="LC11098" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L11099" class="blob-num js-line-number" data-line-number="11099"></td>
        <td id="LC11099" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L11100" class="blob-num js-line-number" data-line-number="11100"></td>
        <td id="LC11100" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(name);</td>
      </tr>
      <tr>
        <td id="L11101" class="blob-num js-line-number" data-line-number="11101"></td>
        <td id="LC11101" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>float<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L11102" class="blob-num js-line-number" data-line-number="11102"></td>
        <td id="LC11102" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(<span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L11103" class="blob-num js-line-number" data-line-number="11103"></td>
        <td id="LC11103" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">int32_t</span> _v{<span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L11104" class="blob-num js-line-number" data-line-number="11104"></td>
        <td id="LC11104" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">std::memmove</span>(&amp;_v, &amp;v, <span class="pl-k">sizeof</span>(<span class="pl-c1">int32_t</span>));</td>
      </tr>
      <tr>
        <td id="L11105" class="blob-num js-line-number" data-line-number="11105"></td>
        <td id="LC11105" class="blob-code blob-code-inner js-file-line">    _v = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int32_t</span>&gt;(<span class="pl-c1">htobe32</span>(_v));</td>
      </tr>
      <tr>
        <td id="L11106" class="blob-num js-line-number" data-line-number="11106"></td>
        <td id="LC11106" class="blob-code blob-code-inner js-file-line">    m_buffer.<span class="pl-c1">write</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">char</span> *&gt;(&amp;_v), <span class="pl-k">sizeof</span>(<span class="pl-c1">int32_t</span>));</td>
      </tr>
      <tr>
        <td id="L11107" class="blob-num js-line-number" data-line-number="11107"></td>
        <td id="LC11107" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L11108" class="blob-num js-line-number" data-line-number="11108"></td>
        <td id="LC11108" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11109" class="blob-num js-line-number" data-line-number="11109"></td>
        <td id="LC11109" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToLCMVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">double</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L11110" class="blob-num js-line-number" data-line-number="11110"></td>
        <td id="LC11110" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L11111" class="blob-num js-line-number" data-line-number="11111"></td>
        <td id="LC11111" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L11112" class="blob-num js-line-number" data-line-number="11112"></td>
        <td id="LC11112" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(name);</td>
      </tr>
      <tr>
        <td id="L11113" class="blob-num js-line-number" data-line-number="11113"></td>
        <td id="LC11113" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>double<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L11114" class="blob-num js-line-number" data-line-number="11114"></td>
        <td id="LC11114" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(<span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L11115" class="blob-num js-line-number" data-line-number="11115"></td>
        <td id="LC11115" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">int64_t</span> _v{<span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L11116" class="blob-num js-line-number" data-line-number="11116"></td>
        <td id="LC11116" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">std::memmove</span>(&amp;_v, &amp;v, <span class="pl-k">sizeof</span>(<span class="pl-c1">int64_t</span>));</td>
      </tr>
      <tr>
        <td id="L11117" class="blob-num js-line-number" data-line-number="11117"></td>
        <td id="LC11117" class="blob-code blob-code-inner js-file-line">    _v = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int64_t</span>&gt;(<span class="pl-c1">htobe64</span>(_v));</td>
      </tr>
      <tr>
        <td id="L11118" class="blob-num js-line-number" data-line-number="11118"></td>
        <td id="LC11118" class="blob-code blob-code-inner js-file-line">    m_buffer.<span class="pl-c1">write</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">char</span> *&gt;(&amp;_v), <span class="pl-k">sizeof</span>(<span class="pl-c1">int64_t</span>));</td>
      </tr>
      <tr>
        <td id="L11119" class="blob-num js-line-number" data-line-number="11119"></td>
        <td id="LC11119" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L11120" class="blob-num js-line-number" data-line-number="11120"></td>
        <td id="LC11120" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11121" class="blob-num js-line-number" data-line-number="11121"></td>
        <td id="LC11121" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToLCMVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, std::string &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L11122" class="blob-num js-line-number" data-line-number="11122"></td>
        <td id="LC11122" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L11123" class="blob-num js-line-number" data-line-number="11123"></td>
        <td id="LC11123" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L11124" class="blob-num js-line-number" data-line-number="11124"></td>
        <td id="LC11124" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(name);</td>
      </tr>
      <tr>
        <td id="L11125" class="blob-num js-line-number" data-line-number="11125"></td>
        <td id="LC11125" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>string<span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L11126" class="blob-num js-line-number" data-line-number="11126"></td>
        <td id="LC11126" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(<span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L11127" class="blob-num js-line-number" data-line-number="11127"></td>
        <td id="LC11127" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11128" class="blob-num js-line-number" data-line-number="11128"></td>
        <td id="LC11128" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> std::<span class="pl-c1">size_t</span> LENGTH = v.<span class="pl-c1">length</span>();</td>
      </tr>
      <tr>
        <td id="L11129" class="blob-num js-line-number" data-line-number="11129"></td>
        <td id="LC11129" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">int32_t</span> _v               = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int32_t</span>&gt;(<span class="pl-c1">htobe32</span>(<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint32_t</span>&gt;(LENGTH + <span class="pl-c1">1</span>)));</td>
      </tr>
      <tr>
        <td id="L11130" class="blob-num js-line-number" data-line-number="11130"></td>
        <td id="LC11130" class="blob-code blob-code-inner js-file-line">    m_buffer.<span class="pl-c1">write</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">char</span> *&gt;(&amp;_v), <span class="pl-k">sizeof</span>(<span class="pl-c1">int32_t</span>));</td>
      </tr>
      <tr>
        <td id="L11131" class="blob-num js-line-number" data-line-number="11131"></td>
        <td id="LC11131" class="blob-code blob-code-inner js-file-line">    m_buffer.<span class="pl-c1">write</span>(v.<span class="pl-c1">c_str</span>(), <span class="pl-k">static_cast</span>&lt;std::streamsize&gt;(LENGTH)); <span class="pl-c"><span class="pl-c">//</span> LENGTH won&#39;t be negative.</span></td>
      </tr>
      <tr>
        <td id="L11132" class="blob-num js-line-number" data-line-number="11132"></td>
        <td id="LC11132" class="blob-code blob-code-inner js-file-line">    m_buffer &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\0</span><span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L11133" class="blob-num js-line-number" data-line-number="11133"></td>
        <td id="LC11133" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L11134" class="blob-num js-line-number" data-line-number="11134"></td>
        <td id="LC11134" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11135" class="blob-num js-line-number" data-line-number="11135"></td>
        <td id="LC11135" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>//////////////////////////////////////////////////////////////////////////////</span></td>
      </tr>
      <tr>
        <td id="L11136" class="blob-num js-line-number" data-line-number="11136"></td>
        <td id="LC11136" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11137" class="blob-num js-line-number" data-line-number="11137"></td>
        <td id="LC11137" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-c1">int64_t</span> <span class="pl-en">ToLCMVisitor::hash</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L11138" class="blob-num js-line-number" data-line-number="11138"></td>
        <td id="LC11138" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Apply ZigZag encoding for hash from this message&#39;s fields and depending</span></td>
      </tr>
      <tr>
        <td id="L11139" class="blob-num js-line-number" data-line-number="11139"></td>
        <td id="LC11139" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> hashes for complex nested types.</span></td>
      </tr>
      <tr>
        <td id="L11140" class="blob-num js-line-number" data-line-number="11140"></td>
        <td id="LC11140" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">int64_t</span> tmp{m_hash};</td>
      </tr>
      <tr>
        <td id="L11141" class="blob-num js-line-number" data-line-number="11141"></td>
        <td id="LC11141" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">for</span> (<span class="pl-c1">int64_t</span> v : m_hashes) { tmp += v; }</td>
      </tr>
      <tr>
        <td id="L11142" class="blob-num js-line-number" data-line-number="11142"></td>
        <td id="LC11142" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11143" class="blob-num js-line-number" data-line-number="11143"></td>
        <td id="LC11143" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> <span class="pl-c1">int64_t</span> hash = (tmp &lt;&lt; <span class="pl-c1">1</span>) + ((tmp &gt;&gt; <span class="pl-c1">63</span>) &amp; <span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L11144" class="blob-num js-line-number" data-line-number="11144"></td>
        <td id="LC11144" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> hash;</td>
      </tr>
      <tr>
        <td id="L11145" class="blob-num js-line-number" data-line-number="11145"></td>
        <td id="LC11145" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L11146" class="blob-num js-line-number" data-line-number="11146"></td>
        <td id="LC11146" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11147" class="blob-num js-line-number" data-line-number="11147"></td>
        <td id="LC11147" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToLCMVisitor::calculateHash</span>(<span class="pl-k">char</span> c) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L11148" class="blob-num js-line-number" data-line-number="11148"></td>
        <td id="LC11148" class="blob-code blob-code-inner js-file-line">    m_hash = ((m_hash &lt;&lt; <span class="pl-c1">8</span>) ^ (m_hash &gt;&gt; <span class="pl-c1">55</span>)) + c;</td>
      </tr>
      <tr>
        <td id="L11149" class="blob-num js-line-number" data-line-number="11149"></td>
        <td id="LC11149" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L11150" class="blob-num js-line-number" data-line-number="11150"></td>
        <td id="LC11150" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11151" class="blob-num js-line-number" data-line-number="11151"></td>
        <td id="LC11151" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToLCMVisitor::calculateHash</span>(<span class="pl-k">const</span> std::string &amp;s) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L11152" class="blob-num js-line-number" data-line-number="11152"></td>
        <td id="LC11152" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> std::string tmp{(s.<span class="pl-c1">length</span>() &gt; <span class="pl-c1">255</span> ? s.<span class="pl-c1">substr</span>(<span class="pl-c1">0</span>, <span class="pl-c1">255</span>) : s)};</td>
      </tr>
      <tr>
        <td id="L11153" class="blob-num js-line-number" data-line-number="11153"></td>
        <td id="LC11153" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> <span class="pl-c1">uint8_t</span> length{<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(tmp.<span class="pl-c1">length</span>())};</td>
      </tr>
      <tr>
        <td id="L11154" class="blob-num js-line-number" data-line-number="11154"></td>
        <td id="LC11154" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">calculateHash</span>(<span class="pl-k">static_cast</span>&lt;<span class="pl-k">char</span>&gt;(length));</td>
      </tr>
      <tr>
        <td id="L11155" class="blob-num js-line-number" data-line-number="11155"></td>
        <td id="LC11155" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">for</span> (<span class="pl-k">auto</span> c : s) { <span class="pl-c1">calculateHash</span>(c); }</td>
      </tr>
      <tr>
        <td id="L11156" class="blob-num js-line-number" data-line-number="11156"></td>
        <td id="LC11156" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L11157" class="blob-num js-line-number" data-line-number="11157"></td>
        <td id="LC11157" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11158" class="blob-num js-line-number" data-line-number="11158"></td>
        <td id="LC11158" class="blob-code blob-code-inner js-file-line">} <span class="pl-c"><span class="pl-c">//</span> namespace cluon</span></td>
      </tr>
      <tr>
        <td id="L11159" class="blob-num js-line-number" data-line-number="11159"></td>
        <td id="LC11159" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L11160" class="blob-num js-line-number" data-line-number="11160"></td>
        <td id="LC11160" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Copyright (C) 2018  Christian Berger</span></td>
      </tr>
      <tr>
        <td id="L11161" class="blob-num js-line-number" data-line-number="11161"></td>
        <td id="LC11161" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L11162" class="blob-num js-line-number" data-line-number="11162"></td>
        <td id="LC11162" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is free software: you can redistribute it and/or modify</span></td>
      </tr>
      <tr>
        <td id="L11163" class="blob-num js-line-number" data-line-number="11163"></td>
        <td id="LC11163" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * it under the terms of the GNU General Public License as published by</span></td>
      </tr>
      <tr>
        <td id="L11164" class="blob-num js-line-number" data-line-number="11164"></td>
        <td id="LC11164" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * the Free Software Foundation, either version 3 of the License, or</span></td>
      </tr>
      <tr>
        <td id="L11165" class="blob-num js-line-number" data-line-number="11165"></td>
        <td id="LC11165" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * (at your option) any later version.</span></td>
      </tr>
      <tr>
        <td id="L11166" class="blob-num js-line-number" data-line-number="11166"></td>
        <td id="LC11166" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L11167" class="blob-num js-line-number" data-line-number="11167"></td>
        <td id="LC11167" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is distributed in the hope that it will be useful,</span></td>
      </tr>
      <tr>
        <td id="L11168" class="blob-num js-line-number" data-line-number="11168"></td>
        <td id="LC11168" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></td>
      </tr>
      <tr>
        <td id="L11169" class="blob-num js-line-number" data-line-number="11169"></td>
        <td id="LC11169" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></td>
      </tr>
      <tr>
        <td id="L11170" class="blob-num js-line-number" data-line-number="11170"></td>
        <td id="LC11170" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * GNU General Public License for more details.</span></td>
      </tr>
      <tr>
        <td id="L11171" class="blob-num js-line-number" data-line-number="11171"></td>
        <td id="LC11171" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L11172" class="blob-num js-line-number" data-line-number="11172"></td>
        <td id="LC11172" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * You should have received a copy of the GNU General Public License</span></td>
      </tr>
      <tr>
        <td id="L11173" class="blob-num js-line-number" data-line-number="11173"></td>
        <td id="LC11173" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></td>
      </tr>
      <tr>
        <td id="L11174" class="blob-num js-line-number" data-line-number="11174"></td>
        <td id="LC11174" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L11175" class="blob-num js-line-number" data-line-number="11175"></td>
        <td id="LC11175" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11176" class="blob-num js-line-number" data-line-number="11176"></td>
        <td id="LC11176" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/LCMToGenericMessage.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L11177" class="blob-num js-line-number" data-line-number="11177"></td>
        <td id="LC11177" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/FromLCMVisitor.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L11178" class="blob-num js-line-number" data-line-number="11178"></td>
        <td id="LC11178" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/MessageParser.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L11179" class="blob-num js-line-number" data-line-number="11179"></td>
        <td id="LC11179" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11180" class="blob-num js-line-number" data-line-number="11180"></td>
        <td id="LC11180" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>array<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L11181" class="blob-num js-line-number" data-line-number="11181"></td>
        <td id="LC11181" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>iostream<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L11182" class="blob-num js-line-number" data-line-number="11182"></td>
        <td id="LC11182" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>sstream<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L11183" class="blob-num js-line-number" data-line-number="11183"></td>
        <td id="LC11183" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11184" class="blob-num js-line-number" data-line-number="11184"></td>
        <td id="LC11184" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> clang-format off</span></td>
      </tr>
      <tr>
        <td id="L11185" class="blob-num js-line-number" data-line-number="11185"></td>
        <td id="LC11185" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifdef</span> WIN32</td>
      </tr>
      <tr>
        <td id="L11186" class="blob-num js-line-number" data-line-number="11186"></td>
        <td id="LC11186" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">undef</span> be32toh</td>
      </tr>
      <tr>
        <td id="L11187" class="blob-num js-line-number" data-line-number="11187"></td>
        <td id="LC11187" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">define</span> <span class="pl-en">be32toh</span>(<span class="pl-v">x</span>) __ntohl(x)</td>
      </tr>
      <tr>
        <td id="L11188" class="blob-num js-line-number" data-line-number="11188"></td>
        <td id="LC11188" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11189" class="blob-num js-line-number" data-line-number="11189"></td>
        <td id="LC11189" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>cstdint<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L11190" class="blob-num js-line-number" data-line-number="11190"></td>
        <td id="LC11190" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>cstring<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L11191" class="blob-num js-line-number" data-line-number="11191"></td>
        <td id="LC11191" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">uint32_t</span> <span class="pl-smi">__ntohl</span>(<span class="pl-k">const</span> <span class="pl-c1">uint32_t</span> v) {</td>
      </tr>
      <tr>
        <td id="L11192" class="blob-num js-line-number" data-line-number="11192"></td>
        <td id="LC11192" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">uint8_t</span> d[<span class="pl-c1">4</span>] = {};</td>
      </tr>
      <tr>
        <td id="L11193" class="blob-num js-line-number" data-line-number="11193"></td>
        <td id="LC11193" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">std::memcpy</span>(&amp;d, &amp;v, <span class="pl-k">sizeof</span>(d));</td>
      </tr>
      <tr>
        <td id="L11194" class="blob-num js-line-number" data-line-number="11194"></td>
        <td id="LC11194" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11195" class="blob-num js-line-number" data-line-number="11195"></td>
        <td id="LC11195" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> ((<span class="pl-c1">uint32_t</span>) d[<span class="pl-c1">3</span>] &lt;&lt; <span class="pl-c1">0</span>)</td>
      </tr>
      <tr>
        <td id="L11196" class="blob-num js-line-number" data-line-number="11196"></td>
        <td id="LC11196" class="blob-code blob-code-inner js-file-line">             | ((<span class="pl-c1">uint32_t</span>) d[<span class="pl-c1">2</span>] &lt;&lt; <span class="pl-c1">8</span>)</td>
      </tr>
      <tr>
        <td id="L11197" class="blob-num js-line-number" data-line-number="11197"></td>
        <td id="LC11197" class="blob-code blob-code-inner js-file-line">             | ((<span class="pl-c1">uint32_t</span>) d[<span class="pl-c1">1</span>] &lt;&lt; <span class="pl-c1">16</span>)</td>
      </tr>
      <tr>
        <td id="L11198" class="blob-num js-line-number" data-line-number="11198"></td>
        <td id="LC11198" class="blob-code blob-code-inner js-file-line">             | ((<span class="pl-c1">uint32_t</span>) d[<span class="pl-c1">0</span>] &lt;&lt; <span class="pl-c1">24</span>);</td>
      </tr>
      <tr>
        <td id="L11199" class="blob-num js-line-number" data-line-number="11199"></td>
        <td id="LC11199" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L11200" class="blob-num js-line-number" data-line-number="11200"></td>
        <td id="LC11200" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L11201" class="blob-num js-line-number" data-line-number="11201"></td>
        <td id="LC11201" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> clang-format on</span></td>
      </tr>
      <tr>
        <td id="L11202" class="blob-num js-line-number" data-line-number="11202"></td>
        <td id="LC11202" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11203" class="blob-num js-line-number" data-line-number="11203"></td>
        <td id="LC11203" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">cluon</span> {</td>
      </tr>
      <tr>
        <td id="L11204" class="blob-num js-line-number" data-line-number="11204"></td>
        <td id="LC11204" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11205" class="blob-num js-line-number" data-line-number="11205"></td>
        <td id="LC11205" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-c1">int32_t</span> <span class="pl-en">LCMToGenericMessage::setMessageSpecification</span>(<span class="pl-k">const</span> std::string &amp;ms) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L11206" class="blob-num js-line-number" data-line-number="11206"></td>
        <td id="LC11206" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">int32_t</span> retVal{-<span class="pl-c1">1</span>};</td>
      </tr>
      <tr>
        <td id="L11207" class="blob-num js-line-number" data-line-number="11207"></td>
        <td id="LC11207" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11208" class="blob-num js-line-number" data-line-number="11208"></td>
        <td id="LC11208" class="blob-code blob-code-inner js-file-line">    m_listOfMetaMessages.<span class="pl-c1">clear</span>();</td>
      </tr>
      <tr>
        <td id="L11209" class="blob-num js-line-number" data-line-number="11209"></td>
        <td id="LC11209" class="blob-code blob-code-inner js-file-line">    m_scopeOfMetaMessages.<span class="pl-c1">clear</span>();</td>
      </tr>
      <tr>
        <td id="L11210" class="blob-num js-line-number" data-line-number="11210"></td>
        <td id="LC11210" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11211" class="blob-num js-line-number" data-line-number="11211"></td>
        <td id="LC11211" class="blob-code blob-code-inner js-file-line">    cluon::MessageParser mp;</td>
      </tr>
      <tr>
        <td id="L11212" class="blob-num js-line-number" data-line-number="11212"></td>
        <td id="LC11212" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">auto</span> parsingResult = mp.<span class="pl-c1">parse</span>(ms);</td>
      </tr>
      <tr>
        <td id="L11213" class="blob-num js-line-number" data-line-number="11213"></td>
        <td id="LC11213" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (cluon::MessageParser::MessageParserErrorCodes::NO_ERROR == parsingResult.<span class="pl-smi">second</span>) {</td>
      </tr>
      <tr>
        <td id="L11214" class="blob-num js-line-number" data-line-number="11214"></td>
        <td id="LC11214" class="blob-code blob-code-inner js-file-line">        m_listOfMetaMessages = parsingResult.<span class="pl-smi">first</span>;</td>
      </tr>
      <tr>
        <td id="L11215" class="blob-num js-line-number" data-line-number="11215"></td>
        <td id="LC11215" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">for</span> (<span class="pl-k">const</span> <span class="pl-k">auto</span> &amp;mm : m_listOfMetaMessages) { m_scopeOfMetaMessages[mm.<span class="pl-c1">messageName</span>()] = mm; }</td>
      </tr>
      <tr>
        <td id="L11216" class="blob-num js-line-number" data-line-number="11216"></td>
        <td id="LC11216" class="blob-code blob-code-inner js-file-line">        retVal = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int32_t</span>&gt;(m_listOfMetaMessages.<span class="pl-c1">size</span>());</td>
      </tr>
      <tr>
        <td id="L11217" class="blob-num js-line-number" data-line-number="11217"></td>
        <td id="LC11217" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L11218" class="blob-num js-line-number" data-line-number="11218"></td>
        <td id="LC11218" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> retVal;</td>
      </tr>
      <tr>
        <td id="L11219" class="blob-num js-line-number" data-line-number="11219"></td>
        <td id="LC11219" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L11220" class="blob-num js-line-number" data-line-number="11220"></td>
        <td id="LC11220" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11221" class="blob-num js-line-number" data-line-number="11221"></td>
        <td id="LC11221" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> cluon::GenericMessage <span class="pl-en">LCMToGenericMessage::getGenericMessage</span>(<span class="pl-k">const</span> std::string &amp;data) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L11222" class="blob-num js-line-number" data-line-number="11222"></td>
        <td id="LC11222" class="blob-code blob-code-inner js-file-line">    cluon::GenericMessage gm;</td>
      </tr>
      <tr>
        <td id="L11223" class="blob-num js-line-number" data-line-number="11223"></td>
        <td id="LC11223" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11224" class="blob-num js-line-number" data-line-number="11224"></td>
        <td id="LC11224" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (!m_listOfMetaMessages.<span class="pl-c1">empty</span>()) {</td>
      </tr>
      <tr>
        <td id="L11225" class="blob-num js-line-number" data-line-number="11225"></td>
        <td id="LC11225" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">constexpr</span> <span class="pl-c1">uint8_t</span> LCM_HEADER_SIZE{<span class="pl-c1">4</span> <span class="pl-c"><span class="pl-c">/*</span>magic number<span class="pl-c">*/</span></span> + <span class="pl-c1">4</span> <span class="pl-c"><span class="pl-c">/*</span>sequence number<span class="pl-c">*/</span></span> + <span class="pl-c1">1</span> <span class="pl-c"><span class="pl-c">/*</span>&#39;\0&#39; after channel name<span class="pl-c">*/</span></span>};</td>
      </tr>
      <tr>
        <td id="L11226" class="blob-num js-line-number" data-line-number="11226"></td>
        <td id="LC11226" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (LCM_HEADER_SIZE &lt; data.<span class="pl-c1">size</span>()) {</td>
      </tr>
      <tr>
        <td id="L11227" class="blob-num js-line-number" data-line-number="11227"></td>
        <td id="LC11227" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> First, read magic number.</span></td>
      </tr>
      <tr>
        <td id="L11228" class="blob-num js-line-number" data-line-number="11228"></td>
        <td id="LC11228" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">constexpr</span> <span class="pl-c1">uint32_t</span> MAGIC_NUMBER_LCM2{<span class="pl-c1">0x4c433032</span>};</td>
      </tr>
      <tr>
        <td id="L11229" class="blob-num js-line-number" data-line-number="11229"></td>
        <td id="LC11229" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">uint32_t</span> offset{<span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L11230" class="blob-num js-line-number" data-line-number="11230"></td>
        <td id="LC11230" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">uint32_t</span> magicNumber{<span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L11231" class="blob-num js-line-number" data-line-number="11231"></td>
        <td id="LC11231" class="blob-code blob-code-inner js-file-line">            {</td>
      </tr>
      <tr>
        <td id="L11232" class="blob-num js-line-number" data-line-number="11232"></td>
        <td id="LC11232" class="blob-code blob-code-inner js-file-line">                std::stringstream sstr{<span class="pl-c1">std::string</span>(&amp;data[offset], <span class="pl-c1">4</span>)};</td>
      </tr>
      <tr>
        <td id="L11233" class="blob-num js-line-number" data-line-number="11233"></td>
        <td id="LC11233" class="blob-code blob-code-inner js-file-line">                <span class="pl-c"><span class="pl-c">//</span> clang-format off</span></td>
      </tr>
      <tr>
        <td id="L11234" class="blob-num js-line-number" data-line-number="11234"></td>
        <td id="LC11234" class="blob-code blob-code-inner js-file-line">                sstr.<span class="pl-c1">read</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">char</span> *&gt;(&amp;magicNumber), <span class="pl-k">sizeof</span>(<span class="pl-c1">uint32_t</span>)); <span class="pl-c"><span class="pl-c">/*</span> Flawfinder: ignore <span class="pl-c">*/</span></span> <span class="pl-c"><span class="pl-c">//</span> NOLINT</span></td>
      </tr>
      <tr>
        <td id="L11235" class="blob-num js-line-number" data-line-number="11235"></td>
        <td id="LC11235" class="blob-code blob-code-inner js-file-line">                <span class="pl-c"><span class="pl-c">//</span> clang-format on</span></td>
      </tr>
      <tr>
        <td id="L11236" class="blob-num js-line-number" data-line-number="11236"></td>
        <td id="LC11236" class="blob-code blob-code-inner js-file-line">                magicNumber = <span class="pl-c1">be32toh</span>(magicNumber);</td>
      </tr>
      <tr>
        <td id="L11237" class="blob-num js-line-number" data-line-number="11237"></td>
        <td id="LC11237" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L11238" class="blob-num js-line-number" data-line-number="11238"></td>
        <td id="LC11238" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (MAGIC_NUMBER_LCM2 == magicNumber) {</td>
      </tr>
      <tr>
        <td id="L11239" class="blob-num js-line-number" data-line-number="11239"></td>
        <td id="LC11239" class="blob-code blob-code-inner js-file-line">                offset += <span class="pl-c1">4</span>;</td>
      </tr>
      <tr>
        <td id="L11240" class="blob-num js-line-number" data-line-number="11240"></td>
        <td id="LC11240" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11241" class="blob-num js-line-number" data-line-number="11241"></td>
        <td id="LC11241" class="blob-code blob-code-inner js-file-line">                <span class="pl-c"><span class="pl-c">//</span> Next, read sequence number in case of fragmented data.</span></td>
      </tr>
      <tr>
        <td id="L11242" class="blob-num js-line-number" data-line-number="11242"></td>
        <td id="LC11242" class="blob-code blob-code-inner js-file-line">                <span class="pl-c1">uint32_t</span> sequenceNumber{<span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L11243" class="blob-num js-line-number" data-line-number="11243"></td>
        <td id="LC11243" class="blob-code blob-code-inner js-file-line">                {</td>
      </tr>
      <tr>
        <td id="L11244" class="blob-num js-line-number" data-line-number="11244"></td>
        <td id="LC11244" class="blob-code blob-code-inner js-file-line">                    std::stringstream sstr{<span class="pl-c1">std::string</span>(&amp;data[offset], <span class="pl-c1">4</span>)};</td>
      </tr>
      <tr>
        <td id="L11245" class="blob-num js-line-number" data-line-number="11245"></td>
        <td id="LC11245" class="blob-code blob-code-inner js-file-line">                    <span class="pl-c"><span class="pl-c">//</span> clang-format off</span></td>
      </tr>
      <tr>
        <td id="L11246" class="blob-num js-line-number" data-line-number="11246"></td>
        <td id="LC11246" class="blob-code blob-code-inner js-file-line">                    sstr.<span class="pl-c1">read</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">char</span> *&gt;(&amp;sequenceNumber), <span class="pl-k">sizeof</span>(<span class="pl-c1">uint32_t</span>)); <span class="pl-c"><span class="pl-c">/*</span> Flawfinder: ignore <span class="pl-c">*/</span></span> <span class="pl-c"><span class="pl-c">//</span> NOLINT</span></td>
      </tr>
      <tr>
        <td id="L11247" class="blob-num js-line-number" data-line-number="11247"></td>
        <td id="LC11247" class="blob-code blob-code-inner js-file-line">                    <span class="pl-c"><span class="pl-c">//</span> clang-format on</span></td>
      </tr>
      <tr>
        <td id="L11248" class="blob-num js-line-number" data-line-number="11248"></td>
        <td id="LC11248" class="blob-code blob-code-inner js-file-line">                    sequenceNumber = <span class="pl-c1">be32toh</span>(sequenceNumber);</td>
      </tr>
      <tr>
        <td id="L11249" class="blob-num js-line-number" data-line-number="11249"></td>
        <td id="LC11249" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L11250" class="blob-num js-line-number" data-line-number="11250"></td>
        <td id="LC11250" class="blob-code blob-code-inner js-file-line">                <span class="pl-c"><span class="pl-c">//</span> Only support for non-fragmented messages.</span></td>
      </tr>
      <tr>
        <td id="L11251" class="blob-num js-line-number" data-line-number="11251"></td>
        <td id="LC11251" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">if</span> (<span class="pl-c1">0</span> == sequenceNumber) {</td>
      </tr>
      <tr>
        <td id="L11252" class="blob-num js-line-number" data-line-number="11252"></td>
        <td id="LC11252" class="blob-code blob-code-inner js-file-line">                    offset += <span class="pl-c1">4</span>;</td>
      </tr>
      <tr>
        <td id="L11253" class="blob-num js-line-number" data-line-number="11253"></td>
        <td id="LC11253" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11254" class="blob-num js-line-number" data-line-number="11254"></td>
        <td id="LC11254" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">const</span> std::string::size_type START_POSITION = offset;</td>
      </tr>
      <tr>
        <td id="L11255" class="blob-num js-line-number" data-line-number="11255"></td>
        <td id="LC11255" class="blob-code blob-code-inner js-file-line">                    std::string::size_type pos                  = data.<span class="pl-c1">find</span>(<span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\0</span><span class="pl-pds">&#39;</span></span>, START_POSITION); <span class="pl-c"><span class="pl-c">//</span> Extract channel name.</span></td>
      </tr>
      <tr>
        <td id="L11256" class="blob-num js-line-number" data-line-number="11256"></td>
        <td id="LC11256" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">if</span> (std::string::npos != pos) {</td>
      </tr>
      <tr>
        <td id="L11257" class="blob-num js-line-number" data-line-number="11257"></td>
        <td id="LC11257" class="blob-code blob-code-inner js-file-line">                        <span class="pl-k">const</span> std::string <span class="pl-smi">CHANNEL_NAME</span>(data.<span class="pl-c1">substr</span>(START_POSITION, (pos - START_POSITION)));</td>
      </tr>
      <tr>
        <td id="L11258" class="blob-num js-line-number" data-line-number="11258"></td>
        <td id="LC11258" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11259" class="blob-num js-line-number" data-line-number="11259"></td>
        <td id="LC11259" class="blob-code blob-code-inner js-file-line">                        <span class="pl-c"><span class="pl-c">//</span> Next, find the MetaMessage corresponding to the channel name</span></td>
      </tr>
      <tr>
        <td id="L11260" class="blob-num js-line-number" data-line-number="11260"></td>
        <td id="LC11260" class="blob-code blob-code-inner js-file-line">                        <span class="pl-c"><span class="pl-c">//</span> and create a Message therefrom based on the decoded LCM data.</span></td>
      </tr>
      <tr>
        <td id="L11261" class="blob-num js-line-number" data-line-number="11261"></td>
        <td id="LC11261" class="blob-code blob-code-inner js-file-line">                        <span class="pl-k">if</span> ((<span class="pl-c1">0</span> &lt; m_scopeOfMetaMessages.<span class="pl-c1">count</span>(CHANNEL_NAME)) &amp;&amp; (std::string::npos != (pos + <span class="pl-c1">1</span>))) {</td>
      </tr>
      <tr>
        <td id="L11262" class="blob-num js-line-number" data-line-number="11262"></td>
        <td id="LC11262" class="blob-code blob-code-inner js-file-line">                            <span class="pl-c"><span class="pl-c">//</span> data[offset+i] marks now the beginning of the payload to be decoded.</span></td>
      </tr>
      <tr>
        <td id="L11263" class="blob-num js-line-number" data-line-number="11263"></td>
        <td id="LC11263" class="blob-code blob-code-inner js-file-line">                            std::stringstream sstr{data.<span class="pl-c1">substr</span>(pos + <span class="pl-c1">1</span>)};</td>
      </tr>
      <tr>
        <td id="L11264" class="blob-num js-line-number" data-line-number="11264"></td>
        <td id="LC11264" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11265" class="blob-num js-line-number" data-line-number="11265"></td>
        <td id="LC11265" class="blob-code blob-code-inner js-file-line">                            cluon::FromLCMVisitor fromLCM;</td>
      </tr>
      <tr>
        <td id="L11266" class="blob-num js-line-number" data-line-number="11266"></td>
        <td id="LC11266" class="blob-code blob-code-inner js-file-line">                            fromLCM.<span class="pl-c1">decodeFrom</span>(sstr);</td>
      </tr>
      <tr>
        <td id="L11267" class="blob-num js-line-number" data-line-number="11267"></td>
        <td id="LC11267" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11268" class="blob-num js-line-number" data-line-number="11268"></td>
        <td id="LC11268" class="blob-code blob-code-inner js-file-line">                            gm.<span class="pl-c1">createFrom</span>(m_scopeOfMetaMessages[CHANNEL_NAME], m_listOfMetaMessages);</td>
      </tr>
      <tr>
        <td id="L11269" class="blob-num js-line-number" data-line-number="11269"></td>
        <td id="LC11269" class="blob-code blob-code-inner js-file-line">                            gm.<span class="pl-c1">accept</span>(fromLCM);</td>
      </tr>
      <tr>
        <td id="L11270" class="blob-num js-line-number" data-line-number="11270"></td>
        <td id="LC11270" class="blob-code blob-code-inner js-file-line">                        }</td>
      </tr>
      <tr>
        <td id="L11271" class="blob-num js-line-number" data-line-number="11271"></td>
        <td id="LC11271" class="blob-code blob-code-inner js-file-line">                    }</td>
      </tr>
      <tr>
        <td id="L11272" class="blob-num js-line-number" data-line-number="11272"></td>
        <td id="LC11272" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L11273" class="blob-num js-line-number" data-line-number="11273"></td>
        <td id="LC11273" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L11274" class="blob-num js-line-number" data-line-number="11274"></td>
        <td id="LC11274" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L11275" class="blob-num js-line-number" data-line-number="11275"></td>
        <td id="LC11275" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L11276" class="blob-num js-line-number" data-line-number="11276"></td>
        <td id="LC11276" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11277" class="blob-num js-line-number" data-line-number="11277"></td>
        <td id="LC11277" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> gm;</td>
      </tr>
      <tr>
        <td id="L11278" class="blob-num js-line-number" data-line-number="11278"></td>
        <td id="LC11278" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L11279" class="blob-num js-line-number" data-line-number="11279"></td>
        <td id="LC11279" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11280" class="blob-num js-line-number" data-line-number="11280"></td>
        <td id="LC11280" class="blob-code blob-code-inner js-file-line">} <span class="pl-c"><span class="pl-c">//</span> namespace cluon</span></td>
      </tr>
      <tr>
        <td id="L11281" class="blob-num js-line-number" data-line-number="11281"></td>
        <td id="LC11281" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L11282" class="blob-num js-line-number" data-line-number="11282"></td>
        <td id="LC11282" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Copyright (C) 2017-2018  Christian Berger</span></td>
      </tr>
      <tr>
        <td id="L11283" class="blob-num js-line-number" data-line-number="11283"></td>
        <td id="LC11283" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L11284" class="blob-num js-line-number" data-line-number="11284"></td>
        <td id="LC11284" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is free software: you can redistribute it and/or modify</span></td>
      </tr>
      <tr>
        <td id="L11285" class="blob-num js-line-number" data-line-number="11285"></td>
        <td id="LC11285" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * it under the terms of the GNU General Public License as published by</span></td>
      </tr>
      <tr>
        <td id="L11286" class="blob-num js-line-number" data-line-number="11286"></td>
        <td id="LC11286" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * the Free Software Foundation, either version 3 of the License, or</span></td>
      </tr>
      <tr>
        <td id="L11287" class="blob-num js-line-number" data-line-number="11287"></td>
        <td id="LC11287" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * (at your option) any later version.</span></td>
      </tr>
      <tr>
        <td id="L11288" class="blob-num js-line-number" data-line-number="11288"></td>
        <td id="LC11288" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L11289" class="blob-num js-line-number" data-line-number="11289"></td>
        <td id="LC11289" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is distributed in the hope that it will be useful,</span></td>
      </tr>
      <tr>
        <td id="L11290" class="blob-num js-line-number" data-line-number="11290"></td>
        <td id="LC11290" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></td>
      </tr>
      <tr>
        <td id="L11291" class="blob-num js-line-number" data-line-number="11291"></td>
        <td id="LC11291" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></td>
      </tr>
      <tr>
        <td id="L11292" class="blob-num js-line-number" data-line-number="11292"></td>
        <td id="LC11292" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * GNU General Public License for more details.</span></td>
      </tr>
      <tr>
        <td id="L11293" class="blob-num js-line-number" data-line-number="11293"></td>
        <td id="LC11293" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L11294" class="blob-num js-line-number" data-line-number="11294"></td>
        <td id="LC11294" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * You should have received a copy of the GNU General Public License</span></td>
      </tr>
      <tr>
        <td id="L11295" class="blob-num js-line-number" data-line-number="11295"></td>
        <td id="LC11295" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></td>
      </tr>
      <tr>
        <td id="L11296" class="blob-num js-line-number" data-line-number="11296"></td>
        <td id="LC11296" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L11297" class="blob-num js-line-number" data-line-number="11297"></td>
        <td id="LC11297" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11298" class="blob-num js-line-number" data-line-number="11298"></td>
        <td id="LC11298" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> clang-format off</span></td>
      </tr>
      <tr>
        <td id="L11299" class="blob-num js-line-number" data-line-number="11299"></td>
        <td id="LC11299" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifdef</span> WIN32</td>
      </tr>
      <tr>
        <td id="L11300" class="blob-num js-line-number" data-line-number="11300"></td>
        <td id="LC11300" class="blob-code blob-code-inner js-file-line">    #<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>Winsock2.h<span class="pl-pds">&gt;</span></span> <span class="pl-c"><span class="pl-c">//</span> for htonl, htons</span></td>
      </tr>
      <tr>
        <td id="L11301" class="blob-num js-line-number" data-line-number="11301"></td>
        <td id="LC11301" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L11302" class="blob-num js-line-number" data-line-number="11302"></td>
        <td id="LC11302" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span> clang-format on</span></td>
      </tr>
      <tr>
        <td id="L11303" class="blob-num js-line-number" data-line-number="11303"></td>
        <td id="LC11303" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11304" class="blob-num js-line-number" data-line-number="11304"></td>
        <td id="LC11304" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/ToMsgPackVisitor.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L11305" class="blob-num js-line-number" data-line-number="11305"></td>
        <td id="LC11305" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11306" class="blob-num js-line-number" data-line-number="11306"></td>
        <td id="LC11306" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>cstring<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L11307" class="blob-num js-line-number" data-line-number="11307"></td>
        <td id="LC11307" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>limits<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L11308" class="blob-num js-line-number" data-line-number="11308"></td>
        <td id="LC11308" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11309" class="blob-num js-line-number" data-line-number="11309"></td>
        <td id="LC11309" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">cluon</span> {</td>
      </tr>
      <tr>
        <td id="L11310" class="blob-num js-line-number" data-line-number="11310"></td>
        <td id="LC11310" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11311" class="blob-num js-line-number" data-line-number="11311"></td>
        <td id="LC11311" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::string <span class="pl-en">ToMsgPackVisitor::encodedData</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L11312" class="blob-num js-line-number" data-line-number="11312"></td>
        <td id="LC11312" class="blob-code blob-code-inner js-file-line">    std::stringstream prefix;</td>
      </tr>
      <tr>
        <td id="L11313" class="blob-num js-line-number" data-line-number="11313"></td>
        <td id="LC11313" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (m_numberOfFields &lt;= <span class="pl-c1">0xF</span>) {</td>
      </tr>
      <tr>
        <td id="L11314" class="blob-num js-line-number" data-line-number="11314"></td>
        <td id="LC11314" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> <span class="pl-c1">uint8_t</span> pairs = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(MsgPackConstants::FIXMAP) | <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(m_numberOfFields);</td>
      </tr>
      <tr>
        <td id="L11315" class="blob-num js-line-number" data-line-number="11315"></td>
        <td id="LC11315" class="blob-code blob-code-inner js-file-line">        prefix.<span class="pl-c1">write</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">const</span> <span class="pl-k">char</span> *&gt;(&amp;pairs), <span class="pl-k">sizeof</span>(<span class="pl-c1">uint8_t</span>));</td>
      </tr>
      <tr>
        <td id="L11316" class="blob-num js-line-number" data-line-number="11316"></td>
        <td id="LC11316" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">else</span> <span class="pl-k">if</span> ((m_numberOfFields &gt; <span class="pl-c1">0xF</span>) &amp;&amp; (m_numberOfFields &lt;= <span class="pl-c1">0xFFFF</span>)) {</td>
      </tr>
      <tr>
        <td id="L11317" class="blob-num js-line-number" data-line-number="11317"></td>
        <td id="LC11317" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> <span class="pl-c1">uint8_t</span> pairs = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(MsgPackConstants::MAP16);</td>
      </tr>
      <tr>
        <td id="L11318" class="blob-num js-line-number" data-line-number="11318"></td>
        <td id="LC11318" class="blob-code blob-code-inner js-file-line">        prefix.<span class="pl-c1">write</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">const</span> <span class="pl-k">char</span> *&gt;(&amp;pairs), <span class="pl-k">sizeof</span>(<span class="pl-c1">uint8_t</span>));</td>
      </tr>
      <tr>
        <td id="L11319" class="blob-num js-line-number" data-line-number="11319"></td>
        <td id="LC11319" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">uint16_t</span> n = <span class="pl-c1">htobe16</span>(<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint16_t</span>&gt;(m_numberOfFields));</td>
      </tr>
      <tr>
        <td id="L11320" class="blob-num js-line-number" data-line-number="11320"></td>
        <td id="LC11320" class="blob-code blob-code-inner js-file-line">        prefix.<span class="pl-c1">write</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">const</span> <span class="pl-k">char</span> *&gt;(&amp;n), <span class="pl-k">sizeof</span>(<span class="pl-c1">uint16_t</span>));</td>
      </tr>
      <tr>
        <td id="L11321" class="blob-num js-line-number" data-line-number="11321"></td>
        <td id="LC11321" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">else</span> <span class="pl-k">if</span> (m_numberOfFields &gt; <span class="pl-c1">0xFFFF</span>) {                                    <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L11322" class="blob-num js-line-number" data-line-number="11322"></td>
        <td id="LC11322" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> <span class="pl-c1">uint8_t</span> pairs = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(MsgPackConstants::MAP32);   <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L11323" class="blob-num js-line-number" data-line-number="11323"></td>
        <td id="LC11323" class="blob-code blob-code-inner js-file-line">        prefix.<span class="pl-c1">write</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">const</span> <span class="pl-k">char</span> *&gt;(&amp;pairs), <span class="pl-k">sizeof</span>(<span class="pl-c1">uint8_t</span>)); <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L11324" class="blob-num js-line-number" data-line-number="11324"></td>
        <td id="LC11324" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">uint32_t</span> n = <span class="pl-c1">htobe32</span>(<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint32_t</span>&gt;(m_numberOfFields));         <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L11325" class="blob-num js-line-number" data-line-number="11325"></td>
        <td id="LC11325" class="blob-code blob-code-inner js-file-line">        prefix.<span class="pl-c1">write</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">const</span> <span class="pl-k">char</span> *&gt;(&amp;n), <span class="pl-k">sizeof</span>(<span class="pl-c1">uint32_t</span>));    <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L11326" class="blob-num js-line-number" data-line-number="11326"></td>
        <td id="LC11326" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L11327" class="blob-num js-line-number" data-line-number="11327"></td>
        <td id="LC11327" class="blob-code blob-code-inner js-file-line">    std::string s{prefix.<span class="pl-c1">str</span>() + m_buffer.<span class="pl-c1">str</span>()};</td>
      </tr>
      <tr>
        <td id="L11328" class="blob-num js-line-number" data-line-number="11328"></td>
        <td id="LC11328" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> s;</td>
      </tr>
      <tr>
        <td id="L11329" class="blob-num js-line-number" data-line-number="11329"></td>
        <td id="LC11329" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L11330" class="blob-num js-line-number" data-line-number="11330"></td>
        <td id="LC11330" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11331" class="blob-num js-line-number" data-line-number="11331"></td>
        <td id="LC11331" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToMsgPackVisitor::encode</span>(std::ostream &amp;o, <span class="pl-k">const</span> std::string &amp;s) {</td>
      </tr>
      <tr>
        <td id="L11332" class="blob-num js-line-number" data-line-number="11332"></td>
        <td id="LC11332" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> <span class="pl-c1">uint32_t</span> LENGTH{<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint32_t</span>&gt;(s.<span class="pl-c1">size</span>())};</td>
      </tr>
      <tr>
        <td id="L11333" class="blob-num js-line-number" data-line-number="11333"></td>
        <td id="LC11333" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (LENGTH &lt; <span class="pl-c1">32</span>) {</td>
      </tr>
      <tr>
        <td id="L11334" class="blob-num js-line-number" data-line-number="11334"></td>
        <td id="LC11334" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> <span class="pl-c1">uint8_t</span> v = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(MsgPackConstants::FIXSTR) | <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(LENGTH);</td>
      </tr>
      <tr>
        <td id="L11335" class="blob-num js-line-number" data-line-number="11335"></td>
        <td id="LC11335" class="blob-code blob-code-inner js-file-line">        o.<span class="pl-c1">write</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">const</span> <span class="pl-k">char</span> *&gt;(&amp;v), <span class="pl-k">sizeof</span>(<span class="pl-c1">uint8_t</span>));</td>
      </tr>
      <tr>
        <td id="L11336" class="blob-num js-line-number" data-line-number="11336"></td>
        <td id="LC11336" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">else</span> <span class="pl-k">if</span> (LENGTH &lt;= <span class="pl-c1">0xFF</span>) {</td>
      </tr>
      <tr>
        <td id="L11337" class="blob-num js-line-number" data-line-number="11337"></td>
        <td id="LC11337" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> <span class="pl-c1">uint8_t</span> v = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(MsgPackConstants::STR8);</td>
      </tr>
      <tr>
        <td id="L11338" class="blob-num js-line-number" data-line-number="11338"></td>
        <td id="LC11338" class="blob-code blob-code-inner js-file-line">        o.<span class="pl-c1">write</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">const</span> <span class="pl-k">char</span> *&gt;(&amp;v), <span class="pl-k">sizeof</span>(<span class="pl-c1">uint8_t</span>));</td>
      </tr>
      <tr>
        <td id="L11339" class="blob-num js-line-number" data-line-number="11339"></td>
        <td id="LC11339" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">uint8_t</span> l = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(LENGTH);</td>
      </tr>
      <tr>
        <td id="L11340" class="blob-num js-line-number" data-line-number="11340"></td>
        <td id="LC11340" class="blob-code blob-code-inner js-file-line">        o.<span class="pl-c1">write</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">const</span> <span class="pl-k">char</span> *&gt;(&amp;l), <span class="pl-k">sizeof</span>(<span class="pl-c1">uint8_t</span>));</td>
      </tr>
      <tr>
        <td id="L11341" class="blob-num js-line-number" data-line-number="11341"></td>
        <td id="LC11341" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">else</span> <span class="pl-k">if</span> (LENGTH &lt;= <span class="pl-c1">0xFFFF</span>) {</td>
      </tr>
      <tr>
        <td id="L11342" class="blob-num js-line-number" data-line-number="11342"></td>
        <td id="LC11342" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> <span class="pl-c1">uint8_t</span> v = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(MsgPackConstants::STR16);</td>
      </tr>
      <tr>
        <td id="L11343" class="blob-num js-line-number" data-line-number="11343"></td>
        <td id="LC11343" class="blob-code blob-code-inner js-file-line">        o.<span class="pl-c1">write</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">const</span> <span class="pl-k">char</span> *&gt;(&amp;v), <span class="pl-k">sizeof</span>(<span class="pl-c1">uint8_t</span>));</td>
      </tr>
      <tr>
        <td id="L11344" class="blob-num js-line-number" data-line-number="11344"></td>
        <td id="LC11344" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">uint16_t</span> l = <span class="pl-c1">htobe16</span>(<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint16_t</span>&gt;(LENGTH));</td>
      </tr>
      <tr>
        <td id="L11345" class="blob-num js-line-number" data-line-number="11345"></td>
        <td id="LC11345" class="blob-code blob-code-inner js-file-line">        o.<span class="pl-c1">write</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">const</span> <span class="pl-k">char</span> *&gt;(&amp;l), <span class="pl-k">sizeof</span>(<span class="pl-c1">uint16_t</span>));</td>
      </tr>
      <tr>
        <td id="L11346" class="blob-num js-line-number" data-line-number="11346"></td>
        <td id="LC11346" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L11347" class="blob-num js-line-number" data-line-number="11347"></td>
        <td id="LC11347" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> <span class="pl-c1">uint8_t</span> v = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(MsgPackConstants::STR32);</td>
      </tr>
      <tr>
        <td id="L11348" class="blob-num js-line-number" data-line-number="11348"></td>
        <td id="LC11348" class="blob-code blob-code-inner js-file-line">        o.<span class="pl-c1">write</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">const</span> <span class="pl-k">char</span> *&gt;(&amp;v), <span class="pl-k">sizeof</span>(<span class="pl-c1">uint8_t</span>));</td>
      </tr>
      <tr>
        <td id="L11349" class="blob-num js-line-number" data-line-number="11349"></td>
        <td id="LC11349" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">uint32_t</span> l = <span class="pl-c1">htobe32</span>(LENGTH);</td>
      </tr>
      <tr>
        <td id="L11350" class="blob-num js-line-number" data-line-number="11350"></td>
        <td id="LC11350" class="blob-code blob-code-inner js-file-line">        o.<span class="pl-c1">write</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">const</span> <span class="pl-k">char</span> *&gt;(&amp;l), <span class="pl-k">sizeof</span>(<span class="pl-c1">uint32_t</span>));</td>
      </tr>
      <tr>
        <td id="L11351" class="blob-num js-line-number" data-line-number="11351"></td>
        <td id="LC11351" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L11352" class="blob-num js-line-number" data-line-number="11352"></td>
        <td id="LC11352" class="blob-code blob-code-inner js-file-line">    o.<span class="pl-c1">write</span>(s.<span class="pl-c1">c_str</span>(), <span class="pl-k">static_cast</span>&lt;std::streamsize&gt;(LENGTH)); <span class="pl-c"><span class="pl-c">//</span> LENGTH won&#39;t be negative.</span></td>
      </tr>
      <tr>
        <td id="L11353" class="blob-num js-line-number" data-line-number="11353"></td>
        <td id="LC11353" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L11354" class="blob-num js-line-number" data-line-number="11354"></td>
        <td id="LC11354" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11355" class="blob-num js-line-number" data-line-number="11355"></td>
        <td id="LC11355" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToMsgPackVisitor::encodeUint</span>(std::ostream &amp;o, <span class="pl-c1">uint64_t</span> v) {</td>
      </tr>
      <tr>
        <td id="L11356" class="blob-num js-line-number" data-line-number="11356"></td>
        <td id="LC11356" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-c1">0x7f</span> &gt;= v) {</td>
      </tr>
      <tr>
        <td id="L11357" class="blob-num js-line-number" data-line-number="11357"></td>
        <td id="LC11357" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> <span class="pl-c1">uint8_t</span> _v = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(v);</td>
      </tr>
      <tr>
        <td id="L11358" class="blob-num js-line-number" data-line-number="11358"></td>
        <td id="LC11358" class="blob-code blob-code-inner js-file-line">        o.<span class="pl-c1">write</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">const</span> <span class="pl-k">char</span> *&gt;(&amp;_v), <span class="pl-k">sizeof</span>(<span class="pl-c1">uint8_t</span>));</td>
      </tr>
      <tr>
        <td id="L11359" class="blob-num js-line-number" data-line-number="11359"></td>
        <td id="LC11359" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-c1">0xFF</span> &gt;= v) {</td>
      </tr>
      <tr>
        <td id="L11360" class="blob-num js-line-number" data-line-number="11360"></td>
        <td id="LC11360" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> <span class="pl-c1">uint8_t</span> t = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(MsgPackConstants::UINT8);</td>
      </tr>
      <tr>
        <td id="L11361" class="blob-num js-line-number" data-line-number="11361"></td>
        <td id="LC11361" class="blob-code blob-code-inner js-file-line">        o.<span class="pl-c1">write</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">const</span> <span class="pl-k">char</span> *&gt;(&amp;t), <span class="pl-k">sizeof</span>(<span class="pl-c1">uint8_t</span>));</td>
      </tr>
      <tr>
        <td id="L11362" class="blob-num js-line-number" data-line-number="11362"></td>
        <td id="LC11362" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> <span class="pl-c1">uint8_t</span> _v = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(v);</td>
      </tr>
      <tr>
        <td id="L11363" class="blob-num js-line-number" data-line-number="11363"></td>
        <td id="LC11363" class="blob-code blob-code-inner js-file-line">        o.<span class="pl-c1">write</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">const</span> <span class="pl-k">char</span> *&gt;(&amp;_v), <span class="pl-k">sizeof</span>(<span class="pl-c1">uint8_t</span>));</td>
      </tr>
      <tr>
        <td id="L11364" class="blob-num js-line-number" data-line-number="11364"></td>
        <td id="LC11364" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-c1">0xFFFF</span> &gt;= v) {</td>
      </tr>
      <tr>
        <td id="L11365" class="blob-num js-line-number" data-line-number="11365"></td>
        <td id="LC11365" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> <span class="pl-c1">uint8_t</span> t = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(MsgPackConstants::UINT16);</td>
      </tr>
      <tr>
        <td id="L11366" class="blob-num js-line-number" data-line-number="11366"></td>
        <td id="LC11366" class="blob-code blob-code-inner js-file-line">        o.<span class="pl-c1">write</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">const</span> <span class="pl-k">char</span> *&gt;(&amp;t), <span class="pl-k">sizeof</span>(<span class="pl-c1">uint8_t</span>));</td>
      </tr>
      <tr>
        <td id="L11367" class="blob-num js-line-number" data-line-number="11367"></td>
        <td id="LC11367" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">uint16_t</span> _v = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint16_t</span>&gt;(v);</td>
      </tr>
      <tr>
        <td id="L11368" class="blob-num js-line-number" data-line-number="11368"></td>
        <td id="LC11368" class="blob-code blob-code-inner js-file-line">        _v          = <span class="pl-c1">htobe16</span>(_v);</td>
      </tr>
      <tr>
        <td id="L11369" class="blob-num js-line-number" data-line-number="11369"></td>
        <td id="LC11369" class="blob-code blob-code-inner js-file-line">        o.<span class="pl-c1">write</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">const</span> <span class="pl-k">char</span> *&gt;(&amp;_v), <span class="pl-k">sizeof</span>(<span class="pl-c1">uint16_t</span>));</td>
      </tr>
      <tr>
        <td id="L11370" class="blob-num js-line-number" data-line-number="11370"></td>
        <td id="LC11370" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">else</span> <span class="pl-k">if</span> (<span class="pl-c1">0xFFFFFFFF</span> &gt;= v) {</td>
      </tr>
      <tr>
        <td id="L11371" class="blob-num js-line-number" data-line-number="11371"></td>
        <td id="LC11371" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> <span class="pl-c1">uint8_t</span> t = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(MsgPackConstants::UINT32);</td>
      </tr>
      <tr>
        <td id="L11372" class="blob-num js-line-number" data-line-number="11372"></td>
        <td id="LC11372" class="blob-code blob-code-inner js-file-line">        o.<span class="pl-c1">write</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">const</span> <span class="pl-k">char</span> *&gt;(&amp;t), <span class="pl-k">sizeof</span>(<span class="pl-c1">uint8_t</span>));</td>
      </tr>
      <tr>
        <td id="L11373" class="blob-num js-line-number" data-line-number="11373"></td>
        <td id="LC11373" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">uint32_t</span> _v = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint32_t</span>&gt;(v);</td>
      </tr>
      <tr>
        <td id="L11374" class="blob-num js-line-number" data-line-number="11374"></td>
        <td id="LC11374" class="blob-code blob-code-inner js-file-line">        _v          = <span class="pl-c1">htobe32</span>(_v);</td>
      </tr>
      <tr>
        <td id="L11375" class="blob-num js-line-number" data-line-number="11375"></td>
        <td id="LC11375" class="blob-code blob-code-inner js-file-line">        o.<span class="pl-c1">write</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">const</span> <span class="pl-k">char</span> *&gt;(&amp;_v), <span class="pl-k">sizeof</span>(<span class="pl-c1">uint32_t</span>));</td>
      </tr>
      <tr>
        <td id="L11376" class="blob-num js-line-number" data-line-number="11376"></td>
        <td id="LC11376" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L11377" class="blob-num js-line-number" data-line-number="11377"></td>
        <td id="LC11377" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> <span class="pl-c1">uint8_t</span> t = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(MsgPackConstants::UINT64);</td>
      </tr>
      <tr>
        <td id="L11378" class="blob-num js-line-number" data-line-number="11378"></td>
        <td id="LC11378" class="blob-code blob-code-inner js-file-line">        o.<span class="pl-c1">write</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">const</span> <span class="pl-k">char</span> *&gt;(&amp;t), <span class="pl-k">sizeof</span>(<span class="pl-c1">uint8_t</span>));</td>
      </tr>
      <tr>
        <td id="L11379" class="blob-num js-line-number" data-line-number="11379"></td>
        <td id="LC11379" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">uint64_t</span> _v = v;</td>
      </tr>
      <tr>
        <td id="L11380" class="blob-num js-line-number" data-line-number="11380"></td>
        <td id="LC11380" class="blob-code blob-code-inner js-file-line">        _v          = <span class="pl-c1">htobe64</span>(_v);</td>
      </tr>
      <tr>
        <td id="L11381" class="blob-num js-line-number" data-line-number="11381"></td>
        <td id="LC11381" class="blob-code blob-code-inner js-file-line">        o.<span class="pl-c1">write</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">const</span> <span class="pl-k">char</span> *&gt;(&amp;_v), <span class="pl-k">sizeof</span>(<span class="pl-c1">uint64_t</span>));</td>
      </tr>
      <tr>
        <td id="L11382" class="blob-num js-line-number" data-line-number="11382"></td>
        <td id="LC11382" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L11383" class="blob-num js-line-number" data-line-number="11383"></td>
        <td id="LC11383" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L11384" class="blob-num js-line-number" data-line-number="11384"></td>
        <td id="LC11384" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11385" class="blob-num js-line-number" data-line-number="11385"></td>
        <td id="LC11385" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToMsgPackVisitor::encodeInt</span>(std::ostream &amp;o, <span class="pl-c1">int64_t</span> v) {</td>
      </tr>
      <tr>
        <td id="L11386" class="blob-num js-line-number" data-line-number="11386"></td>
        <td id="LC11386" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (-<span class="pl-c1">31</span> &lt;= v) {</td>
      </tr>
      <tr>
        <td id="L11387" class="blob-num js-line-number" data-line-number="11387"></td>
        <td id="LC11387" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">int8_t</span> _v = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int8_t</span>&gt;(v);</td>
      </tr>
      <tr>
        <td id="L11388" class="blob-num js-line-number" data-line-number="11388"></td>
        <td id="LC11388" class="blob-code blob-code-inner js-file-line">        o.<span class="pl-c1">write</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">const</span> <span class="pl-k">char</span> *&gt;(&amp;_v), <span class="pl-k">sizeof</span>(<span class="pl-c1">int8_t</span>));</td>
      </tr>
      <tr>
        <td id="L11389" class="blob-num js-line-number" data-line-number="11389"></td>
        <td id="LC11389" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">else</span> <span class="pl-k">if</span> (std::numeric_limits&lt;<span class="pl-c1">int8_t</span>&gt;::<span class="pl-c1">lowest</span>() &lt;= v) {</td>
      </tr>
      <tr>
        <td id="L11390" class="blob-num js-line-number" data-line-number="11390"></td>
        <td id="LC11390" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> <span class="pl-c1">uint8_t</span> t = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(MsgPackConstants::INT8);</td>
      </tr>
      <tr>
        <td id="L11391" class="blob-num js-line-number" data-line-number="11391"></td>
        <td id="LC11391" class="blob-code blob-code-inner js-file-line">        o.<span class="pl-c1">write</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">const</span> <span class="pl-k">char</span> *&gt;(&amp;t), <span class="pl-k">sizeof</span>(<span class="pl-c1">uint8_t</span>));</td>
      </tr>
      <tr>
        <td id="L11392" class="blob-num js-line-number" data-line-number="11392"></td>
        <td id="LC11392" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">int8_t</span> _v = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int8_t</span>&gt;(v);</td>
      </tr>
      <tr>
        <td id="L11393" class="blob-num js-line-number" data-line-number="11393"></td>
        <td id="LC11393" class="blob-code blob-code-inner js-file-line">        o.<span class="pl-c1">write</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">const</span> <span class="pl-k">char</span> *&gt;(&amp;_v), <span class="pl-k">sizeof</span>(<span class="pl-c1">int8_t</span>));</td>
      </tr>
      <tr>
        <td id="L11394" class="blob-num js-line-number" data-line-number="11394"></td>
        <td id="LC11394" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">else</span> <span class="pl-k">if</span> (std::numeric_limits&lt;<span class="pl-c1">int16_t</span>&gt;::<span class="pl-c1">lowest</span>() &lt;= v) {</td>
      </tr>
      <tr>
        <td id="L11395" class="blob-num js-line-number" data-line-number="11395"></td>
        <td id="LC11395" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> <span class="pl-c1">uint8_t</span> t = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(MsgPackConstants::INT16);</td>
      </tr>
      <tr>
        <td id="L11396" class="blob-num js-line-number" data-line-number="11396"></td>
        <td id="LC11396" class="blob-code blob-code-inner js-file-line">        o.<span class="pl-c1">write</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">const</span> <span class="pl-k">char</span> *&gt;(&amp;t), <span class="pl-k">sizeof</span>(<span class="pl-c1">uint8_t</span>));</td>
      </tr>
      <tr>
        <td id="L11397" class="blob-num js-line-number" data-line-number="11397"></td>
        <td id="LC11397" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">int16_t</span> _v = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int16_t</span>&gt;(v);</td>
      </tr>
      <tr>
        <td id="L11398" class="blob-num js-line-number" data-line-number="11398"></td>
        <td id="LC11398" class="blob-code blob-code-inner js-file-line">        _v         = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int16_t</span>&gt;(<span class="pl-c1">htobe16</span>(_v));</td>
      </tr>
      <tr>
        <td id="L11399" class="blob-num js-line-number" data-line-number="11399"></td>
        <td id="LC11399" class="blob-code blob-code-inner js-file-line">        o.<span class="pl-c1">write</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">const</span> <span class="pl-k">char</span> *&gt;(&amp;_v), <span class="pl-k">sizeof</span>(<span class="pl-c1">int16_t</span>));</td>
      </tr>
      <tr>
        <td id="L11400" class="blob-num js-line-number" data-line-number="11400"></td>
        <td id="LC11400" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">else</span> <span class="pl-k">if</span> (std::numeric_limits&lt;<span class="pl-c1">int32_t</span>&gt;::<span class="pl-c1">lowest</span>() &lt;= v) {</td>
      </tr>
      <tr>
        <td id="L11401" class="blob-num js-line-number" data-line-number="11401"></td>
        <td id="LC11401" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> <span class="pl-c1">uint8_t</span> t = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(MsgPackConstants::INT32);</td>
      </tr>
      <tr>
        <td id="L11402" class="blob-num js-line-number" data-line-number="11402"></td>
        <td id="LC11402" class="blob-code blob-code-inner js-file-line">        o.<span class="pl-c1">write</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">const</span> <span class="pl-k">char</span> *&gt;(&amp;t), <span class="pl-k">sizeof</span>(<span class="pl-c1">uint8_t</span>));</td>
      </tr>
      <tr>
        <td id="L11403" class="blob-num js-line-number" data-line-number="11403"></td>
        <td id="LC11403" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">int32_t</span> _v = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int32_t</span>&gt;(v);</td>
      </tr>
      <tr>
        <td id="L11404" class="blob-num js-line-number" data-line-number="11404"></td>
        <td id="LC11404" class="blob-code blob-code-inner js-file-line">        _v         = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int32_t</span>&gt;(<span class="pl-c1">htobe32</span>(_v));</td>
      </tr>
      <tr>
        <td id="L11405" class="blob-num js-line-number" data-line-number="11405"></td>
        <td id="LC11405" class="blob-code blob-code-inner js-file-line">        o.<span class="pl-c1">write</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">const</span> <span class="pl-k">char</span> *&gt;(&amp;_v), <span class="pl-k">sizeof</span>(<span class="pl-c1">int32_t</span>));</td>
      </tr>
      <tr>
        <td id="L11406" class="blob-num js-line-number" data-line-number="11406"></td>
        <td id="LC11406" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L11407" class="blob-num js-line-number" data-line-number="11407"></td>
        <td id="LC11407" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> <span class="pl-c1">uint8_t</span> t = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(MsgPackConstants::INT64);</td>
      </tr>
      <tr>
        <td id="L11408" class="blob-num js-line-number" data-line-number="11408"></td>
        <td id="LC11408" class="blob-code blob-code-inner js-file-line">        o.<span class="pl-c1">write</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">const</span> <span class="pl-k">char</span> *&gt;(&amp;t), <span class="pl-k">sizeof</span>(<span class="pl-c1">uint8_t</span>));</td>
      </tr>
      <tr>
        <td id="L11409" class="blob-num js-line-number" data-line-number="11409"></td>
        <td id="LC11409" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">int64_t</span> _v = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int64_t</span>&gt;(v);</td>
      </tr>
      <tr>
        <td id="L11410" class="blob-num js-line-number" data-line-number="11410"></td>
        <td id="LC11410" class="blob-code blob-code-inner js-file-line">        _v         = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int64_t</span>&gt;(<span class="pl-c1">htobe64</span>(_v));</td>
      </tr>
      <tr>
        <td id="L11411" class="blob-num js-line-number" data-line-number="11411"></td>
        <td id="LC11411" class="blob-code blob-code-inner js-file-line">        o.<span class="pl-c1">write</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">const</span> <span class="pl-k">char</span> *&gt;(&amp;_v), <span class="pl-k">sizeof</span>(<span class="pl-c1">int64_t</span>));</td>
      </tr>
      <tr>
        <td id="L11412" class="blob-num js-line-number" data-line-number="11412"></td>
        <td id="LC11412" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L11413" class="blob-num js-line-number" data-line-number="11413"></td>
        <td id="LC11413" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L11414" class="blob-num js-line-number" data-line-number="11414"></td>
        <td id="LC11414" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11415" class="blob-num js-line-number" data-line-number="11415"></td>
        <td id="LC11415" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToMsgPackVisitor::preVisit</span>(<span class="pl-c1">int32_t</span> id, <span class="pl-k">const</span> std::string &amp;shortName, <span class="pl-k">const</span> std::string &amp;longName) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L11416" class="blob-num js-line-number" data-line-number="11416"></td>
        <td id="LC11416" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L11417" class="blob-num js-line-number" data-line-number="11417"></td>
        <td id="LC11417" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)shortName;</td>
      </tr>
      <tr>
        <td id="L11418" class="blob-num js-line-number" data-line-number="11418"></td>
        <td id="LC11418" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)longName;</td>
      </tr>
      <tr>
        <td id="L11419" class="blob-num js-line-number" data-line-number="11419"></td>
        <td id="LC11419" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11420" class="blob-num js-line-number" data-line-number="11420"></td>
        <td id="LC11420" class="blob-code blob-code-inner js-file-line">    m_numberOfFields = <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L11421" class="blob-num js-line-number" data-line-number="11421"></td>
        <td id="LC11421" class="blob-code blob-code-inner js-file-line">    m_buffer.<span class="pl-c1">str</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L11422" class="blob-num js-line-number" data-line-number="11422"></td>
        <td id="LC11422" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L11423" class="blob-num js-line-number" data-line-number="11423"></td>
        <td id="LC11423" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11424" class="blob-num js-line-number" data-line-number="11424"></td>
        <td id="LC11424" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToMsgPackVisitor::postVisit</span>() <span class="pl-k">noexcept</span> {}</td>
      </tr>
      <tr>
        <td id="L11425" class="blob-num js-line-number" data-line-number="11425"></td>
        <td id="LC11425" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11426" class="blob-num js-line-number" data-line-number="11426"></td>
        <td id="LC11426" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToMsgPackVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">bool</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L11427" class="blob-num js-line-number" data-line-number="11427"></td>
        <td id="LC11427" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L11428" class="blob-num js-line-number" data-line-number="11428"></td>
        <td id="LC11428" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L11429" class="blob-num js-line-number" data-line-number="11429"></td>
        <td id="LC11429" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11430" class="blob-num js-line-number" data-line-number="11430"></td>
        <td id="LC11430" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">encode</span>(m_buffer, name);</td>
      </tr>
      <tr>
        <td id="L11431" class="blob-num js-line-number" data-line-number="11431"></td>
        <td id="LC11431" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> <span class="pl-c1">uint8_t</span> value = (v ? <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(MsgPackConstants::IS_TRUE) : <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(MsgPackConstants::IS_FALSE));</td>
      </tr>
      <tr>
        <td id="L11432" class="blob-num js-line-number" data-line-number="11432"></td>
        <td id="LC11432" class="blob-code blob-code-inner js-file-line">    m_buffer.<span class="pl-c1">write</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">const</span> <span class="pl-k">char</span> *&gt;(&amp;value), <span class="pl-k">sizeof</span>(<span class="pl-c1">uint8_t</span>));</td>
      </tr>
      <tr>
        <td id="L11433" class="blob-num js-line-number" data-line-number="11433"></td>
        <td id="LC11433" class="blob-code blob-code-inner js-file-line">    m_numberOfFields++;</td>
      </tr>
      <tr>
        <td id="L11434" class="blob-num js-line-number" data-line-number="11434"></td>
        <td id="LC11434" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L11435" class="blob-num js-line-number" data-line-number="11435"></td>
        <td id="LC11435" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11436" class="blob-num js-line-number" data-line-number="11436"></td>
        <td id="LC11436" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToMsgPackVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">char</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L11437" class="blob-num js-line-number" data-line-number="11437"></td>
        <td id="LC11437" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L11438" class="blob-num js-line-number" data-line-number="11438"></td>
        <td id="LC11438" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L11439" class="blob-num js-line-number" data-line-number="11439"></td>
        <td id="LC11439" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11440" class="blob-num js-line-number" data-line-number="11440"></td>
        <td id="LC11440" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">encode</span>(m_buffer, name);</td>
      </tr>
      <tr>
        <td id="L11441" class="blob-num js-line-number" data-line-number="11441"></td>
        <td id="LC11441" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> std::string <span class="pl-smi">s</span>(<span class="pl-c1">1</span>, v);</td>
      </tr>
      <tr>
        <td id="L11442" class="blob-num js-line-number" data-line-number="11442"></td>
        <td id="LC11442" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">encode</span>(m_buffer, s);</td>
      </tr>
      <tr>
        <td id="L11443" class="blob-num js-line-number" data-line-number="11443"></td>
        <td id="LC11443" class="blob-code blob-code-inner js-file-line">    m_numberOfFields++;</td>
      </tr>
      <tr>
        <td id="L11444" class="blob-num js-line-number" data-line-number="11444"></td>
        <td id="LC11444" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L11445" class="blob-num js-line-number" data-line-number="11445"></td>
        <td id="LC11445" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11446" class="blob-num js-line-number" data-line-number="11446"></td>
        <td id="LC11446" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToMsgPackVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int8_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L11447" class="blob-num js-line-number" data-line-number="11447"></td>
        <td id="LC11447" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L11448" class="blob-num js-line-number" data-line-number="11448"></td>
        <td id="LC11448" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L11449" class="blob-num js-line-number" data-line-number="11449"></td>
        <td id="LC11449" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11450" class="blob-num js-line-number" data-line-number="11450"></td>
        <td id="LC11450" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">encode</span>(m_buffer, name);</td>
      </tr>
      <tr>
        <td id="L11451" class="blob-num js-line-number" data-line-number="11451"></td>
        <td id="LC11451" class="blob-code blob-code-inner js-file-line">    (v &lt; <span class="pl-c1">0</span>) ? <span class="pl-c1">encodeInt</span>(m_buffer, v) : <span class="pl-c1">encodeUint</span>(m_buffer, <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(v));</td>
      </tr>
      <tr>
        <td id="L11452" class="blob-num js-line-number" data-line-number="11452"></td>
        <td id="LC11452" class="blob-code blob-code-inner js-file-line">    m_numberOfFields++;</td>
      </tr>
      <tr>
        <td id="L11453" class="blob-num js-line-number" data-line-number="11453"></td>
        <td id="LC11453" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L11454" class="blob-num js-line-number" data-line-number="11454"></td>
        <td id="LC11454" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11455" class="blob-num js-line-number" data-line-number="11455"></td>
        <td id="LC11455" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToMsgPackVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint8_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L11456" class="blob-num js-line-number" data-line-number="11456"></td>
        <td id="LC11456" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L11457" class="blob-num js-line-number" data-line-number="11457"></td>
        <td id="LC11457" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L11458" class="blob-num js-line-number" data-line-number="11458"></td>
        <td id="LC11458" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11459" class="blob-num js-line-number" data-line-number="11459"></td>
        <td id="LC11459" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">encode</span>(m_buffer, name);</td>
      </tr>
      <tr>
        <td id="L11460" class="blob-num js-line-number" data-line-number="11460"></td>
        <td id="LC11460" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">encodeUint</span>(m_buffer, v);</td>
      </tr>
      <tr>
        <td id="L11461" class="blob-num js-line-number" data-line-number="11461"></td>
        <td id="LC11461" class="blob-code blob-code-inner js-file-line">    m_numberOfFields++;</td>
      </tr>
      <tr>
        <td id="L11462" class="blob-num js-line-number" data-line-number="11462"></td>
        <td id="LC11462" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L11463" class="blob-num js-line-number" data-line-number="11463"></td>
        <td id="LC11463" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11464" class="blob-num js-line-number" data-line-number="11464"></td>
        <td id="LC11464" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToMsgPackVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int16_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L11465" class="blob-num js-line-number" data-line-number="11465"></td>
        <td id="LC11465" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L11466" class="blob-num js-line-number" data-line-number="11466"></td>
        <td id="LC11466" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L11467" class="blob-num js-line-number" data-line-number="11467"></td>
        <td id="LC11467" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11468" class="blob-num js-line-number" data-line-number="11468"></td>
        <td id="LC11468" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">encode</span>(m_buffer, name);</td>
      </tr>
      <tr>
        <td id="L11469" class="blob-num js-line-number" data-line-number="11469"></td>
        <td id="LC11469" class="blob-code blob-code-inner js-file-line">    (v &lt; <span class="pl-c1">0</span>) ? <span class="pl-c1">encodeInt</span>(m_buffer, v) : <span class="pl-c1">encodeUint</span>(m_buffer, <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint16_t</span>&gt;(v));</td>
      </tr>
      <tr>
        <td id="L11470" class="blob-num js-line-number" data-line-number="11470"></td>
        <td id="LC11470" class="blob-code blob-code-inner js-file-line">    m_numberOfFields++;</td>
      </tr>
      <tr>
        <td id="L11471" class="blob-num js-line-number" data-line-number="11471"></td>
        <td id="LC11471" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L11472" class="blob-num js-line-number" data-line-number="11472"></td>
        <td id="LC11472" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11473" class="blob-num js-line-number" data-line-number="11473"></td>
        <td id="LC11473" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToMsgPackVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint16_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L11474" class="blob-num js-line-number" data-line-number="11474"></td>
        <td id="LC11474" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L11475" class="blob-num js-line-number" data-line-number="11475"></td>
        <td id="LC11475" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L11476" class="blob-num js-line-number" data-line-number="11476"></td>
        <td id="LC11476" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11477" class="blob-num js-line-number" data-line-number="11477"></td>
        <td id="LC11477" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">encode</span>(m_buffer, name);</td>
      </tr>
      <tr>
        <td id="L11478" class="blob-num js-line-number" data-line-number="11478"></td>
        <td id="LC11478" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">encodeUint</span>(m_buffer, v);</td>
      </tr>
      <tr>
        <td id="L11479" class="blob-num js-line-number" data-line-number="11479"></td>
        <td id="LC11479" class="blob-code blob-code-inner js-file-line">    m_numberOfFields++;</td>
      </tr>
      <tr>
        <td id="L11480" class="blob-num js-line-number" data-line-number="11480"></td>
        <td id="LC11480" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L11481" class="blob-num js-line-number" data-line-number="11481"></td>
        <td id="LC11481" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11482" class="blob-num js-line-number" data-line-number="11482"></td>
        <td id="LC11482" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToMsgPackVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int32_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L11483" class="blob-num js-line-number" data-line-number="11483"></td>
        <td id="LC11483" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L11484" class="blob-num js-line-number" data-line-number="11484"></td>
        <td id="LC11484" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L11485" class="blob-num js-line-number" data-line-number="11485"></td>
        <td id="LC11485" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11486" class="blob-num js-line-number" data-line-number="11486"></td>
        <td id="LC11486" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">encode</span>(m_buffer, name);</td>
      </tr>
      <tr>
        <td id="L11487" class="blob-num js-line-number" data-line-number="11487"></td>
        <td id="LC11487" class="blob-code blob-code-inner js-file-line">    (v &lt; <span class="pl-c1">0</span>) ? <span class="pl-c1">encodeInt</span>(m_buffer, v) : <span class="pl-c1">encodeUint</span>(m_buffer, <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint32_t</span>&gt;(v));</td>
      </tr>
      <tr>
        <td id="L11488" class="blob-num js-line-number" data-line-number="11488"></td>
        <td id="LC11488" class="blob-code blob-code-inner js-file-line">    m_numberOfFields++;</td>
      </tr>
      <tr>
        <td id="L11489" class="blob-num js-line-number" data-line-number="11489"></td>
        <td id="LC11489" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L11490" class="blob-num js-line-number" data-line-number="11490"></td>
        <td id="LC11490" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11491" class="blob-num js-line-number" data-line-number="11491"></td>
        <td id="LC11491" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToMsgPackVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint32_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L11492" class="blob-num js-line-number" data-line-number="11492"></td>
        <td id="LC11492" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L11493" class="blob-num js-line-number" data-line-number="11493"></td>
        <td id="LC11493" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L11494" class="blob-num js-line-number" data-line-number="11494"></td>
        <td id="LC11494" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11495" class="blob-num js-line-number" data-line-number="11495"></td>
        <td id="LC11495" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">encode</span>(m_buffer, name);</td>
      </tr>
      <tr>
        <td id="L11496" class="blob-num js-line-number" data-line-number="11496"></td>
        <td id="LC11496" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">encodeUint</span>(m_buffer, v);</td>
      </tr>
      <tr>
        <td id="L11497" class="blob-num js-line-number" data-line-number="11497"></td>
        <td id="LC11497" class="blob-code blob-code-inner js-file-line">    m_numberOfFields++;</td>
      </tr>
      <tr>
        <td id="L11498" class="blob-num js-line-number" data-line-number="11498"></td>
        <td id="LC11498" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L11499" class="blob-num js-line-number" data-line-number="11499"></td>
        <td id="LC11499" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11500" class="blob-num js-line-number" data-line-number="11500"></td>
        <td id="LC11500" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToMsgPackVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int64_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L11501" class="blob-num js-line-number" data-line-number="11501"></td>
        <td id="LC11501" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L11502" class="blob-num js-line-number" data-line-number="11502"></td>
        <td id="LC11502" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L11503" class="blob-num js-line-number" data-line-number="11503"></td>
        <td id="LC11503" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11504" class="blob-num js-line-number" data-line-number="11504"></td>
        <td id="LC11504" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">encode</span>(m_buffer, name);</td>
      </tr>
      <tr>
        <td id="L11505" class="blob-num js-line-number" data-line-number="11505"></td>
        <td id="LC11505" class="blob-code blob-code-inner js-file-line">    (v &lt; <span class="pl-c1">0</span>) ? <span class="pl-c1">encodeInt</span>(m_buffer, v) : <span class="pl-c1">encodeUint</span>(m_buffer, <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint64_t</span>&gt;(v));</td>
      </tr>
      <tr>
        <td id="L11506" class="blob-num js-line-number" data-line-number="11506"></td>
        <td id="LC11506" class="blob-code blob-code-inner js-file-line">    m_numberOfFields++;</td>
      </tr>
      <tr>
        <td id="L11507" class="blob-num js-line-number" data-line-number="11507"></td>
        <td id="LC11507" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L11508" class="blob-num js-line-number" data-line-number="11508"></td>
        <td id="LC11508" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11509" class="blob-num js-line-number" data-line-number="11509"></td>
        <td id="LC11509" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToMsgPackVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint64_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L11510" class="blob-num js-line-number" data-line-number="11510"></td>
        <td id="LC11510" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L11511" class="blob-num js-line-number" data-line-number="11511"></td>
        <td id="LC11511" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L11512" class="blob-num js-line-number" data-line-number="11512"></td>
        <td id="LC11512" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11513" class="blob-num js-line-number" data-line-number="11513"></td>
        <td id="LC11513" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">encode</span>(m_buffer, name);</td>
      </tr>
      <tr>
        <td id="L11514" class="blob-num js-line-number" data-line-number="11514"></td>
        <td id="LC11514" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">encodeUint</span>(m_buffer, v);</td>
      </tr>
      <tr>
        <td id="L11515" class="blob-num js-line-number" data-line-number="11515"></td>
        <td id="LC11515" class="blob-code blob-code-inner js-file-line">    m_numberOfFields++;</td>
      </tr>
      <tr>
        <td id="L11516" class="blob-num js-line-number" data-line-number="11516"></td>
        <td id="LC11516" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L11517" class="blob-num js-line-number" data-line-number="11517"></td>
        <td id="LC11517" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11518" class="blob-num js-line-number" data-line-number="11518"></td>
        <td id="LC11518" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToMsgPackVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">float</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L11519" class="blob-num js-line-number" data-line-number="11519"></td>
        <td id="LC11519" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L11520" class="blob-num js-line-number" data-line-number="11520"></td>
        <td id="LC11520" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L11521" class="blob-num js-line-number" data-line-number="11521"></td>
        <td id="LC11521" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11522" class="blob-num js-line-number" data-line-number="11522"></td>
        <td id="LC11522" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">encode</span>(m_buffer, name);</td>
      </tr>
      <tr>
        <td id="L11523" class="blob-num js-line-number" data-line-number="11523"></td>
        <td id="LC11523" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> <span class="pl-c1">uint8_t</span> t = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(MsgPackConstants::FLOAT);</td>
      </tr>
      <tr>
        <td id="L11524" class="blob-num js-line-number" data-line-number="11524"></td>
        <td id="LC11524" class="blob-code blob-code-inner js-file-line">    m_buffer.<span class="pl-c1">write</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">const</span> <span class="pl-k">char</span> *&gt;(&amp;t), <span class="pl-k">sizeof</span>(<span class="pl-c1">uint8_t</span>));</td>
      </tr>
      <tr>
        <td id="L11525" class="blob-num js-line-number" data-line-number="11525"></td>
        <td id="LC11525" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">uint32_t</span> _v{<span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L11526" class="blob-num js-line-number" data-line-number="11526"></td>
        <td id="LC11526" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">std::memmove</span>(&amp;_v, &amp;v, <span class="pl-k">sizeof</span>(<span class="pl-k">float</span>));</td>
      </tr>
      <tr>
        <td id="L11527" class="blob-num js-line-number" data-line-number="11527"></td>
        <td id="LC11527" class="blob-code blob-code-inner js-file-line">    _v = <span class="pl-c1">htobe32</span>(_v);</td>
      </tr>
      <tr>
        <td id="L11528" class="blob-num js-line-number" data-line-number="11528"></td>
        <td id="LC11528" class="blob-code blob-code-inner js-file-line">    m_buffer.<span class="pl-c1">write</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">const</span> <span class="pl-k">char</span> *&gt;(&amp;_v), <span class="pl-k">sizeof</span>(<span class="pl-c1">uint32_t</span>));</td>
      </tr>
      <tr>
        <td id="L11529" class="blob-num js-line-number" data-line-number="11529"></td>
        <td id="LC11529" class="blob-code blob-code-inner js-file-line">    m_numberOfFields++;</td>
      </tr>
      <tr>
        <td id="L11530" class="blob-num js-line-number" data-line-number="11530"></td>
        <td id="LC11530" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L11531" class="blob-num js-line-number" data-line-number="11531"></td>
        <td id="LC11531" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11532" class="blob-num js-line-number" data-line-number="11532"></td>
        <td id="LC11532" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToMsgPackVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">double</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L11533" class="blob-num js-line-number" data-line-number="11533"></td>
        <td id="LC11533" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L11534" class="blob-num js-line-number" data-line-number="11534"></td>
        <td id="LC11534" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L11535" class="blob-num js-line-number" data-line-number="11535"></td>
        <td id="LC11535" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11536" class="blob-num js-line-number" data-line-number="11536"></td>
        <td id="LC11536" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">encode</span>(m_buffer, name);</td>
      </tr>
      <tr>
        <td id="L11537" class="blob-num js-line-number" data-line-number="11537"></td>
        <td id="LC11537" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> <span class="pl-c1">uint8_t</span> t = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(MsgPackConstants::DOUBLE);</td>
      </tr>
      <tr>
        <td id="L11538" class="blob-num js-line-number" data-line-number="11538"></td>
        <td id="LC11538" class="blob-code blob-code-inner js-file-line">    m_buffer.<span class="pl-c1">write</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">const</span> <span class="pl-k">char</span> *&gt;(&amp;t), <span class="pl-k">sizeof</span>(<span class="pl-c1">uint8_t</span>));</td>
      </tr>
      <tr>
        <td id="L11539" class="blob-num js-line-number" data-line-number="11539"></td>
        <td id="LC11539" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">uint64_t</span> _v{<span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L11540" class="blob-num js-line-number" data-line-number="11540"></td>
        <td id="LC11540" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">std::memmove</span>(&amp;_v, &amp;v, <span class="pl-k">sizeof</span>(<span class="pl-k">double</span>));</td>
      </tr>
      <tr>
        <td id="L11541" class="blob-num js-line-number" data-line-number="11541"></td>
        <td id="LC11541" class="blob-code blob-code-inner js-file-line">    _v = <span class="pl-c1">htobe64</span>(_v);</td>
      </tr>
      <tr>
        <td id="L11542" class="blob-num js-line-number" data-line-number="11542"></td>
        <td id="LC11542" class="blob-code blob-code-inner js-file-line">    m_buffer.<span class="pl-c1">write</span>(<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">const</span> <span class="pl-k">char</span> *&gt;(&amp;_v), <span class="pl-k">sizeof</span>(<span class="pl-k">double</span>));</td>
      </tr>
      <tr>
        <td id="L11543" class="blob-num js-line-number" data-line-number="11543"></td>
        <td id="LC11543" class="blob-code blob-code-inner js-file-line">    m_numberOfFields++;</td>
      </tr>
      <tr>
        <td id="L11544" class="blob-num js-line-number" data-line-number="11544"></td>
        <td id="LC11544" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L11545" class="blob-num js-line-number" data-line-number="11545"></td>
        <td id="LC11545" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11546" class="blob-num js-line-number" data-line-number="11546"></td>
        <td id="LC11546" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToMsgPackVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, std::string &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L11547" class="blob-num js-line-number" data-line-number="11547"></td>
        <td id="LC11547" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)id;</td>
      </tr>
      <tr>
        <td id="L11548" class="blob-num js-line-number" data-line-number="11548"></td>
        <td id="LC11548" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L11549" class="blob-num js-line-number" data-line-number="11549"></td>
        <td id="LC11549" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11550" class="blob-num js-line-number" data-line-number="11550"></td>
        <td id="LC11550" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">encode</span>(m_buffer, name);</td>
      </tr>
      <tr>
        <td id="L11551" class="blob-num js-line-number" data-line-number="11551"></td>
        <td id="LC11551" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">encode</span>(m_buffer, v);</td>
      </tr>
      <tr>
        <td id="L11552" class="blob-num js-line-number" data-line-number="11552"></td>
        <td id="LC11552" class="blob-code blob-code-inner js-file-line">    m_numberOfFields++;</td>
      </tr>
      <tr>
        <td id="L11553" class="blob-num js-line-number" data-line-number="11553"></td>
        <td id="LC11553" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L11554" class="blob-num js-line-number" data-line-number="11554"></td>
        <td id="LC11554" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11555" class="blob-num js-line-number" data-line-number="11555"></td>
        <td id="LC11555" class="blob-code blob-code-inner js-file-line">} <span class="pl-c"><span class="pl-c">//</span> namespace cluon</span></td>
      </tr>
      <tr>
        <td id="L11556" class="blob-num js-line-number" data-line-number="11556"></td>
        <td id="LC11556" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L11557" class="blob-num js-line-number" data-line-number="11557"></td>
        <td id="LC11557" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Copyright (C) 2018  Christian Berger</span></td>
      </tr>
      <tr>
        <td id="L11558" class="blob-num js-line-number" data-line-number="11558"></td>
        <td id="LC11558" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L11559" class="blob-num js-line-number" data-line-number="11559"></td>
        <td id="LC11559" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is free software: you can redistribute it and/or modify</span></td>
      </tr>
      <tr>
        <td id="L11560" class="blob-num js-line-number" data-line-number="11560"></td>
        <td id="LC11560" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * it under the terms of the GNU General Public License as published by</span></td>
      </tr>
      <tr>
        <td id="L11561" class="blob-num js-line-number" data-line-number="11561"></td>
        <td id="LC11561" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * the Free Software Foundation, either version 3 of the License, or</span></td>
      </tr>
      <tr>
        <td id="L11562" class="blob-num js-line-number" data-line-number="11562"></td>
        <td id="LC11562" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * (at your option) any later version.</span></td>
      </tr>
      <tr>
        <td id="L11563" class="blob-num js-line-number" data-line-number="11563"></td>
        <td id="LC11563" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L11564" class="blob-num js-line-number" data-line-number="11564"></td>
        <td id="LC11564" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is distributed in the hope that it will be useful,</span></td>
      </tr>
      <tr>
        <td id="L11565" class="blob-num js-line-number" data-line-number="11565"></td>
        <td id="LC11565" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></td>
      </tr>
      <tr>
        <td id="L11566" class="blob-num js-line-number" data-line-number="11566"></td>
        <td id="LC11566" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></td>
      </tr>
      <tr>
        <td id="L11567" class="blob-num js-line-number" data-line-number="11567"></td>
        <td id="LC11567" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * GNU General Public License for more details.</span></td>
      </tr>
      <tr>
        <td id="L11568" class="blob-num js-line-number" data-line-number="11568"></td>
        <td id="LC11568" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L11569" class="blob-num js-line-number" data-line-number="11569"></td>
        <td id="LC11569" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * You should have received a copy of the GNU General Public License</span></td>
      </tr>
      <tr>
        <td id="L11570" class="blob-num js-line-number" data-line-number="11570"></td>
        <td id="LC11570" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></td>
      </tr>
      <tr>
        <td id="L11571" class="blob-num js-line-number" data-line-number="11571"></td>
        <td id="LC11571" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L11572" class="blob-num js-line-number" data-line-number="11572"></td>
        <td id="LC11572" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11573" class="blob-num js-line-number" data-line-number="11573"></td>
        <td id="LC11573" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/OD4Session.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L11574" class="blob-num js-line-number" data-line-number="11574"></td>
        <td id="LC11574" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/Envelope.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L11575" class="blob-num js-line-number" data-line-number="11575"></td>
        <td id="LC11575" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/FromProtoVisitor.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L11576" class="blob-num js-line-number" data-line-number="11576"></td>
        <td id="LC11576" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/Time.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L11577" class="blob-num js-line-number" data-line-number="11577"></td>
        <td id="LC11577" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11578" class="blob-num js-line-number" data-line-number="11578"></td>
        <td id="LC11578" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>iostream<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L11579" class="blob-num js-line-number" data-line-number="11579"></td>
        <td id="LC11579" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>sstream<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L11580" class="blob-num js-line-number" data-line-number="11580"></td>
        <td id="LC11580" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>thread<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L11581" class="blob-num js-line-number" data-line-number="11581"></td>
        <td id="LC11581" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11582" class="blob-num js-line-number" data-line-number="11582"></td>
        <td id="LC11582" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">cluon</span> {</td>
      </tr>
      <tr>
        <td id="L11583" class="blob-num js-line-number" data-line-number="11583"></td>
        <td id="LC11583" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11584" class="blob-num js-line-number" data-line-number="11584"></td>
        <td id="LC11584" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-en">OD4Session::OD4Session</span>(<span class="pl-c1">uint16_t</span> CID, std::function&lt;<span class="pl-k">void</span>(cluon::data::Envelope &amp;&amp;envelope)&gt; delegate) <span class="pl-k">noexcept</span></td>
      </tr>
      <tr>
        <td id="L11585" class="blob-num js-line-number" data-line-number="11585"></td>
        <td id="LC11585" class="blob-code blob-code-inner js-file-line">    : m_receiver{<span class="pl-s"><span class="pl-pds">&quot;</span>225.0.0.<span class="pl-pds">&quot;</span></span> + <span class="pl-c1">std::to_string</span>(CID),</td>
      </tr>
      <tr>
        <td id="L11586" class="blob-num js-line-number" data-line-number="11586"></td>
        <td id="LC11586" class="blob-code blob-code-inner js-file-line">                 <span class="pl-c1">12175</span>,</td>
      </tr>
      <tr>
        <td id="L11587" class="blob-num js-line-number" data-line-number="11587"></td>
        <td id="LC11587" class="blob-code blob-code-inner js-file-line">                 [<span class="pl-c1">this</span>](std::string &amp;&amp;data, std::string &amp;&amp;from, std::chrono::system_clock::time_point &amp;&amp;timepoint) {</td>
      </tr>
      <tr>
        <td id="L11588" class="blob-num js-line-number" data-line-number="11588"></td>
        <td id="LC11588" class="blob-code blob-code-inner js-file-line">                     <span class="pl-c1">this</span>-&gt;<span class="pl-c1">callback</span>(<span class="pl-c1">std::move</span>(data), <span class="pl-c1">std::move</span>(from), <span class="pl-c1">std::move</span>(timepoint));</td>
      </tr>
      <tr>
        <td id="L11589" class="blob-num js-line-number" data-line-number="11589"></td>
        <td id="LC11589" class="blob-code blob-code-inner js-file-line">                 }}</td>
      </tr>
      <tr>
        <td id="L11590" class="blob-num js-line-number" data-line-number="11590"></td>
        <td id="LC11590" class="blob-code blob-code-inner js-file-line">    , m_sender{<span class="pl-s"><span class="pl-pds">&quot;</span>225.0.0.<span class="pl-pds">&quot;</span></span> + <span class="pl-c1">std::to_string</span>(CID), <span class="pl-c1">12175</span>}</td>
      </tr>
      <tr>
        <td id="L11591" class="blob-num js-line-number" data-line-number="11591"></td>
        <td id="LC11591" class="blob-code blob-code-inner js-file-line">    , m_delegate(delegate)</td>
      </tr>
      <tr>
        <td id="L11592" class="blob-num js-line-number" data-line-number="11592"></td>
        <td id="LC11592" class="blob-code blob-code-inner js-file-line">    , m_mapOfDataTriggeredDelegatesMutex{}</td>
      </tr>
      <tr>
        <td id="L11593" class="blob-num js-line-number" data-line-number="11593"></td>
        <td id="LC11593" class="blob-code blob-code-inner js-file-line">    , m_mapOfDataTriggeredDelegates{} {}</td>
      </tr>
      <tr>
        <td id="L11594" class="blob-num js-line-number" data-line-number="11594"></td>
        <td id="LC11594" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11595" class="blob-num js-line-number" data-line-number="11595"></td>
        <td id="LC11595" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">OD4Session::timeTrigger</span>(<span class="pl-k">float</span> freq, std::function&lt;<span class="pl-k">bool</span>()&gt; delegate) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L11596" class="blob-num js-line-number" data-line-number="11596"></td>
        <td id="LC11596" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-c1">nullptr</span> != delegate) {</td>
      </tr>
      <tr>
        <td id="L11597" class="blob-num js-line-number" data-line-number="11597"></td>
        <td id="LC11597" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">bool</span> delegateIsRunning{<span class="pl-c1">true</span>};</td>
      </tr>
      <tr>
        <td id="L11598" class="blob-num js-line-number" data-line-number="11598"></td>
        <td id="LC11598" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> <span class="pl-c1">int64_t</span> TIME_SLICE_IN_MILLISECONDS{<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint32_t</span>&gt;(<span class="pl-c1">1000</span> / ((freq &gt; <span class="pl-c1">0</span>) ? freq : <span class="pl-c1">1</span>.<span class="pl-c1">0f</span>))};</td>
      </tr>
      <tr>
        <td id="L11599" class="blob-num js-line-number" data-line-number="11599"></td>
        <td id="LC11599" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">do</span> {</td>
      </tr>
      <tr>
        <td id="L11600" class="blob-num js-line-number" data-line-number="11600"></td>
        <td id="LC11600" class="blob-code blob-code-inner js-file-line">            cluon::data::TimeStamp before{<span class="pl-c1">cluon::time::now</span>()};</td>
      </tr>
      <tr>
        <td id="L11601" class="blob-num js-line-number" data-line-number="11601"></td>
        <td id="LC11601" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L11602" class="blob-num js-line-number" data-line-number="11602"></td>
        <td id="LC11602" class="blob-code blob-code-inner js-file-line">                delegateIsRunning = <span class="pl-c1">delegate</span>();</td>
      </tr>
      <tr>
        <td id="L11603" class="blob-num js-line-number" data-line-number="11603"></td>
        <td id="LC11603" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">catch</span> (...) {</td>
      </tr>
      <tr>
        <td id="L11604" class="blob-num js-line-number" data-line-number="11604"></td>
        <td id="LC11604" class="blob-code blob-code-inner js-file-line">                delegateIsRunning = <span class="pl-c1">false</span>; <span class="pl-c"><span class="pl-c">//</span> delegate threw exception.</span></td>
      </tr>
      <tr>
        <td id="L11605" class="blob-num js-line-number" data-line-number="11605"></td>
        <td id="LC11605" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L11606" class="blob-num js-line-number" data-line-number="11606"></td>
        <td id="LC11606" class="blob-code blob-code-inner js-file-line">            cluon::data::TimeStamp after{<span class="pl-c1">cluon::time::now</span>()};</td>
      </tr>
      <tr>
        <td id="L11607" class="blob-num js-line-number" data-line-number="11607"></td>
        <td id="LC11607" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11608" class="blob-num js-line-number" data-line-number="11608"></td>
        <td id="LC11608" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">const</span> <span class="pl-c1">int64_t</span> beforeInMicroseconds{before.<span class="pl-c1">seconds</span>() * <span class="pl-c1">1000</span> * <span class="pl-c1">1000</span> + before.<span class="pl-c1">microseconds</span>()};</td>
      </tr>
      <tr>
        <td id="L11609" class="blob-num js-line-number" data-line-number="11609"></td>
        <td id="LC11609" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">const</span> <span class="pl-c1">int64_t</span> afterInMicroseconds{after.<span class="pl-c1">seconds</span>() * <span class="pl-c1">1000</span> * <span class="pl-c1">1000</span> + after.<span class="pl-c1">microseconds</span>()};</td>
      </tr>
      <tr>
        <td id="L11610" class="blob-num js-line-number" data-line-number="11610"></td>
        <td id="LC11610" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11611" class="blob-num js-line-number" data-line-number="11611"></td>
        <td id="LC11611" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">const</span> <span class="pl-c1">int64_t</span> timeSpent{(afterInMicroseconds &gt; beforeInMicroseconds) ? (afterInMicroseconds - beforeInMicroseconds) / <span class="pl-c1">1000</span> : <span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L11612" class="blob-num js-line-number" data-line-number="11612"></td>
        <td id="LC11612" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">const</span> <span class="pl-c1">int64_t</span> timeToSleepInMilliseconds{TIME_SLICE_IN_MILLISECONDS - timeSpent};</td>
      </tr>
      <tr>
        <td id="L11613" class="blob-num js-line-number" data-line-number="11613"></td>
        <td id="LC11613" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11614" class="blob-num js-line-number" data-line-number="11614"></td>
        <td id="LC11614" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> Sleep the remaining time.</span></td>
      </tr>
      <tr>
        <td id="L11615" class="blob-num js-line-number" data-line-number="11615"></td>
        <td id="LC11615" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> ((timeToSleepInMilliseconds &gt; <span class="pl-c1">0</span>) &amp;&amp; (timeToSleepInMilliseconds &lt;= TIME_SLICE_IN_MILLISECONDS)) {</td>
      </tr>
      <tr>
        <td id="L11616" class="blob-num js-line-number" data-line-number="11616"></td>
        <td id="LC11616" class="blob-code blob-code-inner js-file-line">                <span class="pl-c1">std::this_thread::sleep_for</span>(std::chrono::duration&lt;<span class="pl-c1">int64_t</span>, std::milli&gt;(timeToSleepInMilliseconds));</td>
      </tr>
      <tr>
        <td id="L11617" class="blob-num js-line-number" data-line-number="11617"></td>
        <td id="LC11617" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L11618" class="blob-num js-line-number" data-line-number="11618"></td>
        <td id="LC11618" class="blob-code blob-code-inner js-file-line">                std::cerr &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>[cluon::OD4Session]: time-triggered delegate violated allocated time slice.<span class="pl-pds">&quot;</span></span> &lt;&lt; std::endl;</td>
      </tr>
      <tr>
        <td id="L11619" class="blob-num js-line-number" data-line-number="11619"></td>
        <td id="LC11619" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L11620" class="blob-num js-line-number" data-line-number="11620"></td>
        <td id="LC11620" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">while</span> (delegateIsRunning);</td>
      </tr>
      <tr>
        <td id="L11621" class="blob-num js-line-number" data-line-number="11621"></td>
        <td id="LC11621" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L11622" class="blob-num js-line-number" data-line-number="11622"></td>
        <td id="LC11622" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L11623" class="blob-num js-line-number" data-line-number="11623"></td>
        <td id="LC11623" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11624" class="blob-num js-line-number" data-line-number="11624"></td>
        <td id="LC11624" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">bool</span> <span class="pl-en">OD4Session::dataTrigger</span>(<span class="pl-c1">int32_t</span> messageIdentifier, std::function&lt;<span class="pl-k">void</span>(cluon::data::Envelope &amp;&amp;envelope)&gt; delegate) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L11625" class="blob-num js-line-number" data-line-number="11625"></td>
        <td id="LC11625" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">bool</span> retVal{<span class="pl-c1">false</span>};</td>
      </tr>
      <tr>
        <td id="L11626" class="blob-num js-line-number" data-line-number="11626"></td>
        <td id="LC11626" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-c1">nullptr</span> == m_delegate) {</td>
      </tr>
      <tr>
        <td id="L11627" class="blob-num js-line-number" data-line-number="11627"></td>
        <td id="LC11627" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L11628" class="blob-num js-line-number" data-line-number="11628"></td>
        <td id="LC11628" class="blob-code blob-code-inner js-file-line">            std::lock_guard&lt;std::mutex&gt; lck{m_mapOfDataTriggeredDelegatesMutex};</td>
      </tr>
      <tr>
        <td id="L11629" class="blob-num js-line-number" data-line-number="11629"></td>
        <td id="LC11629" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> ((<span class="pl-c1">nullptr</span> == delegate) &amp;&amp; (m_mapOfDataTriggeredDelegates.<span class="pl-c1">count</span>(messageIdentifier) &gt; <span class="pl-c1">0</span>)) {</td>
      </tr>
      <tr>
        <td id="L11630" class="blob-num js-line-number" data-line-number="11630"></td>
        <td id="LC11630" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">auto</span> element = m_mapOfDataTriggeredDelegates.<span class="pl-c1">find</span>(messageIdentifier);</td>
      </tr>
      <tr>
        <td id="L11631" class="blob-num js-line-number" data-line-number="11631"></td>
        <td id="LC11631" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">if</span> (element != m_mapOfDataTriggeredDelegates.<span class="pl-c1">end</span>()) {</td>
      </tr>
      <tr>
        <td id="L11632" class="blob-num js-line-number" data-line-number="11632"></td>
        <td id="LC11632" class="blob-code blob-code-inner js-file-line">                    m_mapOfDataTriggeredDelegates.<span class="pl-c1">erase</span>(element);</td>
      </tr>
      <tr>
        <td id="L11633" class="blob-num js-line-number" data-line-number="11633"></td>
        <td id="LC11633" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L11634" class="blob-num js-line-number" data-line-number="11634"></td>
        <td id="LC11634" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L11635" class="blob-num js-line-number" data-line-number="11635"></td>
        <td id="LC11635" class="blob-code blob-code-inner js-file-line">                m_mapOfDataTriggeredDelegates[messageIdentifier] = delegate;</td>
      </tr>
      <tr>
        <td id="L11636" class="blob-num js-line-number" data-line-number="11636"></td>
        <td id="LC11636" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L11637" class="blob-num js-line-number" data-line-number="11637"></td>
        <td id="LC11637" class="blob-code blob-code-inner js-file-line">            retVal = <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L11638" class="blob-num js-line-number" data-line-number="11638"></td>
        <td id="LC11638" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">catch</span> (...) {} <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L11639" class="blob-num js-line-number" data-line-number="11639"></td>
        <td id="LC11639" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L11640" class="blob-num js-line-number" data-line-number="11640"></td>
        <td id="LC11640" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> retVal;</td>
      </tr>
      <tr>
        <td id="L11641" class="blob-num js-line-number" data-line-number="11641"></td>
        <td id="LC11641" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L11642" class="blob-num js-line-number" data-line-number="11642"></td>
        <td id="LC11642" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11643" class="blob-num js-line-number" data-line-number="11643"></td>
        <td id="LC11643" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">OD4Session::callback</span>(std::string &amp;&amp;data, std::string &amp;&amp;from, std::chrono::system_clock::time_point &amp;&amp;timepoint) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L11644" class="blob-num js-line-number" data-line-number="11644"></td>
        <td id="LC11644" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)from;</td>
      </tr>
      <tr>
        <td id="L11645" class="blob-num js-line-number" data-line-number="11645"></td>
        <td id="LC11645" class="blob-code blob-code-inner js-file-line">    std::stringstream <span class="pl-smi">sstr</span>(data);</td>
      </tr>
      <tr>
        <td id="L11646" class="blob-num js-line-number" data-line-number="11646"></td>
        <td id="LC11646" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">auto</span> retVal = <span class="pl-c1">extractEnvelope</span>(sstr);</td>
      </tr>
      <tr>
        <td id="L11647" class="blob-num js-line-number" data-line-number="11647"></td>
        <td id="LC11647" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11648" class="blob-num js-line-number" data-line-number="11648"></td>
        <td id="LC11648" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (retVal.<span class="pl-smi">first</span>) {</td>
      </tr>
      <tr>
        <td id="L11649" class="blob-num js-line-number" data-line-number="11649"></td>
        <td id="LC11649" class="blob-code blob-code-inner js-file-line">        cluon::data::Envelope env{retVal.<span class="pl-smi">second</span>};</td>
      </tr>
      <tr>
        <td id="L11650" class="blob-num js-line-number" data-line-number="11650"></td>
        <td id="LC11650" class="blob-code blob-code-inner js-file-line">        env.<span class="pl-c1">received</span>(<span class="pl-c1">cluon::time::convert</span>(timepoint));</td>
      </tr>
      <tr>
        <td id="L11651" class="blob-num js-line-number" data-line-number="11651"></td>
        <td id="LC11651" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11652" class="blob-num js-line-number" data-line-number="11652"></td>
        <td id="LC11652" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> &quot;Catch all&quot;-delegate.</span></td>
      </tr>
      <tr>
        <td id="L11653" class="blob-num js-line-number" data-line-number="11653"></td>
        <td id="LC11653" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-c1">nullptr</span> != m_delegate) {</td>
      </tr>
      <tr>
        <td id="L11654" class="blob-num js-line-number" data-line-number="11654"></td>
        <td id="LC11654" class="blob-code blob-code-inner js-file-line">            cluon::data::Envelope env1{retVal.<span class="pl-smi">second</span>};</td>
      </tr>
      <tr>
        <td id="L11655" class="blob-num js-line-number" data-line-number="11655"></td>
        <td id="LC11655" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">m_delegate</span>(<span class="pl-c1">std::move</span>(env));</td>
      </tr>
      <tr>
        <td id="L11656" class="blob-num js-line-number" data-line-number="11656"></td>
        <td id="LC11656" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L11657" class="blob-num js-line-number" data-line-number="11657"></td>
        <td id="LC11657" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L11658" class="blob-num js-line-number" data-line-number="11658"></td>
        <td id="LC11658" class="blob-code blob-code-inner js-file-line">                <span class="pl-c"><span class="pl-c">//</span> Data triggered-delegates.</span></td>
      </tr>
      <tr>
        <td id="L11659" class="blob-num js-line-number" data-line-number="11659"></td>
        <td id="LC11659" class="blob-code blob-code-inner js-file-line">                std::lock_guard&lt;std::mutex&gt; lck{m_mapOfDataTriggeredDelegatesMutex};</td>
      </tr>
      <tr>
        <td id="L11660" class="blob-num js-line-number" data-line-number="11660"></td>
        <td id="LC11660" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">if</span> (m_mapOfDataTriggeredDelegates.<span class="pl-c1">count</span>(env.<span class="pl-c1">dataType</span>()) &gt; <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L11661" class="blob-num js-line-number" data-line-number="11661"></td>
        <td id="LC11661" class="blob-code blob-code-inner js-file-line">                    m_mapOfDataTriggeredDelegates[env.<span class="pl-c1">dataType</span>()](<span class="pl-c1">std::move</span>(env));</td>
      </tr>
      <tr>
        <td id="L11662" class="blob-num js-line-number" data-line-number="11662"></td>
        <td id="LC11662" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L11663" class="blob-num js-line-number" data-line-number="11663"></td>
        <td id="LC11663" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">catch</span> (...) {} <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L11664" class="blob-num js-line-number" data-line-number="11664"></td>
        <td id="LC11664" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L11665" class="blob-num js-line-number" data-line-number="11665"></td>
        <td id="LC11665" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L11666" class="blob-num js-line-number" data-line-number="11666"></td>
        <td id="LC11666" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L11667" class="blob-num js-line-number" data-line-number="11667"></td>
        <td id="LC11667" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11668" class="blob-num js-line-number" data-line-number="11668"></td>
        <td id="LC11668" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">OD4Session::send</span>(cluon::data::Envelope &amp;&amp;envelope) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L11669" class="blob-num js-line-number" data-line-number="11669"></td>
        <td id="LC11669" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">sendInternal</span>(<span class="pl-c1">cluon::serializeEnvelope</span>(<span class="pl-c1">std::move</span>(envelope)));</td>
      </tr>
      <tr>
        <td id="L11670" class="blob-num js-line-number" data-line-number="11670"></td>
        <td id="LC11670" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L11671" class="blob-num js-line-number" data-line-number="11671"></td>
        <td id="LC11671" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11672" class="blob-num js-line-number" data-line-number="11672"></td>
        <td id="LC11672" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">OD4Session::sendInternal</span>(std::string &amp;&amp;dataToSend) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L11673" class="blob-num js-line-number" data-line-number="11673"></td>
        <td id="LC11673" class="blob-code blob-code-inner js-file-line">    m_sender.<span class="pl-c1">send</span>(<span class="pl-c1">std::move</span>(dataToSend));</td>
      </tr>
      <tr>
        <td id="L11674" class="blob-num js-line-number" data-line-number="11674"></td>
        <td id="LC11674" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L11675" class="blob-num js-line-number" data-line-number="11675"></td>
        <td id="LC11675" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11676" class="blob-num js-line-number" data-line-number="11676"></td>
        <td id="LC11676" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">bool</span> <span class="pl-en">OD4Session::isRunning</span>() <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L11677" class="blob-num js-line-number" data-line-number="11677"></td>
        <td id="LC11677" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> m_receiver.<span class="pl-c1">isRunning</span>();</td>
      </tr>
      <tr>
        <td id="L11678" class="blob-num js-line-number" data-line-number="11678"></td>
        <td id="LC11678" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L11679" class="blob-num js-line-number" data-line-number="11679"></td>
        <td id="LC11679" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11680" class="blob-num js-line-number" data-line-number="11680"></td>
        <td id="LC11680" class="blob-code blob-code-inner js-file-line">} <span class="pl-c"><span class="pl-c">//</span> namespace cluon</span></td>
      </tr>
      <tr>
        <td id="L11681" class="blob-num js-line-number" data-line-number="11681"></td>
        <td id="LC11681" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L11682" class="blob-num js-line-number" data-line-number="11682"></td>
        <td id="LC11682" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Copyright (C) 2017-2018  Christian Berger</span></td>
      </tr>
      <tr>
        <td id="L11683" class="blob-num js-line-number" data-line-number="11683"></td>
        <td id="LC11683" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L11684" class="blob-num js-line-number" data-line-number="11684"></td>
        <td id="LC11684" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is free software: you can redistribute it and/or modify</span></td>
      </tr>
      <tr>
        <td id="L11685" class="blob-num js-line-number" data-line-number="11685"></td>
        <td id="LC11685" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * it under the terms of the GNU General Public License as published by</span></td>
      </tr>
      <tr>
        <td id="L11686" class="blob-num js-line-number" data-line-number="11686"></td>
        <td id="LC11686" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * the Free Software Foundation, either version 3 of the License, or</span></td>
      </tr>
      <tr>
        <td id="L11687" class="blob-num js-line-number" data-line-number="11687"></td>
        <td id="LC11687" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * (at your option) any later version.</span></td>
      </tr>
      <tr>
        <td id="L11688" class="blob-num js-line-number" data-line-number="11688"></td>
        <td id="LC11688" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L11689" class="blob-num js-line-number" data-line-number="11689"></td>
        <td id="LC11689" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is distributed in the hope that it will be useful,</span></td>
      </tr>
      <tr>
        <td id="L11690" class="blob-num js-line-number" data-line-number="11690"></td>
        <td id="LC11690" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></td>
      </tr>
      <tr>
        <td id="L11691" class="blob-num js-line-number" data-line-number="11691"></td>
        <td id="LC11691" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></td>
      </tr>
      <tr>
        <td id="L11692" class="blob-num js-line-number" data-line-number="11692"></td>
        <td id="LC11692" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * GNU General Public License for more details.</span></td>
      </tr>
      <tr>
        <td id="L11693" class="blob-num js-line-number" data-line-number="11693"></td>
        <td id="LC11693" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L11694" class="blob-num js-line-number" data-line-number="11694"></td>
        <td id="LC11694" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * You should have received a copy of the GNU General Public License</span></td>
      </tr>
      <tr>
        <td id="L11695" class="blob-num js-line-number" data-line-number="11695"></td>
        <td id="LC11695" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></td>
      </tr>
      <tr>
        <td id="L11696" class="blob-num js-line-number" data-line-number="11696"></td>
        <td id="LC11696" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L11697" class="blob-num js-line-number" data-line-number="11697"></td>
        <td id="LC11697" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11698" class="blob-num js-line-number" data-line-number="11698"></td>
        <td id="LC11698" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/ToODVDVisitor.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L11699" class="blob-num js-line-number" data-line-number="11699"></td>
        <td id="LC11699" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11700" class="blob-num js-line-number" data-line-number="11700"></td>
        <td id="LC11700" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>sstream<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L11701" class="blob-num js-line-number" data-line-number="11701"></td>
        <td id="LC11701" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11702" class="blob-num js-line-number" data-line-number="11702"></td>
        <td id="LC11702" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">cluon</span> {</td>
      </tr>
      <tr>
        <td id="L11703" class="blob-num js-line-number" data-line-number="11703"></td>
        <td id="LC11703" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11704" class="blob-num js-line-number" data-line-number="11704"></td>
        <td id="LC11704" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::string <span class="pl-en">ToODVDVisitor::messageSpecification</span>() <span class="pl-k">const</span> <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L11705" class="blob-num js-line-number" data-line-number="11705"></td>
        <td id="LC11705" class="blob-code blob-code-inner js-file-line">    std::stringstream tmp;</td>
      </tr>
      <tr>
        <td id="L11706" class="blob-num js-line-number" data-line-number="11706"></td>
        <td id="LC11706" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">for</span> (<span class="pl-k">const</span> <span class="pl-k">auto</span> &amp;e : m_forwardDeclarations) { tmp &lt;&lt; e; }</td>
      </tr>
      <tr>
        <td id="L11707" class="blob-num js-line-number" data-line-number="11707"></td>
        <td id="LC11707" class="blob-code blob-code-inner js-file-line">    tmp &lt;&lt; m_buffer.<span class="pl-c1">str</span>();</td>
      </tr>
      <tr>
        <td id="L11708" class="blob-num js-line-number" data-line-number="11708"></td>
        <td id="LC11708" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11709" class="blob-num js-line-number" data-line-number="11709"></td>
        <td id="LC11709" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> std::string retVal{tmp.<span class="pl-c1">str</span>()};</td>
      </tr>
      <tr>
        <td id="L11710" class="blob-num js-line-number" data-line-number="11710"></td>
        <td id="LC11710" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> retVal;</td>
      </tr>
      <tr>
        <td id="L11711" class="blob-num js-line-number" data-line-number="11711"></td>
        <td id="LC11711" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L11712" class="blob-num js-line-number" data-line-number="11712"></td>
        <td id="LC11712" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11713" class="blob-num js-line-number" data-line-number="11713"></td>
        <td id="LC11713" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToODVDVisitor::preVisit</span>(<span class="pl-c1">int32_t</span> id, <span class="pl-k">const</span> std::string &amp;shortName, <span class="pl-k">const</span> std::string &amp;longName) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L11714" class="blob-num js-line-number" data-line-number="11714"></td>
        <td id="LC11714" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)shortName;</td>
      </tr>
      <tr>
        <td id="L11715" class="blob-num js-line-number" data-line-number="11715"></td>
        <td id="LC11715" class="blob-code blob-code-inner js-file-line">    m_buffer &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>message <span class="pl-pds">&quot;</span></span> &lt;&lt; longName &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span> [ id = <span class="pl-pds">&quot;</span></span> &lt;&lt; id &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span> ] {<span class="pl-pds">&quot;</span></span> &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\n</span><span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L11716" class="blob-num js-line-number" data-line-number="11716"></td>
        <td id="LC11716" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L11717" class="blob-num js-line-number" data-line-number="11717"></td>
        <td id="LC11717" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11718" class="blob-num js-line-number" data-line-number="11718"></td>
        <td id="LC11718" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToODVDVisitor::postVisit</span>() <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L11719" class="blob-num js-line-number" data-line-number="11719"></td>
        <td id="LC11719" class="blob-code blob-code-inner js-file-line">    m_buffer &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span>}<span class="pl-pds">&#39;</span></span> &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\n</span><span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L11720" class="blob-num js-line-number" data-line-number="11720"></td>
        <td id="LC11720" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L11721" class="blob-num js-line-number" data-line-number="11721"></td>
        <td id="LC11721" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11722" class="blob-num js-line-number" data-line-number="11722"></td>
        <td id="LC11722" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToODVDVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">bool</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L11723" class="blob-num js-line-number" data-line-number="11723"></td>
        <td id="LC11723" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L11724" class="blob-num js-line-number" data-line-number="11724"></td>
        <td id="LC11724" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)v;</td>
      </tr>
      <tr>
        <td id="L11725" class="blob-num js-line-number" data-line-number="11725"></td>
        <td id="LC11725" class="blob-code blob-code-inner js-file-line">    m_buffer &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>    <span class="pl-pds">&quot;</span></span></td>
      </tr>
      <tr>
        <td id="L11726" class="blob-num js-line-number" data-line-number="11726"></td>
        <td id="LC11726" class="blob-code blob-code-inner js-file-line">             &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>bool<span class="pl-pds">&quot;</span></span></td>
      </tr>
      <tr>
        <td id="L11727" class="blob-num js-line-number" data-line-number="11727"></td>
        <td id="LC11727" class="blob-code blob-code-inner js-file-line">             &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span> <span class="pl-pds">&quot;</span></span> &lt;&lt; name &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span> [ default = false, id = <span class="pl-pds">&quot;</span></span> &lt;&lt; id &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span> ];<span class="pl-pds">&quot;</span></span> &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\n</span><span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L11728" class="blob-num js-line-number" data-line-number="11728"></td>
        <td id="LC11728" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L11729" class="blob-num js-line-number" data-line-number="11729"></td>
        <td id="LC11729" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11730" class="blob-num js-line-number" data-line-number="11730"></td>
        <td id="LC11730" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToODVDVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">char</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L11731" class="blob-num js-line-number" data-line-number="11731"></td>
        <td id="LC11731" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L11732" class="blob-num js-line-number" data-line-number="11732"></td>
        <td id="LC11732" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)v;</td>
      </tr>
      <tr>
        <td id="L11733" class="blob-num js-line-number" data-line-number="11733"></td>
        <td id="LC11733" class="blob-code blob-code-inner js-file-line">    m_buffer &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>    <span class="pl-pds">&quot;</span></span></td>
      </tr>
      <tr>
        <td id="L11734" class="blob-num js-line-number" data-line-number="11734"></td>
        <td id="LC11734" class="blob-code blob-code-inner js-file-line">             &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>char<span class="pl-pds">&quot;</span></span></td>
      </tr>
      <tr>
        <td id="L11735" class="blob-num js-line-number" data-line-number="11735"></td>
        <td id="LC11735" class="blob-code blob-code-inner js-file-line">             &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span> <span class="pl-pds">&quot;</span></span> &lt;&lt; name &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span> [ default = &#39;0&#39;, id = <span class="pl-pds">&quot;</span></span> &lt;&lt; id &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span> ];<span class="pl-pds">&quot;</span></span> &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\n</span><span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L11736" class="blob-num js-line-number" data-line-number="11736"></td>
        <td id="LC11736" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L11737" class="blob-num js-line-number" data-line-number="11737"></td>
        <td id="LC11737" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11738" class="blob-num js-line-number" data-line-number="11738"></td>
        <td id="LC11738" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToODVDVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int8_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L11739" class="blob-num js-line-number" data-line-number="11739"></td>
        <td id="LC11739" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L11740" class="blob-num js-line-number" data-line-number="11740"></td>
        <td id="LC11740" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)v;</td>
      </tr>
      <tr>
        <td id="L11741" class="blob-num js-line-number" data-line-number="11741"></td>
        <td id="LC11741" class="blob-code blob-code-inner js-file-line">    m_buffer &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>    <span class="pl-pds">&quot;</span></span></td>
      </tr>
      <tr>
        <td id="L11742" class="blob-num js-line-number" data-line-number="11742"></td>
        <td id="LC11742" class="blob-code blob-code-inner js-file-line">             &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>int8<span class="pl-pds">&quot;</span></span></td>
      </tr>
      <tr>
        <td id="L11743" class="blob-num js-line-number" data-line-number="11743"></td>
        <td id="LC11743" class="blob-code blob-code-inner js-file-line">             &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span> <span class="pl-pds">&quot;</span></span> &lt;&lt; name &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span> [ default = 0, id = <span class="pl-pds">&quot;</span></span> &lt;&lt; id &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span> ];<span class="pl-pds">&quot;</span></span> &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\n</span><span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L11744" class="blob-num js-line-number" data-line-number="11744"></td>
        <td id="LC11744" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L11745" class="blob-num js-line-number" data-line-number="11745"></td>
        <td id="LC11745" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11746" class="blob-num js-line-number" data-line-number="11746"></td>
        <td id="LC11746" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToODVDVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint8_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L11747" class="blob-num js-line-number" data-line-number="11747"></td>
        <td id="LC11747" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L11748" class="blob-num js-line-number" data-line-number="11748"></td>
        <td id="LC11748" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)v;</td>
      </tr>
      <tr>
        <td id="L11749" class="blob-num js-line-number" data-line-number="11749"></td>
        <td id="LC11749" class="blob-code blob-code-inner js-file-line">    m_buffer &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>    <span class="pl-pds">&quot;</span></span></td>
      </tr>
      <tr>
        <td id="L11750" class="blob-num js-line-number" data-line-number="11750"></td>
        <td id="LC11750" class="blob-code blob-code-inner js-file-line">             &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>uint8<span class="pl-pds">&quot;</span></span></td>
      </tr>
      <tr>
        <td id="L11751" class="blob-num js-line-number" data-line-number="11751"></td>
        <td id="LC11751" class="blob-code blob-code-inner js-file-line">             &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span> <span class="pl-pds">&quot;</span></span> &lt;&lt; name &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span> [ default = 0, id = <span class="pl-pds">&quot;</span></span> &lt;&lt; id &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span> ];<span class="pl-pds">&quot;</span></span> &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\n</span><span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L11752" class="blob-num js-line-number" data-line-number="11752"></td>
        <td id="LC11752" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L11753" class="blob-num js-line-number" data-line-number="11753"></td>
        <td id="LC11753" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11754" class="blob-num js-line-number" data-line-number="11754"></td>
        <td id="LC11754" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToODVDVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int16_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L11755" class="blob-num js-line-number" data-line-number="11755"></td>
        <td id="LC11755" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L11756" class="blob-num js-line-number" data-line-number="11756"></td>
        <td id="LC11756" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)v;</td>
      </tr>
      <tr>
        <td id="L11757" class="blob-num js-line-number" data-line-number="11757"></td>
        <td id="LC11757" class="blob-code blob-code-inner js-file-line">    m_buffer &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>    <span class="pl-pds">&quot;</span></span></td>
      </tr>
      <tr>
        <td id="L11758" class="blob-num js-line-number" data-line-number="11758"></td>
        <td id="LC11758" class="blob-code blob-code-inner js-file-line">             &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>int16<span class="pl-pds">&quot;</span></span></td>
      </tr>
      <tr>
        <td id="L11759" class="blob-num js-line-number" data-line-number="11759"></td>
        <td id="LC11759" class="blob-code blob-code-inner js-file-line">             &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span> <span class="pl-pds">&quot;</span></span> &lt;&lt; name &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span> [ default = 0, id = <span class="pl-pds">&quot;</span></span> &lt;&lt; id &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span> ];<span class="pl-pds">&quot;</span></span> &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\n</span><span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L11760" class="blob-num js-line-number" data-line-number="11760"></td>
        <td id="LC11760" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L11761" class="blob-num js-line-number" data-line-number="11761"></td>
        <td id="LC11761" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11762" class="blob-num js-line-number" data-line-number="11762"></td>
        <td id="LC11762" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToODVDVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint16_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L11763" class="blob-num js-line-number" data-line-number="11763"></td>
        <td id="LC11763" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L11764" class="blob-num js-line-number" data-line-number="11764"></td>
        <td id="LC11764" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)v;</td>
      </tr>
      <tr>
        <td id="L11765" class="blob-num js-line-number" data-line-number="11765"></td>
        <td id="LC11765" class="blob-code blob-code-inner js-file-line">    m_buffer &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>    <span class="pl-pds">&quot;</span></span></td>
      </tr>
      <tr>
        <td id="L11766" class="blob-num js-line-number" data-line-number="11766"></td>
        <td id="LC11766" class="blob-code blob-code-inner js-file-line">             &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>uint16<span class="pl-pds">&quot;</span></span></td>
      </tr>
      <tr>
        <td id="L11767" class="blob-num js-line-number" data-line-number="11767"></td>
        <td id="LC11767" class="blob-code blob-code-inner js-file-line">             &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span> <span class="pl-pds">&quot;</span></span> &lt;&lt; name &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span> [ default = 0, id = <span class="pl-pds">&quot;</span></span> &lt;&lt; id &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span> ];<span class="pl-pds">&quot;</span></span> &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\n</span><span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L11768" class="blob-num js-line-number" data-line-number="11768"></td>
        <td id="LC11768" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L11769" class="blob-num js-line-number" data-line-number="11769"></td>
        <td id="LC11769" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11770" class="blob-num js-line-number" data-line-number="11770"></td>
        <td id="LC11770" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToODVDVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int32_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L11771" class="blob-num js-line-number" data-line-number="11771"></td>
        <td id="LC11771" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L11772" class="blob-num js-line-number" data-line-number="11772"></td>
        <td id="LC11772" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)v;</td>
      </tr>
      <tr>
        <td id="L11773" class="blob-num js-line-number" data-line-number="11773"></td>
        <td id="LC11773" class="blob-code blob-code-inner js-file-line">    m_buffer &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>    <span class="pl-pds">&quot;</span></span></td>
      </tr>
      <tr>
        <td id="L11774" class="blob-num js-line-number" data-line-number="11774"></td>
        <td id="LC11774" class="blob-code blob-code-inner js-file-line">             &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>int32<span class="pl-pds">&quot;</span></span></td>
      </tr>
      <tr>
        <td id="L11775" class="blob-num js-line-number" data-line-number="11775"></td>
        <td id="LC11775" class="blob-code blob-code-inner js-file-line">             &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span> <span class="pl-pds">&quot;</span></span> &lt;&lt; name &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span> [ default = 0, id = <span class="pl-pds">&quot;</span></span> &lt;&lt; id &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span> ];<span class="pl-pds">&quot;</span></span> &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\n</span><span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L11776" class="blob-num js-line-number" data-line-number="11776"></td>
        <td id="LC11776" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L11777" class="blob-num js-line-number" data-line-number="11777"></td>
        <td id="LC11777" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11778" class="blob-num js-line-number" data-line-number="11778"></td>
        <td id="LC11778" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToODVDVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint32_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L11779" class="blob-num js-line-number" data-line-number="11779"></td>
        <td id="LC11779" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L11780" class="blob-num js-line-number" data-line-number="11780"></td>
        <td id="LC11780" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)v;</td>
      </tr>
      <tr>
        <td id="L11781" class="blob-num js-line-number" data-line-number="11781"></td>
        <td id="LC11781" class="blob-code blob-code-inner js-file-line">    m_buffer &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>    <span class="pl-pds">&quot;</span></span></td>
      </tr>
      <tr>
        <td id="L11782" class="blob-num js-line-number" data-line-number="11782"></td>
        <td id="LC11782" class="blob-code blob-code-inner js-file-line">             &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>uint32<span class="pl-pds">&quot;</span></span></td>
      </tr>
      <tr>
        <td id="L11783" class="blob-num js-line-number" data-line-number="11783"></td>
        <td id="LC11783" class="blob-code blob-code-inner js-file-line">             &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span> <span class="pl-pds">&quot;</span></span> &lt;&lt; name &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span> [ default = 0, id = <span class="pl-pds">&quot;</span></span> &lt;&lt; id &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span> ];<span class="pl-pds">&quot;</span></span> &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\n</span><span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L11784" class="blob-num js-line-number" data-line-number="11784"></td>
        <td id="LC11784" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L11785" class="blob-num js-line-number" data-line-number="11785"></td>
        <td id="LC11785" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11786" class="blob-num js-line-number" data-line-number="11786"></td>
        <td id="LC11786" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToODVDVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">int64_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L11787" class="blob-num js-line-number" data-line-number="11787"></td>
        <td id="LC11787" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L11788" class="blob-num js-line-number" data-line-number="11788"></td>
        <td id="LC11788" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)v;</td>
      </tr>
      <tr>
        <td id="L11789" class="blob-num js-line-number" data-line-number="11789"></td>
        <td id="LC11789" class="blob-code blob-code-inner js-file-line">    m_buffer &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>    <span class="pl-pds">&quot;</span></span></td>
      </tr>
      <tr>
        <td id="L11790" class="blob-num js-line-number" data-line-number="11790"></td>
        <td id="LC11790" class="blob-code blob-code-inner js-file-line">             &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>int64<span class="pl-pds">&quot;</span></span></td>
      </tr>
      <tr>
        <td id="L11791" class="blob-num js-line-number" data-line-number="11791"></td>
        <td id="LC11791" class="blob-code blob-code-inner js-file-line">             &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span> <span class="pl-pds">&quot;</span></span> &lt;&lt; name &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span> [ default = 0, id = <span class="pl-pds">&quot;</span></span> &lt;&lt; id &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span> ];<span class="pl-pds">&quot;</span></span> &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\n</span><span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L11792" class="blob-num js-line-number" data-line-number="11792"></td>
        <td id="LC11792" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L11793" class="blob-num js-line-number" data-line-number="11793"></td>
        <td id="LC11793" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11794" class="blob-num js-line-number" data-line-number="11794"></td>
        <td id="LC11794" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToODVDVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-c1">uint64_t</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L11795" class="blob-num js-line-number" data-line-number="11795"></td>
        <td id="LC11795" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L11796" class="blob-num js-line-number" data-line-number="11796"></td>
        <td id="LC11796" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)v;</td>
      </tr>
      <tr>
        <td id="L11797" class="blob-num js-line-number" data-line-number="11797"></td>
        <td id="LC11797" class="blob-code blob-code-inner js-file-line">    m_buffer &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>    <span class="pl-pds">&quot;</span></span></td>
      </tr>
      <tr>
        <td id="L11798" class="blob-num js-line-number" data-line-number="11798"></td>
        <td id="LC11798" class="blob-code blob-code-inner js-file-line">             &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>uint64<span class="pl-pds">&quot;</span></span></td>
      </tr>
      <tr>
        <td id="L11799" class="blob-num js-line-number" data-line-number="11799"></td>
        <td id="LC11799" class="blob-code blob-code-inner js-file-line">             &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span> <span class="pl-pds">&quot;</span></span> &lt;&lt; name &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span> [ default = 0, id = <span class="pl-pds">&quot;</span></span> &lt;&lt; id &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span> ];<span class="pl-pds">&quot;</span></span> &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\n</span><span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L11800" class="blob-num js-line-number" data-line-number="11800"></td>
        <td id="LC11800" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L11801" class="blob-num js-line-number" data-line-number="11801"></td>
        <td id="LC11801" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11802" class="blob-num js-line-number" data-line-number="11802"></td>
        <td id="LC11802" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToODVDVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">float</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L11803" class="blob-num js-line-number" data-line-number="11803"></td>
        <td id="LC11803" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L11804" class="blob-num js-line-number" data-line-number="11804"></td>
        <td id="LC11804" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)v;</td>
      </tr>
      <tr>
        <td id="L11805" class="blob-num js-line-number" data-line-number="11805"></td>
        <td id="LC11805" class="blob-code blob-code-inner js-file-line">    m_buffer &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>    <span class="pl-pds">&quot;</span></span></td>
      </tr>
      <tr>
        <td id="L11806" class="blob-num js-line-number" data-line-number="11806"></td>
        <td id="LC11806" class="blob-code blob-code-inner js-file-line">             &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>float<span class="pl-pds">&quot;</span></span></td>
      </tr>
      <tr>
        <td id="L11807" class="blob-num js-line-number" data-line-number="11807"></td>
        <td id="LC11807" class="blob-code blob-code-inner js-file-line">             &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span> <span class="pl-pds">&quot;</span></span> &lt;&lt; name &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span> [ default = 0.0, id = <span class="pl-pds">&quot;</span></span> &lt;&lt; id &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span> ];<span class="pl-pds">&quot;</span></span> &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\n</span><span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L11808" class="blob-num js-line-number" data-line-number="11808"></td>
        <td id="LC11808" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L11809" class="blob-num js-line-number" data-line-number="11809"></td>
        <td id="LC11809" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11810" class="blob-num js-line-number" data-line-number="11810"></td>
        <td id="LC11810" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToODVDVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, <span class="pl-k">double</span> &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L11811" class="blob-num js-line-number" data-line-number="11811"></td>
        <td id="LC11811" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L11812" class="blob-num js-line-number" data-line-number="11812"></td>
        <td id="LC11812" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)v;</td>
      </tr>
      <tr>
        <td id="L11813" class="blob-num js-line-number" data-line-number="11813"></td>
        <td id="LC11813" class="blob-code blob-code-inner js-file-line">    m_buffer &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>    <span class="pl-pds">&quot;</span></span></td>
      </tr>
      <tr>
        <td id="L11814" class="blob-num js-line-number" data-line-number="11814"></td>
        <td id="LC11814" class="blob-code blob-code-inner js-file-line">             &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>double<span class="pl-pds">&quot;</span></span></td>
      </tr>
      <tr>
        <td id="L11815" class="blob-num js-line-number" data-line-number="11815"></td>
        <td id="LC11815" class="blob-code blob-code-inner js-file-line">             &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span> <span class="pl-pds">&quot;</span></span> &lt;&lt; name &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span> [ default = 0.0, id = <span class="pl-pds">&quot;</span></span> &lt;&lt; id &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span> ];<span class="pl-pds">&quot;</span></span> &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\n</span><span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L11816" class="blob-num js-line-number" data-line-number="11816"></td>
        <td id="LC11816" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L11817" class="blob-num js-line-number" data-line-number="11817"></td>
        <td id="LC11817" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11818" class="blob-num js-line-number" data-line-number="11818"></td>
        <td id="LC11818" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-k">void</span> <span class="pl-en">ToODVDVisitor::visit</span>(<span class="pl-c1">uint32_t</span> id, std::string &amp;&amp;typeName, std::string &amp;&amp;name, std::string &amp;v) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L11819" class="blob-num js-line-number" data-line-number="11819"></td>
        <td id="LC11819" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)typeName;</td>
      </tr>
      <tr>
        <td id="L11820" class="blob-num js-line-number" data-line-number="11820"></td>
        <td id="LC11820" class="blob-code blob-code-inner js-file-line">    (<span class="pl-k">void</span>)v;</td>
      </tr>
      <tr>
        <td id="L11821" class="blob-num js-line-number" data-line-number="11821"></td>
        <td id="LC11821" class="blob-code blob-code-inner js-file-line">    m_buffer &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>    <span class="pl-pds">&quot;</span></span></td>
      </tr>
      <tr>
        <td id="L11822" class="blob-num js-line-number" data-line-number="11822"></td>
        <td id="LC11822" class="blob-code blob-code-inner js-file-line">             &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>string<span class="pl-pds">&quot;</span></span></td>
      </tr>
      <tr>
        <td id="L11823" class="blob-num js-line-number" data-line-number="11823"></td>
        <td id="LC11823" class="blob-code blob-code-inner js-file-line">             &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span> <span class="pl-pds">&quot;</span></span> &lt;&lt; name &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span> [ default = <span class="pl-cce">\&quot;\&quot;</span>, id = <span class="pl-pds">&quot;</span></span> &lt;&lt; id &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span> ];<span class="pl-pds">&quot;</span></span> &lt;&lt; <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\n</span><span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L11824" class="blob-num js-line-number" data-line-number="11824"></td>
        <td id="LC11824" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L11825" class="blob-num js-line-number" data-line-number="11825"></td>
        <td id="LC11825" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11826" class="blob-num js-line-number" data-line-number="11826"></td>
        <td id="LC11826" class="blob-code blob-code-inner js-file-line">} <span class="pl-c"><span class="pl-c">//</span> namespace cluon</span></td>
      </tr>
      <tr>
        <td id="L11827" class="blob-num js-line-number" data-line-number="11827"></td>
        <td id="LC11827" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L11828" class="blob-num js-line-number" data-line-number="11828"></td>
        <td id="LC11828" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Copyright (C) 2017-2018  Christian Berger</span></td>
      </tr>
      <tr>
        <td id="L11829" class="blob-num js-line-number" data-line-number="11829"></td>
        <td id="LC11829" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L11830" class="blob-num js-line-number" data-line-number="11830"></td>
        <td id="LC11830" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is free software: you can redistribute it and/or modify</span></td>
      </tr>
      <tr>
        <td id="L11831" class="blob-num js-line-number" data-line-number="11831"></td>
        <td id="LC11831" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * it under the terms of the GNU General Public License as published by</span></td>
      </tr>
      <tr>
        <td id="L11832" class="blob-num js-line-number" data-line-number="11832"></td>
        <td id="LC11832" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * the Free Software Foundation, either version 3 of the License, or</span></td>
      </tr>
      <tr>
        <td id="L11833" class="blob-num js-line-number" data-line-number="11833"></td>
        <td id="LC11833" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * (at your option) any later version.</span></td>
      </tr>
      <tr>
        <td id="L11834" class="blob-num js-line-number" data-line-number="11834"></td>
        <td id="LC11834" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L11835" class="blob-num js-line-number" data-line-number="11835"></td>
        <td id="LC11835" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is distributed in the hope that it will be useful,</span></td>
      </tr>
      <tr>
        <td id="L11836" class="blob-num js-line-number" data-line-number="11836"></td>
        <td id="LC11836" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></td>
      </tr>
      <tr>
        <td id="L11837" class="blob-num js-line-number" data-line-number="11837"></td>
        <td id="LC11837" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></td>
      </tr>
      <tr>
        <td id="L11838" class="blob-num js-line-number" data-line-number="11838"></td>
        <td id="LC11838" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * GNU General Public License for more details.</span></td>
      </tr>
      <tr>
        <td id="L11839" class="blob-num js-line-number" data-line-number="11839"></td>
        <td id="LC11839" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L11840" class="blob-num js-line-number" data-line-number="11840"></td>
        <td id="LC11840" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * You should have received a copy of the GNU General Public License</span></td>
      </tr>
      <tr>
        <td id="L11841" class="blob-num js-line-number" data-line-number="11841"></td>
        <td id="LC11841" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></td>
      </tr>
      <tr>
        <td id="L11842" class="blob-num js-line-number" data-line-number="11842"></td>
        <td id="LC11842" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L11843" class="blob-num js-line-number" data-line-number="11843"></td>
        <td id="LC11843" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11844" class="blob-num js-line-number" data-line-number="11844"></td>
        <td id="LC11844" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/EnvelopeConverter.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L11845" class="blob-num js-line-number" data-line-number="11845"></td>
        <td id="LC11845" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/Envelope.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L11846" class="blob-num js-line-number" data-line-number="11846"></td>
        <td id="LC11846" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/FromJSONVisitor.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L11847" class="blob-num js-line-number" data-line-number="11847"></td>
        <td id="LC11847" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/FromProtoVisitor.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L11848" class="blob-num js-line-number" data-line-number="11848"></td>
        <td id="LC11848" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/GenericMessage.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L11849" class="blob-num js-line-number" data-line-number="11849"></td>
        <td id="LC11849" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/MessageParser.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L11850" class="blob-num js-line-number" data-line-number="11850"></td>
        <td id="LC11850" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/ToJSONVisitor.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L11851" class="blob-num js-line-number" data-line-number="11851"></td>
        <td id="LC11851" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/ToProtoVisitor.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L11852" class="blob-num js-line-number" data-line-number="11852"></td>
        <td id="LC11852" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11853" class="blob-num js-line-number" data-line-number="11853"></td>
        <td id="LC11853" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>algorithm<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L11854" class="blob-num js-line-number" data-line-number="11854"></td>
        <td id="LC11854" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>sstream<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L11855" class="blob-num js-line-number" data-line-number="11855"></td>
        <td id="LC11855" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>utility<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L11856" class="blob-num js-line-number" data-line-number="11856"></td>
        <td id="LC11856" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11857" class="blob-num js-line-number" data-line-number="11857"></td>
        <td id="LC11857" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">cluon</span> {</td>
      </tr>
      <tr>
        <td id="L11858" class="blob-num js-line-number" data-line-number="11858"></td>
        <td id="LC11858" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11859" class="blob-num js-line-number" data-line-number="11859"></td>
        <td id="LC11859" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> <span class="pl-c1">int32_t</span> <span class="pl-en">EnvelopeConverter::setMessageSpecification</span>(<span class="pl-k">const</span> std::string &amp;ms) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L11860" class="blob-num js-line-number" data-line-number="11860"></td>
        <td id="LC11860" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">int32_t</span> retVal{-<span class="pl-c1">1</span>};</td>
      </tr>
      <tr>
        <td id="L11861" class="blob-num js-line-number" data-line-number="11861"></td>
        <td id="LC11861" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11862" class="blob-num js-line-number" data-line-number="11862"></td>
        <td id="LC11862" class="blob-code blob-code-inner js-file-line">    m_listOfMetaMessages.<span class="pl-c1">clear</span>();</td>
      </tr>
      <tr>
        <td id="L11863" class="blob-num js-line-number" data-line-number="11863"></td>
        <td id="LC11863" class="blob-code blob-code-inner js-file-line">    m_scopeOfMetaMessages.<span class="pl-c1">clear</span>();</td>
      </tr>
      <tr>
        <td id="L11864" class="blob-num js-line-number" data-line-number="11864"></td>
        <td id="LC11864" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11865" class="blob-num js-line-number" data-line-number="11865"></td>
        <td id="LC11865" class="blob-code blob-code-inner js-file-line">    cluon::MessageParser mp;</td>
      </tr>
      <tr>
        <td id="L11866" class="blob-num js-line-number" data-line-number="11866"></td>
        <td id="LC11866" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">auto</span> parsingResult = mp.<span class="pl-c1">parse</span>(ms);</td>
      </tr>
      <tr>
        <td id="L11867" class="blob-num js-line-number" data-line-number="11867"></td>
        <td id="LC11867" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (cluon::MessageParser::MessageParserErrorCodes::NO_ERROR == parsingResult.<span class="pl-smi">second</span>) {</td>
      </tr>
      <tr>
        <td id="L11868" class="blob-num js-line-number" data-line-number="11868"></td>
        <td id="LC11868" class="blob-code blob-code-inner js-file-line">        m_listOfMetaMessages = parsingResult.<span class="pl-smi">first</span>;</td>
      </tr>
      <tr>
        <td id="L11869" class="blob-num js-line-number" data-line-number="11869"></td>
        <td id="LC11869" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">for</span> (<span class="pl-k">const</span> <span class="pl-k">auto</span> &amp;mm : m_listOfMetaMessages) { m_scopeOfMetaMessages[mm.<span class="pl-c1">messageIdentifier</span>()] = mm; }</td>
      </tr>
      <tr>
        <td id="L11870" class="blob-num js-line-number" data-line-number="11870"></td>
        <td id="LC11870" class="blob-code blob-code-inner js-file-line">        retVal = <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">int32_t</span>&gt;(m_listOfMetaMessages.<span class="pl-c1">size</span>());</td>
      </tr>
      <tr>
        <td id="L11871" class="blob-num js-line-number" data-line-number="11871"></td>
        <td id="LC11871" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L11872" class="blob-num js-line-number" data-line-number="11872"></td>
        <td id="LC11872" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> retVal;</td>
      </tr>
      <tr>
        <td id="L11873" class="blob-num js-line-number" data-line-number="11873"></td>
        <td id="LC11873" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L11874" class="blob-num js-line-number" data-line-number="11874"></td>
        <td id="LC11874" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11875" class="blob-num js-line-number" data-line-number="11875"></td>
        <td id="LC11875" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::string <span class="pl-en">EnvelopeConverter::getJSONFromProtoEncodedEnvelope</span>(<span class="pl-k">const</span> std::string &amp;protoEncodedEnvelope) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L11876" class="blob-num js-line-number" data-line-number="11876"></td>
        <td id="LC11876" class="blob-code blob-code-inner js-file-line">    std::string retVal{<span class="pl-s"><span class="pl-pds">&quot;</span>{}<span class="pl-pds">&quot;</span></span>};</td>
      </tr>
      <tr>
        <td id="L11877" class="blob-num js-line-number" data-line-number="11877"></td>
        <td id="LC11877" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (!m_listOfMetaMessages.<span class="pl-c1">empty</span>()) {</td>
      </tr>
      <tr>
        <td id="L11878" class="blob-num js-line-number" data-line-number="11878"></td>
        <td id="LC11878" class="blob-code blob-code-inner js-file-line">        cluon::data::Envelope envelope;</td>
      </tr>
      <tr>
        <td id="L11879" class="blob-num js-line-number" data-line-number="11879"></td>
        <td id="LC11879" class="blob-code blob-code-inner js-file-line">        std::stringstream <span class="pl-smi">sstr</span>(protoEncodedEnvelope);</td>
      </tr>
      <tr>
        <td id="L11880" class="blob-num js-line-number" data-line-number="11880"></td>
        <td id="LC11880" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">constexpr</span> <span class="pl-c1">uint8_t</span> OD4_HEADER_SIZE{<span class="pl-c1">5</span>};</td>
      </tr>
      <tr>
        <td id="L11881" class="blob-num js-line-number" data-line-number="11881"></td>
        <td id="LC11881" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (OD4_HEADER_SIZE &lt; protoEncodedEnvelope.<span class="pl-c1">size</span>()) {</td>
      </tr>
      <tr>
        <td id="L11882" class="blob-num js-line-number" data-line-number="11882"></td>
        <td id="LC11882" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> Try decoding complete OD4-encoded Envelope including header.</span></td>
      </tr>
      <tr>
        <td id="L11883" class="blob-num js-line-number" data-line-number="11883"></td>
        <td id="LC11883" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">constexpr</span> <span class="pl-c1">uint8_t</span> byte0{<span class="pl-c1">0x0D</span>};</td>
      </tr>
      <tr>
        <td id="L11884" class="blob-num js-line-number" data-line-number="11884"></td>
        <td id="LC11884" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">constexpr</span> <span class="pl-c1">uint8_t</span> byte1{<span class="pl-c1">0xA4</span>};</td>
      </tr>
      <tr>
        <td id="L11885" class="blob-num js-line-number" data-line-number="11885"></td>
        <td id="LC11885" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> ((<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(protoEncodedEnvelope.<span class="pl-c1">at</span>(<span class="pl-c1">0</span>)) == byte0) &amp;&amp; (<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint8_t</span>&gt;(protoEncodedEnvelope.<span class="pl-c1">at</span>(<span class="pl-c1">1</span>)) == byte1)) {</td>
      </tr>
      <tr>
        <td id="L11886" class="blob-num js-line-number" data-line-number="11886"></td>
        <td id="LC11886" class="blob-code blob-code-inner js-file-line">                <span class="pl-c1">uint32_t</span> length = (*<span class="pl-k">reinterpret_cast</span>&lt;<span class="pl-k">const</span> <span class="pl-c1">uint32_t</span> *&gt;(protoEncodedEnvelope.<span class="pl-c1">data</span>() + <span class="pl-c1">1</span>));</td>
      </tr>
      <tr>
        <td id="L11887" class="blob-num js-line-number" data-line-number="11887"></td>
        <td id="LC11887" class="blob-code blob-code-inner js-file-line">                length          = <span class="pl-c1">le32toh</span>(length) &gt;&gt; <span class="pl-c1">8</span>;</td>
      </tr>
      <tr>
        <td id="L11888" class="blob-num js-line-number" data-line-number="11888"></td>
        <td id="LC11888" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">if</span> ((OD4_HEADER_SIZE + length) == protoEncodedEnvelope.<span class="pl-c1">size</span>()) {</td>
      </tr>
      <tr>
        <td id="L11889" class="blob-num js-line-number" data-line-number="11889"></td>
        <td id="LC11889" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">auto</span> result{<span class="pl-c1">extractEnvelope</span>(sstr)};</td>
      </tr>
      <tr>
        <td id="L11890" class="blob-num js-line-number" data-line-number="11890"></td>
        <td id="LC11890" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">if</span> (result.<span class="pl-smi">first</span>) {</td>
      </tr>
      <tr>
        <td id="L11891" class="blob-num js-line-number" data-line-number="11891"></td>
        <td id="LC11891" class="blob-code blob-code-inner js-file-line">                        envelope = result.<span class="pl-smi">second</span>;</td>
      </tr>
      <tr>
        <td id="L11892" class="blob-num js-line-number" data-line-number="11892"></td>
        <td id="LC11892" class="blob-code blob-code-inner js-file-line">                    }</td>
      </tr>
      <tr>
        <td id="L11893" class="blob-num js-line-number" data-line-number="11893"></td>
        <td id="LC11893" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L11894" class="blob-num js-line-number" data-line-number="11894"></td>
        <td id="LC11894" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L11895" class="blob-num js-line-number" data-line-number="11895"></td>
        <td id="LC11895" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L11896" class="blob-num js-line-number" data-line-number="11896"></td>
        <td id="LC11896" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11897" class="blob-num js-line-number" data-line-number="11897"></td>
        <td id="LC11897" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-c1">0</span> == envelope.<span class="pl-c1">dataType</span>()) {</td>
      </tr>
      <tr>
        <td id="L11898" class="blob-num js-line-number" data-line-number="11898"></td>
        <td id="LC11898" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> Directly decoding complete OD4 container failed, try decoding</span></td>
      </tr>
      <tr>
        <td id="L11899" class="blob-num js-line-number" data-line-number="11899"></td>
        <td id="LC11899" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> without header.</span></td>
      </tr>
      <tr>
        <td id="L11900" class="blob-num js-line-number" data-line-number="11900"></td>
        <td id="LC11900" class="blob-code blob-code-inner js-file-line">            cluon::FromProtoVisitor protoDecoder;</td>
      </tr>
      <tr>
        <td id="L11901" class="blob-num js-line-number" data-line-number="11901"></td>
        <td id="LC11901" class="blob-code blob-code-inner js-file-line">            protoDecoder.<span class="pl-c1">decodeFrom</span>(sstr);</td>
      </tr>
      <tr>
        <td id="L11902" class="blob-num js-line-number" data-line-number="11902"></td>
        <td id="LC11902" class="blob-code blob-code-inner js-file-line">            envelope.<span class="pl-c1">accept</span>(protoDecoder);</td>
      </tr>
      <tr>
        <td id="L11903" class="blob-num js-line-number" data-line-number="11903"></td>
        <td id="LC11903" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L11904" class="blob-num js-line-number" data-line-number="11904"></td>
        <td id="LC11904" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11905" class="blob-num js-line-number" data-line-number="11905"></td>
        <td id="LC11905" class="blob-code blob-code-inner js-file-line">        retVal = <span class="pl-c1">getJSONFromEnvelope</span>(envelope);</td>
      </tr>
      <tr>
        <td id="L11906" class="blob-num js-line-number" data-line-number="11906"></td>
        <td id="LC11906" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L11907" class="blob-num js-line-number" data-line-number="11907"></td>
        <td id="LC11907" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> retVal;</td>
      </tr>
      <tr>
        <td id="L11908" class="blob-num js-line-number" data-line-number="11908"></td>
        <td id="LC11908" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L11909" class="blob-num js-line-number" data-line-number="11909"></td>
        <td id="LC11909" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11910" class="blob-num js-line-number" data-line-number="11910"></td>
        <td id="LC11910" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::string <span class="pl-en">EnvelopeConverter::getJSONFromEnvelope</span>(cluon::data::Envelope &amp;envelope) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L11911" class="blob-num js-line-number" data-line-number="11911"></td>
        <td id="LC11911" class="blob-code blob-code-inner js-file-line">    std::string retVal{<span class="pl-s"><span class="pl-pds">&quot;</span>{}<span class="pl-pds">&quot;</span></span>};</td>
      </tr>
      <tr>
        <td id="L11912" class="blob-num js-line-number" data-line-number="11912"></td>
        <td id="LC11912" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (!m_listOfMetaMessages.<span class="pl-c1">empty</span>()) {</td>
      </tr>
      <tr>
        <td id="L11913" class="blob-num js-line-number" data-line-number="11913"></td>
        <td id="LC11913" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-c1">0</span> &lt; m_scopeOfMetaMessages.<span class="pl-c1">count</span>(envelope.<span class="pl-c1">dataType</span>())) {</td>
      </tr>
      <tr>
        <td id="L11914" class="blob-num js-line-number" data-line-number="11914"></td>
        <td id="LC11914" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> First, create JSON from Envelope.</span></td>
      </tr>
      <tr>
        <td id="L11915" class="blob-num js-line-number" data-line-number="11915"></td>
        <td id="LC11915" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">constexpr</span> <span class="pl-k">bool</span> OUTER_CURLY_BRACES{<span class="pl-c1">false</span>};</td>
      </tr>
      <tr>
        <td id="L11916" class="blob-num js-line-number" data-line-number="11916"></td>
        <td id="LC11916" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> Ignore field 2 (= serializedData) as it will be replaced below.</span></td>
      </tr>
      <tr>
        <td id="L11917" class="blob-num js-line-number" data-line-number="11917"></td>
        <td id="LC11917" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">const</span> std::map&lt;<span class="pl-c1">uint32_t</span>, <span class="pl-k">bool</span>&gt; mask{{<span class="pl-c1">2</span>, <span class="pl-c1">false</span>}};</td>
      </tr>
      <tr>
        <td id="L11918" class="blob-num js-line-number" data-line-number="11918"></td>
        <td id="LC11918" class="blob-code blob-code-inner js-file-line">            ToJSONVisitor envelopeToJSON{OUTER_CURLY_BRACES, mask};</td>
      </tr>
      <tr>
        <td id="L11919" class="blob-num js-line-number" data-line-number="11919"></td>
        <td id="LC11919" class="blob-code blob-code-inner js-file-line">            envelope.<span class="pl-c1">accept</span>(envelopeToJSON);</td>
      </tr>
      <tr>
        <td id="L11920" class="blob-num js-line-number" data-line-number="11920"></td>
        <td id="LC11920" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11921" class="blob-num js-line-number" data-line-number="11921"></td>
        <td id="LC11921" class="blob-code blob-code-inner js-file-line">            std::stringstream sstr{envelope.<span class="pl-c1">serializedData</span>()};</td>
      </tr>
      <tr>
        <td id="L11922" class="blob-num js-line-number" data-line-number="11922"></td>
        <td id="LC11922" class="blob-code blob-code-inner js-file-line">            cluon::FromProtoVisitor protoDecoder;</td>
      </tr>
      <tr>
        <td id="L11923" class="blob-num js-line-number" data-line-number="11923"></td>
        <td id="LC11923" class="blob-code blob-code-inner js-file-line">            protoDecoder.<span class="pl-c1">decodeFrom</span>(sstr);</td>
      </tr>
      <tr>
        <td id="L11924" class="blob-num js-line-number" data-line-number="11924"></td>
        <td id="LC11924" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11925" class="blob-num js-line-number" data-line-number="11925"></td>
        <td id="LC11925" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> Now, create JSON from payload.</span></td>
      </tr>
      <tr>
        <td id="L11926" class="blob-num js-line-number" data-line-number="11926"></td>
        <td id="LC11926" class="blob-code blob-code-inner js-file-line">            cluon::MetaMessage payload{m_scopeOfMetaMessages[envelope.<span class="pl-c1">dataType</span>()]};</td>
      </tr>
      <tr>
        <td id="L11927" class="blob-num js-line-number" data-line-number="11927"></td>
        <td id="LC11927" class="blob-code blob-code-inner js-file-line">            cluon::GenericMessage gm;</td>
      </tr>
      <tr>
        <td id="L11928" class="blob-num js-line-number" data-line-number="11928"></td>
        <td id="LC11928" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11929" class="blob-num js-line-number" data-line-number="11929"></td>
        <td id="LC11929" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> Create &quot;empty&quot; GenericMessage from this MetaMessage.</span></td>
      </tr>
      <tr>
        <td id="L11930" class="blob-num js-line-number" data-line-number="11930"></td>
        <td id="LC11930" class="blob-code blob-code-inner js-file-line">            gm.<span class="pl-c1">createFrom</span>(payload, m_listOfMetaMessages);</td>
      </tr>
      <tr>
        <td id="L11931" class="blob-num js-line-number" data-line-number="11931"></td>
        <td id="LC11931" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11932" class="blob-num js-line-number" data-line-number="11932"></td>
        <td id="LC11932" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> Set values in the newly created GenericMessage from ProtoDecoder.</span></td>
      </tr>
      <tr>
        <td id="L11933" class="blob-num js-line-number" data-line-number="11933"></td>
        <td id="LC11933" class="blob-code blob-code-inner js-file-line">            gm.<span class="pl-c1">accept</span>(protoDecoder);</td>
      </tr>
      <tr>
        <td id="L11934" class="blob-num js-line-number" data-line-number="11934"></td>
        <td id="LC11934" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11935" class="blob-num js-line-number" data-line-number="11935"></td>
        <td id="LC11935" class="blob-code blob-code-inner js-file-line">            ToJSONVisitor payloadToJSON{OUTER_CURLY_BRACES};</td>
      </tr>
      <tr>
        <td id="L11936" class="blob-num js-line-number" data-line-number="11936"></td>
        <td id="LC11936" class="blob-code blob-code-inner js-file-line">            gm.<span class="pl-c1">accept</span>(payloadToJSON);</td>
      </tr>
      <tr>
        <td id="L11937" class="blob-num js-line-number" data-line-number="11937"></td>
        <td id="LC11937" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11938" class="blob-num js-line-number" data-line-number="11938"></td>
        <td id="LC11938" class="blob-code blob-code-inner js-file-line">            std::string tmp{payload.<span class="pl-c1">messageName</span>()};</td>
      </tr>
      <tr>
        <td id="L11939" class="blob-num js-line-number" data-line-number="11939"></td>
        <td id="LC11939" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">std::replace</span>(tmp.<span class="pl-c1">begin</span>(), tmp.<span class="pl-c1">end</span>(), <span class="pl-s"><span class="pl-pds">&#39;</span>.<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>_<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L11940" class="blob-num js-line-number" data-line-number="11940"></td>
        <td id="LC11940" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11941" class="blob-num js-line-number" data-line-number="11941"></td>
        <td id="LC11941" class="blob-code blob-code-inner js-file-line">            retVal = <span class="pl-s"><span class="pl-pds">&#39;</span>{<span class="pl-pds">&#39;</span></span> + envelopeToJSON.<span class="pl-c1">json</span>() + <span class="pl-s"><span class="pl-pds">&#39;</span>,<span class="pl-pds">&#39;</span></span> + <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\n</span><span class="pl-pds">&#39;</span></span> + <span class="pl-s"><span class="pl-pds">&#39;</span>&quot;<span class="pl-pds">&#39;</span></span> + tmp + <span class="pl-s"><span class="pl-pds">&#39;</span>&quot;<span class="pl-pds">&#39;</span></span> + <span class="pl-s"><span class="pl-pds">&#39;</span>:<span class="pl-pds">&#39;</span></span> + <span class="pl-s"><span class="pl-pds">&#39;</span>{<span class="pl-pds">&#39;</span></span> + payloadToJSON.<span class="pl-c1">json</span>() + <span class="pl-s"><span class="pl-pds">&#39;</span>}<span class="pl-pds">&#39;</span></span> + <span class="pl-s"><span class="pl-pds">&#39;</span>}<span class="pl-pds">&#39;</span></span>;</td>
      </tr>
      <tr>
        <td id="L11942" class="blob-num js-line-number" data-line-number="11942"></td>
        <td id="LC11942" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L11943" class="blob-num js-line-number" data-line-number="11943"></td>
        <td id="LC11943" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L11944" class="blob-num js-line-number" data-line-number="11944"></td>
        <td id="LC11944" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> retVal;</td>
      </tr>
      <tr>
        <td id="L11945" class="blob-num js-line-number" data-line-number="11945"></td>
        <td id="LC11945" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L11946" class="blob-num js-line-number" data-line-number="11946"></td>
        <td id="LC11946" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11947" class="blob-num js-line-number" data-line-number="11947"></td>
        <td id="LC11947" class="blob-code blob-code-inner js-file-line"><span class="pl-k">inline</span> std::string <span class="pl-en">EnvelopeConverter::getProtoEncodedEnvelopeFromJSONWithoutTimeStamps</span>(<span class="pl-k">const</span> std::string &amp;json, <span class="pl-c1">int32_t</span> messageIdentifier) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L11948" class="blob-num js-line-number" data-line-number="11948"></td>
        <td id="LC11948" class="blob-code blob-code-inner js-file-line">    std::string retVal;</td>
      </tr>
      <tr>
        <td id="L11949" class="blob-num js-line-number" data-line-number="11949"></td>
        <td id="LC11949" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-c1">0</span> &lt; m_scopeOfMetaMessages.<span class="pl-c1">count</span>(messageIdentifier)) {</td>
      </tr>
      <tr>
        <td id="L11950" class="blob-num js-line-number" data-line-number="11950"></td>
        <td id="LC11950" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> Get specification for message to be created.</span></td>
      </tr>
      <tr>
        <td id="L11951" class="blob-num js-line-number" data-line-number="11951"></td>
        <td id="LC11951" class="blob-code blob-code-inner js-file-line">        cluon::MetaMessage message{m_scopeOfMetaMessages[messageIdentifier]};</td>
      </tr>
      <tr>
        <td id="L11952" class="blob-num js-line-number" data-line-number="11952"></td>
        <td id="LC11952" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11953" class="blob-num js-line-number" data-line-number="11953"></td>
        <td id="LC11953" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> Create &quot;empty&quot; instance for the required message as GenericMessage.</span></td>
      </tr>
      <tr>
        <td id="L11954" class="blob-num js-line-number" data-line-number="11954"></td>
        <td id="LC11954" class="blob-code blob-code-inner js-file-line">        cluon::GenericMessage gm;</td>
      </tr>
      <tr>
        <td id="L11955" class="blob-num js-line-number" data-line-number="11955"></td>
        <td id="LC11955" class="blob-code blob-code-inner js-file-line">        gm.<span class="pl-c1">createFrom</span>(message, m_listOfMetaMessages);</td>
      </tr>
      <tr>
        <td id="L11956" class="blob-num js-line-number" data-line-number="11956"></td>
        <td id="LC11956" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11957" class="blob-num js-line-number" data-line-number="11957"></td>
        <td id="LC11957" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> Parse data from given JSON.</span></td>
      </tr>
      <tr>
        <td id="L11958" class="blob-num js-line-number" data-line-number="11958"></td>
        <td id="LC11958" class="blob-code blob-code-inner js-file-line">        std::stringstream sstr{json};</td>
      </tr>
      <tr>
        <td id="L11959" class="blob-num js-line-number" data-line-number="11959"></td>
        <td id="LC11959" class="blob-code blob-code-inner js-file-line">        cluon::FromJSONVisitor jsonDecoder;</td>
      </tr>
      <tr>
        <td id="L11960" class="blob-num js-line-number" data-line-number="11960"></td>
        <td id="LC11960" class="blob-code blob-code-inner js-file-line">        jsonDecoder.<span class="pl-c1">decodeFrom</span>(sstr);</td>
      </tr>
      <tr>
        <td id="L11961" class="blob-num js-line-number" data-line-number="11961"></td>
        <td id="LC11961" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11962" class="blob-num js-line-number" data-line-number="11962"></td>
        <td id="LC11962" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> Set values in the newly created GenericMessage from JSONDecoder.</span></td>
      </tr>
      <tr>
        <td id="L11963" class="blob-num js-line-number" data-line-number="11963"></td>
        <td id="LC11963" class="blob-code blob-code-inner js-file-line">        gm.<span class="pl-c1">accept</span>(jsonDecoder);</td>
      </tr>
      <tr>
        <td id="L11964" class="blob-num js-line-number" data-line-number="11964"></td>
        <td id="LC11964" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11965" class="blob-num js-line-number" data-line-number="11965"></td>
        <td id="LC11965" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> Finally, transform GenericMessage into Envelope.</span></td>
      </tr>
      <tr>
        <td id="L11966" class="blob-num js-line-number" data-line-number="11966"></td>
        <td id="LC11966" class="blob-code blob-code-inner js-file-line">        ToProtoVisitor protoEncoder;</td>
      </tr>
      <tr>
        <td id="L11967" class="blob-num js-line-number" data-line-number="11967"></td>
        <td id="LC11967" class="blob-code blob-code-inner js-file-line">        gm.<span class="pl-c1">accept</span>(protoEncoder);</td>
      </tr>
      <tr>
        <td id="L11968" class="blob-num js-line-number" data-line-number="11968"></td>
        <td id="LC11968" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11969" class="blob-num js-line-number" data-line-number="11969"></td>
        <td id="LC11969" class="blob-code blob-code-inner js-file-line">        cluon::data::Envelope env;</td>
      </tr>
      <tr>
        <td id="L11970" class="blob-num js-line-number" data-line-number="11970"></td>
        <td id="LC11970" class="blob-code blob-code-inner js-file-line">        env.<span class="pl-c1">dataType</span>(messageIdentifier).<span class="pl-c1">serializedData</span>(protoEncoder.<span class="pl-c1">encodedData</span>());</td>
      </tr>
      <tr>
        <td id="L11971" class="blob-num js-line-number" data-line-number="11971"></td>
        <td id="LC11971" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11972" class="blob-num js-line-number" data-line-number="11972"></td>
        <td id="LC11972" class="blob-code blob-code-inner js-file-line">        retVal = <span class="pl-c1">cluon::serializeEnvelope</span>(<span class="pl-c1">std::move</span>(env));</td>
      </tr>
      <tr>
        <td id="L11973" class="blob-num js-line-number" data-line-number="11973"></td>
        <td id="LC11973" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L11974" class="blob-num js-line-number" data-line-number="11974"></td>
        <td id="LC11974" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> retVal;</td>
      </tr>
      <tr>
        <td id="L11975" class="blob-num js-line-number" data-line-number="11975"></td>
        <td id="LC11975" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L11976" class="blob-num js-line-number" data-line-number="11976"></td>
        <td id="LC11976" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L11977" class="blob-num js-line-number" data-line-number="11977"></td>
        <td id="LC11977" class="blob-code blob-code-inner js-file-line">} <span class="pl-c"><span class="pl-c">//</span> namespace cluon</span></td>
      </tr>
      <tr>
        <td id="L11978" class="blob-num js-line-number" data-line-number="11978"></td>
        <td id="LC11978" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L11979" class="blob-num js-line-number" data-line-number="11979"></td>
        <td id="LC11979" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifdef</span> HAVE_CLUON_MSC</td>
      </tr>
      <tr>
        <td id="L11980" class="blob-num js-line-number" data-line-number="11980"></td>
        <td id="LC11980" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L11981" class="blob-num js-line-number" data-line-number="11981"></td>
        <td id="LC11981" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Boost Software License - Version 1.0</span></td>
      </tr>
      <tr>
        <td id="L11982" class="blob-num js-line-number" data-line-number="11982"></td>
        <td id="LC11982" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L11983" class="blob-num js-line-number" data-line-number="11983"></td>
        <td id="LC11983" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Copyright 2015-2018 Kevin Wojniak</span></td>
      </tr>
      <tr>
        <td id="L11984" class="blob-num js-line-number" data-line-number="11984"></td>
        <td id="LC11984" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L11985" class="blob-num js-line-number" data-line-number="11985"></td>
        <td id="LC11985" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Permission is hereby granted, free of charge, to any person or organization</span></td>
      </tr>
      <tr>
        <td id="L11986" class="blob-num js-line-number" data-line-number="11986"></td>
        <td id="LC11986" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * obtaining a copy of the software and accompanying documentation covered by</span></td>
      </tr>
      <tr>
        <td id="L11987" class="blob-num js-line-number" data-line-number="11987"></td>
        <td id="LC11987" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * this license (the &quot;Software&quot;) to use, reproduce, display, distribute,</span></td>
      </tr>
      <tr>
        <td id="L11988" class="blob-num js-line-number" data-line-number="11988"></td>
        <td id="LC11988" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * execute, and transmit the Software, and to prepare derivative works of the</span></td>
      </tr>
      <tr>
        <td id="L11989" class="blob-num js-line-number" data-line-number="11989"></td>
        <td id="LC11989" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Software, and to permit third-parties to whom the Software is furnished to</span></td>
      </tr>
      <tr>
        <td id="L11990" class="blob-num js-line-number" data-line-number="11990"></td>
        <td id="LC11990" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * do so, all subject to the following:</span></td>
      </tr>
      <tr>
        <td id="L11991" class="blob-num js-line-number" data-line-number="11991"></td>
        <td id="LC11991" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L11992" class="blob-num js-line-number" data-line-number="11992"></td>
        <td id="LC11992" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * The copyright notices in the Software and this entire statement, including</span></td>
      </tr>
      <tr>
        <td id="L11993" class="blob-num js-line-number" data-line-number="11993"></td>
        <td id="LC11993" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * the above license grant, this restriction and the following disclaimer,</span></td>
      </tr>
      <tr>
        <td id="L11994" class="blob-num js-line-number" data-line-number="11994"></td>
        <td id="LC11994" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * must be included in all copies of the Software, in whole or in part, and</span></td>
      </tr>
      <tr>
        <td id="L11995" class="blob-num js-line-number" data-line-number="11995"></td>
        <td id="LC11995" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * all derivative works of the Software, unless such copies or derivative</span></td>
      </tr>
      <tr>
        <td id="L11996" class="blob-num js-line-number" data-line-number="11996"></td>
        <td id="LC11996" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * works are solely in the form of machine-executable object code generated by</span></td>
      </tr>
      <tr>
        <td id="L11997" class="blob-num js-line-number" data-line-number="11997"></td>
        <td id="LC11997" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * a source language processor.</span></td>
      </tr>
      <tr>
        <td id="L11998" class="blob-num js-line-number" data-line-number="11998"></td>
        <td id="LC11998" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L11999" class="blob-num js-line-number" data-line-number="11999"></td>
        <td id="LC11999" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></td>
      </tr>
      <tr>
        <td id="L12000" class="blob-num js-line-number" data-line-number="12000"></td>
        <td id="LC12000" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></td>
      </tr>
      <tr>
        <td id="L12001" class="blob-num js-line-number" data-line-number="12001"></td>
        <td id="LC12001" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT</span></td>
      </tr>
      <tr>
        <td id="L12002" class="blob-num js-line-number" data-line-number="12002"></td>
        <td id="LC12002" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE</span></td>
      </tr>
      <tr>
        <td id="L12003" class="blob-num js-line-number" data-line-number="12003"></td>
        <td id="LC12003" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,</span></td>
      </tr>
      <tr>
        <td id="L12004" class="blob-num js-line-number" data-line-number="12004"></td>
        <td id="LC12004" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER</span></td>
      </tr>
      <tr>
        <td id="L12005" class="blob-num js-line-number" data-line-number="12005"></td>
        <td id="LC12005" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * DEALINGS IN THE SOFTWARE.</span></td>
      </tr>
      <tr>
        <td id="L12006" class="blob-num js-line-number" data-line-number="12006"></td>
        <td id="LC12006" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L12007" class="blob-num js-line-number" data-line-number="12007"></td>
        <td id="LC12007" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12008" class="blob-num js-line-number" data-line-number="12008"></td>
        <td id="LC12008" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifndef</span> KAINJOW_MUSTACHE_HPP</td>
      </tr>
      <tr>
        <td id="L12009" class="blob-num js-line-number" data-line-number="12009"></td>
        <td id="LC12009" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">define</span> <span class="pl-en">KAINJOW_MUSTACHE_HPP</span></td>
      </tr>
      <tr>
        <td id="L12010" class="blob-num js-line-number" data-line-number="12010"></td>
        <td id="LC12010" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12011" class="blob-num js-line-number" data-line-number="12011"></td>
        <td id="LC12011" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>cassert<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L12012" class="blob-num js-line-number" data-line-number="12012"></td>
        <td id="LC12012" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>functional<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L12013" class="blob-num js-line-number" data-line-number="12013"></td>
        <td id="LC12013" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>iostream<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L12014" class="blob-num js-line-number" data-line-number="12014"></td>
        <td id="LC12014" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>memory<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L12015" class="blob-num js-line-number" data-line-number="12015"></td>
        <td id="LC12015" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>sstream<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L12016" class="blob-num js-line-number" data-line-number="12016"></td>
        <td id="LC12016" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>unordered_map<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L12017" class="blob-num js-line-number" data-line-number="12017"></td>
        <td id="LC12017" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>vector<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L12018" class="blob-num js-line-number" data-line-number="12018"></td>
        <td id="LC12018" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12019" class="blob-num js-line-number" data-line-number="12019"></td>
        <td id="LC12019" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">kainjow</span> {</td>
      </tr>
      <tr>
        <td id="L12020" class="blob-num js-line-number" data-line-number="12020"></td>
        <td id="LC12020" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">mustache</span> {</td>
      </tr>
      <tr>
        <td id="L12021" class="blob-num js-line-number" data-line-number="12021"></td>
        <td id="LC12021" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12022" class="blob-num js-line-number" data-line-number="12022"></td>
        <td id="LC12022" class="blob-code blob-code-inner js-file-line"><span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> string_type&gt;</td>
      </tr>
      <tr>
        <td id="L12023" class="blob-num js-line-number" data-line-number="12023"></td>
        <td id="LC12023" class="blob-code blob-code-inner js-file-line">string_type <span class="pl-en">trim</span>(<span class="pl-k">const</span> string_type&amp; s) {</td>
      </tr>
      <tr>
        <td id="L12024" class="blob-num js-line-number" data-line-number="12024"></td>
        <td id="LC12024" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">auto</span> it = s.<span class="pl-c1">begin</span>();</td>
      </tr>
      <tr>
        <td id="L12025" class="blob-num js-line-number" data-line-number="12025"></td>
        <td id="LC12025" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">while</span> (it != s.<span class="pl-c1">end</span>() &amp;&amp; <span class="pl-c1">isspace</span>(*it)) {</td>
      </tr>
      <tr>
        <td id="L12026" class="blob-num js-line-number" data-line-number="12026"></td>
        <td id="LC12026" class="blob-code blob-code-inner js-file-line">        it++;</td>
      </tr>
      <tr>
        <td id="L12027" class="blob-num js-line-number" data-line-number="12027"></td>
        <td id="LC12027" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12028" class="blob-num js-line-number" data-line-number="12028"></td>
        <td id="LC12028" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">auto</span> rit = s.<span class="pl-c1">rbegin</span>();</td>
      </tr>
      <tr>
        <td id="L12029" class="blob-num js-line-number" data-line-number="12029"></td>
        <td id="LC12029" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">while</span> (rit.<span class="pl-c1">base</span>() != it &amp;&amp; <span class="pl-c1">isspace</span>(*rit)) {</td>
      </tr>
      <tr>
        <td id="L12030" class="blob-num js-line-number" data-line-number="12030"></td>
        <td id="LC12030" class="blob-code blob-code-inner js-file-line">        rit++;</td>
      </tr>
      <tr>
        <td id="L12031" class="blob-num js-line-number" data-line-number="12031"></td>
        <td id="LC12031" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12032" class="blob-num js-line-number" data-line-number="12032"></td>
        <td id="LC12032" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> {it, rit.<span class="pl-c1">base</span>()};</td>
      </tr>
      <tr>
        <td id="L12033" class="blob-num js-line-number" data-line-number="12033"></td>
        <td id="LC12033" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L12034" class="blob-num js-line-number" data-line-number="12034"></td>
        <td id="LC12034" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12035" class="blob-num js-line-number" data-line-number="12035"></td>
        <td id="LC12035" class="blob-code blob-code-inner js-file-line"><span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> string_type&gt;</td>
      </tr>
      <tr>
        <td id="L12036" class="blob-num js-line-number" data-line-number="12036"></td>
        <td id="LC12036" class="blob-code blob-code-inner js-file-line">string_type <span class="pl-en">html_escape</span>(<span class="pl-k">const</span> string_type&amp; s) {</td>
      </tr>
      <tr>
        <td id="L12037" class="blob-num js-line-number" data-line-number="12037"></td>
        <td id="LC12037" class="blob-code blob-code-inner js-file-line">    string_type ret;</td>
      </tr>
      <tr>
        <td id="L12038" class="blob-num js-line-number" data-line-number="12038"></td>
        <td id="LC12038" class="blob-code blob-code-inner js-file-line">    ret.<span class="pl-c1">reserve</span>(s.<span class="pl-c1">size</span>()*<span class="pl-c1">2</span>);</td>
      </tr>
      <tr>
        <td id="L12039" class="blob-num js-line-number" data-line-number="12039"></td>
        <td id="LC12039" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">for</span> (<span class="pl-k">const</span> <span class="pl-k">auto</span> ch : s) {</td>
      </tr>
      <tr>
        <td id="L12040" class="blob-num js-line-number" data-line-number="12040"></td>
        <td id="LC12040" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">switch</span> (ch) {</td>
      </tr>
      <tr>
        <td id="L12041" class="blob-num js-line-number" data-line-number="12041"></td>
        <td id="LC12041" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&#39;</span>&amp;<span class="pl-pds">&#39;</span></span>:</td>
      </tr>
      <tr>
        <td id="L12042" class="blob-num js-line-number" data-line-number="12042"></td>
        <td id="LC12042" class="blob-code blob-code-inner js-file-line">                ret.<span class="pl-c1">append</span>({<span class="pl-s"><span class="pl-pds">&#39;</span>&amp;<span class="pl-pds">&#39;</span></span>,<span class="pl-s"><span class="pl-pds">&#39;</span>a<span class="pl-pds">&#39;</span></span>,<span class="pl-s"><span class="pl-pds">&#39;</span>m<span class="pl-pds">&#39;</span></span>,<span class="pl-s"><span class="pl-pds">&#39;</span>p<span class="pl-pds">&#39;</span></span>,<span class="pl-s"><span class="pl-pds">&#39;</span>;<span class="pl-pds">&#39;</span></span>});</td>
      </tr>
      <tr>
        <td id="L12043" class="blob-num js-line-number" data-line-number="12043"></td>
        <td id="LC12043" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L12044" class="blob-num js-line-number" data-line-number="12044"></td>
        <td id="LC12044" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&#39;</span>&lt;<span class="pl-pds">&#39;</span></span>:</td>
      </tr>
      <tr>
        <td id="L12045" class="blob-num js-line-number" data-line-number="12045"></td>
        <td id="LC12045" class="blob-code blob-code-inner js-file-line">                ret.<span class="pl-c1">append</span>({<span class="pl-s"><span class="pl-pds">&#39;</span>&amp;<span class="pl-pds">&#39;</span></span>,<span class="pl-s"><span class="pl-pds">&#39;</span>l<span class="pl-pds">&#39;</span></span>,<span class="pl-s"><span class="pl-pds">&#39;</span>t<span class="pl-pds">&#39;</span></span>,<span class="pl-s"><span class="pl-pds">&#39;</span>;<span class="pl-pds">&#39;</span></span>});</td>
      </tr>
      <tr>
        <td id="L12046" class="blob-num js-line-number" data-line-number="12046"></td>
        <td id="LC12046" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L12047" class="blob-num js-line-number" data-line-number="12047"></td>
        <td id="LC12047" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&#39;</span>&gt;<span class="pl-pds">&#39;</span></span>:</td>
      </tr>
      <tr>
        <td id="L12048" class="blob-num js-line-number" data-line-number="12048"></td>
        <td id="LC12048" class="blob-code blob-code-inner js-file-line">                ret.<span class="pl-c1">append</span>({<span class="pl-s"><span class="pl-pds">&#39;</span>&amp;<span class="pl-pds">&#39;</span></span>,<span class="pl-s"><span class="pl-pds">&#39;</span>g<span class="pl-pds">&#39;</span></span>,<span class="pl-s"><span class="pl-pds">&#39;</span>t<span class="pl-pds">&#39;</span></span>,<span class="pl-s"><span class="pl-pds">&#39;</span>;<span class="pl-pds">&#39;</span></span>});</td>
      </tr>
      <tr>
        <td id="L12049" class="blob-num js-line-number" data-line-number="12049"></td>
        <td id="LC12049" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L12050" class="blob-num js-line-number" data-line-number="12050"></td>
        <td id="LC12050" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\&quot;</span><span class="pl-pds">&#39;</span></span>:</td>
      </tr>
      <tr>
        <td id="L12051" class="blob-num js-line-number" data-line-number="12051"></td>
        <td id="LC12051" class="blob-code blob-code-inner js-file-line">                ret.<span class="pl-c1">append</span>({<span class="pl-s"><span class="pl-pds">&#39;</span>&amp;<span class="pl-pds">&#39;</span></span>,<span class="pl-s"><span class="pl-pds">&#39;</span>q<span class="pl-pds">&#39;</span></span>,<span class="pl-s"><span class="pl-pds">&#39;</span>u<span class="pl-pds">&#39;</span></span>,<span class="pl-s"><span class="pl-pds">&#39;</span>o<span class="pl-pds">&#39;</span></span>,<span class="pl-s"><span class="pl-pds">&#39;</span>t<span class="pl-pds">&#39;</span></span>,<span class="pl-s"><span class="pl-pds">&#39;</span>;<span class="pl-pds">&#39;</span></span>});</td>
      </tr>
      <tr>
        <td id="L12052" class="blob-num js-line-number" data-line-number="12052"></td>
        <td id="LC12052" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L12053" class="blob-num js-line-number" data-line-number="12053"></td>
        <td id="LC12053" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&#39;</span><span class="pl-cce">\&#39;</span><span class="pl-pds">&#39;</span></span>:</td>
      </tr>
      <tr>
        <td id="L12054" class="blob-num js-line-number" data-line-number="12054"></td>
        <td id="LC12054" class="blob-code blob-code-inner js-file-line">                ret.<span class="pl-c1">append</span>({<span class="pl-s"><span class="pl-pds">&#39;</span>&amp;<span class="pl-pds">&#39;</span></span>,<span class="pl-s"><span class="pl-pds">&#39;</span>a<span class="pl-pds">&#39;</span></span>,<span class="pl-s"><span class="pl-pds">&#39;</span>p<span class="pl-pds">&#39;</span></span>,<span class="pl-s"><span class="pl-pds">&#39;</span>o<span class="pl-pds">&#39;</span></span>,<span class="pl-s"><span class="pl-pds">&#39;</span>s<span class="pl-pds">&#39;</span></span>,<span class="pl-s"><span class="pl-pds">&#39;</span>;<span class="pl-pds">&#39;</span></span>});</td>
      </tr>
      <tr>
        <td id="L12055" class="blob-num js-line-number" data-line-number="12055"></td>
        <td id="LC12055" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L12056" class="blob-num js-line-number" data-line-number="12056"></td>
        <td id="LC12056" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">default</span>:</td>
      </tr>
      <tr>
        <td id="L12057" class="blob-num js-line-number" data-line-number="12057"></td>
        <td id="LC12057" class="blob-code blob-code-inner js-file-line">                ret.<span class="pl-c1">append</span>(<span class="pl-c1">1</span>, ch);</td>
      </tr>
      <tr>
        <td id="L12058" class="blob-num js-line-number" data-line-number="12058"></td>
        <td id="LC12058" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L12059" class="blob-num js-line-number" data-line-number="12059"></td>
        <td id="LC12059" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L12060" class="blob-num js-line-number" data-line-number="12060"></td>
        <td id="LC12060" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12061" class="blob-num js-line-number" data-line-number="12061"></td>
        <td id="LC12061" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> ret;</td>
      </tr>
      <tr>
        <td id="L12062" class="blob-num js-line-number" data-line-number="12062"></td>
        <td id="LC12062" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L12063" class="blob-num js-line-number" data-line-number="12063"></td>
        <td id="LC12063" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12064" class="blob-num js-line-number" data-line-number="12064"></td>
        <td id="LC12064" class="blob-code blob-code-inner js-file-line"><span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> string_type&gt;</td>
      </tr>
      <tr>
        <td id="L12065" class="blob-num js-line-number" data-line-number="12065"></td>
        <td id="LC12065" class="blob-code blob-code-inner js-file-line">std::vector&lt;string_type&gt; <span class="pl-en">split</span>(<span class="pl-k">const</span> string_type&amp; s, <span class="pl-k">typename</span> string_type::value_type delim) {</td>
      </tr>
      <tr>
        <td id="L12066" class="blob-num js-line-number" data-line-number="12066"></td>
        <td id="LC12066" class="blob-code blob-code-inner js-file-line">    std::vector&lt;string_type&gt; elems;</td>
      </tr>
      <tr>
        <td id="L12067" class="blob-num js-line-number" data-line-number="12067"></td>
        <td id="LC12067" class="blob-code blob-code-inner js-file-line">    std::basic_stringstream&lt;<span class="pl-k">typename</span> string_type::value_type&gt; <span class="pl-c1">ss</span>(s);</td>
      </tr>
      <tr>
        <td id="L12068" class="blob-num js-line-number" data-line-number="12068"></td>
        <td id="LC12068" class="blob-code blob-code-inner js-file-line">    string_type item;</td>
      </tr>
      <tr>
        <td id="L12069" class="blob-num js-line-number" data-line-number="12069"></td>
        <td id="LC12069" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">while</span> (<span class="pl-c1">std::getline</span>(ss, item, delim)) {</td>
      </tr>
      <tr>
        <td id="L12070" class="blob-num js-line-number" data-line-number="12070"></td>
        <td id="LC12070" class="blob-code blob-code-inner js-file-line">        elems.<span class="pl-c1">push_back</span>(item);</td>
      </tr>
      <tr>
        <td id="L12071" class="blob-num js-line-number" data-line-number="12071"></td>
        <td id="LC12071" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12072" class="blob-num js-line-number" data-line-number="12072"></td>
        <td id="LC12072" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> elems;</td>
      </tr>
      <tr>
        <td id="L12073" class="blob-num js-line-number" data-line-number="12073"></td>
        <td id="LC12073" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L12074" class="blob-num js-line-number" data-line-number="12074"></td>
        <td id="LC12074" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12075" class="blob-num js-line-number" data-line-number="12075"></td>
        <td id="LC12075" class="blob-code blob-code-inner js-file-line"><span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> string_type&gt;</td>
      </tr>
      <tr>
        <td id="L12076" class="blob-num js-line-number" data-line-number="12076"></td>
        <td id="LC12076" class="blob-code blob-code-inner js-file-line"><span class="pl-k">class</span> <span class="pl-en">basic_renderer</span> {</td>
      </tr>
      <tr>
        <td id="L12077" class="blob-num js-line-number" data-line-number="12077"></td>
        <td id="LC12077" class="blob-code blob-code-inner js-file-line"><span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L12078" class="blob-num js-line-number" data-line-number="12078"></td>
        <td id="LC12078" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">using</span> type1 = std::function&lt;string_type(<span class="pl-k">const</span> string_type&amp;)&gt;;</td>
      </tr>
      <tr>
        <td id="L12079" class="blob-num js-line-number" data-line-number="12079"></td>
        <td id="LC12079" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">using</span> type2 = std::function&lt;string_type(<span class="pl-k">const</span> string_type&amp;, <span class="pl-k">bool</span> escaped)&gt;;</td>
      </tr>
      <tr>
        <td id="L12080" class="blob-num js-line-number" data-line-number="12080"></td>
        <td id="LC12080" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12081" class="blob-num js-line-number" data-line-number="12081"></td>
        <td id="LC12081" class="blob-code blob-code-inner js-file-line">    string_type <span class="pl-en">operator</span>()(<span class="pl-k">const</span> string_type&amp; text) <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L12082" class="blob-num js-line-number" data-line-number="12082"></td>
        <td id="LC12082" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">type1_</span>(text);</td>
      </tr>
      <tr>
        <td id="L12083" class="blob-num js-line-number" data-line-number="12083"></td>
        <td id="LC12083" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12084" class="blob-num js-line-number" data-line-number="12084"></td>
        <td id="LC12084" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12085" class="blob-num js-line-number" data-line-number="12085"></td>
        <td id="LC12085" class="blob-code blob-code-inner js-file-line">    string_type <span class="pl-en">operator</span>()(<span class="pl-k">const</span> string_type&amp; text, <span class="pl-k">bool</span> escaped) <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L12086" class="blob-num js-line-number" data-line-number="12086"></td>
        <td id="LC12086" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">type2_</span>(text, escaped);</td>
      </tr>
      <tr>
        <td id="L12087" class="blob-num js-line-number" data-line-number="12087"></td>
        <td id="LC12087" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12088" class="blob-num js-line-number" data-line-number="12088"></td>
        <td id="LC12088" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12089" class="blob-num js-line-number" data-line-number="12089"></td>
        <td id="LC12089" class="blob-code blob-code-inner js-file-line"><span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L12090" class="blob-num js-line-number" data-line-number="12090"></td>
        <td id="LC12090" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">basic_renderer</span>(<span class="pl-k">const</span> type1&amp; t1, <span class="pl-k">const</span> type2&amp; t2)</td>
      </tr>
      <tr>
        <td id="L12091" class="blob-num js-line-number" data-line-number="12091"></td>
        <td id="LC12091" class="blob-code blob-code-inner js-file-line">        : type1_(t1)</td>
      </tr>
      <tr>
        <td id="L12092" class="blob-num js-line-number" data-line-number="12092"></td>
        <td id="LC12092" class="blob-code blob-code-inner js-file-line">        , type2_(t2)</td>
      </tr>
      <tr>
        <td id="L12093" class="blob-num js-line-number" data-line-number="12093"></td>
        <td id="LC12093" class="blob-code blob-code-inner js-file-line">    {}</td>
      </tr>
      <tr>
        <td id="L12094" class="blob-num js-line-number" data-line-number="12094"></td>
        <td id="LC12094" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12095" class="blob-num js-line-number" data-line-number="12095"></td>
        <td id="LC12095" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> type1&amp; type1_;</td>
      </tr>
      <tr>
        <td id="L12096" class="blob-num js-line-number" data-line-number="12096"></td>
        <td id="LC12096" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> type2&amp; type2_;</td>
      </tr>
      <tr>
        <td id="L12097" class="blob-num js-line-number" data-line-number="12097"></td>
        <td id="LC12097" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12098" class="blob-num js-line-number" data-line-number="12098"></td>
        <td id="LC12098" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> StringType&gt;</td>
      </tr>
      <tr>
        <td id="L12099" class="blob-num js-line-number" data-line-number="12099"></td>
        <td id="LC12099" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">friend</span> <span class="pl-k">class</span> <span class="pl-en">basic_mustache</span>;</td>
      </tr>
      <tr>
        <td id="L12100" class="blob-num js-line-number" data-line-number="12100"></td>
        <td id="LC12100" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L12101" class="blob-num js-line-number" data-line-number="12101"></td>
        <td id="LC12101" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12102" class="blob-num js-line-number" data-line-number="12102"></td>
        <td id="LC12102" class="blob-code blob-code-inner js-file-line"><span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> string_type&gt;</td>
      </tr>
      <tr>
        <td id="L12103" class="blob-num js-line-number" data-line-number="12103"></td>
        <td id="LC12103" class="blob-code blob-code-inner js-file-line"><span class="pl-k">class</span> <span class="pl-en">basic_lambda_t</span> {</td>
      </tr>
      <tr>
        <td id="L12104" class="blob-num js-line-number" data-line-number="12104"></td>
        <td id="LC12104" class="blob-code blob-code-inner js-file-line"><span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L12105" class="blob-num js-line-number" data-line-number="12105"></td>
        <td id="LC12105" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">using</span> type1 = std::function&lt;string_type(<span class="pl-k">const</span> string_type&amp;)&gt;;</td>
      </tr>
      <tr>
        <td id="L12106" class="blob-num js-line-number" data-line-number="12106"></td>
        <td id="LC12106" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">using</span> type2 = std::function&lt;string_type(<span class="pl-k">const</span> string_type&amp;, <span class="pl-k">const</span> basic_renderer&lt;string_type&gt;&amp; render)&gt;;</td>
      </tr>
      <tr>
        <td id="L12107" class="blob-num js-line-number" data-line-number="12107"></td>
        <td id="LC12107" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12108" class="blob-num js-line-number" data-line-number="12108"></td>
        <td id="LC12108" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">basic_lambda_t</span>(<span class="pl-k">const</span> type1&amp; t) : type1_(<span class="pl-k">new</span> type1(t)) {}</td>
      </tr>
      <tr>
        <td id="L12109" class="blob-num js-line-number" data-line-number="12109"></td>
        <td id="LC12109" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">basic_lambda_t</span>(<span class="pl-k">const</span> type2&amp; t) : type2_(<span class="pl-k">new</span> type2(t)) {}</td>
      </tr>
      <tr>
        <td id="L12110" class="blob-num js-line-number" data-line-number="12110"></td>
        <td id="LC12110" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12111" class="blob-num js-line-number" data-line-number="12111"></td>
        <td id="LC12111" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">bool</span> <span class="pl-en">is_type1</span>() <span class="pl-k">const</span> { <span class="pl-k">return</span> <span class="pl-k">static_cast</span>&lt;<span class="pl-k">bool</span>&gt;(type1_); }</td>
      </tr>
      <tr>
        <td id="L12112" class="blob-num js-line-number" data-line-number="12112"></td>
        <td id="LC12112" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">bool</span> <span class="pl-en">is_type2</span>() <span class="pl-k">const</span> { <span class="pl-k">return</span> <span class="pl-k">static_cast</span>&lt;<span class="pl-k">bool</span>&gt;(type2_); }</td>
      </tr>
      <tr>
        <td id="L12113" class="blob-num js-line-number" data-line-number="12113"></td>
        <td id="LC12113" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12114" class="blob-num js-line-number" data-line-number="12114"></td>
        <td id="LC12114" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> type1&amp; <span class="pl-en">type1_value</span>() <span class="pl-k">const</span> { <span class="pl-k">return</span> *type1_; }</td>
      </tr>
      <tr>
        <td id="L12115" class="blob-num js-line-number" data-line-number="12115"></td>
        <td id="LC12115" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> type2&amp; <span class="pl-en">type2_value</span>() <span class="pl-k">const</span> { <span class="pl-k">return</span> *type2_; }</td>
      </tr>
      <tr>
        <td id="L12116" class="blob-num js-line-number" data-line-number="12116"></td>
        <td id="LC12116" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12117" class="blob-num js-line-number" data-line-number="12117"></td>
        <td id="LC12117" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Copying</span></td>
      </tr>
      <tr>
        <td id="L12118" class="blob-num js-line-number" data-line-number="12118"></td>
        <td id="LC12118" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">basic_lambda_t</span>(<span class="pl-k">const</span> <span class="pl-c1">basic_lambda_t</span>&amp; l) {</td>
      </tr>
      <tr>
        <td id="L12119" class="blob-num js-line-number" data-line-number="12119"></td>
        <td id="LC12119" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (l.<span class="pl-smi">type1_</span>) {</td>
      </tr>
      <tr>
        <td id="L12120" class="blob-num js-line-number" data-line-number="12120"></td>
        <td id="LC12120" class="blob-code blob-code-inner js-file-line">            type1_.<span class="pl-c1">reset</span>(<span class="pl-k">new</span> <span class="pl-c1">type1</span>(*l.<span class="pl-smi">type1_</span>));</td>
      </tr>
      <tr>
        <td id="L12121" class="blob-num js-line-number" data-line-number="12121"></td>
        <td id="LC12121" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> <span class="pl-k">if</span> (l.<span class="pl-smi">type2_</span>) {</td>
      </tr>
      <tr>
        <td id="L12122" class="blob-num js-line-number" data-line-number="12122"></td>
        <td id="LC12122" class="blob-code blob-code-inner js-file-line">            type2_.<span class="pl-c1">reset</span>(<span class="pl-k">new</span> <span class="pl-c1">type2</span>(*l.<span class="pl-smi">type2_</span>));</td>
      </tr>
      <tr>
        <td id="L12123" class="blob-num js-line-number" data-line-number="12123"></td>
        <td id="LC12123" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L12124" class="blob-num js-line-number" data-line-number="12124"></td>
        <td id="LC12124" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12125" class="blob-num js-line-number" data-line-number="12125"></td>
        <td id="LC12125" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12126" class="blob-num js-line-number" data-line-number="12126"></td>
        <td id="LC12126" class="blob-code blob-code-inner js-file-line">    string_type <span class="pl-en">operator</span>()(<span class="pl-k">const</span> string_type&amp; text) <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L12127" class="blob-num js-line-number" data-line-number="12127"></td>
        <td id="LC12127" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> (*type1_)(text);</td>
      </tr>
      <tr>
        <td id="L12128" class="blob-num js-line-number" data-line-number="12128"></td>
        <td id="LC12128" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12129" class="blob-num js-line-number" data-line-number="12129"></td>
        <td id="LC12129" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12130" class="blob-num js-line-number" data-line-number="12130"></td>
        <td id="LC12130" class="blob-code blob-code-inner js-file-line">    string_type <span class="pl-en">operator</span>()(<span class="pl-k">const</span> string_type&amp; text, <span class="pl-k">const</span> basic_renderer&lt;string_type&gt;&amp; render) <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L12131" class="blob-num js-line-number" data-line-number="12131"></td>
        <td id="LC12131" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> (*type2_)(text, render);</td>
      </tr>
      <tr>
        <td id="L12132" class="blob-num js-line-number" data-line-number="12132"></td>
        <td id="LC12132" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12133" class="blob-num js-line-number" data-line-number="12133"></td>
        <td id="LC12133" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12134" class="blob-num js-line-number" data-line-number="12134"></td>
        <td id="LC12134" class="blob-code blob-code-inner js-file-line"><span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L12135" class="blob-num js-line-number" data-line-number="12135"></td>
        <td id="LC12135" class="blob-code blob-code-inner js-file-line">    std::unique_ptr&lt;type1&gt; type1_;</td>
      </tr>
      <tr>
        <td id="L12136" class="blob-num js-line-number" data-line-number="12136"></td>
        <td id="LC12136" class="blob-code blob-code-inner js-file-line">    std::unique_ptr&lt;type2&gt; type2_;</td>
      </tr>
      <tr>
        <td id="L12137" class="blob-num js-line-number" data-line-number="12137"></td>
        <td id="LC12137" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L12138" class="blob-num js-line-number" data-line-number="12138"></td>
        <td id="LC12138" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12139" class="blob-num js-line-number" data-line-number="12139"></td>
        <td id="LC12139" class="blob-code blob-code-inner js-file-line"><span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> string_type&gt;</td>
      </tr>
      <tr>
        <td id="L12140" class="blob-num js-line-number" data-line-number="12140"></td>
        <td id="LC12140" class="blob-code blob-code-inner js-file-line"><span class="pl-k">class</span> <span class="pl-en">basic_data</span>;</td>
      </tr>
      <tr>
        <td id="L12141" class="blob-num js-line-number" data-line-number="12141"></td>
        <td id="LC12141" class="blob-code blob-code-inner js-file-line"><span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> string_type&gt;</td>
      </tr>
      <tr>
        <td id="L12142" class="blob-num js-line-number" data-line-number="12142"></td>
        <td id="LC12142" class="blob-code blob-code-inner js-file-line"><span class="pl-k">using</span> basic_object = std::unordered_map&lt;string_type, basic_data&lt;string_type&gt;&gt;;</td>
      </tr>
      <tr>
        <td id="L12143" class="blob-num js-line-number" data-line-number="12143"></td>
        <td id="LC12143" class="blob-code blob-code-inner js-file-line"><span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> string_type&gt;</td>
      </tr>
      <tr>
        <td id="L12144" class="blob-num js-line-number" data-line-number="12144"></td>
        <td id="LC12144" class="blob-code blob-code-inner js-file-line"><span class="pl-k">using</span> basic_list = std::vector&lt;basic_data&lt;string_type&gt;&gt;;</td>
      </tr>
      <tr>
        <td id="L12145" class="blob-num js-line-number" data-line-number="12145"></td>
        <td id="LC12145" class="blob-code blob-code-inner js-file-line"><span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> string_type&gt;</td>
      </tr>
      <tr>
        <td id="L12146" class="blob-num js-line-number" data-line-number="12146"></td>
        <td id="LC12146" class="blob-code blob-code-inner js-file-line"><span class="pl-k">using</span> basic_partial = std::function&lt;string_type()&gt;;</td>
      </tr>
      <tr>
        <td id="L12147" class="blob-num js-line-number" data-line-number="12147"></td>
        <td id="LC12147" class="blob-code blob-code-inner js-file-line"><span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> string_type&gt;</td>
      </tr>
      <tr>
        <td id="L12148" class="blob-num js-line-number" data-line-number="12148"></td>
        <td id="LC12148" class="blob-code blob-code-inner js-file-line"><span class="pl-k">using</span> basic_lambda = <span class="pl-k">typename</span> <span class="pl-c1">basic_lambda_t</span>&lt;string_type&gt;::type1;</td>
      </tr>
      <tr>
        <td id="L12149" class="blob-num js-line-number" data-line-number="12149"></td>
        <td id="LC12149" class="blob-code blob-code-inner js-file-line"><span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> string_type&gt;</td>
      </tr>
      <tr>
        <td id="L12150" class="blob-num js-line-number" data-line-number="12150"></td>
        <td id="LC12150" class="blob-code blob-code-inner js-file-line"><span class="pl-k">using</span> basic_lambda2 = <span class="pl-k">typename</span> <span class="pl-c1">basic_lambda_t</span>&lt;string_type&gt;::type2;</td>
      </tr>
      <tr>
        <td id="L12151" class="blob-num js-line-number" data-line-number="12151"></td>
        <td id="LC12151" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12152" class="blob-num js-line-number" data-line-number="12152"></td>
        <td id="LC12152" class="blob-code blob-code-inner js-file-line"><span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> string_type&gt;</td>
      </tr>
      <tr>
        <td id="L12153" class="blob-num js-line-number" data-line-number="12153"></td>
        <td id="LC12153" class="blob-code blob-code-inner js-file-line"><span class="pl-k">class</span> <span class="pl-en">basic_data</span> {</td>
      </tr>
      <tr>
        <td id="L12154" class="blob-num js-line-number" data-line-number="12154"></td>
        <td id="LC12154" class="blob-code blob-code-inner js-file-line"><span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L12155" class="blob-num js-line-number" data-line-number="12155"></td>
        <td id="LC12155" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">enum</span> <span class="pl-k">class</span> <span class="pl-en">type</span> {</td>
      </tr>
      <tr>
        <td id="L12156" class="blob-num js-line-number" data-line-number="12156"></td>
        <td id="LC12156" class="blob-code blob-code-inner js-file-line">        object,</td>
      </tr>
      <tr>
        <td id="L12157" class="blob-num js-line-number" data-line-number="12157"></td>
        <td id="LC12157" class="blob-code blob-code-inner js-file-line">        string,</td>
      </tr>
      <tr>
        <td id="L12158" class="blob-num js-line-number" data-line-number="12158"></td>
        <td id="LC12158" class="blob-code blob-code-inner js-file-line">        list,</td>
      </tr>
      <tr>
        <td id="L12159" class="blob-num js-line-number" data-line-number="12159"></td>
        <td id="LC12159" class="blob-code blob-code-inner js-file-line">        bool_true,</td>
      </tr>
      <tr>
        <td id="L12160" class="blob-num js-line-number" data-line-number="12160"></td>
        <td id="LC12160" class="blob-code blob-code-inner js-file-line">        bool_false,</td>
      </tr>
      <tr>
        <td id="L12161" class="blob-num js-line-number" data-line-number="12161"></td>
        <td id="LC12161" class="blob-code blob-code-inner js-file-line">        partial,</td>
      </tr>
      <tr>
        <td id="L12162" class="blob-num js-line-number" data-line-number="12162"></td>
        <td id="LC12162" class="blob-code blob-code-inner js-file-line">        lambda,</td>
      </tr>
      <tr>
        <td id="L12163" class="blob-num js-line-number" data-line-number="12163"></td>
        <td id="LC12163" class="blob-code blob-code-inner js-file-line">        lambda2,</td>
      </tr>
      <tr>
        <td id="L12164" class="blob-num js-line-number" data-line-number="12164"></td>
        <td id="LC12164" class="blob-code blob-code-inner js-file-line">        invalid,</td>
      </tr>
      <tr>
        <td id="L12165" class="blob-num js-line-number" data-line-number="12165"></td>
        <td id="LC12165" class="blob-code blob-code-inner js-file-line">    };</td>
      </tr>
      <tr>
        <td id="L12166" class="blob-num js-line-number" data-line-number="12166"></td>
        <td id="LC12166" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12167" class="blob-num js-line-number" data-line-number="12167"></td>
        <td id="LC12167" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Construction</span></td>
      </tr>
      <tr>
        <td id="L12168" class="blob-num js-line-number" data-line-number="12168"></td>
        <td id="LC12168" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">basic_data</span>() : basic_data(type::object) {</td>
      </tr>
      <tr>
        <td id="L12169" class="blob-num js-line-number" data-line-number="12169"></td>
        <td id="LC12169" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12170" class="blob-num js-line-number" data-line-number="12170"></td>
        <td id="LC12170" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">basic_data</span>(<span class="pl-k">const</span> string_type&amp; string) : type_{type::string} {</td>
      </tr>
      <tr>
        <td id="L12171" class="blob-num js-line-number" data-line-number="12171"></td>
        <td id="LC12171" class="blob-code blob-code-inner js-file-line">        str_.<span class="pl-c1">reset</span>(<span class="pl-k">new</span> <span class="pl-c1">string_type</span>(string));</td>
      </tr>
      <tr>
        <td id="L12172" class="blob-num js-line-number" data-line-number="12172"></td>
        <td id="LC12172" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12173" class="blob-num js-line-number" data-line-number="12173"></td>
        <td id="LC12173" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">basic_data</span>(<span class="pl-k">const</span> <span class="pl-k">typename</span> string_type::value_type* string) : type_{type::string} {</td>
      </tr>
      <tr>
        <td id="L12174" class="blob-num js-line-number" data-line-number="12174"></td>
        <td id="LC12174" class="blob-code blob-code-inner js-file-line">        str_.<span class="pl-c1">reset</span>(<span class="pl-k">new</span> <span class="pl-c1">string_type</span>(string));</td>
      </tr>
      <tr>
        <td id="L12175" class="blob-num js-line-number" data-line-number="12175"></td>
        <td id="LC12175" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12176" class="blob-num js-line-number" data-line-number="12176"></td>
        <td id="LC12176" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">basic_data</span>(<span class="pl-k">const</span> basic_object&lt;string_type&gt;&amp; obj) : type_{type::object} {</td>
      </tr>
      <tr>
        <td id="L12177" class="blob-num js-line-number" data-line-number="12177"></td>
        <td id="LC12177" class="blob-code blob-code-inner js-file-line">        obj_.<span class="pl-c1">reset</span>(<span class="pl-k">new</span> basic_object&lt;string_type&gt;(obj));</td>
      </tr>
      <tr>
        <td id="L12178" class="blob-num js-line-number" data-line-number="12178"></td>
        <td id="LC12178" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12179" class="blob-num js-line-number" data-line-number="12179"></td>
        <td id="LC12179" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">basic_data</span>(<span class="pl-k">const</span> basic_list&lt;string_type&gt;&amp; l) : type_{type::list} {</td>
      </tr>
      <tr>
        <td id="L12180" class="blob-num js-line-number" data-line-number="12180"></td>
        <td id="LC12180" class="blob-code blob-code-inner js-file-line">        list_.<span class="pl-c1">reset</span>(<span class="pl-k">new</span> basic_list&lt;string_type&gt;(l));</td>
      </tr>
      <tr>
        <td id="L12181" class="blob-num js-line-number" data-line-number="12181"></td>
        <td id="LC12181" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12182" class="blob-num js-line-number" data-line-number="12182"></td>
        <td id="LC12182" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">basic_data</span>(type t) : type_{t} {</td>
      </tr>
      <tr>
        <td id="L12183" class="blob-num js-line-number" data-line-number="12183"></td>
        <td id="LC12183" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">switch</span> (type_) {</td>
      </tr>
      <tr>
        <td id="L12184" class="blob-num js-line-number" data-line-number="12184"></td>
        <td id="LC12184" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">case</span> type::object:</td>
      </tr>
      <tr>
        <td id="L12185" class="blob-num js-line-number" data-line-number="12185"></td>
        <td id="LC12185" class="blob-code blob-code-inner js-file-line">                obj_.<span class="pl-c1">reset</span>(<span class="pl-k">new</span> basic_object&lt;string_type&gt;);</td>
      </tr>
      <tr>
        <td id="L12186" class="blob-num js-line-number" data-line-number="12186"></td>
        <td id="LC12186" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L12187" class="blob-num js-line-number" data-line-number="12187"></td>
        <td id="LC12187" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">case</span> type::string:</td>
      </tr>
      <tr>
        <td id="L12188" class="blob-num js-line-number" data-line-number="12188"></td>
        <td id="LC12188" class="blob-code blob-code-inner js-file-line">                str_.<span class="pl-c1">reset</span>(<span class="pl-k">new</span> string_type);</td>
      </tr>
      <tr>
        <td id="L12189" class="blob-num js-line-number" data-line-number="12189"></td>
        <td id="LC12189" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L12190" class="blob-num js-line-number" data-line-number="12190"></td>
        <td id="LC12190" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">case</span> type::list:</td>
      </tr>
      <tr>
        <td id="L12191" class="blob-num js-line-number" data-line-number="12191"></td>
        <td id="LC12191" class="blob-code blob-code-inner js-file-line">                list_.<span class="pl-c1">reset</span>(<span class="pl-k">new</span> basic_list&lt;string_type&gt;);</td>
      </tr>
      <tr>
        <td id="L12192" class="blob-num js-line-number" data-line-number="12192"></td>
        <td id="LC12192" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L12193" class="blob-num js-line-number" data-line-number="12193"></td>
        <td id="LC12193" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">default</span>:</td>
      </tr>
      <tr>
        <td id="L12194" class="blob-num js-line-number" data-line-number="12194"></td>
        <td id="LC12194" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L12195" class="blob-num js-line-number" data-line-number="12195"></td>
        <td id="LC12195" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L12196" class="blob-num js-line-number" data-line-number="12196"></td>
        <td id="LC12196" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12197" class="blob-num js-line-number" data-line-number="12197"></td>
        <td id="LC12197" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">basic_data</span>(<span class="pl-k">const</span> string_type&amp; name, <span class="pl-k">const</span> basic_data&amp; var) : basic_data{} {</td>
      </tr>
      <tr>
        <td id="L12198" class="blob-num js-line-number" data-line-number="12198"></td>
        <td id="LC12198" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">set</span>(name, var);</td>
      </tr>
      <tr>
        <td id="L12199" class="blob-num js-line-number" data-line-number="12199"></td>
        <td id="LC12199" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12200" class="blob-num js-line-number" data-line-number="12200"></td>
        <td id="LC12200" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">basic_data</span>(<span class="pl-k">const</span> basic_partial&lt;string_type&gt;&amp; p) : type_{type::partial} {</td>
      </tr>
      <tr>
        <td id="L12201" class="blob-num js-line-number" data-line-number="12201"></td>
        <td id="LC12201" class="blob-code blob-code-inner js-file-line">        partial_.<span class="pl-c1">reset</span>(<span class="pl-k">new</span> basic_partial&lt;string_type&gt;(p));</td>
      </tr>
      <tr>
        <td id="L12202" class="blob-num js-line-number" data-line-number="12202"></td>
        <td id="LC12202" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12203" class="blob-num js-line-number" data-line-number="12203"></td>
        <td id="LC12203" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">basic_data</span>(<span class="pl-k">const</span> basic_lambda&lt;string_type&gt;&amp; l) : type_{type::lambda} {</td>
      </tr>
      <tr>
        <td id="L12204" class="blob-num js-line-number" data-line-number="12204"></td>
        <td id="LC12204" class="blob-code blob-code-inner js-file-line">        lambda_.<span class="pl-c1">reset</span>(<span class="pl-k">new</span> <span class="pl-c1">basic_lambda_t</span>&lt;string_type&gt;(l));</td>
      </tr>
      <tr>
        <td id="L12205" class="blob-num js-line-number" data-line-number="12205"></td>
        <td id="LC12205" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12206" class="blob-num js-line-number" data-line-number="12206"></td>
        <td id="LC12206" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">basic_data</span>(<span class="pl-k">const</span> basic_lambda2&lt;string_type&gt;&amp; l) : type_{type::lambda2} {</td>
      </tr>
      <tr>
        <td id="L12207" class="blob-num js-line-number" data-line-number="12207"></td>
        <td id="LC12207" class="blob-code blob-code-inner js-file-line">        lambda_.<span class="pl-c1">reset</span>(<span class="pl-k">new</span> <span class="pl-c1">basic_lambda_t</span>&lt;string_type&gt;(l));</td>
      </tr>
      <tr>
        <td id="L12208" class="blob-num js-line-number" data-line-number="12208"></td>
        <td id="LC12208" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12209" class="blob-num js-line-number" data-line-number="12209"></td>
        <td id="LC12209" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">basic_data</span>(<span class="pl-k">const</span> <span class="pl-c1">basic_lambda_t</span>&lt;string_type&gt;&amp; l) {</td>
      </tr>
      <tr>
        <td id="L12210" class="blob-num js-line-number" data-line-number="12210"></td>
        <td id="LC12210" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (l.<span class="pl-c1">is_type1</span>()) {</td>
      </tr>
      <tr>
        <td id="L12211" class="blob-num js-line-number" data-line-number="12211"></td>
        <td id="LC12211" class="blob-code blob-code-inner js-file-line">            type_ = type::lambda;</td>
      </tr>
      <tr>
        <td id="L12212" class="blob-num js-line-number" data-line-number="12212"></td>
        <td id="LC12212" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> <span class="pl-k">if</span> (l.<span class="pl-c1">is_type2</span>()) {</td>
      </tr>
      <tr>
        <td id="L12213" class="blob-num js-line-number" data-line-number="12213"></td>
        <td id="LC12213" class="blob-code blob-code-inner js-file-line">            type_ = type::lambda2;</td>
      </tr>
      <tr>
        <td id="L12214" class="blob-num js-line-number" data-line-number="12214"></td>
        <td id="LC12214" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L12215" class="blob-num js-line-number" data-line-number="12215"></td>
        <td id="LC12215" class="blob-code blob-code-inner js-file-line">        lambda_.<span class="pl-c1">reset</span>(<span class="pl-k">new</span> <span class="pl-c1">basic_lambda_t</span>&lt;string_type&gt;(l));</td>
      </tr>
      <tr>
        <td id="L12216" class="blob-num js-line-number" data-line-number="12216"></td>
        <td id="LC12216" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12217" class="blob-num js-line-number" data-line-number="12217"></td>
        <td id="LC12217" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">basic_data</span>(<span class="pl-k">bool</span> b) : type_{b ? type::bool_true : type::bool_false} {</td>
      </tr>
      <tr>
        <td id="L12218" class="blob-num js-line-number" data-line-number="12218"></td>
        <td id="LC12218" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12219" class="blob-num js-line-number" data-line-number="12219"></td>
        <td id="LC12219" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12220" class="blob-num js-line-number" data-line-number="12220"></td>
        <td id="LC12220" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Copying</span></td>
      </tr>
      <tr>
        <td id="L12221" class="blob-num js-line-number" data-line-number="12221"></td>
        <td id="LC12221" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">basic_data</span>(<span class="pl-k">const</span> basic_data&amp; dat) : type_(dat.type_) {</td>
      </tr>
      <tr>
        <td id="L12222" class="blob-num js-line-number" data-line-number="12222"></td>
        <td id="LC12222" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (dat.<span class="pl-smi">obj_</span>) {</td>
      </tr>
      <tr>
        <td id="L12223" class="blob-num js-line-number" data-line-number="12223"></td>
        <td id="LC12223" class="blob-code blob-code-inner js-file-line">            obj_.<span class="pl-c1">reset</span>(<span class="pl-k">new</span> basic_object&lt;string_type&gt;(*dat.<span class="pl-smi">obj_</span>));</td>
      </tr>
      <tr>
        <td id="L12224" class="blob-num js-line-number" data-line-number="12224"></td>
        <td id="LC12224" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> <span class="pl-k">if</span> (dat.<span class="pl-smi">str_</span>) {</td>
      </tr>
      <tr>
        <td id="L12225" class="blob-num js-line-number" data-line-number="12225"></td>
        <td id="LC12225" class="blob-code blob-code-inner js-file-line">            str_.<span class="pl-c1">reset</span>(<span class="pl-k">new</span> <span class="pl-c1">string_type</span>(*dat.<span class="pl-smi">str_</span>));</td>
      </tr>
      <tr>
        <td id="L12226" class="blob-num js-line-number" data-line-number="12226"></td>
        <td id="LC12226" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> <span class="pl-k">if</span> (dat.<span class="pl-smi">list_</span>) {</td>
      </tr>
      <tr>
        <td id="L12227" class="blob-num js-line-number" data-line-number="12227"></td>
        <td id="LC12227" class="blob-code blob-code-inner js-file-line">            list_.<span class="pl-c1">reset</span>(<span class="pl-k">new</span> basic_list&lt;string_type&gt;(*dat.<span class="pl-smi">list_</span>));</td>
      </tr>
      <tr>
        <td id="L12228" class="blob-num js-line-number" data-line-number="12228"></td>
        <td id="LC12228" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> <span class="pl-k">if</span> (dat.<span class="pl-smi">partial_</span>) {</td>
      </tr>
      <tr>
        <td id="L12229" class="blob-num js-line-number" data-line-number="12229"></td>
        <td id="LC12229" class="blob-code blob-code-inner js-file-line">            partial_.<span class="pl-c1">reset</span>(<span class="pl-k">new</span> basic_partial&lt;string_type&gt;(*dat.<span class="pl-smi">partial_</span>));</td>
      </tr>
      <tr>
        <td id="L12230" class="blob-num js-line-number" data-line-number="12230"></td>
        <td id="LC12230" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> <span class="pl-k">if</span> (dat.<span class="pl-smi">lambda_</span>) {</td>
      </tr>
      <tr>
        <td id="L12231" class="blob-num js-line-number" data-line-number="12231"></td>
        <td id="LC12231" class="blob-code blob-code-inner js-file-line">            lambda_.<span class="pl-c1">reset</span>(<span class="pl-k">new</span> <span class="pl-c1">basic_lambda_t</span>&lt;string_type&gt;(*dat.<span class="pl-smi">lambda_</span>));</td>
      </tr>
      <tr>
        <td id="L12232" class="blob-num js-line-number" data-line-number="12232"></td>
        <td id="LC12232" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L12233" class="blob-num js-line-number" data-line-number="12233"></td>
        <td id="LC12233" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12234" class="blob-num js-line-number" data-line-number="12234"></td>
        <td id="LC12234" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12235" class="blob-num js-line-number" data-line-number="12235"></td>
        <td id="LC12235" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Move</span></td>
      </tr>
      <tr>
        <td id="L12236" class="blob-num js-line-number" data-line-number="12236"></td>
        <td id="LC12236" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">basic_data</span>(basic_data&amp;&amp; dat) : type_{dat.<span class="pl-smi">type_</span>} {</td>
      </tr>
      <tr>
        <td id="L12237" class="blob-num js-line-number" data-line-number="12237"></td>
        <td id="LC12237" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (dat.<span class="pl-smi">obj_</span>) {</td>
      </tr>
      <tr>
        <td id="L12238" class="blob-num js-line-number" data-line-number="12238"></td>
        <td id="LC12238" class="blob-code blob-code-inner js-file-line">            obj_ = <span class="pl-c1">std::move</span>(dat.<span class="pl-smi">obj_</span>);</td>
      </tr>
      <tr>
        <td id="L12239" class="blob-num js-line-number" data-line-number="12239"></td>
        <td id="LC12239" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> <span class="pl-k">if</span> (dat.<span class="pl-smi">str_</span>) {</td>
      </tr>
      <tr>
        <td id="L12240" class="blob-num js-line-number" data-line-number="12240"></td>
        <td id="LC12240" class="blob-code blob-code-inner js-file-line">            str_ = <span class="pl-c1">std::move</span>(dat.<span class="pl-smi">str_</span>);</td>
      </tr>
      <tr>
        <td id="L12241" class="blob-num js-line-number" data-line-number="12241"></td>
        <td id="LC12241" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> <span class="pl-k">if</span> (dat.<span class="pl-smi">list_</span>) {</td>
      </tr>
      <tr>
        <td id="L12242" class="blob-num js-line-number" data-line-number="12242"></td>
        <td id="LC12242" class="blob-code blob-code-inner js-file-line">            list_ = <span class="pl-c1">std::move</span>(dat.<span class="pl-smi">list_</span>);</td>
      </tr>
      <tr>
        <td id="L12243" class="blob-num js-line-number" data-line-number="12243"></td>
        <td id="LC12243" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> <span class="pl-k">if</span> (dat.<span class="pl-smi">partial_</span>) {</td>
      </tr>
      <tr>
        <td id="L12244" class="blob-num js-line-number" data-line-number="12244"></td>
        <td id="LC12244" class="blob-code blob-code-inner js-file-line">            partial_ = <span class="pl-c1">std::move</span>(dat.<span class="pl-smi">partial_</span>);</td>
      </tr>
      <tr>
        <td id="L12245" class="blob-num js-line-number" data-line-number="12245"></td>
        <td id="LC12245" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> <span class="pl-k">if</span> (dat.<span class="pl-smi">lambda_</span>) {</td>
      </tr>
      <tr>
        <td id="L12246" class="blob-num js-line-number" data-line-number="12246"></td>
        <td id="LC12246" class="blob-code blob-code-inner js-file-line">            lambda_ = <span class="pl-c1">std::move</span>(dat.<span class="pl-smi">lambda_</span>);</td>
      </tr>
      <tr>
        <td id="L12247" class="blob-num js-line-number" data-line-number="12247"></td>
        <td id="LC12247" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L12248" class="blob-num js-line-number" data-line-number="12248"></td>
        <td id="LC12248" class="blob-code blob-code-inner js-file-line">        dat.<span class="pl-smi">type_</span> = type::invalid;</td>
      </tr>
      <tr>
        <td id="L12249" class="blob-num js-line-number" data-line-number="12249"></td>
        <td id="LC12249" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12250" class="blob-num js-line-number" data-line-number="12250"></td>
        <td id="LC12250" class="blob-code blob-code-inner js-file-line">    basic_data&amp; <span class="pl-k">operator</span>= (basic_data&amp;&amp; dat) {</td>
      </tr>
      <tr>
        <td id="L12251" class="blob-num js-line-number" data-line-number="12251"></td>
        <td id="LC12251" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-c1">this</span> != &amp;dat) {</td>
      </tr>
      <tr>
        <td id="L12252" class="blob-num js-line-number" data-line-number="12252"></td>
        <td id="LC12252" class="blob-code blob-code-inner js-file-line">            obj_.<span class="pl-c1">reset</span>();</td>
      </tr>
      <tr>
        <td id="L12253" class="blob-num js-line-number" data-line-number="12253"></td>
        <td id="LC12253" class="blob-code blob-code-inner js-file-line">            str_.<span class="pl-c1">reset</span>();</td>
      </tr>
      <tr>
        <td id="L12254" class="blob-num js-line-number" data-line-number="12254"></td>
        <td id="LC12254" class="blob-code blob-code-inner js-file-line">            list_.<span class="pl-c1">reset</span>();</td>
      </tr>
      <tr>
        <td id="L12255" class="blob-num js-line-number" data-line-number="12255"></td>
        <td id="LC12255" class="blob-code blob-code-inner js-file-line">            partial_.<span class="pl-c1">reset</span>();</td>
      </tr>
      <tr>
        <td id="L12256" class="blob-num js-line-number" data-line-number="12256"></td>
        <td id="LC12256" class="blob-code blob-code-inner js-file-line">            lambda_.<span class="pl-c1">reset</span>();</td>
      </tr>
      <tr>
        <td id="L12257" class="blob-num js-line-number" data-line-number="12257"></td>
        <td id="LC12257" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (dat.<span class="pl-smi">obj_</span>) {</td>
      </tr>
      <tr>
        <td id="L12258" class="blob-num js-line-number" data-line-number="12258"></td>
        <td id="LC12258" class="blob-code blob-code-inner js-file-line">                obj_ = <span class="pl-c1">std::move</span>(dat.<span class="pl-smi">obj_</span>);</td>
      </tr>
      <tr>
        <td id="L12259" class="blob-num js-line-number" data-line-number="12259"></td>
        <td id="LC12259" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> <span class="pl-k">if</span> (dat.<span class="pl-smi">str_</span>) {</td>
      </tr>
      <tr>
        <td id="L12260" class="blob-num js-line-number" data-line-number="12260"></td>
        <td id="LC12260" class="blob-code blob-code-inner js-file-line">                str_ = <span class="pl-c1">std::move</span>(dat.<span class="pl-smi">str_</span>);</td>
      </tr>
      <tr>
        <td id="L12261" class="blob-num js-line-number" data-line-number="12261"></td>
        <td id="LC12261" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> <span class="pl-k">if</span> (dat.<span class="pl-smi">list_</span>) {</td>
      </tr>
      <tr>
        <td id="L12262" class="blob-num js-line-number" data-line-number="12262"></td>
        <td id="LC12262" class="blob-code blob-code-inner js-file-line">                list_ = <span class="pl-c1">std::move</span>(dat.<span class="pl-smi">list_</span>);</td>
      </tr>
      <tr>
        <td id="L12263" class="blob-num js-line-number" data-line-number="12263"></td>
        <td id="LC12263" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> <span class="pl-k">if</span> (dat.<span class="pl-smi">partial_</span>) {</td>
      </tr>
      <tr>
        <td id="L12264" class="blob-num js-line-number" data-line-number="12264"></td>
        <td id="LC12264" class="blob-code blob-code-inner js-file-line">                partial_ = <span class="pl-c1">std::move</span>(dat.<span class="pl-smi">partial_</span>);</td>
      </tr>
      <tr>
        <td id="L12265" class="blob-num js-line-number" data-line-number="12265"></td>
        <td id="LC12265" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> <span class="pl-k">if</span> (dat.<span class="pl-smi">lambda_</span>) {</td>
      </tr>
      <tr>
        <td id="L12266" class="blob-num js-line-number" data-line-number="12266"></td>
        <td id="LC12266" class="blob-code blob-code-inner js-file-line">                lambda_ = <span class="pl-c1">std::move</span>(dat.<span class="pl-smi">lambda_</span>);</td>
      </tr>
      <tr>
        <td id="L12267" class="blob-num js-line-number" data-line-number="12267"></td>
        <td id="LC12267" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L12268" class="blob-num js-line-number" data-line-number="12268"></td>
        <td id="LC12268" class="blob-code blob-code-inner js-file-line">            type_ = dat.<span class="pl-smi">type_</span>;</td>
      </tr>
      <tr>
        <td id="L12269" class="blob-num js-line-number" data-line-number="12269"></td>
        <td id="LC12269" class="blob-code blob-code-inner js-file-line">            dat.<span class="pl-smi">type_</span> = type::invalid;</td>
      </tr>
      <tr>
        <td id="L12270" class="blob-num js-line-number" data-line-number="12270"></td>
        <td id="LC12270" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L12271" class="blob-num js-line-number" data-line-number="12271"></td>
        <td id="LC12271" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> *<span class="pl-c1">this</span>;</td>
      </tr>
      <tr>
        <td id="L12272" class="blob-num js-line-number" data-line-number="12272"></td>
        <td id="LC12272" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12273" class="blob-num js-line-number" data-line-number="12273"></td>
        <td id="LC12273" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12274" class="blob-num js-line-number" data-line-number="12274"></td>
        <td id="LC12274" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Type info</span></td>
      </tr>
      <tr>
        <td id="L12275" class="blob-num js-line-number" data-line-number="12275"></td>
        <td id="LC12275" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">bool</span> <span class="pl-en">is_object</span>() <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L12276" class="blob-num js-line-number" data-line-number="12276"></td>
        <td id="LC12276" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> type_ == type::object;</td>
      </tr>
      <tr>
        <td id="L12277" class="blob-num js-line-number" data-line-number="12277"></td>
        <td id="LC12277" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12278" class="blob-num js-line-number" data-line-number="12278"></td>
        <td id="LC12278" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">bool</span> <span class="pl-en">is_string</span>() <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L12279" class="blob-num js-line-number" data-line-number="12279"></td>
        <td id="LC12279" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> type_ == type::string;</td>
      </tr>
      <tr>
        <td id="L12280" class="blob-num js-line-number" data-line-number="12280"></td>
        <td id="LC12280" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12281" class="blob-num js-line-number" data-line-number="12281"></td>
        <td id="LC12281" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">bool</span> <span class="pl-en">is_list</span>() <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L12282" class="blob-num js-line-number" data-line-number="12282"></td>
        <td id="LC12282" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> type_ == type::list;</td>
      </tr>
      <tr>
        <td id="L12283" class="blob-num js-line-number" data-line-number="12283"></td>
        <td id="LC12283" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12284" class="blob-num js-line-number" data-line-number="12284"></td>
        <td id="LC12284" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">bool</span> <span class="pl-en">is_bool</span>() <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L12285" class="blob-num js-line-number" data-line-number="12285"></td>
        <td id="LC12285" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">is_true</span>() || <span class="pl-c1">is_false</span>();</td>
      </tr>
      <tr>
        <td id="L12286" class="blob-num js-line-number" data-line-number="12286"></td>
        <td id="LC12286" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12287" class="blob-num js-line-number" data-line-number="12287"></td>
        <td id="LC12287" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">bool</span> <span class="pl-en">is_true</span>() <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L12288" class="blob-num js-line-number" data-line-number="12288"></td>
        <td id="LC12288" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> type_ == type::bool_true;</td>
      </tr>
      <tr>
        <td id="L12289" class="blob-num js-line-number" data-line-number="12289"></td>
        <td id="LC12289" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12290" class="blob-num js-line-number" data-line-number="12290"></td>
        <td id="LC12290" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">bool</span> <span class="pl-en">is_false</span>() <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L12291" class="blob-num js-line-number" data-line-number="12291"></td>
        <td id="LC12291" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> type_ == type::bool_false;</td>
      </tr>
      <tr>
        <td id="L12292" class="blob-num js-line-number" data-line-number="12292"></td>
        <td id="LC12292" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12293" class="blob-num js-line-number" data-line-number="12293"></td>
        <td id="LC12293" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">bool</span> <span class="pl-en">is_partial</span>() <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L12294" class="blob-num js-line-number" data-line-number="12294"></td>
        <td id="LC12294" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> type_ == type::partial;</td>
      </tr>
      <tr>
        <td id="L12295" class="blob-num js-line-number" data-line-number="12295"></td>
        <td id="LC12295" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12296" class="blob-num js-line-number" data-line-number="12296"></td>
        <td id="LC12296" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">bool</span> <span class="pl-en">is_lambda</span>() <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L12297" class="blob-num js-line-number" data-line-number="12297"></td>
        <td id="LC12297" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> type_ == type::lambda;</td>
      </tr>
      <tr>
        <td id="L12298" class="blob-num js-line-number" data-line-number="12298"></td>
        <td id="LC12298" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12299" class="blob-num js-line-number" data-line-number="12299"></td>
        <td id="LC12299" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">bool</span> <span class="pl-en">is_lambda2</span>() <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L12300" class="blob-num js-line-number" data-line-number="12300"></td>
        <td id="LC12300" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> type_ == type::lambda2;</td>
      </tr>
      <tr>
        <td id="L12301" class="blob-num js-line-number" data-line-number="12301"></td>
        <td id="LC12301" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12302" class="blob-num js-line-number" data-line-number="12302"></td>
        <td id="LC12302" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">bool</span> <span class="pl-en">is_invalid</span>() <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L12303" class="blob-num js-line-number" data-line-number="12303"></td>
        <td id="LC12303" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> type_ == type::invalid;</td>
      </tr>
      <tr>
        <td id="L12304" class="blob-num js-line-number" data-line-number="12304"></td>
        <td id="LC12304" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12305" class="blob-num js-line-number" data-line-number="12305"></td>
        <td id="LC12305" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12306" class="blob-num js-line-number" data-line-number="12306"></td>
        <td id="LC12306" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Object data</span></td>
      </tr>
      <tr>
        <td id="L12307" class="blob-num js-line-number" data-line-number="12307"></td>
        <td id="LC12307" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">set</span>(<span class="pl-k">const</span> string_type&amp; name, <span class="pl-k">const</span> basic_data&amp; var) {</td>
      </tr>
      <tr>
        <td id="L12308" class="blob-num js-line-number" data-line-number="12308"></td>
        <td id="LC12308" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-c1">is_object</span>()) {</td>
      </tr>
      <tr>
        <td id="L12309" class="blob-num js-line-number" data-line-number="12309"></td>
        <td id="LC12309" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">auto</span> it = obj_-&gt;<span class="pl-c1">find</span>(name);</td>
      </tr>
      <tr>
        <td id="L12310" class="blob-num js-line-number" data-line-number="12310"></td>
        <td id="LC12310" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (it != obj_-&gt;<span class="pl-c1">end</span>()) {</td>
      </tr>
      <tr>
        <td id="L12311" class="blob-num js-line-number" data-line-number="12311"></td>
        <td id="LC12311" class="blob-code blob-code-inner js-file-line">                obj_-&gt;<span class="pl-c1">erase</span>(it);</td>
      </tr>
      <tr>
        <td id="L12312" class="blob-num js-line-number" data-line-number="12312"></td>
        <td id="LC12312" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L12313" class="blob-num js-line-number" data-line-number="12313"></td>
        <td id="LC12313" class="blob-code blob-code-inner js-file-line">            obj_-&gt;<span class="pl-c1">insert</span>(std::pair&lt;string_type,basic_data&gt;{name, var});</td>
      </tr>
      <tr>
        <td id="L12314" class="blob-num js-line-number" data-line-number="12314"></td>
        <td id="LC12314" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L12315" class="blob-num js-line-number" data-line-number="12315"></td>
        <td id="LC12315" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12316" class="blob-num js-line-number" data-line-number="12316"></td>
        <td id="LC12316" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> basic_data* <span class="pl-en">get</span>(<span class="pl-k">const</span> string_type&amp; name) <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L12317" class="blob-num js-line-number" data-line-number="12317"></td>
        <td id="LC12317" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (!<span class="pl-c1">is_object</span>()) {</td>
      </tr>
      <tr>
        <td id="L12318" class="blob-num js-line-number" data-line-number="12318"></td>
        <td id="LC12318" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> <span class="pl-c1">nullptr</span>;</td>
      </tr>
      <tr>
        <td id="L12319" class="blob-num js-line-number" data-line-number="12319"></td>
        <td id="LC12319" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L12320" class="blob-num js-line-number" data-line-number="12320"></td>
        <td id="LC12320" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> <span class="pl-k">auto</span>&amp; it = obj_-&gt;<span class="pl-c1">find</span>(name);</td>
      </tr>
      <tr>
        <td id="L12321" class="blob-num js-line-number" data-line-number="12321"></td>
        <td id="LC12321" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (it == obj_-&gt;<span class="pl-c1">end</span>()) {</td>
      </tr>
      <tr>
        <td id="L12322" class="blob-num js-line-number" data-line-number="12322"></td>
        <td id="LC12322" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> <span class="pl-c1">nullptr</span>;</td>
      </tr>
      <tr>
        <td id="L12323" class="blob-num js-line-number" data-line-number="12323"></td>
        <td id="LC12323" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L12324" class="blob-num js-line-number" data-line-number="12324"></td>
        <td id="LC12324" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> &amp;it-&gt;second;</td>
      </tr>
      <tr>
        <td id="L12325" class="blob-num js-line-number" data-line-number="12325"></td>
        <td id="LC12325" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12326" class="blob-num js-line-number" data-line-number="12326"></td>
        <td id="LC12326" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12327" class="blob-num js-line-number" data-line-number="12327"></td>
        <td id="LC12327" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> List data</span></td>
      </tr>
      <tr>
        <td id="L12328" class="blob-num js-line-number" data-line-number="12328"></td>
        <td id="LC12328" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">push_back</span>(<span class="pl-k">const</span> basic_data&amp; var) {</td>
      </tr>
      <tr>
        <td id="L12329" class="blob-num js-line-number" data-line-number="12329"></td>
        <td id="LC12329" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (<span class="pl-c1">is_list</span>()) {</td>
      </tr>
      <tr>
        <td id="L12330" class="blob-num js-line-number" data-line-number="12330"></td>
        <td id="LC12330" class="blob-code blob-code-inner js-file-line">            list_-&gt;<span class="pl-c1">push_back</span>(var);</td>
      </tr>
      <tr>
        <td id="L12331" class="blob-num js-line-number" data-line-number="12331"></td>
        <td id="LC12331" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L12332" class="blob-num js-line-number" data-line-number="12332"></td>
        <td id="LC12332" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12333" class="blob-num js-line-number" data-line-number="12333"></td>
        <td id="LC12333" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> basic_list&lt;string_type&gt;&amp; <span class="pl-en">list_value</span>() <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L12334" class="blob-num js-line-number" data-line-number="12334"></td>
        <td id="LC12334" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> *list_;</td>
      </tr>
      <tr>
        <td id="L12335" class="blob-num js-line-number" data-line-number="12335"></td>
        <td id="LC12335" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12336" class="blob-num js-line-number" data-line-number="12336"></td>
        <td id="LC12336" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">bool</span> <span class="pl-en">is_empty_list</span>() <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L12337" class="blob-num js-line-number" data-line-number="12337"></td>
        <td id="LC12337" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">is_list</span>() &amp;&amp; list_-&gt;<span class="pl-c1">empty</span>();</td>
      </tr>
      <tr>
        <td id="L12338" class="blob-num js-line-number" data-line-number="12338"></td>
        <td id="LC12338" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12339" class="blob-num js-line-number" data-line-number="12339"></td>
        <td id="LC12339" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">bool</span> <span class="pl-en">is_non_empty_list</span>() <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L12340" class="blob-num js-line-number" data-line-number="12340"></td>
        <td id="LC12340" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">is_list</span>() &amp;&amp; !list_-&gt;<span class="pl-c1">empty</span>();</td>
      </tr>
      <tr>
        <td id="L12341" class="blob-num js-line-number" data-line-number="12341"></td>
        <td id="LC12341" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12342" class="blob-num js-line-number" data-line-number="12342"></td>
        <td id="LC12342" class="blob-code blob-code-inner js-file-line">    basic_data&amp; <span class="pl-k">operator</span>&lt;&lt; (<span class="pl-k">const</span> basic_data&amp; data) {</td>
      </tr>
      <tr>
        <td id="L12343" class="blob-num js-line-number" data-line-number="12343"></td>
        <td id="LC12343" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">push_back</span>(data);</td>
      </tr>
      <tr>
        <td id="L12344" class="blob-num js-line-number" data-line-number="12344"></td>
        <td id="LC12344" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> *<span class="pl-c1">this</span>;</td>
      </tr>
      <tr>
        <td id="L12345" class="blob-num js-line-number" data-line-number="12345"></td>
        <td id="LC12345" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12346" class="blob-num js-line-number" data-line-number="12346"></td>
        <td id="LC12346" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12347" class="blob-num js-line-number" data-line-number="12347"></td>
        <td id="LC12347" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> String data</span></td>
      </tr>
      <tr>
        <td id="L12348" class="blob-num js-line-number" data-line-number="12348"></td>
        <td id="LC12348" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> string_type&amp; <span class="pl-en">string_value</span>() <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L12349" class="blob-num js-line-number" data-line-number="12349"></td>
        <td id="LC12349" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> *str_;</td>
      </tr>
      <tr>
        <td id="L12350" class="blob-num js-line-number" data-line-number="12350"></td>
        <td id="LC12350" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12351" class="blob-num js-line-number" data-line-number="12351"></td>
        <td id="LC12351" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12352" class="blob-num js-line-number" data-line-number="12352"></td>
        <td id="LC12352" class="blob-code blob-code-inner js-file-line">    basic_data&amp; <span class="pl-k">operator</span>[] (<span class="pl-k">const</span> string_type&amp; key) {</td>
      </tr>
      <tr>
        <td id="L12353" class="blob-num js-line-number" data-line-number="12353"></td>
        <td id="LC12353" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> (*obj_)[key];</td>
      </tr>
      <tr>
        <td id="L12354" class="blob-num js-line-number" data-line-number="12354"></td>
        <td id="LC12354" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12355" class="blob-num js-line-number" data-line-number="12355"></td>
        <td id="LC12355" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12356" class="blob-num js-line-number" data-line-number="12356"></td>
        <td id="LC12356" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> basic_partial&lt;string_type&gt;&amp; <span class="pl-en">partial_value</span>() <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L12357" class="blob-num js-line-number" data-line-number="12357"></td>
        <td id="LC12357" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> (*partial_);</td>
      </tr>
      <tr>
        <td id="L12358" class="blob-num js-line-number" data-line-number="12358"></td>
        <td id="LC12358" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12359" class="blob-num js-line-number" data-line-number="12359"></td>
        <td id="LC12359" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12360" class="blob-num js-line-number" data-line-number="12360"></td>
        <td id="LC12360" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> basic_lambda&lt;string_type&gt;&amp; <span class="pl-en">lambda_value</span>() <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L12361" class="blob-num js-line-number" data-line-number="12361"></td>
        <td id="LC12361" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> lambda_-&gt;<span class="pl-c1">type1_value</span>();</td>
      </tr>
      <tr>
        <td id="L12362" class="blob-num js-line-number" data-line-number="12362"></td>
        <td id="LC12362" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12363" class="blob-num js-line-number" data-line-number="12363"></td>
        <td id="LC12363" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12364" class="blob-num js-line-number" data-line-number="12364"></td>
        <td id="LC12364" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> basic_lambda2&lt;string_type&gt;&amp; <span class="pl-en">lambda2_value</span>() <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L12365" class="blob-num js-line-number" data-line-number="12365"></td>
        <td id="LC12365" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> lambda_-&gt;<span class="pl-c1">type2_value</span>();</td>
      </tr>
      <tr>
        <td id="L12366" class="blob-num js-line-number" data-line-number="12366"></td>
        <td id="LC12366" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12367" class="blob-num js-line-number" data-line-number="12367"></td>
        <td id="LC12367" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12368" class="blob-num js-line-number" data-line-number="12368"></td>
        <td id="LC12368" class="blob-code blob-code-inner js-file-line"><span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L12369" class="blob-num js-line-number" data-line-number="12369"></td>
        <td id="LC12369" class="blob-code blob-code-inner js-file-line">    type type_;</td>
      </tr>
      <tr>
        <td id="L12370" class="blob-num js-line-number" data-line-number="12370"></td>
        <td id="LC12370" class="blob-code blob-code-inner js-file-line">    std::unique_ptr&lt;basic_object&lt;string_type&gt;&gt; obj_;</td>
      </tr>
      <tr>
        <td id="L12371" class="blob-num js-line-number" data-line-number="12371"></td>
        <td id="LC12371" class="blob-code blob-code-inner js-file-line">    std::unique_ptr&lt;string_type&gt; str_;</td>
      </tr>
      <tr>
        <td id="L12372" class="blob-num js-line-number" data-line-number="12372"></td>
        <td id="LC12372" class="blob-code blob-code-inner js-file-line">    std::unique_ptr&lt;basic_list&lt;string_type&gt;&gt; list_;</td>
      </tr>
      <tr>
        <td id="L12373" class="blob-num js-line-number" data-line-number="12373"></td>
        <td id="LC12373" class="blob-code blob-code-inner js-file-line">    std::unique_ptr&lt;basic_partial&lt;string_type&gt;&gt; partial_;</td>
      </tr>
      <tr>
        <td id="L12374" class="blob-num js-line-number" data-line-number="12374"></td>
        <td id="LC12374" class="blob-code blob-code-inner js-file-line">    std::unique_ptr&lt;<span class="pl-c1">basic_lambda_t</span>&lt;string_type&gt;&gt; lambda_;</td>
      </tr>
      <tr>
        <td id="L12375" class="blob-num js-line-number" data-line-number="12375"></td>
        <td id="LC12375" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L12376" class="blob-num js-line-number" data-line-number="12376"></td>
        <td id="LC12376" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12377" class="blob-num js-line-number" data-line-number="12377"></td>
        <td id="LC12377" class="blob-code blob-code-inner js-file-line"><span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> string_type&gt;</td>
      </tr>
      <tr>
        <td id="L12378" class="blob-num js-line-number" data-line-number="12378"></td>
        <td id="LC12378" class="blob-code blob-code-inner js-file-line"><span class="pl-k">class</span> <span class="pl-en">delimiter_set</span> {</td>
      </tr>
      <tr>
        <td id="L12379" class="blob-num js-line-number" data-line-number="12379"></td>
        <td id="LC12379" class="blob-code blob-code-inner js-file-line"><span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L12380" class="blob-num js-line-number" data-line-number="12380"></td>
        <td id="LC12380" class="blob-code blob-code-inner js-file-line">    string_type begin;</td>
      </tr>
      <tr>
        <td id="L12381" class="blob-num js-line-number" data-line-number="12381"></td>
        <td id="LC12381" class="blob-code blob-code-inner js-file-line">    string_type end;</td>
      </tr>
      <tr>
        <td id="L12382" class="blob-num js-line-number" data-line-number="12382"></td>
        <td id="LC12382" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">delimiter_set</span>()</td>
      </tr>
      <tr>
        <td id="L12383" class="blob-num js-line-number" data-line-number="12383"></td>
        <td id="LC12383" class="blob-code blob-code-inner js-file-line">        : begin(default_begin)</td>
      </tr>
      <tr>
        <td id="L12384" class="blob-num js-line-number" data-line-number="12384"></td>
        <td id="LC12384" class="blob-code blob-code-inner js-file-line">        , end(default_end)</td>
      </tr>
      <tr>
        <td id="L12385" class="blob-num js-line-number" data-line-number="12385"></td>
        <td id="LC12385" class="blob-code blob-code-inner js-file-line">    {}</td>
      </tr>
      <tr>
        <td id="L12386" class="blob-num js-line-number" data-line-number="12386"></td>
        <td id="LC12386" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">bool</span> <span class="pl-en">is_default</span>() <span class="pl-k">const</span> { <span class="pl-k">return</span> begin == default_begin &amp;&amp; end == default_end; }</td>
      </tr>
      <tr>
        <td id="L12387" class="blob-num js-line-number" data-line-number="12387"></td>
        <td id="LC12387" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">static</span> <span class="pl-k">const</span> string_type default_begin;</td>
      </tr>
      <tr>
        <td id="L12388" class="blob-num js-line-number" data-line-number="12388"></td>
        <td id="LC12388" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">static</span> <span class="pl-k">const</span> string_type default_end;</td>
      </tr>
      <tr>
        <td id="L12389" class="blob-num js-line-number" data-line-number="12389"></td>
        <td id="LC12389" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L12390" class="blob-num js-line-number" data-line-number="12390"></td>
        <td id="LC12390" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12391" class="blob-num js-line-number" data-line-number="12391"></td>
        <td id="LC12391" class="blob-code blob-code-inner js-file-line"><span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> string_type&gt;</td>
      </tr>
      <tr>
        <td id="L12392" class="blob-num js-line-number" data-line-number="12392"></td>
        <td id="LC12392" class="blob-code blob-code-inner js-file-line"><span class="pl-k">const</span> string_type delimiter_set&lt;string_type&gt;::default_begin(<span class="pl-c1">2</span>, <span class="pl-s"><span class="pl-pds">&#39;</span>{<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L12393" class="blob-num js-line-number" data-line-number="12393"></td>
        <td id="LC12393" class="blob-code blob-code-inner js-file-line"><span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> string_type&gt;</td>
      </tr>
      <tr>
        <td id="L12394" class="blob-num js-line-number" data-line-number="12394"></td>
        <td id="LC12394" class="blob-code blob-code-inner js-file-line"><span class="pl-k">const</span> string_type delimiter_set&lt;string_type&gt;::default_end(<span class="pl-c1">2</span>, <span class="pl-s"><span class="pl-pds">&#39;</span>}<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L12395" class="blob-num js-line-number" data-line-number="12395"></td>
        <td id="LC12395" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12396" class="blob-num js-line-number" data-line-number="12396"></td>
        <td id="LC12396" class="blob-code blob-code-inner js-file-line"><span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> string_type&gt;</td>
      </tr>
      <tr>
        <td id="L12397" class="blob-num js-line-number" data-line-number="12397"></td>
        <td id="LC12397" class="blob-code blob-code-inner js-file-line"><span class="pl-k">class</span> <span class="pl-en">basic_context</span> {</td>
      </tr>
      <tr>
        <td id="L12398" class="blob-num js-line-number" data-line-number="12398"></td>
        <td id="LC12398" class="blob-code blob-code-inner js-file-line"><span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L12399" class="blob-num js-line-number" data-line-number="12399"></td>
        <td id="LC12399" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">virtual</span> <span class="pl-k">void</span> <span class="pl-en">push</span>(<span class="pl-k">const</span> basic_data&lt;string_type&gt;* data) = 0;</td>
      </tr>
      <tr>
        <td id="L12400" class="blob-num js-line-number" data-line-number="12400"></td>
        <td id="LC12400" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">virtual</span> <span class="pl-k">void</span> <span class="pl-en">pop</span>() = 0;</td>
      </tr>
      <tr>
        <td id="L12401" class="blob-num js-line-number" data-line-number="12401"></td>
        <td id="LC12401" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12402" class="blob-num js-line-number" data-line-number="12402"></td>
        <td id="LC12402" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">virtual</span> <span class="pl-k">const</span> basic_data&lt;string_type&gt;* <span class="pl-en">get</span>(<span class="pl-k">const</span> string_type&amp; name) <span class="pl-k">const</span> = 0;</td>
      </tr>
      <tr>
        <td id="L12403" class="blob-num js-line-number" data-line-number="12403"></td>
        <td id="LC12403" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">virtual</span> <span class="pl-k">const</span> basic_data&lt;string_type&gt;* <span class="pl-en">get_partial</span>(<span class="pl-k">const</span> string_type&amp; name) <span class="pl-k">const</span> = 0;</td>
      </tr>
      <tr>
        <td id="L12404" class="blob-num js-line-number" data-line-number="12404"></td>
        <td id="LC12404" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L12405" class="blob-num js-line-number" data-line-number="12405"></td>
        <td id="LC12405" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12406" class="blob-num js-line-number" data-line-number="12406"></td>
        <td id="LC12406" class="blob-code blob-code-inner js-file-line"><span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> string_type&gt;</td>
      </tr>
      <tr>
        <td id="L12407" class="blob-num js-line-number" data-line-number="12407"></td>
        <td id="LC12407" class="blob-code blob-code-inner js-file-line"><span class="pl-k">class</span> <span class="pl-en">context</span> : <span class="pl-k">public</span> <span class="pl-en">basic_context</span>&lt;string_type&gt; {</td>
      </tr>
      <tr>
        <td id="L12408" class="blob-num js-line-number" data-line-number="12408"></td>
        <td id="LC12408" class="blob-code blob-code-inner js-file-line"><span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L12409" class="blob-num js-line-number" data-line-number="12409"></td>
        <td id="LC12409" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">context</span>(<span class="pl-k">const</span> basic_data&lt;string_type&gt;* data) {</td>
      </tr>
      <tr>
        <td id="L12410" class="blob-num js-line-number" data-line-number="12410"></td>
        <td id="LC12410" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">push</span>(data);</td>
      </tr>
      <tr>
        <td id="L12411" class="blob-num js-line-number" data-line-number="12411"></td>
        <td id="LC12411" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12412" class="blob-num js-line-number" data-line-number="12412"></td>
        <td id="LC12412" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12413" class="blob-num js-line-number" data-line-number="12413"></td>
        <td id="LC12413" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">context</span>() {</td>
      </tr>
      <tr>
        <td id="L12414" class="blob-num js-line-number" data-line-number="12414"></td>
        <td id="LC12414" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12415" class="blob-num js-line-number" data-line-number="12415"></td>
        <td id="LC12415" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12416" class="blob-num js-line-number" data-line-number="12416"></td>
        <td id="LC12416" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">virtual</span> <span class="pl-k">void</span> <span class="pl-en">push</span>(<span class="pl-k">const</span> basic_data&lt;string_type&gt;* data) <span class="pl-k">override</span> {</td>
      </tr>
      <tr>
        <td id="L12417" class="blob-num js-line-number" data-line-number="12417"></td>
        <td id="LC12417" class="blob-code blob-code-inner js-file-line">        items_.<span class="pl-c1">insert</span>(items_.<span class="pl-c1">begin</span>(), data);</td>
      </tr>
      <tr>
        <td id="L12418" class="blob-num js-line-number" data-line-number="12418"></td>
        <td id="LC12418" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12419" class="blob-num js-line-number" data-line-number="12419"></td>
        <td id="LC12419" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12420" class="blob-num js-line-number" data-line-number="12420"></td>
        <td id="LC12420" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">virtual</span> <span class="pl-k">void</span> <span class="pl-en">pop</span>() <span class="pl-k">override</span> {</td>
      </tr>
      <tr>
        <td id="L12421" class="blob-num js-line-number" data-line-number="12421"></td>
        <td id="LC12421" class="blob-code blob-code-inner js-file-line">        items_.<span class="pl-c1">erase</span>(items_.<span class="pl-c1">begin</span>());</td>
      </tr>
      <tr>
        <td id="L12422" class="blob-num js-line-number" data-line-number="12422"></td>
        <td id="LC12422" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12423" class="blob-num js-line-number" data-line-number="12423"></td>
        <td id="LC12423" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="L12424" class="blob-num js-line-number" data-line-number="12424"></td>
        <td id="LC12424" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">virtual</span> <span class="pl-k">const</span> basic_data&lt;string_type&gt;* <span class="pl-en">get</span>(<span class="pl-k">const</span> string_type&amp; name) <span class="pl-k">const</span> <span class="pl-k">override</span> {</td>
      </tr>
      <tr>
        <td id="L12425" class="blob-num js-line-number" data-line-number="12425"></td>
        <td id="LC12425" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> process {{.}} name</span></td>
      </tr>
      <tr>
        <td id="L12426" class="blob-num js-line-number" data-line-number="12426"></td>
        <td id="LC12426" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (name.<span class="pl-c1">size</span>() == <span class="pl-c1">1</span> &amp;&amp; name.<span class="pl-c1">at</span>(<span class="pl-c1">0</span>) == <span class="pl-s"><span class="pl-pds">&#39;</span>.<span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L12427" class="blob-num js-line-number" data-line-number="12427"></td>
        <td id="LC12427" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> items_.<span class="pl-c1">front</span>();</td>
      </tr>
      <tr>
        <td id="L12428" class="blob-num js-line-number" data-line-number="12428"></td>
        <td id="LC12428" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L12429" class="blob-num js-line-number" data-line-number="12429"></td>
        <td id="LC12429" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (name.<span class="pl-c1">find</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>.<span class="pl-pds">&#39;</span></span>) == string_type::npos) {</td>
      </tr>
      <tr>
        <td id="L12430" class="blob-num js-line-number" data-line-number="12430"></td>
        <td id="LC12430" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> process normal name without having to split which is slower</span></td>
      </tr>
      <tr>
        <td id="L12431" class="blob-num js-line-number" data-line-number="12431"></td>
        <td id="LC12431" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">for</span> (<span class="pl-k">const</span> <span class="pl-k">auto</span>&amp; item : items_) {</td>
      </tr>
      <tr>
        <td id="L12432" class="blob-num js-line-number" data-line-number="12432"></td>
        <td id="LC12432" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">const</span> <span class="pl-k">auto</span> var = item-&gt;<span class="pl-c1">get</span>(name);</td>
      </tr>
      <tr>
        <td id="L12433" class="blob-num js-line-number" data-line-number="12433"></td>
        <td id="LC12433" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">if</span> (var) {</td>
      </tr>
      <tr>
        <td id="L12434" class="blob-num js-line-number" data-line-number="12434"></td>
        <td id="LC12434" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">return</span> var;</td>
      </tr>
      <tr>
        <td id="L12435" class="blob-num js-line-number" data-line-number="12435"></td>
        <td id="LC12435" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L12436" class="blob-num js-line-number" data-line-number="12436"></td>
        <td id="LC12436" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L12437" class="blob-num js-line-number" data-line-number="12437"></td>
        <td id="LC12437" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> <span class="pl-c1">nullptr</span>;</td>
      </tr>
      <tr>
        <td id="L12438" class="blob-num js-line-number" data-line-number="12438"></td>
        <td id="LC12438" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L12439" class="blob-num js-line-number" data-line-number="12439"></td>
        <td id="LC12439" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> process x.y-like name</span></td>
      </tr>
      <tr>
        <td id="L12440" class="blob-num js-line-number" data-line-number="12440"></td>
        <td id="LC12440" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> <span class="pl-k">auto</span> names = <span class="pl-c1">split</span>(name, <span class="pl-s"><span class="pl-pds">&#39;</span>.<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L12441" class="blob-num js-line-number" data-line-number="12441"></td>
        <td id="LC12441" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">for</span> (<span class="pl-k">const</span> <span class="pl-k">auto</span>&amp; item : items_) {</td>
      </tr>
      <tr>
        <td id="L12442" class="blob-num js-line-number" data-line-number="12442"></td>
        <td id="LC12442" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">auto</span> var = item;</td>
      </tr>
      <tr>
        <td id="L12443" class="blob-num js-line-number" data-line-number="12443"></td>
        <td id="LC12443" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">for</span> (<span class="pl-k">const</span> <span class="pl-k">auto</span>&amp; n : names) {</td>
      </tr>
      <tr>
        <td id="L12444" class="blob-num js-line-number" data-line-number="12444"></td>
        <td id="LC12444" class="blob-code blob-code-inner js-file-line">                var = var-&gt;<span class="pl-c1">get</span>(n);</td>
      </tr>
      <tr>
        <td id="L12445" class="blob-num js-line-number" data-line-number="12445"></td>
        <td id="LC12445" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">if</span> (!var) {</td>
      </tr>
      <tr>
        <td id="L12446" class="blob-num js-line-number" data-line-number="12446"></td>
        <td id="LC12446" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L12447" class="blob-num js-line-number" data-line-number="12447"></td>
        <td id="LC12447" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L12448" class="blob-num js-line-number" data-line-number="12448"></td>
        <td id="LC12448" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L12449" class="blob-num js-line-number" data-line-number="12449"></td>
        <td id="LC12449" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (var) {</td>
      </tr>
      <tr>
        <td id="L12450" class="blob-num js-line-number" data-line-number="12450"></td>
        <td id="LC12450" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">return</span> var;</td>
      </tr>
      <tr>
        <td id="L12451" class="blob-num js-line-number" data-line-number="12451"></td>
        <td id="LC12451" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L12452" class="blob-num js-line-number" data-line-number="12452"></td>
        <td id="LC12452" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L12453" class="blob-num js-line-number" data-line-number="12453"></td>
        <td id="LC12453" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">nullptr</span>;</td>
      </tr>
      <tr>
        <td id="L12454" class="blob-num js-line-number" data-line-number="12454"></td>
        <td id="LC12454" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12455" class="blob-num js-line-number" data-line-number="12455"></td>
        <td id="LC12455" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12456" class="blob-num js-line-number" data-line-number="12456"></td>
        <td id="LC12456" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">virtual</span> <span class="pl-k">const</span> basic_data&lt;string_type&gt;* <span class="pl-en">get_partial</span>(<span class="pl-k">const</span> string_type&amp; name) <span class="pl-k">const</span> <span class="pl-k">override</span> {</td>
      </tr>
      <tr>
        <td id="L12457" class="blob-num js-line-number" data-line-number="12457"></td>
        <td id="LC12457" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">for</span> (<span class="pl-k">const</span> <span class="pl-k">auto</span>&amp; item : items_) {</td>
      </tr>
      <tr>
        <td id="L12458" class="blob-num js-line-number" data-line-number="12458"></td>
        <td id="LC12458" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">const</span> <span class="pl-k">auto</span> var = item-&gt;<span class="pl-c1">get</span>(name);</td>
      </tr>
      <tr>
        <td id="L12459" class="blob-num js-line-number" data-line-number="12459"></td>
        <td id="LC12459" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (var) {</td>
      </tr>
      <tr>
        <td id="L12460" class="blob-num js-line-number" data-line-number="12460"></td>
        <td id="LC12460" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">return</span> var;</td>
      </tr>
      <tr>
        <td id="L12461" class="blob-num js-line-number" data-line-number="12461"></td>
        <td id="LC12461" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L12462" class="blob-num js-line-number" data-line-number="12462"></td>
        <td id="LC12462" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L12463" class="blob-num js-line-number" data-line-number="12463"></td>
        <td id="LC12463" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">nullptr</span>;</td>
      </tr>
      <tr>
        <td id="L12464" class="blob-num js-line-number" data-line-number="12464"></td>
        <td id="LC12464" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12465" class="blob-num js-line-number" data-line-number="12465"></td>
        <td id="LC12465" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12466" class="blob-num js-line-number" data-line-number="12466"></td>
        <td id="LC12466" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">context</span>(<span class="pl-k">const</span> context&amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L12467" class="blob-num js-line-number" data-line-number="12467"></td>
        <td id="LC12467" class="blob-code blob-code-inner js-file-line">    context&amp; <span class="pl-k">operator</span>= (<span class="pl-k">const</span> context&amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L12468" class="blob-num js-line-number" data-line-number="12468"></td>
        <td id="LC12468" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12469" class="blob-num js-line-number" data-line-number="12469"></td>
        <td id="LC12469" class="blob-code blob-code-inner js-file-line"><span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L12470" class="blob-num js-line-number" data-line-number="12470"></td>
        <td id="LC12470" class="blob-code blob-code-inner js-file-line">    std::vector&lt;<span class="pl-k">const</span> basic_data&lt;string_type&gt;*&gt; items_;</td>
      </tr>
      <tr>
        <td id="L12471" class="blob-num js-line-number" data-line-number="12471"></td>
        <td id="LC12471" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L12472" class="blob-num js-line-number" data-line-number="12472"></td>
        <td id="LC12472" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12473" class="blob-num js-line-number" data-line-number="12473"></td>
        <td id="LC12473" class="blob-code blob-code-inner js-file-line"><span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> StringType&gt;</td>
      </tr>
      <tr>
        <td id="L12474" class="blob-num js-line-number" data-line-number="12474"></td>
        <td id="LC12474" class="blob-code blob-code-inner js-file-line"><span class="pl-k">class</span> <span class="pl-en">basic_mustache</span> {</td>
      </tr>
      <tr>
        <td id="L12475" class="blob-num js-line-number" data-line-number="12475"></td>
        <td id="LC12475" class="blob-code blob-code-inner js-file-line"><span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L12476" class="blob-num js-line-number" data-line-number="12476"></td>
        <td id="LC12476" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">using</span> string_type = StringType;</td>
      </tr>
      <tr>
        <td id="L12477" class="blob-num js-line-number" data-line-number="12477"></td>
        <td id="LC12477" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12478" class="blob-num js-line-number" data-line-number="12478"></td>
        <td id="LC12478" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">basic_mustache</span>(<span class="pl-k">const</span> string_type&amp; input)</td>
      </tr>
      <tr>
        <td id="L12479" class="blob-num js-line-number" data-line-number="12479"></td>
        <td id="LC12479" class="blob-code blob-code-inner js-file-line">        : basic_mustache() {</td>
      </tr>
      <tr>
        <td id="L12480" class="blob-num js-line-number" data-line-number="12480"></td>
        <td id="LC12480" class="blob-code blob-code-inner js-file-line">        context&lt;string_type&gt; ctx;</td>
      </tr>
      <tr>
        <td id="L12481" class="blob-num js-line-number" data-line-number="12481"></td>
        <td id="LC12481" class="blob-code blob-code-inner js-file-line">        context_internal context{ctx};</td>
      </tr>
      <tr>
        <td id="L12482" class="blob-num js-line-number" data-line-number="12482"></td>
        <td id="LC12482" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">parse</span>(input, context);</td>
      </tr>
      <tr>
        <td id="L12483" class="blob-num js-line-number" data-line-number="12483"></td>
        <td id="LC12483" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12484" class="blob-num js-line-number" data-line-number="12484"></td>
        <td id="LC12484" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12485" class="blob-num js-line-number" data-line-number="12485"></td>
        <td id="LC12485" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">bool</span> <span class="pl-en">is_valid</span>() <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L12486" class="blob-num js-line-number" data-line-number="12486"></td>
        <td id="LC12486" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> errorMessage_.<span class="pl-c1">empty</span>();</td>
      </tr>
      <tr>
        <td id="L12487" class="blob-num js-line-number" data-line-number="12487"></td>
        <td id="LC12487" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12488" class="blob-num js-line-number" data-line-number="12488"></td>
        <td id="LC12488" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="L12489" class="blob-num js-line-number" data-line-number="12489"></td>
        <td id="LC12489" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> string_type&amp; <span class="pl-en">error_message</span>() <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L12490" class="blob-num js-line-number" data-line-number="12490"></td>
        <td id="LC12490" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> errorMessage_;</td>
      </tr>
      <tr>
        <td id="L12491" class="blob-num js-line-number" data-line-number="12491"></td>
        <td id="LC12491" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12492" class="blob-num js-line-number" data-line-number="12492"></td>
        <td id="LC12492" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12493" class="blob-num js-line-number" data-line-number="12493"></td>
        <td id="LC12493" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">using</span> escape_handler = std::function&lt;string_type(<span class="pl-k">const</span> string_type&amp;)&gt;;</td>
      </tr>
      <tr>
        <td id="L12494" class="blob-num js-line-number" data-line-number="12494"></td>
        <td id="LC12494" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">set_custom_escape</span>(<span class="pl-k">const</span> escape_handler&amp; escape_fn) {</td>
      </tr>
      <tr>
        <td id="L12495" class="blob-num js-line-number" data-line-number="12495"></td>
        <td id="LC12495" class="blob-code blob-code-inner js-file-line">        escape_ = escape_fn;</td>
      </tr>
      <tr>
        <td id="L12496" class="blob-num js-line-number" data-line-number="12496"></td>
        <td id="LC12496" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12497" class="blob-num js-line-number" data-line-number="12497"></td>
        <td id="LC12497" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12498" class="blob-num js-line-number" data-line-number="12498"></td>
        <td id="LC12498" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">template </span>&lt;<span class="pl-k">typename</span> stream_type&gt;</td>
      </tr>
      <tr>
        <td id="L12499" class="blob-num js-line-number" data-line-number="12499"></td>
        <td id="LC12499" class="blob-code blob-code-inner js-file-line">    stream_type&amp; <span class="pl-en">render</span>(<span class="pl-k">const</span> basic_data&lt;string_type&gt;&amp; data, stream_type&amp; stream) {</td>
      </tr>
      <tr>
        <td id="L12500" class="blob-num js-line-number" data-line-number="12500"></td>
        <td id="LC12500" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">render</span>(data, [&amp;stream](<span class="pl-k">const</span> string_type&amp; str) {</td>
      </tr>
      <tr>
        <td id="L12501" class="blob-num js-line-number" data-line-number="12501"></td>
        <td id="LC12501" class="blob-code blob-code-inner js-file-line">            stream &lt;&lt; str;</td>
      </tr>
      <tr>
        <td id="L12502" class="blob-num js-line-number" data-line-number="12502"></td>
        <td id="LC12502" class="blob-code blob-code-inner js-file-line">        });</td>
      </tr>
      <tr>
        <td id="L12503" class="blob-num js-line-number" data-line-number="12503"></td>
        <td id="LC12503" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> stream;</td>
      </tr>
      <tr>
        <td id="L12504" class="blob-num js-line-number" data-line-number="12504"></td>
        <td id="LC12504" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12505" class="blob-num js-line-number" data-line-number="12505"></td>
        <td id="LC12505" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="L12506" class="blob-num js-line-number" data-line-number="12506"></td>
        <td id="LC12506" class="blob-code blob-code-inner js-file-line">    string_type <span class="pl-en">render</span>(<span class="pl-k">const</span> basic_data&lt;string_type&gt;&amp; data) {</td>
      </tr>
      <tr>
        <td id="L12507" class="blob-num js-line-number" data-line-number="12507"></td>
        <td id="LC12507" class="blob-code blob-code-inner js-file-line">        std::basic_ostringstream&lt;<span class="pl-k">typename</span> string_type::value_type&gt; ss;</td>
      </tr>
      <tr>
        <td id="L12508" class="blob-num js-line-number" data-line-number="12508"></td>
        <td id="LC12508" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">render</span>(data, ss).<span class="pl-c1">str</span>();</td>
      </tr>
      <tr>
        <td id="L12509" class="blob-num js-line-number" data-line-number="12509"></td>
        <td id="LC12509" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12510" class="blob-num js-line-number" data-line-number="12510"></td>
        <td id="LC12510" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12511" class="blob-num js-line-number" data-line-number="12511"></td>
        <td id="LC12511" class="blob-code blob-code-inner js-file-line">    string_type <span class="pl-en">render</span>(basic_context&lt;string_type&gt;&amp; ctx) {</td>
      </tr>
      <tr>
        <td id="L12512" class="blob-num js-line-number" data-line-number="12512"></td>
        <td id="LC12512" class="blob-code blob-code-inner js-file-line">        std::basic_ostringstream&lt;<span class="pl-k">typename</span> string_type::value_type&gt; ss;</td>
      </tr>
      <tr>
        <td id="L12513" class="blob-num js-line-number" data-line-number="12513"></td>
        <td id="LC12513" class="blob-code blob-code-inner js-file-line">        context_internal context{ctx};</td>
      </tr>
      <tr>
        <td id="L12514" class="blob-num js-line-number" data-line-number="12514"></td>
        <td id="LC12514" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">render</span>([&amp;ss](<span class="pl-k">const</span> string_type&amp; str) {</td>
      </tr>
      <tr>
        <td id="L12515" class="blob-num js-line-number" data-line-number="12515"></td>
        <td id="LC12515" class="blob-code blob-code-inner js-file-line">            ss &lt;&lt; str;</td>
      </tr>
      <tr>
        <td id="L12516" class="blob-num js-line-number" data-line-number="12516"></td>
        <td id="LC12516" class="blob-code blob-code-inner js-file-line">        }, context);</td>
      </tr>
      <tr>
        <td id="L12517" class="blob-num js-line-number" data-line-number="12517"></td>
        <td id="LC12517" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> ss.<span class="pl-c1">str</span>();</td>
      </tr>
      <tr>
        <td id="L12518" class="blob-num js-line-number" data-line-number="12518"></td>
        <td id="LC12518" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12519" class="blob-num js-line-number" data-line-number="12519"></td>
        <td id="LC12519" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12520" class="blob-num js-line-number" data-line-number="12520"></td>
        <td id="LC12520" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">using</span> RenderHandler = std::function&lt;<span class="pl-k">void</span>(<span class="pl-k">const</span> string_type&amp;)&gt;;</td>
      </tr>
      <tr>
        <td id="L12521" class="blob-num js-line-number" data-line-number="12521"></td>
        <td id="LC12521" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">render</span>(<span class="pl-k">const</span> basic_data&lt;string_type&gt;&amp; data, <span class="pl-k">const</span> RenderHandler&amp; handler) {</td>
      </tr>
      <tr>
        <td id="L12522" class="blob-num js-line-number" data-line-number="12522"></td>
        <td id="LC12522" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (!<span class="pl-c1">is_valid</span>()) {</td>
      </tr>
      <tr>
        <td id="L12523" class="blob-num js-line-number" data-line-number="12523"></td>
        <td id="LC12523" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span>;</td>
      </tr>
      <tr>
        <td id="L12524" class="blob-num js-line-number" data-line-number="12524"></td>
        <td id="LC12524" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L12525" class="blob-num js-line-number" data-line-number="12525"></td>
        <td id="LC12525" class="blob-code blob-code-inner js-file-line">        context&lt;string_type&gt; ctx{&amp;data};</td>
      </tr>
      <tr>
        <td id="L12526" class="blob-num js-line-number" data-line-number="12526"></td>
        <td id="LC12526" class="blob-code blob-code-inner js-file-line">        context_internal context{ctx};</td>
      </tr>
      <tr>
        <td id="L12527" class="blob-num js-line-number" data-line-number="12527"></td>
        <td id="LC12527" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">render</span>(handler, context);</td>
      </tr>
      <tr>
        <td id="L12528" class="blob-num js-line-number" data-line-number="12528"></td>
        <td id="LC12528" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12529" class="blob-num js-line-number" data-line-number="12529"></td>
        <td id="LC12529" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12530" class="blob-num js-line-number" data-line-number="12530"></td>
        <td id="LC12530" class="blob-code blob-code-inner js-file-line"><span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L12531" class="blob-num js-line-number" data-line-number="12531"></td>
        <td id="LC12531" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">using</span> StringSizeType = <span class="pl-k">typename</span> string_type::size_type;</td>
      </tr>
      <tr>
        <td id="L12532" class="blob-num js-line-number" data-line-number="12532"></td>
        <td id="LC12532" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="L12533" class="blob-num js-line-number" data-line-number="12533"></td>
        <td id="LC12533" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">class</span> <span class="pl-en">Tag</span> {</td>
      </tr>
      <tr>
        <td id="L12534" class="blob-num js-line-number" data-line-number="12534"></td>
        <td id="LC12534" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L12535" class="blob-num js-line-number" data-line-number="12535"></td>
        <td id="LC12535" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">enum</span> <span class="pl-k">class</span> <span class="pl-en">Type</span> {</td>
      </tr>
      <tr>
        <td id="L12536" class="blob-num js-line-number" data-line-number="12536"></td>
        <td id="LC12536" class="blob-code blob-code-inner js-file-line">            Invalid,</td>
      </tr>
      <tr>
        <td id="L12537" class="blob-num js-line-number" data-line-number="12537"></td>
        <td id="LC12537" class="blob-code blob-code-inner js-file-line">            Variable,</td>
      </tr>
      <tr>
        <td id="L12538" class="blob-num js-line-number" data-line-number="12538"></td>
        <td id="LC12538" class="blob-code blob-code-inner js-file-line">            UnescapedVariable,</td>
      </tr>
      <tr>
        <td id="L12539" class="blob-num js-line-number" data-line-number="12539"></td>
        <td id="LC12539" class="blob-code blob-code-inner js-file-line">            SectionBegin,</td>
      </tr>
      <tr>
        <td id="L12540" class="blob-num js-line-number" data-line-number="12540"></td>
        <td id="LC12540" class="blob-code blob-code-inner js-file-line">            SectionEnd,</td>
      </tr>
      <tr>
        <td id="L12541" class="blob-num js-line-number" data-line-number="12541"></td>
        <td id="LC12541" class="blob-code blob-code-inner js-file-line">            SectionBeginInverted,</td>
      </tr>
      <tr>
        <td id="L12542" class="blob-num js-line-number" data-line-number="12542"></td>
        <td id="LC12542" class="blob-code blob-code-inner js-file-line">            Comment,</td>
      </tr>
      <tr>
        <td id="L12543" class="blob-num js-line-number" data-line-number="12543"></td>
        <td id="LC12543" class="blob-code blob-code-inner js-file-line">            Partial,</td>
      </tr>
      <tr>
        <td id="L12544" class="blob-num js-line-number" data-line-number="12544"></td>
        <td id="LC12544" class="blob-code blob-code-inner js-file-line">            SetDelimiter,</td>
      </tr>
      <tr>
        <td id="L12545" class="blob-num js-line-number" data-line-number="12545"></td>
        <td id="LC12545" class="blob-code blob-code-inner js-file-line">        };</td>
      </tr>
      <tr>
        <td id="L12546" class="blob-num js-line-number" data-line-number="12546"></td>
        <td id="LC12546" class="blob-code blob-code-inner js-file-line">        string_type name;</td>
      </tr>
      <tr>
        <td id="L12547" class="blob-num js-line-number" data-line-number="12547"></td>
        <td id="LC12547" class="blob-code blob-code-inner js-file-line">        Type type = Type::Invalid;</td>
      </tr>
      <tr>
        <td id="L12548" class="blob-num js-line-number" data-line-number="12548"></td>
        <td id="LC12548" class="blob-code blob-code-inner js-file-line">        std::shared_ptr&lt;string_type&gt; sectionText;</td>
      </tr>
      <tr>
        <td id="L12549" class="blob-num js-line-number" data-line-number="12549"></td>
        <td id="LC12549" class="blob-code blob-code-inner js-file-line">        std::shared_ptr&lt;delimiter_set&lt;string_type&gt;&gt; delimiterSet;</td>
      </tr>
      <tr>
        <td id="L12550" class="blob-num js-line-number" data-line-number="12550"></td>
        <td id="LC12550" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">bool</span> <span class="pl-en">isSectionBegin</span>() <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L12551" class="blob-num js-line-number" data-line-number="12551"></td>
        <td id="LC12551" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> type == Type::SectionBegin || type == Type::SectionBeginInverted;</td>
      </tr>
      <tr>
        <td id="L12552" class="blob-num js-line-number" data-line-number="12552"></td>
        <td id="LC12552" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L12553" class="blob-num js-line-number" data-line-number="12553"></td>
        <td id="LC12553" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">bool</span> <span class="pl-en">isSectionEnd</span>() <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L12554" class="blob-num js-line-number" data-line-number="12554"></td>
        <td id="LC12554" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> type == Type::SectionEnd;</td>
      </tr>
      <tr>
        <td id="L12555" class="blob-num js-line-number" data-line-number="12555"></td>
        <td id="LC12555" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L12556" class="blob-num js-line-number" data-line-number="12556"></td>
        <td id="LC12556" class="blob-code blob-code-inner js-file-line">    };</td>
      </tr>
      <tr>
        <td id="L12557" class="blob-num js-line-number" data-line-number="12557"></td>
        <td id="LC12557" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="L12558" class="blob-num js-line-number" data-line-number="12558"></td>
        <td id="LC12558" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">class</span> <span class="pl-en">component</span> {</td>
      </tr>
      <tr>
        <td id="L12559" class="blob-num js-line-number" data-line-number="12559"></td>
        <td id="LC12559" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L12560" class="blob-num js-line-number" data-line-number="12560"></td>
        <td id="LC12560" class="blob-code blob-code-inner js-file-line">        string_type text;</td>
      </tr>
      <tr>
        <td id="L12561" class="blob-num js-line-number" data-line-number="12561"></td>
        <td id="LC12561" class="blob-code blob-code-inner js-file-line">        Tag tag;</td>
      </tr>
      <tr>
        <td id="L12562" class="blob-num js-line-number" data-line-number="12562"></td>
        <td id="LC12562" class="blob-code blob-code-inner js-file-line">        std::vector&lt;component&gt; children;</td>
      </tr>
      <tr>
        <td id="L12563" class="blob-num js-line-number" data-line-number="12563"></td>
        <td id="LC12563" class="blob-code blob-code-inner js-file-line">        StringSizeType position = string_type::npos;</td>
      </tr>
      <tr>
        <td id="L12564" class="blob-num js-line-number" data-line-number="12564"></td>
        <td id="LC12564" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">bool</span> <span class="pl-en">isText</span>() <span class="pl-k">const</span> {</td>
      </tr>
      <tr>
        <td id="L12565" class="blob-num js-line-number" data-line-number="12565"></td>
        <td id="LC12565" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> tag.<span class="pl-smi">type</span> == Tag::Type::Invalid;</td>
      </tr>
      <tr>
        <td id="L12566" class="blob-num js-line-number" data-line-number="12566"></td>
        <td id="LC12566" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L12567" class="blob-num js-line-number" data-line-number="12567"></td>
        <td id="LC12567" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">component</span>() {}</td>
      </tr>
      <tr>
        <td id="L12568" class="blob-num js-line-number" data-line-number="12568"></td>
        <td id="LC12568" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">component</span>(<span class="pl-k">const</span> string_type&amp; t, StringSizeType p) : text(t), position(p) {}</td>
      </tr>
      <tr>
        <td id="L12569" class="blob-num js-line-number" data-line-number="12569"></td>
        <td id="LC12569" class="blob-code blob-code-inner js-file-line">    };</td>
      </tr>
      <tr>
        <td id="L12570" class="blob-num js-line-number" data-line-number="12570"></td>
        <td id="LC12570" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12571" class="blob-num js-line-number" data-line-number="12571"></td>
        <td id="LC12571" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">class</span> <span class="pl-en">context_internal</span> {</td>
      </tr>
      <tr>
        <td id="L12572" class="blob-num js-line-number" data-line-number="12572"></td>
        <td id="LC12572" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L12573" class="blob-num js-line-number" data-line-number="12573"></td>
        <td id="LC12573" class="blob-code blob-code-inner js-file-line">        basic_context&lt;string_type&gt;&amp; ctx;</td>
      </tr>
      <tr>
        <td id="L12574" class="blob-num js-line-number" data-line-number="12574"></td>
        <td id="LC12574" class="blob-code blob-code-inner js-file-line">        delimiter_set&lt;string_type&gt; delimiterSet;</td>
      </tr>
      <tr>
        <td id="L12575" class="blob-num js-line-number" data-line-number="12575"></td>
        <td id="LC12575" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12576" class="blob-num js-line-number" data-line-number="12576"></td>
        <td id="LC12576" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">context_internal</span>(basic_context&lt;string_type&gt;&amp; a_ctx)</td>
      </tr>
      <tr>
        <td id="L12577" class="blob-num js-line-number" data-line-number="12577"></td>
        <td id="LC12577" class="blob-code blob-code-inner js-file-line">            : ctx(a_ctx)</td>
      </tr>
      <tr>
        <td id="L12578" class="blob-num js-line-number" data-line-number="12578"></td>
        <td id="LC12578" class="blob-code blob-code-inner js-file-line">        {</td>
      </tr>
      <tr>
        <td id="L12579" class="blob-num js-line-number" data-line-number="12579"></td>
        <td id="LC12579" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L12580" class="blob-num js-line-number" data-line-number="12580"></td>
        <td id="LC12580" class="blob-code blob-code-inner js-file-line">    };</td>
      </tr>
      <tr>
        <td id="L12581" class="blob-num js-line-number" data-line-number="12581"></td>
        <td id="LC12581" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12582" class="blob-num js-line-number" data-line-number="12582"></td>
        <td id="LC12582" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">class</span> <span class="pl-en">context_pusher</span> {</td>
      </tr>
      <tr>
        <td id="L12583" class="blob-num js-line-number" data-line-number="12583"></td>
        <td id="LC12583" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L12584" class="blob-num js-line-number" data-line-number="12584"></td>
        <td id="LC12584" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">context_pusher</span>(context_internal&amp; ctx, <span class="pl-k">const</span> basic_data&lt;string_type&gt;* data) : ctx_(ctx) {</td>
      </tr>
      <tr>
        <td id="L12585" class="blob-num js-line-number" data-line-number="12585"></td>
        <td id="LC12585" class="blob-code blob-code-inner js-file-line">            ctx.<span class="pl-smi">ctx</span>.<span class="pl-c1">push</span>(data);</td>
      </tr>
      <tr>
        <td id="L12586" class="blob-num js-line-number" data-line-number="12586"></td>
        <td id="LC12586" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L12587" class="blob-num js-line-number" data-line-number="12587"></td>
        <td id="LC12587" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">~context_pusher</span>() {</td>
      </tr>
      <tr>
        <td id="L12588" class="blob-num js-line-number" data-line-number="12588"></td>
        <td id="LC12588" class="blob-code blob-code-inner js-file-line">            ctx_.<span class="pl-smi">ctx</span>.<span class="pl-c1">pop</span>();</td>
      </tr>
      <tr>
        <td id="L12589" class="blob-num js-line-number" data-line-number="12589"></td>
        <td id="LC12589" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L12590" class="blob-num js-line-number" data-line-number="12590"></td>
        <td id="LC12590" class="blob-code blob-code-inner js-file-line">        <span class="pl-en">context_pusher</span>(<span class="pl-k">const</span> context_pusher&amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L12591" class="blob-num js-line-number" data-line-number="12591"></td>
        <td id="LC12591" class="blob-code blob-code-inner js-file-line">        context_pusher&amp; <span class="pl-k">operator</span>= (<span class="pl-k">const</span> context_pusher&amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L12592" class="blob-num js-line-number" data-line-number="12592"></td>
        <td id="LC12592" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L12593" class="blob-num js-line-number" data-line-number="12593"></td>
        <td id="LC12593" class="blob-code blob-code-inner js-file-line">        context_internal&amp; ctx_;</td>
      </tr>
      <tr>
        <td id="L12594" class="blob-num js-line-number" data-line-number="12594"></td>
        <td id="LC12594" class="blob-code blob-code-inner js-file-line">    };</td>
      </tr>
      <tr>
        <td id="L12595" class="blob-num js-line-number" data-line-number="12595"></td>
        <td id="LC12595" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12596" class="blob-num js-line-number" data-line-number="12596"></td>
        <td id="LC12596" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">basic_mustache</span>()</td>
      </tr>
      <tr>
        <td id="L12597" class="blob-num js-line-number" data-line-number="12597"></td>
        <td id="LC12597" class="blob-code blob-code-inner js-file-line">        : escape_(html_escape&lt;string_type&gt;)</td>
      </tr>
      <tr>
        <td id="L12598" class="blob-num js-line-number" data-line-number="12598"></td>
        <td id="LC12598" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="L12599" class="blob-num js-line-number" data-line-number="12599"></td>
        <td id="LC12599" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12600" class="blob-num js-line-number" data-line-number="12600"></td>
        <td id="LC12600" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="L12601" class="blob-num js-line-number" data-line-number="12601"></td>
        <td id="LC12601" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">basic_mustache</span>(<span class="pl-k">const</span> string_type&amp; input, context_internal&amp; ctx)</td>
      </tr>
      <tr>
        <td id="L12602" class="blob-num js-line-number" data-line-number="12602"></td>
        <td id="LC12602" class="blob-code blob-code-inner js-file-line">        : basic_mustache() {</td>
      </tr>
      <tr>
        <td id="L12603" class="blob-num js-line-number" data-line-number="12603"></td>
        <td id="LC12603" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">parse</span>(input, ctx);</td>
      </tr>
      <tr>
        <td id="L12604" class="blob-num js-line-number" data-line-number="12604"></td>
        <td id="LC12604" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12605" class="blob-num js-line-number" data-line-number="12605"></td>
        <td id="LC12605" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12606" class="blob-num js-line-number" data-line-number="12606"></td>
        <td id="LC12606" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">parse</span>(<span class="pl-k">const</span> string_type&amp; input, context_internal&amp; ctx) {</td>
      </tr>
      <tr>
        <td id="L12607" class="blob-num js-line-number" data-line-number="12607"></td>
        <td id="LC12607" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">using</span> streamstring = std::basic_ostringstream&lt;<span class="pl-k">typename</span> string_type::value_type&gt;;</td>
      </tr>
      <tr>
        <td id="L12608" class="blob-num js-line-number" data-line-number="12608"></td>
        <td id="LC12608" class="blob-code blob-code-inner js-file-line">        </td>
      </tr>
      <tr>
        <td id="L12609" class="blob-num js-line-number" data-line-number="12609"></td>
        <td id="LC12609" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> string_type <span class="pl-smi">braceDelimiterEndUnescaped</span>(<span class="pl-c1">3</span>, <span class="pl-s"><span class="pl-pds">&#39;</span>}<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L12610" class="blob-num js-line-number" data-line-number="12610"></td>
        <td id="LC12610" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> StringSizeType inputSize{input.<span class="pl-c1">size</span>()};</td>
      </tr>
      <tr>
        <td id="L12611" class="blob-num js-line-number" data-line-number="12611"></td>
        <td id="LC12611" class="blob-code blob-code-inner js-file-line">        </td>
      </tr>
      <tr>
        <td id="L12612" class="blob-num js-line-number" data-line-number="12612"></td>
        <td id="LC12612" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">bool</span> currentDelimiterIsBrace{ctx.<span class="pl-smi">delimiterSet</span>.<span class="pl-c1">is_default</span>()};</td>
      </tr>
      <tr>
        <td id="L12613" class="blob-num js-line-number" data-line-number="12613"></td>
        <td id="LC12613" class="blob-code blob-code-inner js-file-line">        </td>
      </tr>
      <tr>
        <td id="L12614" class="blob-num js-line-number" data-line-number="12614"></td>
        <td id="LC12614" class="blob-code blob-code-inner js-file-line">        std::vector&lt;component*&gt; sections{&amp;rootComponent_};</td>
      </tr>
      <tr>
        <td id="L12615" class="blob-num js-line-number" data-line-number="12615"></td>
        <td id="LC12615" class="blob-code blob-code-inner js-file-line">        std::vector&lt;StringSizeType&gt; sectionStarts;</td>
      </tr>
      <tr>
        <td id="L12616" class="blob-num js-line-number" data-line-number="12616"></td>
        <td id="LC12616" class="blob-code blob-code-inner js-file-line">        </td>
      </tr>
      <tr>
        <td id="L12617" class="blob-num js-line-number" data-line-number="12617"></td>
        <td id="LC12617" class="blob-code blob-code-inner js-file-line">        StringSizeType inputPosition{<span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L12618" class="blob-num js-line-number" data-line-number="12618"></td>
        <td id="LC12618" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">while</span> (inputPosition != inputSize) {</td>
      </tr>
      <tr>
        <td id="L12619" class="blob-num js-line-number" data-line-number="12619"></td>
        <td id="LC12619" class="blob-code blob-code-inner js-file-line">            </td>
      </tr>
      <tr>
        <td id="L12620" class="blob-num js-line-number" data-line-number="12620"></td>
        <td id="LC12620" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> Find the next tag start delimiter</span></td>
      </tr>
      <tr>
        <td id="L12621" class="blob-num js-line-number" data-line-number="12621"></td>
        <td id="LC12621" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">const</span> StringSizeType tagLocationStart{input.<span class="pl-c1">find</span>(ctx.<span class="pl-smi">delimiterSet</span>.<span class="pl-smi">begin</span>, inputPosition)};</td>
      </tr>
      <tr>
        <td id="L12622" class="blob-num js-line-number" data-line-number="12622"></td>
        <td id="LC12622" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (tagLocationStart == string_type::npos) {</td>
      </tr>
      <tr>
        <td id="L12623" class="blob-num js-line-number" data-line-number="12623"></td>
        <td id="LC12623" class="blob-code blob-code-inner js-file-line">                <span class="pl-c"><span class="pl-c">//</span> No tag found. Add the remaining text.</span></td>
      </tr>
      <tr>
        <td id="L12624" class="blob-num js-line-number" data-line-number="12624"></td>
        <td id="LC12624" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">const</span> component comp{{input, inputPosition, inputSize - inputPosition}, inputPosition};</td>
      </tr>
      <tr>
        <td id="L12625" class="blob-num js-line-number" data-line-number="12625"></td>
        <td id="LC12625" class="blob-code blob-code-inner js-file-line">                sections.<span class="pl-c1">back</span>()-&gt;children.<span class="pl-c1">push_back</span>(comp);</td>
      </tr>
      <tr>
        <td id="L12626" class="blob-num js-line-number" data-line-number="12626"></td>
        <td id="LC12626" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L12627" class="blob-num js-line-number" data-line-number="12627"></td>
        <td id="LC12627" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> <span class="pl-k">if</span> (tagLocationStart != inputPosition) {</td>
      </tr>
      <tr>
        <td id="L12628" class="blob-num js-line-number" data-line-number="12628"></td>
        <td id="LC12628" class="blob-code blob-code-inner js-file-line">                <span class="pl-c"><span class="pl-c">//</span> Tag found, add text up to this tag.</span></td>
      </tr>
      <tr>
        <td id="L12629" class="blob-num js-line-number" data-line-number="12629"></td>
        <td id="LC12629" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">const</span> component comp{{input, inputPosition, tagLocationStart - inputPosition}, inputPosition};</td>
      </tr>
      <tr>
        <td id="L12630" class="blob-num js-line-number" data-line-number="12630"></td>
        <td id="LC12630" class="blob-code blob-code-inner js-file-line">                sections.<span class="pl-c1">back</span>()-&gt;children.<span class="pl-c1">push_back</span>(comp);</td>
      </tr>
      <tr>
        <td id="L12631" class="blob-num js-line-number" data-line-number="12631"></td>
        <td id="LC12631" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L12632" class="blob-num js-line-number" data-line-number="12632"></td>
        <td id="LC12632" class="blob-code blob-code-inner js-file-line">            </td>
      </tr>
      <tr>
        <td id="L12633" class="blob-num js-line-number" data-line-number="12633"></td>
        <td id="LC12633" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> Find the next tag end delimiter</span></td>
      </tr>
      <tr>
        <td id="L12634" class="blob-num js-line-number" data-line-number="12634"></td>
        <td id="LC12634" class="blob-code blob-code-inner js-file-line">            StringSizeType tagContentsLocation{tagLocationStart + ctx.<span class="pl-smi">delimiterSet</span>.<span class="pl-smi">begin</span>.<span class="pl-c1">size</span>()};</td>
      </tr>
      <tr>
        <td id="L12635" class="blob-num js-line-number" data-line-number="12635"></td>
        <td id="LC12635" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">const</span> <span class="pl-k">bool</span> tagIsUnescapedVar{currentDelimiterIsBrace &amp;&amp; tagLocationStart != (inputSize - <span class="pl-c1">2</span>) &amp;&amp; input.<span class="pl-c1">at</span>(tagContentsLocation) == ctx.<span class="pl-smi">delimiterSet</span>.<span class="pl-smi">begin</span>.<span class="pl-c1">at</span>(<span class="pl-c1">0</span>)};</td>
      </tr>
      <tr>
        <td id="L12636" class="blob-num js-line-number" data-line-number="12636"></td>
        <td id="LC12636" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">const</span> string_type&amp; currentTagDelimiterEnd{tagIsUnescapedVar ? braceDelimiterEndUnescaped : ctx.<span class="pl-smi">delimiterSet</span>.<span class="pl-smi">end</span>};</td>
      </tr>
      <tr>
        <td id="L12637" class="blob-num js-line-number" data-line-number="12637"></td>
        <td id="LC12637" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">const</span> <span class="pl-k">auto</span> currentTagDelimiterEndSize = currentTagDelimiterEnd.<span class="pl-c1">size</span>();</td>
      </tr>
      <tr>
        <td id="L12638" class="blob-num js-line-number" data-line-number="12638"></td>
        <td id="LC12638" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (tagIsUnescapedVar) {</td>
      </tr>
      <tr>
        <td id="L12639" class="blob-num js-line-number" data-line-number="12639"></td>
        <td id="LC12639" class="blob-code blob-code-inner js-file-line">                ++tagContentsLocation;</td>
      </tr>
      <tr>
        <td id="L12640" class="blob-num js-line-number" data-line-number="12640"></td>
        <td id="LC12640" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L12641" class="blob-num js-line-number" data-line-number="12641"></td>
        <td id="LC12641" class="blob-code blob-code-inner js-file-line">            StringSizeType tagLocationEnd{input.<span class="pl-c1">find</span>(currentTagDelimiterEnd, tagContentsLocation)};</td>
      </tr>
      <tr>
        <td id="L12642" class="blob-num js-line-number" data-line-number="12642"></td>
        <td id="LC12642" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (tagLocationEnd == string_type::npos) {</td>
      </tr>
      <tr>
        <td id="L12643" class="blob-num js-line-number" data-line-number="12643"></td>
        <td id="LC12643" class="blob-code blob-code-inner js-file-line">                streamstring ss;</td>
      </tr>
      <tr>
        <td id="L12644" class="blob-num js-line-number" data-line-number="12644"></td>
        <td id="LC12644" class="blob-code blob-code-inner js-file-line">                ss &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>Unclosed tag at <span class="pl-pds">&quot;</span></span> &lt;&lt; tagLocationStart;</td>
      </tr>
      <tr>
        <td id="L12645" class="blob-num js-line-number" data-line-number="12645"></td>
        <td id="LC12645" class="blob-code blob-code-inner js-file-line">                errorMessage_.<span class="pl-c1">assign</span>(ss.<span class="pl-c1">str</span>());</td>
      </tr>
      <tr>
        <td id="L12646" class="blob-num js-line-number" data-line-number="12646"></td>
        <td id="LC12646" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">return</span>;</td>
      </tr>
      <tr>
        <td id="L12647" class="blob-num js-line-number" data-line-number="12647"></td>
        <td id="LC12647" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L12648" class="blob-num js-line-number" data-line-number="12648"></td>
        <td id="LC12648" class="blob-code blob-code-inner js-file-line">            </td>
      </tr>
      <tr>
        <td id="L12649" class="blob-num js-line-number" data-line-number="12649"></td>
        <td id="LC12649" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> Parse tag</span></td>
      </tr>
      <tr>
        <td id="L12650" class="blob-num js-line-number" data-line-number="12650"></td>
        <td id="LC12650" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">const</span> string_type tagContents{<span class="pl-c1">trim</span>(string_type{input, tagContentsLocation, tagLocationEnd - tagContentsLocation})};</td>
      </tr>
      <tr>
        <td id="L12651" class="blob-num js-line-number" data-line-number="12651"></td>
        <td id="LC12651" class="blob-code blob-code-inner js-file-line">            component comp;</td>
      </tr>
      <tr>
        <td id="L12652" class="blob-num js-line-number" data-line-number="12652"></td>
        <td id="LC12652" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (!tagContents.<span class="pl-c1">empty</span>() &amp;&amp; tagContents[<span class="pl-c1">0</span>] == <span class="pl-s"><span class="pl-pds">&#39;</span>=<span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L12653" class="blob-num js-line-number" data-line-number="12653"></td>
        <td id="LC12653" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">if</span> (!<span class="pl-c1">parseSetDelimiterTag</span>(tagContents, ctx.<span class="pl-smi">delimiterSet</span>)) {</td>
      </tr>
      <tr>
        <td id="L12654" class="blob-num js-line-number" data-line-number="12654"></td>
        <td id="LC12654" class="blob-code blob-code-inner js-file-line">                    streamstring ss;</td>
      </tr>
      <tr>
        <td id="L12655" class="blob-num js-line-number" data-line-number="12655"></td>
        <td id="LC12655" class="blob-code blob-code-inner js-file-line">                    ss &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>Invalid set delimiter tag at <span class="pl-pds">&quot;</span></span> &lt;&lt; tagLocationStart;</td>
      </tr>
      <tr>
        <td id="L12656" class="blob-num js-line-number" data-line-number="12656"></td>
        <td id="LC12656" class="blob-code blob-code-inner js-file-line">                    errorMessage_.<span class="pl-c1">assign</span>(ss.<span class="pl-c1">str</span>());</td>
      </tr>
      <tr>
        <td id="L12657" class="blob-num js-line-number" data-line-number="12657"></td>
        <td id="LC12657" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">return</span>;</td>
      </tr>
      <tr>
        <td id="L12658" class="blob-num js-line-number" data-line-number="12658"></td>
        <td id="LC12658" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L12659" class="blob-num js-line-number" data-line-number="12659"></td>
        <td id="LC12659" class="blob-code blob-code-inner js-file-line">                currentDelimiterIsBrace = ctx.<span class="pl-smi">delimiterSet</span>.<span class="pl-c1">is_default</span>();</td>
      </tr>
      <tr>
        <td id="L12660" class="blob-num js-line-number" data-line-number="12660"></td>
        <td id="LC12660" class="blob-code blob-code-inner js-file-line">                comp.<span class="pl-smi">tag</span>.<span class="pl-smi">type</span> = Tag::Type::SetDelimiter;</td>
      </tr>
      <tr>
        <td id="L12661" class="blob-num js-line-number" data-line-number="12661"></td>
        <td id="LC12661" class="blob-code blob-code-inner js-file-line">                comp.<span class="pl-smi">tag</span>.<span class="pl-smi">delimiterSet</span>.<span class="pl-c1">reset</span>(<span class="pl-k">new</span> delimiter_set&lt;string_type&gt;(ctx.<span class="pl-smi">delimiterSet</span>));</td>
      </tr>
      <tr>
        <td id="L12662" class="blob-num js-line-number" data-line-number="12662"></td>
        <td id="LC12662" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L12663" class="blob-num js-line-number" data-line-number="12663"></td>
        <td id="LC12663" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (comp.<span class="pl-smi">tag</span>.<span class="pl-smi">type</span> != Tag::Type::SetDelimiter) {</td>
      </tr>
      <tr>
        <td id="L12664" class="blob-num js-line-number" data-line-number="12664"></td>
        <td id="LC12664" class="blob-code blob-code-inner js-file-line">                <span class="pl-c1">parseTagContents</span>(tagIsUnescapedVar, tagContents, comp.<span class="pl-smi">tag</span>);</td>
      </tr>
      <tr>
        <td id="L12665" class="blob-num js-line-number" data-line-number="12665"></td>
        <td id="LC12665" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L12666" class="blob-num js-line-number" data-line-number="12666"></td>
        <td id="LC12666" class="blob-code blob-code-inner js-file-line">            comp.<span class="pl-smi">position</span> = tagLocationStart;</td>
      </tr>
      <tr>
        <td id="L12667" class="blob-num js-line-number" data-line-number="12667"></td>
        <td id="LC12667" class="blob-code blob-code-inner js-file-line">            sections.<span class="pl-c1">back</span>()-&gt;children.<span class="pl-c1">push_back</span>(comp);</td>
      </tr>
      <tr>
        <td id="L12668" class="blob-num js-line-number" data-line-number="12668"></td>
        <td id="LC12668" class="blob-code blob-code-inner js-file-line">            </td>
      </tr>
      <tr>
        <td id="L12669" class="blob-num js-line-number" data-line-number="12669"></td>
        <td id="LC12669" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> Start next search after this tag</span></td>
      </tr>
      <tr>
        <td id="L12670" class="blob-num js-line-number" data-line-number="12670"></td>
        <td id="LC12670" class="blob-code blob-code-inner js-file-line">            inputPosition = tagLocationEnd + currentTagDelimiterEndSize;</td>
      </tr>
      <tr>
        <td id="L12671" class="blob-num js-line-number" data-line-number="12671"></td>
        <td id="LC12671" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12672" class="blob-num js-line-number" data-line-number="12672"></td>
        <td id="LC12672" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> Push or pop sections</span></td>
      </tr>
      <tr>
        <td id="L12673" class="blob-num js-line-number" data-line-number="12673"></td>
        <td id="LC12673" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (comp.<span class="pl-smi">tag</span>.<span class="pl-c1">isSectionBegin</span>()) {</td>
      </tr>
      <tr>
        <td id="L12674" class="blob-num js-line-number" data-line-number="12674"></td>
        <td id="LC12674" class="blob-code blob-code-inner js-file-line">                sections.<span class="pl-c1">push_back</span>(&amp;sections.<span class="pl-c1">back</span>()-&gt;children.<span class="pl-c1">back</span>());</td>
      </tr>
      <tr>
        <td id="L12675" class="blob-num js-line-number" data-line-number="12675"></td>
        <td id="LC12675" class="blob-code blob-code-inner js-file-line">                sectionStarts.<span class="pl-c1">push_back</span>(inputPosition);</td>
      </tr>
      <tr>
        <td id="L12676" class="blob-num js-line-number" data-line-number="12676"></td>
        <td id="LC12676" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> <span class="pl-k">if</span> (comp.<span class="pl-smi">tag</span>.<span class="pl-c1">isSectionEnd</span>()) {</td>
      </tr>
      <tr>
        <td id="L12677" class="blob-num js-line-number" data-line-number="12677"></td>
        <td id="LC12677" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">if</span> (sections.<span class="pl-c1">size</span>() == <span class="pl-c1">1</span>) {</td>
      </tr>
      <tr>
        <td id="L12678" class="blob-num js-line-number" data-line-number="12678"></td>
        <td id="LC12678" class="blob-code blob-code-inner js-file-line">                    streamstring ss;</td>
      </tr>
      <tr>
        <td id="L12679" class="blob-num js-line-number" data-line-number="12679"></td>
        <td id="LC12679" class="blob-code blob-code-inner js-file-line">                    ss &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>Unopened section <span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span> &lt;&lt; comp.<span class="pl-smi">tag</span>.<span class="pl-smi">name</span> &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\&quot;</span> at <span class="pl-pds">&quot;</span></span> &lt;&lt; comp.<span class="pl-smi">position</span>;</td>
      </tr>
      <tr>
        <td id="L12680" class="blob-num js-line-number" data-line-number="12680"></td>
        <td id="LC12680" class="blob-code blob-code-inner js-file-line">                    errorMessage_.<span class="pl-c1">assign</span>(ss.<span class="pl-c1">str</span>());</td>
      </tr>
      <tr>
        <td id="L12681" class="blob-num js-line-number" data-line-number="12681"></td>
        <td id="LC12681" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">return</span>;</td>
      </tr>
      <tr>
        <td id="L12682" class="blob-num js-line-number" data-line-number="12682"></td>
        <td id="LC12682" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L12683" class="blob-num js-line-number" data-line-number="12683"></td>
        <td id="LC12683" class="blob-code blob-code-inner js-file-line">                sections.<span class="pl-c1">back</span>()-&gt;tag.<span class="pl-smi">sectionText</span>.<span class="pl-c1">reset</span>(<span class="pl-k">new</span> <span class="pl-c1">string_type</span>(input.<span class="pl-c1">substr</span>(sectionStarts.<span class="pl-c1">back</span>(), tagLocationStart - sectionStarts.<span class="pl-c1">back</span>())));</td>
      </tr>
      <tr>
        <td id="L12684" class="blob-num js-line-number" data-line-number="12684"></td>
        <td id="LC12684" class="blob-code blob-code-inner js-file-line">                sections.<span class="pl-c1">pop_back</span>();</td>
      </tr>
      <tr>
        <td id="L12685" class="blob-num js-line-number" data-line-number="12685"></td>
        <td id="LC12685" class="blob-code blob-code-inner js-file-line">                sectionStarts.<span class="pl-c1">pop_back</span>();</td>
      </tr>
      <tr>
        <td id="L12686" class="blob-num js-line-number" data-line-number="12686"></td>
        <td id="LC12686" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L12687" class="blob-num js-line-number" data-line-number="12687"></td>
        <td id="LC12687" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L12688" class="blob-num js-line-number" data-line-number="12688"></td>
        <td id="LC12688" class="blob-code blob-code-inner js-file-line">        </td>
      </tr>
      <tr>
        <td id="L12689" class="blob-num js-line-number" data-line-number="12689"></td>
        <td id="LC12689" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> Check for sections without an ending tag</span></td>
      </tr>
      <tr>
        <td id="L12690" class="blob-num js-line-number" data-line-number="12690"></td>
        <td id="LC12690" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">walk</span>([<span class="pl-c1">this</span>](component&amp; comp) -&gt; WalkControl {</td>
      </tr>
      <tr>
        <td id="L12691" class="blob-num js-line-number" data-line-number="12691"></td>
        <td id="LC12691" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (!comp.<span class="pl-smi">tag</span>.<span class="pl-c1">isSectionBegin</span>()) {</td>
      </tr>
      <tr>
        <td id="L12692" class="blob-num js-line-number" data-line-number="12692"></td>
        <td id="LC12692" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">return</span> WalkControl::Continue;</td>
      </tr>
      <tr>
        <td id="L12693" class="blob-num js-line-number" data-line-number="12693"></td>
        <td id="LC12693" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L12694" class="blob-num js-line-number" data-line-number="12694"></td>
        <td id="LC12694" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (comp.<span class="pl-smi">children</span>.<span class="pl-c1">empty</span>() || !comp.<span class="pl-smi">children</span>.<span class="pl-c1">back</span>().<span class="pl-smi">tag</span>.<span class="pl-c1">isSectionEnd</span>() || comp.<span class="pl-smi">children</span>.<span class="pl-c1">back</span>().<span class="pl-smi">tag</span>.<span class="pl-smi">name</span> != comp.<span class="pl-smi">tag</span>.<span class="pl-smi">name</span>) {</td>
      </tr>
      <tr>
        <td id="L12695" class="blob-num js-line-number" data-line-number="12695"></td>
        <td id="LC12695" class="blob-code blob-code-inner js-file-line">                streamstring ss;</td>
      </tr>
      <tr>
        <td id="L12696" class="blob-num js-line-number" data-line-number="12696"></td>
        <td id="LC12696" class="blob-code blob-code-inner js-file-line">                ss &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>Unclosed section <span class="pl-cce">\&quot;</span><span class="pl-pds">&quot;</span></span> &lt;&lt; comp.<span class="pl-smi">tag</span>.<span class="pl-smi">name</span> &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\&quot;</span> at <span class="pl-pds">&quot;</span></span> &lt;&lt; comp.<span class="pl-smi">position</span>;</td>
      </tr>
      <tr>
        <td id="L12697" class="blob-num js-line-number" data-line-number="12697"></td>
        <td id="LC12697" class="blob-code blob-code-inner js-file-line">                errorMessage_.<span class="pl-c1">assign</span>(ss.<span class="pl-c1">str</span>());</td>
      </tr>
      <tr>
        <td id="L12698" class="blob-num js-line-number" data-line-number="12698"></td>
        <td id="LC12698" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">return</span> WalkControl::Stop;</td>
      </tr>
      <tr>
        <td id="L12699" class="blob-num js-line-number" data-line-number="12699"></td>
        <td id="LC12699" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L12700" class="blob-num js-line-number" data-line-number="12700"></td>
        <td id="LC12700" class="blob-code blob-code-inner js-file-line">            comp.<span class="pl-smi">children</span>.<span class="pl-c1">pop_back</span>(); <span class="pl-c"><span class="pl-c">//</span> remove now useless end section component</span></td>
      </tr>
      <tr>
        <td id="L12701" class="blob-num js-line-number" data-line-number="12701"></td>
        <td id="LC12701" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> WalkControl::Continue;</td>
      </tr>
      <tr>
        <td id="L12702" class="blob-num js-line-number" data-line-number="12702"></td>
        <td id="LC12702" class="blob-code blob-code-inner js-file-line">        });</td>
      </tr>
      <tr>
        <td id="L12703" class="blob-num js-line-number" data-line-number="12703"></td>
        <td id="LC12703" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (!errorMessage_.<span class="pl-c1">empty</span>()) {</td>
      </tr>
      <tr>
        <td id="L12704" class="blob-num js-line-number" data-line-number="12704"></td>
        <td id="LC12704" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span>;</td>
      </tr>
      <tr>
        <td id="L12705" class="blob-num js-line-number" data-line-number="12705"></td>
        <td id="LC12705" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L12706" class="blob-num js-line-number" data-line-number="12706"></td>
        <td id="LC12706" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12707" class="blob-num js-line-number" data-line-number="12707"></td>
        <td id="LC12707" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="L12708" class="blob-num js-line-number" data-line-number="12708"></td>
        <td id="LC12708" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">enum</span> <span class="pl-k">class</span> <span class="pl-en">WalkControl</span> {</td>
      </tr>
      <tr>
        <td id="L12709" class="blob-num js-line-number" data-line-number="12709"></td>
        <td id="LC12709" class="blob-code blob-code-inner js-file-line">        Continue,</td>
      </tr>
      <tr>
        <td id="L12710" class="blob-num js-line-number" data-line-number="12710"></td>
        <td id="LC12710" class="blob-code blob-code-inner js-file-line">        Stop,</td>
      </tr>
      <tr>
        <td id="L12711" class="blob-num js-line-number" data-line-number="12711"></td>
        <td id="LC12711" class="blob-code blob-code-inner js-file-line">        Skip,</td>
      </tr>
      <tr>
        <td id="L12712" class="blob-num js-line-number" data-line-number="12712"></td>
        <td id="LC12712" class="blob-code blob-code-inner js-file-line">    };</td>
      </tr>
      <tr>
        <td id="L12713" class="blob-num js-line-number" data-line-number="12713"></td>
        <td id="LC12713" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">using</span> WalkCallback = std::function&lt;WalkControl(component&amp;)&gt;;</td>
      </tr>
      <tr>
        <td id="L12714" class="blob-num js-line-number" data-line-number="12714"></td>
        <td id="LC12714" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="L12715" class="blob-num js-line-number" data-line-number="12715"></td>
        <td id="LC12715" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">walk</span>(<span class="pl-k">const</span> WalkCallback&amp; callback) {</td>
      </tr>
      <tr>
        <td id="L12716" class="blob-num js-line-number" data-line-number="12716"></td>
        <td id="LC12716" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">walkChildren</span>(callback, rootComponent_);</td>
      </tr>
      <tr>
        <td id="L12717" class="blob-num js-line-number" data-line-number="12717"></td>
        <td id="LC12717" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12718" class="blob-num js-line-number" data-line-number="12718"></td>
        <td id="LC12718" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12719" class="blob-num js-line-number" data-line-number="12719"></td>
        <td id="LC12719" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">walkChildren</span>(<span class="pl-k">const</span> WalkCallback&amp; callback, component&amp; comp) {</td>
      </tr>
      <tr>
        <td id="L12720" class="blob-num js-line-number" data-line-number="12720"></td>
        <td id="LC12720" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">for</span> (<span class="pl-k">auto</span>&amp; childComp : comp.<span class="pl-smi">children</span>) {</td>
      </tr>
      <tr>
        <td id="L12721" class="blob-num js-line-number" data-line-number="12721"></td>
        <td id="LC12721" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-c1">walkComponent</span>(callback, childComp) != WalkControl::Continue) {</td>
      </tr>
      <tr>
        <td id="L12722" class="blob-num js-line-number" data-line-number="12722"></td>
        <td id="LC12722" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L12723" class="blob-num js-line-number" data-line-number="12723"></td>
        <td id="LC12723" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L12724" class="blob-num js-line-number" data-line-number="12724"></td>
        <td id="LC12724" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L12725" class="blob-num js-line-number" data-line-number="12725"></td>
        <td id="LC12725" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12726" class="blob-num js-line-number" data-line-number="12726"></td>
        <td id="LC12726" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="L12727" class="blob-num js-line-number" data-line-number="12727"></td>
        <td id="LC12727" class="blob-code blob-code-inner js-file-line">    WalkControl <span class="pl-en">walkComponent</span>(<span class="pl-k">const</span> WalkCallback&amp; callback, component&amp; comp) {</td>
      </tr>
      <tr>
        <td id="L12728" class="blob-num js-line-number" data-line-number="12728"></td>
        <td id="LC12728" class="blob-code blob-code-inner js-file-line">        WalkControl control{<span class="pl-c1">callback</span>(comp)};</td>
      </tr>
      <tr>
        <td id="L12729" class="blob-num js-line-number" data-line-number="12729"></td>
        <td id="LC12729" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (control == WalkControl::Stop) {</td>
      </tr>
      <tr>
        <td id="L12730" class="blob-num js-line-number" data-line-number="12730"></td>
        <td id="LC12730" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> control;</td>
      </tr>
      <tr>
        <td id="L12731" class="blob-num js-line-number" data-line-number="12731"></td>
        <td id="LC12731" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> <span class="pl-k">if</span> (control == WalkControl::Skip) {</td>
      </tr>
      <tr>
        <td id="L12732" class="blob-num js-line-number" data-line-number="12732"></td>
        <td id="LC12732" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> WalkControl::Continue;</td>
      </tr>
      <tr>
        <td id="L12733" class="blob-num js-line-number" data-line-number="12733"></td>
        <td id="LC12733" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L12734" class="blob-num js-line-number" data-line-number="12734"></td>
        <td id="LC12734" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">for</span> (<span class="pl-k">auto</span>&amp; childComp : comp.<span class="pl-smi">children</span>) {</td>
      </tr>
      <tr>
        <td id="L12735" class="blob-num js-line-number" data-line-number="12735"></td>
        <td id="LC12735" class="blob-code blob-code-inner js-file-line">            control = <span class="pl-c1">walkComponent</span>(callback, childComp);</td>
      </tr>
      <tr>
        <td id="L12736" class="blob-num js-line-number" data-line-number="12736"></td>
        <td id="LC12736" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">assert</span>(control == WalkControl::Continue);</td>
      </tr>
      <tr>
        <td id="L12737" class="blob-num js-line-number" data-line-number="12737"></td>
        <td id="LC12737" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L12738" class="blob-num js-line-number" data-line-number="12738"></td>
        <td id="LC12738" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> control;</td>
      </tr>
      <tr>
        <td id="L12739" class="blob-num js-line-number" data-line-number="12739"></td>
        <td id="LC12739" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12740" class="blob-num js-line-number" data-line-number="12740"></td>
        <td id="LC12740" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="L12741" class="blob-num js-line-number" data-line-number="12741"></td>
        <td id="LC12741" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">bool</span> <span class="pl-en">isSetDelimiterValid</span>(<span class="pl-k">const</span> string_type&amp; delimiter) {</td>
      </tr>
      <tr>
        <td id="L12742" class="blob-num js-line-number" data-line-number="12742"></td>
        <td id="LC12742" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> &quot;Custom delimiters may not contain whitespace or the equals sign.&quot;</span></td>
      </tr>
      <tr>
        <td id="L12743" class="blob-num js-line-number" data-line-number="12743"></td>
        <td id="LC12743" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">for</span> (<span class="pl-k">const</span> <span class="pl-k">auto</span> ch : delimiter) {</td>
      </tr>
      <tr>
        <td id="L12744" class="blob-num js-line-number" data-line-number="12744"></td>
        <td id="LC12744" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (ch == <span class="pl-s"><span class="pl-pds">&#39;</span>=<span class="pl-pds">&#39;</span></span> || <span class="pl-c1">isspace</span>(ch)) {</td>
      </tr>
      <tr>
        <td id="L12745" class="blob-num js-line-number" data-line-number="12745"></td>
        <td id="LC12745" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">return</span> <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L12746" class="blob-num js-line-number" data-line-number="12746"></td>
        <td id="LC12746" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L12747" class="blob-num js-line-number" data-line-number="12747"></td>
        <td id="LC12747" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L12748" class="blob-num js-line-number" data-line-number="12748"></td>
        <td id="LC12748" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L12749" class="blob-num js-line-number" data-line-number="12749"></td>
        <td id="LC12749" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12750" class="blob-num js-line-number" data-line-number="12750"></td>
        <td id="LC12750" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="L12751" class="blob-num js-line-number" data-line-number="12751"></td>
        <td id="LC12751" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">bool</span> <span class="pl-en">parseSetDelimiterTag</span>(<span class="pl-k">const</span> string_type&amp; contents, delimiter_set&lt;string_type&gt;&amp; delimiterSet) {</td>
      </tr>
      <tr>
        <td id="L12752" class="blob-num js-line-number" data-line-number="12752"></td>
        <td id="LC12752" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> Smallest legal tag is &quot;=X X=&quot;</span></td>
      </tr>
      <tr>
        <td id="L12753" class="blob-num js-line-number" data-line-number="12753"></td>
        <td id="LC12753" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (contents.<span class="pl-c1">size</span>() &lt; <span class="pl-c1">5</span>) {</td>
      </tr>
      <tr>
        <td id="L12754" class="blob-num js-line-number" data-line-number="12754"></td>
        <td id="LC12754" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L12755" class="blob-num js-line-number" data-line-number="12755"></td>
        <td id="LC12755" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L12756" class="blob-num js-line-number" data-line-number="12756"></td>
        <td id="LC12756" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (contents.<span class="pl-c1">back</span>() != <span class="pl-s"><span class="pl-pds">&#39;</span>=<span class="pl-pds">&#39;</span></span>) {</td>
      </tr>
      <tr>
        <td id="L12757" class="blob-num js-line-number" data-line-number="12757"></td>
        <td id="LC12757" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L12758" class="blob-num js-line-number" data-line-number="12758"></td>
        <td id="LC12758" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L12759" class="blob-num js-line-number" data-line-number="12759"></td>
        <td id="LC12759" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> <span class="pl-k">auto</span> contentsSubstr = <span class="pl-c1">trim</span>(contents.<span class="pl-c1">substr</span>(<span class="pl-c1">1</span>, contents.<span class="pl-c1">size</span>() - <span class="pl-c1">2</span>));</td>
      </tr>
      <tr>
        <td id="L12760" class="blob-num js-line-number" data-line-number="12760"></td>
        <td id="LC12760" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> <span class="pl-k">auto</span> spacepos = contentsSubstr.<span class="pl-c1">find</span>(<span class="pl-s"><span class="pl-pds">&#39;</span> <span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L12761" class="blob-num js-line-number" data-line-number="12761"></td>
        <td id="LC12761" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (spacepos == string_type::npos) {</td>
      </tr>
      <tr>
        <td id="L12762" class="blob-num js-line-number" data-line-number="12762"></td>
        <td id="LC12762" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L12763" class="blob-num js-line-number" data-line-number="12763"></td>
        <td id="LC12763" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L12764" class="blob-num js-line-number" data-line-number="12764"></td>
        <td id="LC12764" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> <span class="pl-k">auto</span> nonspace = contentsSubstr.<span class="pl-c1">find_first_not_of</span>(<span class="pl-s"><span class="pl-pds">&#39;</span> <span class="pl-pds">&#39;</span></span>, spacepos + <span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L12765" class="blob-num js-line-number" data-line-number="12765"></td>
        <td id="LC12765" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">assert</span>(nonspace != string_type::npos);</td>
      </tr>
      <tr>
        <td id="L12766" class="blob-num js-line-number" data-line-number="12766"></td>
        <td id="LC12766" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> string_type begin = contentsSubstr.<span class="pl-c1">substr</span>(<span class="pl-c1">0</span>, spacepos);</td>
      </tr>
      <tr>
        <td id="L12767" class="blob-num js-line-number" data-line-number="12767"></td>
        <td id="LC12767" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> string_type end = contentsSubstr.<span class="pl-c1">substr</span>(nonspace, contentsSubstr.<span class="pl-c1">size</span>() - nonspace);</td>
      </tr>
      <tr>
        <td id="L12768" class="blob-num js-line-number" data-line-number="12768"></td>
        <td id="LC12768" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (!<span class="pl-c1">isSetDelimiterValid</span>(begin) || !<span class="pl-c1">isSetDelimiterValid</span>(end)) {</td>
      </tr>
      <tr>
        <td id="L12769" class="blob-num js-line-number" data-line-number="12769"></td>
        <td id="LC12769" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L12770" class="blob-num js-line-number" data-line-number="12770"></td>
        <td id="LC12770" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L12771" class="blob-num js-line-number" data-line-number="12771"></td>
        <td id="LC12771" class="blob-code blob-code-inner js-file-line">        delimiterSet.<span class="pl-smi">begin</span> = begin;</td>
      </tr>
      <tr>
        <td id="L12772" class="blob-num js-line-number" data-line-number="12772"></td>
        <td id="LC12772" class="blob-code blob-code-inner js-file-line">        delimiterSet.<span class="pl-smi">end</span> = end;</td>
      </tr>
      <tr>
        <td id="L12773" class="blob-num js-line-number" data-line-number="12773"></td>
        <td id="LC12773" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L12774" class="blob-num js-line-number" data-line-number="12774"></td>
        <td id="LC12774" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12775" class="blob-num js-line-number" data-line-number="12775"></td>
        <td id="LC12775" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="L12776" class="blob-num js-line-number" data-line-number="12776"></td>
        <td id="LC12776" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">parseTagContents</span>(<span class="pl-k">bool</span> isUnescapedVar, <span class="pl-k">const</span> string_type&amp; contents, Tag&amp; tag) {</td>
      </tr>
      <tr>
        <td id="L12777" class="blob-num js-line-number" data-line-number="12777"></td>
        <td id="LC12777" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (isUnescapedVar) {</td>
      </tr>
      <tr>
        <td id="L12778" class="blob-num js-line-number" data-line-number="12778"></td>
        <td id="LC12778" class="blob-code blob-code-inner js-file-line">            tag.<span class="pl-smi">type</span> = Tag::Type::UnescapedVariable;</td>
      </tr>
      <tr>
        <td id="L12779" class="blob-num js-line-number" data-line-number="12779"></td>
        <td id="LC12779" class="blob-code blob-code-inner js-file-line">            tag.<span class="pl-smi">name</span> = contents;</td>
      </tr>
      <tr>
        <td id="L12780" class="blob-num js-line-number" data-line-number="12780"></td>
        <td id="LC12780" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> <span class="pl-k">if</span> (contents.<span class="pl-c1">empty</span>()) {</td>
      </tr>
      <tr>
        <td id="L12781" class="blob-num js-line-number" data-line-number="12781"></td>
        <td id="LC12781" class="blob-code blob-code-inner js-file-line">            tag.<span class="pl-smi">type</span> = Tag::Type::Variable;</td>
      </tr>
      <tr>
        <td id="L12782" class="blob-num js-line-number" data-line-number="12782"></td>
        <td id="LC12782" class="blob-code blob-code-inner js-file-line">            tag.<span class="pl-smi">name</span>.<span class="pl-c1">clear</span>();</td>
      </tr>
      <tr>
        <td id="L12783" class="blob-num js-line-number" data-line-number="12783"></td>
        <td id="LC12783" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L12784" class="blob-num js-line-number" data-line-number="12784"></td>
        <td id="LC12784" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">switch</span> (contents.<span class="pl-c1">at</span>(<span class="pl-c1">0</span>)) {</td>
      </tr>
      <tr>
        <td id="L12785" class="blob-num js-line-number" data-line-number="12785"></td>
        <td id="LC12785" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&#39;</span>#<span class="pl-pds">&#39;</span></span>:</td>
      </tr>
      <tr>
        <td id="L12786" class="blob-num js-line-number" data-line-number="12786"></td>
        <td id="LC12786" class="blob-code blob-code-inner js-file-line">                    tag.<span class="pl-smi">type</span> = Tag::Type::SectionBegin;</td>
      </tr>
      <tr>
        <td id="L12787" class="blob-num js-line-number" data-line-number="12787"></td>
        <td id="LC12787" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L12788" class="blob-num js-line-number" data-line-number="12788"></td>
        <td id="LC12788" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&#39;</span>^<span class="pl-pds">&#39;</span></span>:</td>
      </tr>
      <tr>
        <td id="L12789" class="blob-num js-line-number" data-line-number="12789"></td>
        <td id="LC12789" class="blob-code blob-code-inner js-file-line">                    tag.<span class="pl-smi">type</span> = Tag::Type::SectionBeginInverted;</td>
      </tr>
      <tr>
        <td id="L12790" class="blob-num js-line-number" data-line-number="12790"></td>
        <td id="LC12790" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L12791" class="blob-num js-line-number" data-line-number="12791"></td>
        <td id="LC12791" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&#39;</span>/<span class="pl-pds">&#39;</span></span>:</td>
      </tr>
      <tr>
        <td id="L12792" class="blob-num js-line-number" data-line-number="12792"></td>
        <td id="LC12792" class="blob-code blob-code-inner js-file-line">                    tag.<span class="pl-smi">type</span> = Tag::Type::SectionEnd;</td>
      </tr>
      <tr>
        <td id="L12793" class="blob-num js-line-number" data-line-number="12793"></td>
        <td id="LC12793" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L12794" class="blob-num js-line-number" data-line-number="12794"></td>
        <td id="LC12794" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&#39;</span>&gt;<span class="pl-pds">&#39;</span></span>:</td>
      </tr>
      <tr>
        <td id="L12795" class="blob-num js-line-number" data-line-number="12795"></td>
        <td id="LC12795" class="blob-code blob-code-inner js-file-line">                    tag.<span class="pl-smi">type</span> = Tag::Type::Partial;</td>
      </tr>
      <tr>
        <td id="L12796" class="blob-num js-line-number" data-line-number="12796"></td>
        <td id="LC12796" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L12797" class="blob-num js-line-number" data-line-number="12797"></td>
        <td id="LC12797" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&#39;</span>&amp;<span class="pl-pds">&#39;</span></span>:</td>
      </tr>
      <tr>
        <td id="L12798" class="blob-num js-line-number" data-line-number="12798"></td>
        <td id="LC12798" class="blob-code blob-code-inner js-file-line">                    tag.<span class="pl-smi">type</span> = Tag::Type::UnescapedVariable;</td>
      </tr>
      <tr>
        <td id="L12799" class="blob-num js-line-number" data-line-number="12799"></td>
        <td id="LC12799" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L12800" class="blob-num js-line-number" data-line-number="12800"></td>
        <td id="LC12800" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">case</span> <span class="pl-s"><span class="pl-pds">&#39;</span>!<span class="pl-pds">&#39;</span></span>:</td>
      </tr>
      <tr>
        <td id="L12801" class="blob-num js-line-number" data-line-number="12801"></td>
        <td id="LC12801" class="blob-code blob-code-inner js-file-line">                    tag.<span class="pl-smi">type</span> = Tag::Type::Comment;</td>
      </tr>
      <tr>
        <td id="L12802" class="blob-num js-line-number" data-line-number="12802"></td>
        <td id="LC12802" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L12803" class="blob-num js-line-number" data-line-number="12803"></td>
        <td id="LC12803" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">default</span>:</td>
      </tr>
      <tr>
        <td id="L12804" class="blob-num js-line-number" data-line-number="12804"></td>
        <td id="LC12804" class="blob-code blob-code-inner js-file-line">                    tag.<span class="pl-smi">type</span> = Tag::Type::Variable;</td>
      </tr>
      <tr>
        <td id="L12805" class="blob-num js-line-number" data-line-number="12805"></td>
        <td id="LC12805" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L12806" class="blob-num js-line-number" data-line-number="12806"></td>
        <td id="LC12806" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L12807" class="blob-num js-line-number" data-line-number="12807"></td>
        <td id="LC12807" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (tag.<span class="pl-smi">type</span> == Tag::Type::Variable) {</td>
      </tr>
      <tr>
        <td id="L12808" class="blob-num js-line-number" data-line-number="12808"></td>
        <td id="LC12808" class="blob-code blob-code-inner js-file-line">                tag.<span class="pl-smi">name</span> = contents;</td>
      </tr>
      <tr>
        <td id="L12809" class="blob-num js-line-number" data-line-number="12809"></td>
        <td id="LC12809" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L12810" class="blob-num js-line-number" data-line-number="12810"></td>
        <td id="LC12810" class="blob-code blob-code-inner js-file-line">                string_type name{contents};</td>
      </tr>
      <tr>
        <td id="L12811" class="blob-num js-line-number" data-line-number="12811"></td>
        <td id="LC12811" class="blob-code blob-code-inner js-file-line">                name.<span class="pl-c1">erase</span>(name.<span class="pl-c1">begin</span>());</td>
      </tr>
      <tr>
        <td id="L12812" class="blob-num js-line-number" data-line-number="12812"></td>
        <td id="LC12812" class="blob-code blob-code-inner js-file-line">                tag.<span class="pl-smi">name</span> = <span class="pl-c1">trim</span>(name);</td>
      </tr>
      <tr>
        <td id="L12813" class="blob-num js-line-number" data-line-number="12813"></td>
        <td id="LC12813" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L12814" class="blob-num js-line-number" data-line-number="12814"></td>
        <td id="LC12814" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L12815" class="blob-num js-line-number" data-line-number="12815"></td>
        <td id="LC12815" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12816" class="blob-num js-line-number" data-line-number="12816"></td>
        <td id="LC12816" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12817" class="blob-num js-line-number" data-line-number="12817"></td>
        <td id="LC12817" class="blob-code blob-code-inner js-file-line">    string_type <span class="pl-en">render</span>(context_internal&amp; ctx) {</td>
      </tr>
      <tr>
        <td id="L12818" class="blob-num js-line-number" data-line-number="12818"></td>
        <td id="LC12818" class="blob-code blob-code-inner js-file-line">        std::basic_ostringstream&lt;<span class="pl-k">typename</span> string_type::value_type&gt; ss;</td>
      </tr>
      <tr>
        <td id="L12819" class="blob-num js-line-number" data-line-number="12819"></td>
        <td id="LC12819" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">render</span>([&amp;ss](<span class="pl-k">const</span> string_type&amp; str) {</td>
      </tr>
      <tr>
        <td id="L12820" class="blob-num js-line-number" data-line-number="12820"></td>
        <td id="LC12820" class="blob-code blob-code-inner js-file-line">            ss &lt;&lt; str;</td>
      </tr>
      <tr>
        <td id="L12821" class="blob-num js-line-number" data-line-number="12821"></td>
        <td id="LC12821" class="blob-code blob-code-inner js-file-line">        }, ctx);</td>
      </tr>
      <tr>
        <td id="L12822" class="blob-num js-line-number" data-line-number="12822"></td>
        <td id="LC12822" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> ss.<span class="pl-c1">str</span>();</td>
      </tr>
      <tr>
        <td id="L12823" class="blob-num js-line-number" data-line-number="12823"></td>
        <td id="LC12823" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12824" class="blob-num js-line-number" data-line-number="12824"></td>
        <td id="LC12824" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12825" class="blob-num js-line-number" data-line-number="12825"></td>
        <td id="LC12825" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">render</span>(<span class="pl-k">const</span> RenderHandler&amp; handler, context_internal&amp; ctx) {</td>
      </tr>
      <tr>
        <td id="L12826" class="blob-num js-line-number" data-line-number="12826"></td>
        <td id="LC12826" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">walk</span>([&amp;handler, &amp;ctx, <span class="pl-c1">this</span>](component&amp; comp) -&gt; WalkControl {</td>
      </tr>
      <tr>
        <td id="L12827" class="blob-num js-line-number" data-line-number="12827"></td>
        <td id="LC12827" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> <span class="pl-c1">renderComponent</span>(handler, ctx, comp);</td>
      </tr>
      <tr>
        <td id="L12828" class="blob-num js-line-number" data-line-number="12828"></td>
        <td id="LC12828" class="blob-code blob-code-inner js-file-line">        });</td>
      </tr>
      <tr>
        <td id="L12829" class="blob-num js-line-number" data-line-number="12829"></td>
        <td id="LC12829" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12830" class="blob-num js-line-number" data-line-number="12830"></td>
        <td id="LC12830" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12831" class="blob-num js-line-number" data-line-number="12831"></td>
        <td id="LC12831" class="blob-code blob-code-inner js-file-line">    WalkControl <span class="pl-en">renderComponent</span>(<span class="pl-k">const</span> RenderHandler&amp; handler, context_internal&amp; ctx, component&amp; comp) {</td>
      </tr>
      <tr>
        <td id="L12832" class="blob-num js-line-number" data-line-number="12832"></td>
        <td id="LC12832" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (comp.<span class="pl-c1">isText</span>()) {</td>
      </tr>
      <tr>
        <td id="L12833" class="blob-num js-line-number" data-line-number="12833"></td>
        <td id="LC12833" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">handler</span>(comp.<span class="pl-smi">text</span>);</td>
      </tr>
      <tr>
        <td id="L12834" class="blob-num js-line-number" data-line-number="12834"></td>
        <td id="LC12834" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> WalkControl::Continue;</td>
      </tr>
      <tr>
        <td id="L12835" class="blob-num js-line-number" data-line-number="12835"></td>
        <td id="LC12835" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L12836" class="blob-num js-line-number" data-line-number="12836"></td>
        <td id="LC12836" class="blob-code blob-code-inner js-file-line">        </td>
      </tr>
      <tr>
        <td id="L12837" class="blob-num js-line-number" data-line-number="12837"></td>
        <td id="LC12837" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> Tag&amp; tag{comp.<span class="pl-smi">tag</span>};</td>
      </tr>
      <tr>
        <td id="L12838" class="blob-num js-line-number" data-line-number="12838"></td>
        <td id="LC12838" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> basic_data&lt;string_type&gt;* var = <span class="pl-c1">nullptr</span>;</td>
      </tr>
      <tr>
        <td id="L12839" class="blob-num js-line-number" data-line-number="12839"></td>
        <td id="LC12839" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">switch</span> (tag.<span class="pl-smi">type</span>) {</td>
      </tr>
      <tr>
        <td id="L12840" class="blob-num js-line-number" data-line-number="12840"></td>
        <td id="LC12840" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">case</span> Tag::Type::Variable:</td>
      </tr>
      <tr>
        <td id="L12841" class="blob-num js-line-number" data-line-number="12841"></td>
        <td id="LC12841" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">case</span> Tag::Type::UnescapedVariable:</td>
      </tr>
      <tr>
        <td id="L12842" class="blob-num js-line-number" data-line-number="12842"></td>
        <td id="LC12842" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">if</span> ((var = ctx.<span class="pl-smi">ctx</span>.<span class="pl-c1">get</span>(tag.<span class="pl-smi">name</span>)) != <span class="pl-c1">nullptr</span>) {</td>
      </tr>
      <tr>
        <td id="L12843" class="blob-num js-line-number" data-line-number="12843"></td>
        <td id="LC12843" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">if</span> (!<span class="pl-c1">renderVariable</span>(handler, var, ctx, tag.<span class="pl-smi">type</span> == Tag::Type::Variable)) {</td>
      </tr>
      <tr>
        <td id="L12844" class="blob-num js-line-number" data-line-number="12844"></td>
        <td id="LC12844" class="blob-code blob-code-inner js-file-line">                        <span class="pl-k">return</span> WalkControl::Stop;</td>
      </tr>
      <tr>
        <td id="L12845" class="blob-num js-line-number" data-line-number="12845"></td>
        <td id="LC12845" class="blob-code blob-code-inner js-file-line">                    }</td>
      </tr>
      <tr>
        <td id="L12846" class="blob-num js-line-number" data-line-number="12846"></td>
        <td id="LC12846" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L12847" class="blob-num js-line-number" data-line-number="12847"></td>
        <td id="LC12847" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L12848" class="blob-num js-line-number" data-line-number="12848"></td>
        <td id="LC12848" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">case</span> Tag::Type::SectionBegin:</td>
      </tr>
      <tr>
        <td id="L12849" class="blob-num js-line-number" data-line-number="12849"></td>
        <td id="LC12849" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">if</span> ((var = ctx.<span class="pl-smi">ctx</span>.<span class="pl-c1">get</span>(tag.<span class="pl-smi">name</span>)) != <span class="pl-c1">nullptr</span>) {</td>
      </tr>
      <tr>
        <td id="L12850" class="blob-num js-line-number" data-line-number="12850"></td>
        <td id="LC12850" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">if</span> (var-&gt;<span class="pl-c1">is_lambda</span>() || var-&gt;<span class="pl-c1">is_lambda2</span>()) {</td>
      </tr>
      <tr>
        <td id="L12851" class="blob-num js-line-number" data-line-number="12851"></td>
        <td id="LC12851" class="blob-code blob-code-inner js-file-line">                        <span class="pl-k">if</span> (!<span class="pl-c1">renderLambda</span>(handler, var, ctx, RenderLambdaEscape::Optional, *comp.<span class="pl-smi">tag</span>.<span class="pl-smi">sectionText</span>, <span class="pl-c1">true</span>)) {</td>
      </tr>
      <tr>
        <td id="L12852" class="blob-num js-line-number" data-line-number="12852"></td>
        <td id="LC12852" class="blob-code blob-code-inner js-file-line">                            <span class="pl-k">return</span> WalkControl::Stop;</td>
      </tr>
      <tr>
        <td id="L12853" class="blob-num js-line-number" data-line-number="12853"></td>
        <td id="LC12853" class="blob-code blob-code-inner js-file-line">                        }</td>
      </tr>
      <tr>
        <td id="L12854" class="blob-num js-line-number" data-line-number="12854"></td>
        <td id="LC12854" class="blob-code blob-code-inner js-file-line">                    } <span class="pl-k">else</span> <span class="pl-k">if</span> (!var-&gt;<span class="pl-c1">is_false</span>() &amp;&amp; !var-&gt;<span class="pl-c1">is_empty_list</span>()) {</td>
      </tr>
      <tr>
        <td id="L12855" class="blob-num js-line-number" data-line-number="12855"></td>
        <td id="LC12855" class="blob-code blob-code-inner js-file-line">                        <span class="pl-c1">renderSection</span>(handler, ctx, comp, var);</td>
      </tr>
      <tr>
        <td id="L12856" class="blob-num js-line-number" data-line-number="12856"></td>
        <td id="LC12856" class="blob-code blob-code-inner js-file-line">                    }</td>
      </tr>
      <tr>
        <td id="L12857" class="blob-num js-line-number" data-line-number="12857"></td>
        <td id="LC12857" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L12858" class="blob-num js-line-number" data-line-number="12858"></td>
        <td id="LC12858" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">return</span> WalkControl::Skip;</td>
      </tr>
      <tr>
        <td id="L12859" class="blob-num js-line-number" data-line-number="12859"></td>
        <td id="LC12859" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">case</span> Tag::Type::SectionBeginInverted:</td>
      </tr>
      <tr>
        <td id="L12860" class="blob-num js-line-number" data-line-number="12860"></td>
        <td id="LC12860" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">if</span> ((var = ctx.<span class="pl-smi">ctx</span>.<span class="pl-c1">get</span>(tag.<span class="pl-smi">name</span>)) == <span class="pl-c1">nullptr</span> || var-&gt;<span class="pl-c1">is_false</span>() || var-&gt;<span class="pl-c1">is_empty_list</span>()) {</td>
      </tr>
      <tr>
        <td id="L12861" class="blob-num js-line-number" data-line-number="12861"></td>
        <td id="LC12861" class="blob-code blob-code-inner js-file-line">                    <span class="pl-c1">renderSection</span>(handler, ctx, comp, var);</td>
      </tr>
      <tr>
        <td id="L12862" class="blob-num js-line-number" data-line-number="12862"></td>
        <td id="LC12862" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L12863" class="blob-num js-line-number" data-line-number="12863"></td>
        <td id="LC12863" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">return</span> WalkControl::Skip;</td>
      </tr>
      <tr>
        <td id="L12864" class="blob-num js-line-number" data-line-number="12864"></td>
        <td id="LC12864" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">case</span> Tag::Type::Partial:</td>
      </tr>
      <tr>
        <td id="L12865" class="blob-num js-line-number" data-line-number="12865"></td>
        <td id="LC12865" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">if</span> ((var = ctx.<span class="pl-smi">ctx</span>.<span class="pl-c1">get_partial</span>(tag.<span class="pl-smi">name</span>)) != <span class="pl-c1">nullptr</span> &amp;&amp; (var-&gt;<span class="pl-c1">is_partial</span>() || var-&gt;<span class="pl-c1">is_string</span>())) {</td>
      </tr>
      <tr>
        <td id="L12866" class="blob-num js-line-number" data-line-number="12866"></td>
        <td id="LC12866" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">const</span> <span class="pl-k">auto</span> partial_result = var-&gt;<span class="pl-c1">is_partial</span>() ? var-&gt;<span class="pl-c1">partial_value</span>()() : var-&gt;<span class="pl-c1">string_value</span>();</td>
      </tr>
      <tr>
        <td id="L12867" class="blob-num js-line-number" data-line-number="12867"></td>
        <td id="LC12867" class="blob-code blob-code-inner js-file-line">                    basic_mustache tmpl{partial_result};</td>
      </tr>
      <tr>
        <td id="L12868" class="blob-num js-line-number" data-line-number="12868"></td>
        <td id="LC12868" class="blob-code blob-code-inner js-file-line">                    tmpl.<span class="pl-c1">set_custom_escape</span>(escape_);</td>
      </tr>
      <tr>
        <td id="L12869" class="blob-num js-line-number" data-line-number="12869"></td>
        <td id="LC12869" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">if</span> (!tmpl.<span class="pl-c1">is_valid</span>()) {</td>
      </tr>
      <tr>
        <td id="L12870" class="blob-num js-line-number" data-line-number="12870"></td>
        <td id="LC12870" class="blob-code blob-code-inner js-file-line">                        errorMessage_ = tmpl.<span class="pl-c1">error_message</span>();</td>
      </tr>
      <tr>
        <td id="L12871" class="blob-num js-line-number" data-line-number="12871"></td>
        <td id="LC12871" class="blob-code blob-code-inner js-file-line">                    } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L12872" class="blob-num js-line-number" data-line-number="12872"></td>
        <td id="LC12872" class="blob-code blob-code-inner js-file-line">                        tmpl.<span class="pl-c1">render</span>(handler, ctx);</td>
      </tr>
      <tr>
        <td id="L12873" class="blob-num js-line-number" data-line-number="12873"></td>
        <td id="LC12873" class="blob-code blob-code-inner js-file-line">                        <span class="pl-k">if</span> (!tmpl.<span class="pl-c1">is_valid</span>()) {</td>
      </tr>
      <tr>
        <td id="L12874" class="blob-num js-line-number" data-line-number="12874"></td>
        <td id="LC12874" class="blob-code blob-code-inner js-file-line">                            errorMessage_ = tmpl.<span class="pl-c1">error_message</span>();</td>
      </tr>
      <tr>
        <td id="L12875" class="blob-num js-line-number" data-line-number="12875"></td>
        <td id="LC12875" class="blob-code blob-code-inner js-file-line">                        }</td>
      </tr>
      <tr>
        <td id="L12876" class="blob-num js-line-number" data-line-number="12876"></td>
        <td id="LC12876" class="blob-code blob-code-inner js-file-line">                    }</td>
      </tr>
      <tr>
        <td id="L12877" class="blob-num js-line-number" data-line-number="12877"></td>
        <td id="LC12877" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">if</span> (!tmpl.<span class="pl-c1">is_valid</span>()) {</td>
      </tr>
      <tr>
        <td id="L12878" class="blob-num js-line-number" data-line-number="12878"></td>
        <td id="LC12878" class="blob-code blob-code-inner js-file-line">                        <span class="pl-k">return</span> WalkControl::Stop;</td>
      </tr>
      <tr>
        <td id="L12879" class="blob-num js-line-number" data-line-number="12879"></td>
        <td id="LC12879" class="blob-code blob-code-inner js-file-line">                    }</td>
      </tr>
      <tr>
        <td id="L12880" class="blob-num js-line-number" data-line-number="12880"></td>
        <td id="LC12880" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L12881" class="blob-num js-line-number" data-line-number="12881"></td>
        <td id="LC12881" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L12882" class="blob-num js-line-number" data-line-number="12882"></td>
        <td id="LC12882" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">case</span> Tag::Type::SetDelimiter:</td>
      </tr>
      <tr>
        <td id="L12883" class="blob-num js-line-number" data-line-number="12883"></td>
        <td id="LC12883" class="blob-code blob-code-inner js-file-line">                ctx.<span class="pl-smi">delimiterSet</span> = *comp.<span class="pl-smi">tag</span>.<span class="pl-smi">delimiterSet</span>;</td>
      </tr>
      <tr>
        <td id="L12884" class="blob-num js-line-number" data-line-number="12884"></td>
        <td id="LC12884" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L12885" class="blob-num js-line-number" data-line-number="12885"></td>
        <td id="LC12885" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">default</span>:</td>
      </tr>
      <tr>
        <td id="L12886" class="blob-num js-line-number" data-line-number="12886"></td>
        <td id="LC12886" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L12887" class="blob-num js-line-number" data-line-number="12887"></td>
        <td id="LC12887" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L12888" class="blob-num js-line-number" data-line-number="12888"></td>
        <td id="LC12888" class="blob-code blob-code-inner js-file-line">        </td>
      </tr>
      <tr>
        <td id="L12889" class="blob-num js-line-number" data-line-number="12889"></td>
        <td id="LC12889" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> WalkControl::Continue;</td>
      </tr>
      <tr>
        <td id="L12890" class="blob-num js-line-number" data-line-number="12890"></td>
        <td id="LC12890" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12891" class="blob-num js-line-number" data-line-number="12891"></td>
        <td id="LC12891" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12892" class="blob-num js-line-number" data-line-number="12892"></td>
        <td id="LC12892" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">enum</span> <span class="pl-k">class</span> <span class="pl-en">RenderLambdaEscape</span> {</td>
      </tr>
      <tr>
        <td id="L12893" class="blob-num js-line-number" data-line-number="12893"></td>
        <td id="LC12893" class="blob-code blob-code-inner js-file-line">        Escape,</td>
      </tr>
      <tr>
        <td id="L12894" class="blob-num js-line-number" data-line-number="12894"></td>
        <td id="LC12894" class="blob-code blob-code-inner js-file-line">        Unescape,</td>
      </tr>
      <tr>
        <td id="L12895" class="blob-num js-line-number" data-line-number="12895"></td>
        <td id="LC12895" class="blob-code blob-code-inner js-file-line">        Optional,</td>
      </tr>
      <tr>
        <td id="L12896" class="blob-num js-line-number" data-line-number="12896"></td>
        <td id="LC12896" class="blob-code blob-code-inner js-file-line">    };</td>
      </tr>
      <tr>
        <td id="L12897" class="blob-num js-line-number" data-line-number="12897"></td>
        <td id="LC12897" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="L12898" class="blob-num js-line-number" data-line-number="12898"></td>
        <td id="LC12898" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">bool</span> <span class="pl-en">renderLambda</span>(<span class="pl-k">const</span> RenderHandler&amp; handler, <span class="pl-k">const</span> basic_data&lt;string_type&gt;* var, context_internal&amp; ctx, RenderLambdaEscape escape, <span class="pl-k">const</span> string_type&amp; text, <span class="pl-k">bool</span> parseWithSameContext) {</td>
      </tr>
      <tr>
        <td id="L12899" class="blob-num js-line-number" data-line-number="12899"></td>
        <td id="LC12899" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> <span class="pl-k">typename</span> basic_renderer&lt;string_type&gt;::type2 render2 = [<span class="pl-c1">this</span>, &amp;handler, var, &amp;ctx, parseWithSameContext, escape](<span class="pl-k">const</span> string_type&amp; text, <span class="pl-k">bool</span> escaped) {</td>
      </tr>
      <tr>
        <td id="L12900" class="blob-num js-line-number" data-line-number="12900"></td>
        <td id="LC12900" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">const</span> <span class="pl-k">auto</span> processTemplate = [<span class="pl-c1">this</span>, &amp;handler, var, &amp;ctx, escape, escaped](basic_mustache&amp; tmpl) -&gt; string_type {</td>
      </tr>
      <tr>
        <td id="L12901" class="blob-num js-line-number" data-line-number="12901"></td>
        <td id="LC12901" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">if</span> (!tmpl.<span class="pl-c1">is_valid</span>()) {</td>
      </tr>
      <tr>
        <td id="L12902" class="blob-num js-line-number" data-line-number="12902"></td>
        <td id="LC12902" class="blob-code blob-code-inner js-file-line">                    errorMessage_ = tmpl.<span class="pl-c1">error_message</span>();</td>
      </tr>
      <tr>
        <td id="L12903" class="blob-num js-line-number" data-line-number="12903"></td>
        <td id="LC12903" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">return</span> {};</td>
      </tr>
      <tr>
        <td id="L12904" class="blob-num js-line-number" data-line-number="12904"></td>
        <td id="LC12904" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L12905" class="blob-num js-line-number" data-line-number="12905"></td>
        <td id="LC12905" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">const</span> string_type str{tmpl.<span class="pl-c1">render</span>(ctx)};</td>
      </tr>
      <tr>
        <td id="L12906" class="blob-num js-line-number" data-line-number="12906"></td>
        <td id="LC12906" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">if</span> (!tmpl.<span class="pl-c1">is_valid</span>()) {</td>
      </tr>
      <tr>
        <td id="L12907" class="blob-num js-line-number" data-line-number="12907"></td>
        <td id="LC12907" class="blob-code blob-code-inner js-file-line">                    errorMessage_ = tmpl.<span class="pl-c1">error_message</span>();</td>
      </tr>
      <tr>
        <td id="L12908" class="blob-num js-line-number" data-line-number="12908"></td>
        <td id="LC12908" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">return</span> {};</td>
      </tr>
      <tr>
        <td id="L12909" class="blob-num js-line-number" data-line-number="12909"></td>
        <td id="LC12909" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L12910" class="blob-num js-line-number" data-line-number="12910"></td>
        <td id="LC12910" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">bool</span> doEscape = <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L12911" class="blob-num js-line-number" data-line-number="12911"></td>
        <td id="LC12911" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">switch</span> (escape) {</td>
      </tr>
      <tr>
        <td id="L12912" class="blob-num js-line-number" data-line-number="12912"></td>
        <td id="LC12912" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">case</span> RenderLambdaEscape::Escape:</td>
      </tr>
      <tr>
        <td id="L12913" class="blob-num js-line-number" data-line-number="12913"></td>
        <td id="LC12913" class="blob-code blob-code-inner js-file-line">                        doEscape = <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L12914" class="blob-num js-line-number" data-line-number="12914"></td>
        <td id="LC12914" class="blob-code blob-code-inner js-file-line">                        <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L12915" class="blob-num js-line-number" data-line-number="12915"></td>
        <td id="LC12915" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">case</span> RenderLambdaEscape::Unescape:</td>
      </tr>
      <tr>
        <td id="L12916" class="blob-num js-line-number" data-line-number="12916"></td>
        <td id="LC12916" class="blob-code blob-code-inner js-file-line">                        doEscape = <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L12917" class="blob-num js-line-number" data-line-number="12917"></td>
        <td id="LC12917" class="blob-code blob-code-inner js-file-line">                        <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L12918" class="blob-num js-line-number" data-line-number="12918"></td>
        <td id="LC12918" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">case</span> RenderLambdaEscape::Optional:</td>
      </tr>
      <tr>
        <td id="L12919" class="blob-num js-line-number" data-line-number="12919"></td>
        <td id="LC12919" class="blob-code blob-code-inner js-file-line">                        doEscape = escaped;</td>
      </tr>
      <tr>
        <td id="L12920" class="blob-num js-line-number" data-line-number="12920"></td>
        <td id="LC12920" class="blob-code blob-code-inner js-file-line">                        <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L12921" class="blob-num js-line-number" data-line-number="12921"></td>
        <td id="LC12921" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L12922" class="blob-num js-line-number" data-line-number="12922"></td>
        <td id="LC12922" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">return</span> doEscape ? <span class="pl-c1">escape_</span>(str) : str;</td>
      </tr>
      <tr>
        <td id="L12923" class="blob-num js-line-number" data-line-number="12923"></td>
        <td id="LC12923" class="blob-code blob-code-inner js-file-line">            };</td>
      </tr>
      <tr>
        <td id="L12924" class="blob-num js-line-number" data-line-number="12924"></td>
        <td id="LC12924" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (parseWithSameContext) {</td>
      </tr>
      <tr>
        <td id="L12925" class="blob-num js-line-number" data-line-number="12925"></td>
        <td id="LC12925" class="blob-code blob-code-inner js-file-line">                basic_mustache tmpl{text, ctx};</td>
      </tr>
      <tr>
        <td id="L12926" class="blob-num js-line-number" data-line-number="12926"></td>
        <td id="LC12926" class="blob-code blob-code-inner js-file-line">                tmpl.<span class="pl-c1">set_custom_escape</span>(escape_);</td>
      </tr>
      <tr>
        <td id="L12927" class="blob-num js-line-number" data-line-number="12927"></td>
        <td id="LC12927" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">return</span> <span class="pl-c1">processTemplate</span>(tmpl);</td>
      </tr>
      <tr>
        <td id="L12928" class="blob-num js-line-number" data-line-number="12928"></td>
        <td id="LC12928" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L12929" class="blob-num js-line-number" data-line-number="12929"></td>
        <td id="LC12929" class="blob-code blob-code-inner js-file-line">            basic_mustache tmpl{text};</td>
      </tr>
      <tr>
        <td id="L12930" class="blob-num js-line-number" data-line-number="12930"></td>
        <td id="LC12930" class="blob-code blob-code-inner js-file-line">            tmpl.<span class="pl-c1">set_custom_escape</span>(escape_);</td>
      </tr>
      <tr>
        <td id="L12931" class="blob-num js-line-number" data-line-number="12931"></td>
        <td id="LC12931" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> <span class="pl-c1">processTemplate</span>(tmpl);</td>
      </tr>
      <tr>
        <td id="L12932" class="blob-num js-line-number" data-line-number="12932"></td>
        <td id="LC12932" class="blob-code blob-code-inner js-file-line">        };</td>
      </tr>
      <tr>
        <td id="L12933" class="blob-num js-line-number" data-line-number="12933"></td>
        <td id="LC12933" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> <span class="pl-k">typename</span> basic_renderer&lt;string_type&gt;::type1 render = [&amp;render2](<span class="pl-k">const</span> string_type&amp; text) {</td>
      </tr>
      <tr>
        <td id="L12934" class="blob-num js-line-number" data-line-number="12934"></td>
        <td id="LC12934" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> <span class="pl-c1">render2</span>(text, <span class="pl-c1">false</span>);</td>
      </tr>
      <tr>
        <td id="L12935" class="blob-num js-line-number" data-line-number="12935"></td>
        <td id="LC12935" class="blob-code blob-code-inner js-file-line">        };</td>
      </tr>
      <tr>
        <td id="L12936" class="blob-num js-line-number" data-line-number="12936"></td>
        <td id="LC12936" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (var-&gt;<span class="pl-c1">is_lambda2</span>()) {</td>
      </tr>
      <tr>
        <td id="L12937" class="blob-num js-line-number" data-line-number="12937"></td>
        <td id="LC12937" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">const</span> basic_renderer&lt;string_type&gt; renderer{render, render2};</td>
      </tr>
      <tr>
        <td id="L12938" class="blob-num js-line-number" data-line-number="12938"></td>
        <td id="LC12938" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">handler</span>(var-&gt;<span class="pl-c1">lambda2_value</span>()(text, renderer));</td>
      </tr>
      <tr>
        <td id="L12939" class="blob-num js-line-number" data-line-number="12939"></td>
        <td id="LC12939" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L12940" class="blob-num js-line-number" data-line-number="12940"></td>
        <td id="LC12940" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">handler</span>(<span class="pl-c1">render</span>(var-&gt;<span class="pl-c1">lambda_value</span>()(text)));</td>
      </tr>
      <tr>
        <td id="L12941" class="blob-num js-line-number" data-line-number="12941"></td>
        <td id="LC12941" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L12942" class="blob-num js-line-number" data-line-number="12942"></td>
        <td id="LC12942" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> errorMessage_.<span class="pl-c1">empty</span>();</td>
      </tr>
      <tr>
        <td id="L12943" class="blob-num js-line-number" data-line-number="12943"></td>
        <td id="LC12943" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12944" class="blob-num js-line-number" data-line-number="12944"></td>
        <td id="LC12944" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="L12945" class="blob-num js-line-number" data-line-number="12945"></td>
        <td id="LC12945" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">bool</span> <span class="pl-en">renderVariable</span>(<span class="pl-k">const</span> RenderHandler&amp; handler, <span class="pl-k">const</span> basic_data&lt;string_type&gt;* var, context_internal&amp; ctx, <span class="pl-k">bool</span> escaped) {</td>
      </tr>
      <tr>
        <td id="L12946" class="blob-num js-line-number" data-line-number="12946"></td>
        <td id="LC12946" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (var-&gt;<span class="pl-c1">is_string</span>()) {</td>
      </tr>
      <tr>
        <td id="L12947" class="blob-num js-line-number" data-line-number="12947"></td>
        <td id="LC12947" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">const</span> <span class="pl-k">auto</span> varstr = var-&gt;<span class="pl-c1">string_value</span>();</td>
      </tr>
      <tr>
        <td id="L12948" class="blob-num js-line-number" data-line-number="12948"></td>
        <td id="LC12948" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">handler</span>(escaped ? <span class="pl-c1">escape_</span>(varstr) : varstr);</td>
      </tr>
      <tr>
        <td id="L12949" class="blob-num js-line-number" data-line-number="12949"></td>
        <td id="LC12949" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> <span class="pl-k">if</span> (var-&gt;<span class="pl-c1">is_lambda</span>()) {</td>
      </tr>
      <tr>
        <td id="L12950" class="blob-num js-line-number" data-line-number="12950"></td>
        <td id="LC12950" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">const</span> RenderLambdaEscape escapeOpt = escaped ? RenderLambdaEscape::Escape : RenderLambdaEscape::Unescape;</td>
      </tr>
      <tr>
        <td id="L12951" class="blob-num js-line-number" data-line-number="12951"></td>
        <td id="LC12951" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> <span class="pl-c1">renderLambda</span>(handler, var, ctx, escapeOpt, {}, <span class="pl-c1">false</span>);</td>
      </tr>
      <tr>
        <td id="L12952" class="blob-num js-line-number" data-line-number="12952"></td>
        <td id="LC12952" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> <span class="pl-k">if</span> (var-&gt;<span class="pl-c1">is_lambda2</span>()) {</td>
      </tr>
      <tr>
        <td id="L12953" class="blob-num js-line-number" data-line-number="12953"></td>
        <td id="LC12953" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">using</span> streamstring = std::basic_ostringstream&lt;<span class="pl-k">typename</span> string_type::value_type&gt;;</td>
      </tr>
      <tr>
        <td id="L12954" class="blob-num js-line-number" data-line-number="12954"></td>
        <td id="LC12954" class="blob-code blob-code-inner js-file-line">            streamstring ss;</td>
      </tr>
      <tr>
        <td id="L12955" class="blob-num js-line-number" data-line-number="12955"></td>
        <td id="LC12955" class="blob-code blob-code-inner js-file-line">            ss &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>Lambda with render argument is not allowed for regular variables<span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L12956" class="blob-num js-line-number" data-line-number="12956"></td>
        <td id="LC12956" class="blob-code blob-code-inner js-file-line">            errorMessage_ = ss.<span class="pl-c1">str</span>();</td>
      </tr>
      <tr>
        <td id="L12957" class="blob-num js-line-number" data-line-number="12957"></td>
        <td id="LC12957" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L12958" class="blob-num js-line-number" data-line-number="12958"></td>
        <td id="LC12958" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L12959" class="blob-num js-line-number" data-line-number="12959"></td>
        <td id="LC12959" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L12960" class="blob-num js-line-number" data-line-number="12960"></td>
        <td id="LC12960" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12961" class="blob-num js-line-number" data-line-number="12961"></td>
        <td id="LC12961" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12962" class="blob-num js-line-number" data-line-number="12962"></td>
        <td id="LC12962" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">renderSection</span>(<span class="pl-k">const</span> RenderHandler&amp; handler, context_internal&amp; ctx, component&amp; incomp, <span class="pl-k">const</span> basic_data&lt;string_type&gt;* var) {</td>
      </tr>
      <tr>
        <td id="L12963" class="blob-num js-line-number" data-line-number="12963"></td>
        <td id="LC12963" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> <span class="pl-k">auto</span> callback = [&amp;handler, &amp;ctx, <span class="pl-c1">this</span>](component&amp; comp) -&gt; WalkControl {</td>
      </tr>
      <tr>
        <td id="L12964" class="blob-num js-line-number" data-line-number="12964"></td>
        <td id="LC12964" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">return</span> <span class="pl-c1">renderComponent</span>(handler, ctx, comp);</td>
      </tr>
      <tr>
        <td id="L12965" class="blob-num js-line-number" data-line-number="12965"></td>
        <td id="LC12965" class="blob-code blob-code-inner js-file-line">        };</td>
      </tr>
      <tr>
        <td id="L12966" class="blob-num js-line-number" data-line-number="12966"></td>
        <td id="LC12966" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (var &amp;&amp; var-&gt;<span class="pl-c1">is_non_empty_list</span>()) {</td>
      </tr>
      <tr>
        <td id="L12967" class="blob-num js-line-number" data-line-number="12967"></td>
        <td id="LC12967" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">for</span> (<span class="pl-k">const</span> <span class="pl-k">auto</span>&amp; item : var-&gt;<span class="pl-c1">list_value</span>()) {</td>
      </tr>
      <tr>
        <td id="L12968" class="blob-num js-line-number" data-line-number="12968"></td>
        <td id="LC12968" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">const</span> context_pusher ctxpusher{ctx, &amp;item};</td>
      </tr>
      <tr>
        <td id="L12969" class="blob-num js-line-number" data-line-number="12969"></td>
        <td id="LC12969" class="blob-code blob-code-inner js-file-line">                <span class="pl-c1">walkChildren</span>(callback, incomp);</td>
      </tr>
      <tr>
        <td id="L12970" class="blob-num js-line-number" data-line-number="12970"></td>
        <td id="LC12970" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L12971" class="blob-num js-line-number" data-line-number="12971"></td>
        <td id="LC12971" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> <span class="pl-k">if</span> (var) {</td>
      </tr>
      <tr>
        <td id="L12972" class="blob-num js-line-number" data-line-number="12972"></td>
        <td id="LC12972" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">const</span> context_pusher ctxpusher{ctx, var};</td>
      </tr>
      <tr>
        <td id="L12973" class="blob-num js-line-number" data-line-number="12973"></td>
        <td id="LC12973" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">walkChildren</span>(callback, incomp);</td>
      </tr>
      <tr>
        <td id="L12974" class="blob-num js-line-number" data-line-number="12974"></td>
        <td id="LC12974" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L12975" class="blob-num js-line-number" data-line-number="12975"></td>
        <td id="LC12975" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">walkChildren</span>(callback, incomp);</td>
      </tr>
      <tr>
        <td id="L12976" class="blob-num js-line-number" data-line-number="12976"></td>
        <td id="LC12976" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L12977" class="blob-num js-line-number" data-line-number="12977"></td>
        <td id="LC12977" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L12978" class="blob-num js-line-number" data-line-number="12978"></td>
        <td id="LC12978" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12979" class="blob-num js-line-number" data-line-number="12979"></td>
        <td id="LC12979" class="blob-code blob-code-inner js-file-line"><span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L12980" class="blob-num js-line-number" data-line-number="12980"></td>
        <td id="LC12980" class="blob-code blob-code-inner js-file-line">    string_type errorMessage_;</td>
      </tr>
      <tr>
        <td id="L12981" class="blob-num js-line-number" data-line-number="12981"></td>
        <td id="LC12981" class="blob-code blob-code-inner js-file-line">    component rootComponent_;</td>
      </tr>
      <tr>
        <td id="L12982" class="blob-num js-line-number" data-line-number="12982"></td>
        <td id="LC12982" class="blob-code blob-code-inner js-file-line">    escape_handler escape_;</td>
      </tr>
      <tr>
        <td id="L12983" class="blob-num js-line-number" data-line-number="12983"></td>
        <td id="LC12983" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L12984" class="blob-num js-line-number" data-line-number="12984"></td>
        <td id="LC12984" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12985" class="blob-num js-line-number" data-line-number="12985"></td>
        <td id="LC12985" class="blob-code blob-code-inner js-file-line"><span class="pl-k">using</span> mustache = basic_mustache&lt;std::string&gt;;</td>
      </tr>
      <tr>
        <td id="L12986" class="blob-num js-line-number" data-line-number="12986"></td>
        <td id="LC12986" class="blob-code blob-code-inner js-file-line"><span class="pl-k">using</span> data = basic_data&lt;mustache::string_type&gt;;</td>
      </tr>
      <tr>
        <td id="L12987" class="blob-num js-line-number" data-line-number="12987"></td>
        <td id="LC12987" class="blob-code blob-code-inner js-file-line"><span class="pl-k">using</span> object = basic_object&lt;mustache::string_type&gt;;</td>
      </tr>
      <tr>
        <td id="L12988" class="blob-num js-line-number" data-line-number="12988"></td>
        <td id="LC12988" class="blob-code blob-code-inner js-file-line"><span class="pl-k">using</span> list = basic_list&lt;mustache::string_type&gt;;</td>
      </tr>
      <tr>
        <td id="L12989" class="blob-num js-line-number" data-line-number="12989"></td>
        <td id="LC12989" class="blob-code blob-code-inner js-file-line"><span class="pl-k">using</span> partial = basic_partial&lt;mustache::string_type&gt;;</td>
      </tr>
      <tr>
        <td id="L12990" class="blob-num js-line-number" data-line-number="12990"></td>
        <td id="LC12990" class="blob-code blob-code-inner js-file-line"><span class="pl-k">using</span> renderer = basic_renderer&lt;mustache::string_type&gt;;</td>
      </tr>
      <tr>
        <td id="L12991" class="blob-num js-line-number" data-line-number="12991"></td>
        <td id="LC12991" class="blob-code blob-code-inner js-file-line"><span class="pl-k">using</span> lambda = basic_lambda&lt;mustache::string_type&gt;;</td>
      </tr>
      <tr>
        <td id="L12992" class="blob-num js-line-number" data-line-number="12992"></td>
        <td id="LC12992" class="blob-code blob-code-inner js-file-line"><span class="pl-k">using</span> lambda2 = basic_lambda2&lt;mustache::string_type&gt;;</td>
      </tr>
      <tr>
        <td id="L12993" class="blob-num js-line-number" data-line-number="12993"></td>
        <td id="LC12993" class="blob-code blob-code-inner js-file-line"><span class="pl-k">using</span> <span class="pl-c1">lambda_t</span> = <span class="pl-c1">basic_lambda_t</span>&lt;mustache::string_type&gt;;</td>
      </tr>
      <tr>
        <td id="L12994" class="blob-num js-line-number" data-line-number="12994"></td>
        <td id="LC12994" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12995" class="blob-num js-line-number" data-line-number="12995"></td>
        <td id="LC12995" class="blob-code blob-code-inner js-file-line"><span class="pl-k">using</span> mustachew = basic_mustache&lt;std::wstring&gt;;</td>
      </tr>
      <tr>
        <td id="L12996" class="blob-num js-line-number" data-line-number="12996"></td>
        <td id="LC12996" class="blob-code blob-code-inner js-file-line"><span class="pl-k">using</span> dataw = basic_data&lt;mustachew::string_type&gt;;</td>
      </tr>
      <tr>
        <td id="L12997" class="blob-num js-line-number" data-line-number="12997"></td>
        <td id="LC12997" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L12998" class="blob-num js-line-number" data-line-number="12998"></td>
        <td id="LC12998" class="blob-code blob-code-inner js-file-line">} <span class="pl-c"><span class="pl-c">//</span> namespace mustache</span></td>
      </tr>
      <tr>
        <td id="L12999" class="blob-num js-line-number" data-line-number="12999"></td>
        <td id="LC12999" class="blob-code blob-code-inner js-file-line">} <span class="pl-c"><span class="pl-c">//</span> namespace kainjow</span></td>
      </tr>
      <tr>
        <td id="L13000" class="blob-num js-line-number" data-line-number="13000"></td>
        <td id="LC13000" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13001" class="blob-num js-line-number" data-line-number="13001"></td>
        <td id="LC13001" class="blob-code blob-code-inner js-file-line">#endif <span class="pl-c"><span class="pl-c">//</span> KAINJOW_MUSTACHE_HPP</span></td>
      </tr>
      <tr>
        <td id="L13002" class="blob-num js-line-number" data-line-number="13002"></td>
        <td id="LC13002" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L13003" class="blob-num js-line-number" data-line-number="13003"></td>
        <td id="LC13003" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Copyright (C) 2017-2018  Christian Berger</span></td>
      </tr>
      <tr>
        <td id="L13004" class="blob-num js-line-number" data-line-number="13004"></td>
        <td id="LC13004" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L13005" class="blob-num js-line-number" data-line-number="13005"></td>
        <td id="LC13005" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is free software: you can redistribute it and/or modify</span></td>
      </tr>
      <tr>
        <td id="L13006" class="blob-num js-line-number" data-line-number="13006"></td>
        <td id="LC13006" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * it under the terms of the GNU General Public License as published by</span></td>
      </tr>
      <tr>
        <td id="L13007" class="blob-num js-line-number" data-line-number="13007"></td>
        <td id="LC13007" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * the Free Software Foundation, either version 3 of the License, or</span></td>
      </tr>
      <tr>
        <td id="L13008" class="blob-num js-line-number" data-line-number="13008"></td>
        <td id="LC13008" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * (at your option) any later version.</span></td>
      </tr>
      <tr>
        <td id="L13009" class="blob-num js-line-number" data-line-number="13009"></td>
        <td id="LC13009" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L13010" class="blob-num js-line-number" data-line-number="13010"></td>
        <td id="LC13010" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is distributed in the hope that it will be useful,</span></td>
      </tr>
      <tr>
        <td id="L13011" class="blob-num js-line-number" data-line-number="13011"></td>
        <td id="LC13011" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></td>
      </tr>
      <tr>
        <td id="L13012" class="blob-num js-line-number" data-line-number="13012"></td>
        <td id="LC13012" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></td>
      </tr>
      <tr>
        <td id="L13013" class="blob-num js-line-number" data-line-number="13013"></td>
        <td id="LC13013" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * GNU General Public License for more details.</span></td>
      </tr>
      <tr>
        <td id="L13014" class="blob-num js-line-number" data-line-number="13014"></td>
        <td id="LC13014" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L13015" class="blob-num js-line-number" data-line-number="13015"></td>
        <td id="LC13015" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * You should have received a copy of the GNU General Public License</span></td>
      </tr>
      <tr>
        <td id="L13016" class="blob-num js-line-number" data-line-number="13016"></td>
        <td id="LC13016" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></td>
      </tr>
      <tr>
        <td id="L13017" class="blob-num js-line-number" data-line-number="13017"></td>
        <td id="LC13017" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L13018" class="blob-num js-line-number" data-line-number="13018"></td>
        <td id="LC13018" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13019" class="blob-num js-line-number" data-line-number="13019"></td>
        <td id="LC13019" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifndef</span> METAMESSAGETOCPPTRANSFORMATOR_HPP</td>
      </tr>
      <tr>
        <td id="L13020" class="blob-num js-line-number" data-line-number="13020"></td>
        <td id="LC13020" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">define</span> <span class="pl-en">METAMESSAGETOCPPTRANSFORMATOR_HPP</span></td>
      </tr>
      <tr>
        <td id="L13021" class="blob-num js-line-number" data-line-number="13021"></td>
        <td id="LC13021" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13022" class="blob-num js-line-number" data-line-number="13022"></td>
        <td id="LC13022" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;Mustache/mustache.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L13023" class="blob-num js-line-number" data-line-number="13023"></td>
        <td id="LC13023" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/MetaMessage.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L13024" class="blob-num js-line-number" data-line-number="13024"></td>
        <td id="LC13024" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/cluon.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L13025" class="blob-num js-line-number" data-line-number="13025"></td>
        <td id="LC13025" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13026" class="blob-num js-line-number" data-line-number="13026"></td>
        <td id="LC13026" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>string<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L13027" class="blob-num js-line-number" data-line-number="13027"></td>
        <td id="LC13027" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13028" class="blob-num js-line-number" data-line-number="13028"></td>
        <td id="LC13028" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">cluon</span> {</td>
      </tr>
      <tr>
        <td id="L13029" class="blob-num js-line-number" data-line-number="13029"></td>
        <td id="LC13029" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L13030" class="blob-num js-line-number" data-line-number="13030"></td>
        <td id="LC13030" class="blob-code blob-code-inner js-file-line"><span class="pl-c">This class transforms a given MetaMessage to a C++ header and source content.</span></td>
      </tr>
      <tr>
        <td id="L13031" class="blob-num js-line-number" data-line-number="13031"></td>
        <td id="LC13031" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L13032" class="blob-num js-line-number" data-line-number="13032"></td>
        <td id="LC13032" class="blob-code blob-code-inner js-file-line"><span class="pl-c">Transformation is using https://github.com/kainjow/Mustache.</span></td>
      </tr>
      <tr>
        <td id="L13033" class="blob-num js-line-number" data-line-number="13033"></td>
        <td id="LC13033" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L13034" class="blob-num js-line-number" data-line-number="13034"></td>
        <td id="LC13034" class="blob-code blob-code-inner js-file-line"><span class="pl-k">class</span> <span class="pl-en">LIBCLUON_API</span> MetaMessageToCPPTransformator {</td>
      </tr>
      <tr>
        <td id="L13035" class="blob-num js-line-number" data-line-number="13035"></td>
        <td id="LC13035" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L13036" class="blob-num js-line-number" data-line-number="13036"></td>
        <td id="LC13036" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">MetaMessageToCPPTransformator</span>(MetaMessageToCPPTransformator &amp;&amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L13037" class="blob-num js-line-number" data-line-number="13037"></td>
        <td id="LC13037" class="blob-code blob-code-inner js-file-line">    MetaMessageToCPPTransformator &amp;<span class="pl-k">operator</span>=(<span class="pl-k">const</span> MetaMessageToCPPTransformator &amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L13038" class="blob-num js-line-number" data-line-number="13038"></td>
        <td id="LC13038" class="blob-code blob-code-inner js-file-line">    MetaMessageToCPPTransformator &amp;<span class="pl-k">operator</span>=(MetaMessageToCPPTransformator &amp;&amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L13039" class="blob-num js-line-number" data-line-number="13039"></td>
        <td id="LC13039" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13040" class="blob-num js-line-number" data-line-number="13040"></td>
        <td id="LC13040" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L13041" class="blob-num js-line-number" data-line-number="13041"></td>
        <td id="LC13041" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">MetaMessageToCPPTransformator</span>()                                      = <span class="pl-k">default</span>;</td>
      </tr>
      <tr>
        <td id="L13042" class="blob-num js-line-number" data-line-number="13042"></td>
        <td id="LC13042" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">MetaMessageToCPPTransformator</span>(<span class="pl-k">const</span> MetaMessageToCPPTransformator &amp;) = <span class="pl-k">default</span>;</td>
      </tr>
      <tr>
        <td id="L13043" class="blob-num js-line-number" data-line-number="13043"></td>
        <td id="LC13043" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13044" class="blob-num js-line-number" data-line-number="13044"></td>
        <td id="LC13044" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L13045" class="blob-num js-line-number" data-line-number="13045"></td>
        <td id="LC13045" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * The method is called from MetaMessage to visit itself using this transformator.</span></td>
      </tr>
      <tr>
        <td id="L13046" class="blob-num js-line-number" data-line-number="13046"></td>
        <td id="LC13046" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     *</span></td>
      </tr>
      <tr>
        <td id="L13047" class="blob-num js-line-number" data-line-number="13047"></td>
        <td id="LC13047" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param mm MetaMessage to visit.</span></td>
      </tr>
      <tr>
        <td id="L13048" class="blob-num js-line-number" data-line-number="13048"></td>
        <td id="LC13048" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L13049" class="blob-num js-line-number" data-line-number="13049"></td>
        <td id="LC13049" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-k">const</span> MetaMessage &amp;mm) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L13050" class="blob-num js-line-number" data-line-number="13050"></td>
        <td id="LC13050" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13051" class="blob-num js-line-number" data-line-number="13051"></td>
        <td id="LC13051" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L13052" class="blob-num js-line-number" data-line-number="13052"></td>
        <td id="LC13052" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @return Content of the C++ header.</span></td>
      </tr>
      <tr>
        <td id="L13053" class="blob-num js-line-number" data-line-number="13053"></td>
        <td id="LC13053" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L13054" class="blob-num js-line-number" data-line-number="13054"></td>
        <td id="LC13054" class="blob-code blob-code-inner js-file-line">    std::string <span class="pl-en">contentHeader</span>() <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L13055" class="blob-num js-line-number" data-line-number="13055"></td>
        <td id="LC13055" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L13056" class="blob-num js-line-number" data-line-number="13056"></td>
        <td id="LC13056" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @return Content of the C++ source.</span></td>
      </tr>
      <tr>
        <td id="L13057" class="blob-num js-line-number" data-line-number="13057"></td>
        <td id="LC13057" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L13058" class="blob-num js-line-number" data-line-number="13058"></td>
        <td id="LC13058" class="blob-code blob-code-inner js-file-line">    std::string <span class="pl-en">contentSource</span>() <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L13059" class="blob-num js-line-number" data-line-number="13059"></td>
        <td id="LC13059" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13060" class="blob-num js-line-number" data-line-number="13060"></td>
        <td id="LC13060" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L13061" class="blob-num js-line-number" data-line-number="13061"></td>
        <td id="LC13061" class="blob-code blob-code-inner js-file-line">    kainjow::mustache::data m_dataToBeRendered{};</td>
      </tr>
      <tr>
        <td id="L13062" class="blob-num js-line-number" data-line-number="13062"></td>
        <td id="LC13062" class="blob-code blob-code-inner js-file-line">    kainjow::mustache::data m_fields{kainjow::mustache::data::type::list};</td>
      </tr>
      <tr>
        <td id="L13063" class="blob-num js-line-number" data-line-number="13063"></td>
        <td id="LC13063" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L13064" class="blob-num js-line-number" data-line-number="13064"></td>
        <td id="LC13064" class="blob-code blob-code-inner js-file-line">} <span class="pl-c"><span class="pl-c">//</span> namespace cluon</span></td>
      </tr>
      <tr>
        <td id="L13065" class="blob-num js-line-number" data-line-number="13065"></td>
        <td id="LC13065" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13066" class="blob-num js-line-number" data-line-number="13066"></td>
        <td id="LC13066" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L13067" class="blob-num js-line-number" data-line-number="13067"></td>
        <td id="LC13067" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L13068" class="blob-num js-line-number" data-line-number="13068"></td>
        <td id="LC13068" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Copyright (C) 2017-2018  Christian Berger</span></td>
      </tr>
      <tr>
        <td id="L13069" class="blob-num js-line-number" data-line-number="13069"></td>
        <td id="LC13069" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L13070" class="blob-num js-line-number" data-line-number="13070"></td>
        <td id="LC13070" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is free software: you can redistribute it and/or modify</span></td>
      </tr>
      <tr>
        <td id="L13071" class="blob-num js-line-number" data-line-number="13071"></td>
        <td id="LC13071" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * it under the terms of the GNU General Public License as published by</span></td>
      </tr>
      <tr>
        <td id="L13072" class="blob-num js-line-number" data-line-number="13072"></td>
        <td id="LC13072" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * the Free Software Foundation, either version 3 of the License, or</span></td>
      </tr>
      <tr>
        <td id="L13073" class="blob-num js-line-number" data-line-number="13073"></td>
        <td id="LC13073" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * (at your option) any later version.</span></td>
      </tr>
      <tr>
        <td id="L13074" class="blob-num js-line-number" data-line-number="13074"></td>
        <td id="LC13074" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L13075" class="blob-num js-line-number" data-line-number="13075"></td>
        <td id="LC13075" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is distributed in the hope that it will be useful,</span></td>
      </tr>
      <tr>
        <td id="L13076" class="blob-num js-line-number" data-line-number="13076"></td>
        <td id="LC13076" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></td>
      </tr>
      <tr>
        <td id="L13077" class="blob-num js-line-number" data-line-number="13077"></td>
        <td id="LC13077" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></td>
      </tr>
      <tr>
        <td id="L13078" class="blob-num js-line-number" data-line-number="13078"></td>
        <td id="LC13078" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * GNU General Public License for more details.</span></td>
      </tr>
      <tr>
        <td id="L13079" class="blob-num js-line-number" data-line-number="13079"></td>
        <td id="LC13079" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L13080" class="blob-num js-line-number" data-line-number="13080"></td>
        <td id="LC13080" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * You should have received a copy of the GNU General Public License</span></td>
      </tr>
      <tr>
        <td id="L13081" class="blob-num js-line-number" data-line-number="13081"></td>
        <td id="LC13081" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></td>
      </tr>
      <tr>
        <td id="L13082" class="blob-num js-line-number" data-line-number="13082"></td>
        <td id="LC13082" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L13083" class="blob-num js-line-number" data-line-number="13083"></td>
        <td id="LC13083" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13084" class="blob-num js-line-number" data-line-number="13084"></td>
        <td id="LC13084" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifndef</span> METAMESSAGETOPROTOTRANSFORMATOR_HPP</td>
      </tr>
      <tr>
        <td id="L13085" class="blob-num js-line-number" data-line-number="13085"></td>
        <td id="LC13085" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">define</span> <span class="pl-en">METAMESSAGETOPROTOTRANSFORMATOR_HPP</span></td>
      </tr>
      <tr>
        <td id="L13086" class="blob-num js-line-number" data-line-number="13086"></td>
        <td id="LC13086" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13087" class="blob-num js-line-number" data-line-number="13087"></td>
        <td id="LC13087" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;Mustache/mustache.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L13088" class="blob-num js-line-number" data-line-number="13088"></td>
        <td id="LC13088" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/MetaMessage.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L13089" class="blob-num js-line-number" data-line-number="13089"></td>
        <td id="LC13089" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/cluon.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L13090" class="blob-num js-line-number" data-line-number="13090"></td>
        <td id="LC13090" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13091" class="blob-num js-line-number" data-line-number="13091"></td>
        <td id="LC13091" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>string<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L13092" class="blob-num js-line-number" data-line-number="13092"></td>
        <td id="LC13092" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13093" class="blob-num js-line-number" data-line-number="13093"></td>
        <td id="LC13093" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">cluon</span> {</td>
      </tr>
      <tr>
        <td id="L13094" class="blob-num js-line-number" data-line-number="13094"></td>
        <td id="LC13094" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L13095" class="blob-num js-line-number" data-line-number="13095"></td>
        <td id="LC13095" class="blob-code blob-code-inner js-file-line"><span class="pl-c">This class transforms a given MetaMessage to a .proto file.</span></td>
      </tr>
      <tr>
        <td id="L13096" class="blob-num js-line-number" data-line-number="13096"></td>
        <td id="LC13096" class="blob-code blob-code-inner js-file-line"><span class="pl-c"></span></td>
      </tr>
      <tr>
        <td id="L13097" class="blob-num js-line-number" data-line-number="13097"></td>
        <td id="LC13097" class="blob-code blob-code-inner js-file-line"><span class="pl-c">Transformation is using https://github.com/kainjow/Mustache.</span></td>
      </tr>
      <tr>
        <td id="L13098" class="blob-num js-line-number" data-line-number="13098"></td>
        <td id="LC13098" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L13099" class="blob-num js-line-number" data-line-number="13099"></td>
        <td id="LC13099" class="blob-code blob-code-inner js-file-line"><span class="pl-k">class</span> <span class="pl-en">LIBCLUON_API</span> MetaMessageToProtoTransformator {</td>
      </tr>
      <tr>
        <td id="L13100" class="blob-num js-line-number" data-line-number="13100"></td>
        <td id="LC13100" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L13101" class="blob-num js-line-number" data-line-number="13101"></td>
        <td id="LC13101" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">MetaMessageToProtoTransformator</span>(MetaMessageToProtoTransformator &amp;&amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L13102" class="blob-num js-line-number" data-line-number="13102"></td>
        <td id="LC13102" class="blob-code blob-code-inner js-file-line">    MetaMessageToProtoTransformator &amp;<span class="pl-k">operator</span>=(<span class="pl-k">const</span> MetaMessageToProtoTransformator &amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L13103" class="blob-num js-line-number" data-line-number="13103"></td>
        <td id="LC13103" class="blob-code blob-code-inner js-file-line">    MetaMessageToProtoTransformator &amp;<span class="pl-k">operator</span>=(MetaMessageToProtoTransformator &amp;&amp;) = <span class="pl-k">delete</span>;</td>
      </tr>
      <tr>
        <td id="L13104" class="blob-num js-line-number" data-line-number="13104"></td>
        <td id="LC13104" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13105" class="blob-num js-line-number" data-line-number="13105"></td>
        <td id="LC13105" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">public:</span></td>
      </tr>
      <tr>
        <td id="L13106" class="blob-num js-line-number" data-line-number="13106"></td>
        <td id="LC13106" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">MetaMessageToProtoTransformator</span>()                                        = <span class="pl-k">default</span>;</td>
      </tr>
      <tr>
        <td id="L13107" class="blob-num js-line-number" data-line-number="13107"></td>
        <td id="LC13107" class="blob-code blob-code-inner js-file-line">    <span class="pl-en">MetaMessageToProtoTransformator</span>(<span class="pl-k">const</span> MetaMessageToProtoTransformator &amp;) = <span class="pl-k">default</span>;</td>
      </tr>
      <tr>
        <td id="L13108" class="blob-num js-line-number" data-line-number="13108"></td>
        <td id="LC13108" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13109" class="blob-num js-line-number" data-line-number="13109"></td>
        <td id="LC13109" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L13110" class="blob-num js-line-number" data-line-number="13110"></td>
        <td id="LC13110" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * The method is called from MetaMessage to visit itself using this transformator.</span></td>
      </tr>
      <tr>
        <td id="L13111" class="blob-num js-line-number" data-line-number="13111"></td>
        <td id="LC13111" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     *</span></td>
      </tr>
      <tr>
        <td id="L13112" class="blob-num js-line-number" data-line-number="13112"></td>
        <td id="LC13112" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @param mm MetaMessage to visit.</span></td>
      </tr>
      <tr>
        <td id="L13113" class="blob-num js-line-number" data-line-number="13113"></td>
        <td id="LC13113" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L13114" class="blob-num js-line-number" data-line-number="13114"></td>
        <td id="LC13114" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">void</span> <span class="pl-en">visit</span>(<span class="pl-k">const</span> MetaMessage &amp;mm) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L13115" class="blob-num js-line-number" data-line-number="13115"></td>
        <td id="LC13115" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13116" class="blob-num js-line-number" data-line-number="13116"></td>
        <td id="LC13116" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">/*</span>*</span></td>
      </tr>
      <tr>
        <td id="L13117" class="blob-num js-line-number" data-line-number="13117"></td>
        <td id="LC13117" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     * @return Content of the .proto file.</span></td>
      </tr>
      <tr>
        <td id="L13118" class="blob-num js-line-number" data-line-number="13118"></td>
        <td id="LC13118" class="blob-code blob-code-inner js-file-line"><span class="pl-c">     <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L13119" class="blob-num js-line-number" data-line-number="13119"></td>
        <td id="LC13119" class="blob-code blob-code-inner js-file-line">    std::string <span class="pl-en">content</span>(<span class="pl-k">bool</span> withProtoHeader) <span class="pl-k">noexcept</span>;</td>
      </tr>
      <tr>
        <td id="L13120" class="blob-num js-line-number" data-line-number="13120"></td>
        <td id="LC13120" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13121" class="blob-num js-line-number" data-line-number="13121"></td>
        <td id="LC13121" class="blob-code blob-code-inner js-file-line">   <span class="pl-k">private:</span></td>
      </tr>
      <tr>
        <td id="L13122" class="blob-num js-line-number" data-line-number="13122"></td>
        <td id="LC13122" class="blob-code blob-code-inner js-file-line">    kainjow::mustache::data m_dataToBeRendered;</td>
      </tr>
      <tr>
        <td id="L13123" class="blob-num js-line-number" data-line-number="13123"></td>
        <td id="LC13123" class="blob-code blob-code-inner js-file-line">    kainjow::mustache::data m_fields{kainjow::mustache::data::type::list};</td>
      </tr>
      <tr>
        <td id="L13124" class="blob-num js-line-number" data-line-number="13124"></td>
        <td id="LC13124" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L13125" class="blob-num js-line-number" data-line-number="13125"></td>
        <td id="LC13125" class="blob-code blob-code-inner js-file-line">} <span class="pl-c"><span class="pl-c">//</span> namespace cluon</span></td>
      </tr>
      <tr>
        <td id="L13126" class="blob-num js-line-number" data-line-number="13126"></td>
        <td id="LC13126" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13127" class="blob-num js-line-number" data-line-number="13127"></td>
        <td id="LC13127" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L13128" class="blob-num js-line-number" data-line-number="13128"></td>
        <td id="LC13128" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L13129" class="blob-num js-line-number" data-line-number="13129"></td>
        <td id="LC13129" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Copyright (C) 2017-2018  Christian Berger</span></td>
      </tr>
      <tr>
        <td id="L13130" class="blob-num js-line-number" data-line-number="13130"></td>
        <td id="LC13130" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L13131" class="blob-num js-line-number" data-line-number="13131"></td>
        <td id="LC13131" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is free software: you can redistribute it and/or modify</span></td>
      </tr>
      <tr>
        <td id="L13132" class="blob-num js-line-number" data-line-number="13132"></td>
        <td id="LC13132" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * it under the terms of the GNU General Public License as published by</span></td>
      </tr>
      <tr>
        <td id="L13133" class="blob-num js-line-number" data-line-number="13133"></td>
        <td id="LC13133" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * the Free Software Foundation, either version 3 of the License, or</span></td>
      </tr>
      <tr>
        <td id="L13134" class="blob-num js-line-number" data-line-number="13134"></td>
        <td id="LC13134" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * (at your option) any later version.</span></td>
      </tr>
      <tr>
        <td id="L13135" class="blob-num js-line-number" data-line-number="13135"></td>
        <td id="LC13135" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L13136" class="blob-num js-line-number" data-line-number="13136"></td>
        <td id="LC13136" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is distributed in the hope that it will be useful,</span></td>
      </tr>
      <tr>
        <td id="L13137" class="blob-num js-line-number" data-line-number="13137"></td>
        <td id="LC13137" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></td>
      </tr>
      <tr>
        <td id="L13138" class="blob-num js-line-number" data-line-number="13138"></td>
        <td id="LC13138" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></td>
      </tr>
      <tr>
        <td id="L13139" class="blob-num js-line-number" data-line-number="13139"></td>
        <td id="LC13139" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * GNU General Public License for more details.</span></td>
      </tr>
      <tr>
        <td id="L13140" class="blob-num js-line-number" data-line-number="13140"></td>
        <td id="LC13140" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L13141" class="blob-num js-line-number" data-line-number="13141"></td>
        <td id="LC13141" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * You should have received a copy of the GNU General Public License</span></td>
      </tr>
      <tr>
        <td id="L13142" class="blob-num js-line-number" data-line-number="13142"></td>
        <td id="LC13142" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></td>
      </tr>
      <tr>
        <td id="L13143" class="blob-num js-line-number" data-line-number="13143"></td>
        <td id="LC13143" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L13144" class="blob-num js-line-number" data-line-number="13144"></td>
        <td id="LC13144" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13145" class="blob-num js-line-number" data-line-number="13145"></td>
        <td id="LC13145" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/MetaMessageToCPPTransformator.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L13146" class="blob-num js-line-number" data-line-number="13146"></td>
        <td id="LC13146" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/MetaMessage.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L13147" class="blob-num js-line-number" data-line-number="13147"></td>
        <td id="LC13147" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13148" class="blob-num js-line-number" data-line-number="13148"></td>
        <td id="LC13148" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>algorithm<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L13149" class="blob-num js-line-number" data-line-number="13149"></td>
        <td id="LC13149" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>cctype<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L13150" class="blob-num js-line-number" data-line-number="13150"></td>
        <td id="LC13150" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>iostream<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L13151" class="blob-num js-line-number" data-line-number="13151"></td>
        <td id="LC13151" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>map<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L13152" class="blob-num js-line-number" data-line-number="13152"></td>
        <td id="LC13152" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>regex<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L13153" class="blob-num js-line-number" data-line-number="13153"></td>
        <td id="LC13153" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>sstream<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L13154" class="blob-num js-line-number" data-line-number="13154"></td>
        <td id="LC13154" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13155" class="blob-num js-line-number" data-line-number="13155"></td>
        <td id="LC13155" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;Mustache/mustache.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L13156" class="blob-num js-line-number" data-line-number="13156"></td>
        <td id="LC13156" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13157" class="blob-num js-line-number" data-line-number="13157"></td>
        <td id="LC13157" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">cluon</span> {</td>
      </tr>
      <tr>
        <td id="L13158" class="blob-num js-line-number" data-line-number="13158"></td>
        <td id="LC13158" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13159" class="blob-num js-line-number" data-line-number="13159"></td>
        <td id="LC13159" class="blob-code blob-code-inner js-file-line"><span class="pl-k">const</span> <span class="pl-k">char</span> *headerFileTemplate = <span class="pl-s"><span class="pl-pds">R&quot;(</span></span></td>
      </tr>
      <tr>
        <td id="L13160" class="blob-num js-line-number" data-line-number="13160"></td>
        <td id="LC13160" class="blob-code blob-code-inner js-file-line"><span class="pl-s">/*</span></td>
      </tr>
      <tr>
        <td id="L13161" class="blob-num js-line-number" data-line-number="13161"></td>
        <td id="LC13161" class="blob-code blob-code-inner js-file-line"><span class="pl-s"> * THIS IS AN AUTO-GENERATED FILE. DO NOT MODIFY AS CHANGES MIGHT BE OVERWRITTEN!</span></td>
      </tr>
      <tr>
        <td id="L13162" class="blob-num js-line-number" data-line-number="13162"></td>
        <td id="LC13162" class="blob-code blob-code-inner js-file-line"><span class="pl-s"> */</span></td>
      </tr>
      <tr>
        <td id="L13163" class="blob-num js-line-number" data-line-number="13163"></td>
        <td id="LC13163" class="blob-code blob-code-inner js-file-line"><span class="pl-s"></span></td>
      </tr>
      <tr>
        <td id="L13164" class="blob-num js-line-number" data-line-number="13164"></td>
        <td id="LC13164" class="blob-code blob-code-inner js-file-line"><span class="pl-s">#ifndef VISITABLE_TYPE_TRAIT</span></td>
      </tr>
      <tr>
        <td id="L13165" class="blob-num js-line-number" data-line-number="13165"></td>
        <td id="LC13165" class="blob-code blob-code-inner js-file-line"><span class="pl-s">#define VISITABLE_TYPE_TRAIT</span></td>
      </tr>
      <tr>
        <td id="L13166" class="blob-num js-line-number" data-line-number="13166"></td>
        <td id="LC13166" class="blob-code blob-code-inner js-file-line"><span class="pl-s">#include &lt;cstdint&gt;</span></td>
      </tr>
      <tr>
        <td id="L13167" class="blob-num js-line-number" data-line-number="13167"></td>
        <td id="LC13167" class="blob-code blob-code-inner js-file-line"><span class="pl-s">#include &lt;string&gt;</span></td>
      </tr>
      <tr>
        <td id="L13168" class="blob-num js-line-number" data-line-number="13168"></td>
        <td id="LC13168" class="blob-code blob-code-inner js-file-line"><span class="pl-s">#include &lt;utility&gt;</span></td>
      </tr>
      <tr>
        <td id="L13169" class="blob-num js-line-number" data-line-number="13169"></td>
        <td id="LC13169" class="blob-code blob-code-inner js-file-line"><span class="pl-s"></span></td>
      </tr>
      <tr>
        <td id="L13170" class="blob-num js-line-number" data-line-number="13170"></td>
        <td id="LC13170" class="blob-code blob-code-inner js-file-line"><span class="pl-s">template&lt;bool b&gt;</span></td>
      </tr>
      <tr>
        <td id="L13171" class="blob-num js-line-number" data-line-number="13171"></td>
        <td id="LC13171" class="blob-code blob-code-inner js-file-line"><span class="pl-s">struct visitorSelector {</span></td>
      </tr>
      <tr>
        <td id="L13172" class="blob-num js-line-number" data-line-number="13172"></td>
        <td id="LC13172" class="blob-code blob-code-inner js-file-line"><span class="pl-s">    template&lt;typename T, class Visitor&gt;</span></td>
      </tr>
      <tr>
        <td id="L13173" class="blob-num js-line-number" data-line-number="13173"></td>
        <td id="LC13173" class="blob-code blob-code-inner js-file-line"><span class="pl-s">    static void impl(uint32_t fieldIdentifier, std::string &amp;&amp;typeName, std::string &amp;&amp;name, T &amp;value, Visitor &amp;visitor) {</span></td>
      </tr>
      <tr>
        <td id="L13174" class="blob-num js-line-number" data-line-number="13174"></td>
        <td id="LC13174" class="blob-code blob-code-inner js-file-line"><span class="pl-s">        visitor.visit(fieldIdentifier, std::move(typeName), std::move(name), value);</span></td>
      </tr>
      <tr>
        <td id="L13175" class="blob-num js-line-number" data-line-number="13175"></td>
        <td id="LC13175" class="blob-code blob-code-inner js-file-line"><span class="pl-s">    }</span></td>
      </tr>
      <tr>
        <td id="L13176" class="blob-num js-line-number" data-line-number="13176"></td>
        <td id="LC13176" class="blob-code blob-code-inner js-file-line"><span class="pl-s">};</span></td>
      </tr>
      <tr>
        <td id="L13177" class="blob-num js-line-number" data-line-number="13177"></td>
        <td id="LC13177" class="blob-code blob-code-inner js-file-line"><span class="pl-s"></span></td>
      </tr>
      <tr>
        <td id="L13178" class="blob-num js-line-number" data-line-number="13178"></td>
        <td id="LC13178" class="blob-code blob-code-inner js-file-line"><span class="pl-s">template&lt;&gt;</span></td>
      </tr>
      <tr>
        <td id="L13179" class="blob-num js-line-number" data-line-number="13179"></td>
        <td id="LC13179" class="blob-code blob-code-inner js-file-line"><span class="pl-s">struct visitorSelector&lt;true&gt; {</span></td>
      </tr>
      <tr>
        <td id="L13180" class="blob-num js-line-number" data-line-number="13180"></td>
        <td id="LC13180" class="blob-code blob-code-inner js-file-line"><span class="pl-s">    template&lt;typename T, class Visitor&gt;</span></td>
      </tr>
      <tr>
        <td id="L13181" class="blob-num js-line-number" data-line-number="13181"></td>
        <td id="LC13181" class="blob-code blob-code-inner js-file-line"><span class="pl-s">    static void impl(uint32_t fieldIdentifier, std::string &amp;&amp;typeName, std::string &amp;&amp;name, T &amp;value, Visitor &amp;visitor) {</span></td>
      </tr>
      <tr>
        <td id="L13182" class="blob-num js-line-number" data-line-number="13182"></td>
        <td id="LC13182" class="blob-code blob-code-inner js-file-line"><span class="pl-s">        visitor.visit(fieldIdentifier, std::move(typeName), std::move(name), value);</span></td>
      </tr>
      <tr>
        <td id="L13183" class="blob-num js-line-number" data-line-number="13183"></td>
        <td id="LC13183" class="blob-code blob-code-inner js-file-line"><span class="pl-s">    }</span></td>
      </tr>
      <tr>
        <td id="L13184" class="blob-num js-line-number" data-line-number="13184"></td>
        <td id="LC13184" class="blob-code blob-code-inner js-file-line"><span class="pl-s">};</span></td>
      </tr>
      <tr>
        <td id="L13185" class="blob-num js-line-number" data-line-number="13185"></td>
        <td id="LC13185" class="blob-code blob-code-inner js-file-line"><span class="pl-s"></span></td>
      </tr>
      <tr>
        <td id="L13186" class="blob-num js-line-number" data-line-number="13186"></td>
        <td id="LC13186" class="blob-code blob-code-inner js-file-line"><span class="pl-s">template&lt;typename T&gt;</span></td>
      </tr>
      <tr>
        <td id="L13187" class="blob-num js-line-number" data-line-number="13187"></td>
        <td id="LC13187" class="blob-code blob-code-inner js-file-line"><span class="pl-s">struct isVisitable {</span></td>
      </tr>
      <tr>
        <td id="L13188" class="blob-num js-line-number" data-line-number="13188"></td>
        <td id="LC13188" class="blob-code blob-code-inner js-file-line"><span class="pl-s">    static const bool value = false;</span></td>
      </tr>
      <tr>
        <td id="L13189" class="blob-num js-line-number" data-line-number="13189"></td>
        <td id="LC13189" class="blob-code blob-code-inner js-file-line"><span class="pl-s">};</span></td>
      </tr>
      <tr>
        <td id="L13190" class="blob-num js-line-number" data-line-number="13190"></td>
        <td id="LC13190" class="blob-code blob-code-inner js-file-line"><span class="pl-s"></span></td>
      </tr>
      <tr>
        <td id="L13191" class="blob-num js-line-number" data-line-number="13191"></td>
        <td id="LC13191" class="blob-code blob-code-inner js-file-line"><span class="pl-s">template&lt;typename T, class Visitor&gt;</span></td>
      </tr>
      <tr>
        <td id="L13192" class="blob-num js-line-number" data-line-number="13192"></td>
        <td id="LC13192" class="blob-code blob-code-inner js-file-line"><span class="pl-s">void doVisit(uint32_t fieldIdentifier, std::string &amp;&amp;typeName, std::string &amp;&amp;name, T &amp;value, Visitor &amp;visitor) {</span></td>
      </tr>
      <tr>
        <td id="L13193" class="blob-num js-line-number" data-line-number="13193"></td>
        <td id="LC13193" class="blob-code blob-code-inner js-file-line"><span class="pl-s">    visitorSelector&lt;isVisitable&lt;T&gt;::value &gt;::impl(fieldIdentifier, std::move(typeName), std::move(name), value, visitor);</span></td>
      </tr>
      <tr>
        <td id="L13194" class="blob-num js-line-number" data-line-number="13194"></td>
        <td id="LC13194" class="blob-code blob-code-inner js-file-line"><span class="pl-s">}</span></td>
      </tr>
      <tr>
        <td id="L13195" class="blob-num js-line-number" data-line-number="13195"></td>
        <td id="LC13195" class="blob-code blob-code-inner js-file-line"><span class="pl-s">#endif</span></td>
      </tr>
      <tr>
        <td id="L13196" class="blob-num js-line-number" data-line-number="13196"></td>
        <td id="LC13196" class="blob-code blob-code-inner js-file-line"><span class="pl-s"></span></td>
      </tr>
      <tr>
        <td id="L13197" class="blob-num js-line-number" data-line-number="13197"></td>
        <td id="LC13197" class="blob-code blob-code-inner js-file-line"><span class="pl-s">#ifndef TRIPLET_FORWARD_VISITABLE_TYPE_TRAIT</span></td>
      </tr>
      <tr>
        <td id="L13198" class="blob-num js-line-number" data-line-number="13198"></td>
        <td id="LC13198" class="blob-code blob-code-inner js-file-line"><span class="pl-s">#define TRIPLET_FORWARD_VISITABLE_TYPE_TRAIT</span></td>
      </tr>
      <tr>
        <td id="L13199" class="blob-num js-line-number" data-line-number="13199"></td>
        <td id="LC13199" class="blob-code blob-code-inner js-file-line"><span class="pl-s">#include &lt;cstdint&gt;</span></td>
      </tr>
      <tr>
        <td id="L13200" class="blob-num js-line-number" data-line-number="13200"></td>
        <td id="LC13200" class="blob-code blob-code-inner js-file-line"><span class="pl-s">#include &lt;string&gt;</span></td>
      </tr>
      <tr>
        <td id="L13201" class="blob-num js-line-number" data-line-number="13201"></td>
        <td id="LC13201" class="blob-code blob-code-inner js-file-line"><span class="pl-s">#include &lt;utility&gt;</span></td>
      </tr>
      <tr>
        <td id="L13202" class="blob-num js-line-number" data-line-number="13202"></td>
        <td id="LC13202" class="blob-code blob-code-inner js-file-line"><span class="pl-s"></span></td>
      </tr>
      <tr>
        <td id="L13203" class="blob-num js-line-number" data-line-number="13203"></td>
        <td id="LC13203" class="blob-code blob-code-inner js-file-line"><span class="pl-s">template&lt;bool b&gt;</span></td>
      </tr>
      <tr>
        <td id="L13204" class="blob-num js-line-number" data-line-number="13204"></td>
        <td id="LC13204" class="blob-code blob-code-inner js-file-line"><span class="pl-s">struct tripletForwardVisitorSelector {</span></td>
      </tr>
      <tr>
        <td id="L13205" class="blob-num js-line-number" data-line-number="13205"></td>
        <td id="LC13205" class="blob-code blob-code-inner js-file-line"><span class="pl-s">    template&lt;typename T, class PreVisitor, class Visitor, class PostVisitor&gt;</span></td>
      </tr>
      <tr>
        <td id="L13206" class="blob-num js-line-number" data-line-number="13206"></td>
        <td id="LC13206" class="blob-code blob-code-inner js-file-line"><span class="pl-s">    static void impl(uint32_t fieldIdentifier, std::string &amp;&amp;typeName, std::string &amp;&amp;name, T &amp;value, PreVisitor &amp;&amp;preVisit, Visitor &amp;&amp;visit, PostVisitor &amp;&amp;postVisit) {</span></td>
      </tr>
      <tr>
        <td id="L13207" class="blob-num js-line-number" data-line-number="13207"></td>
        <td id="LC13207" class="blob-code blob-code-inner js-file-line"><span class="pl-s">        (void)preVisit;</span></td>
      </tr>
      <tr>
        <td id="L13208" class="blob-num js-line-number" data-line-number="13208"></td>
        <td id="LC13208" class="blob-code blob-code-inner js-file-line"><span class="pl-s">        (void)postVisit;</span></td>
      </tr>
      <tr>
        <td id="L13209" class="blob-num js-line-number" data-line-number="13209"></td>
        <td id="LC13209" class="blob-code blob-code-inner js-file-line"><span class="pl-s">        std::forward&lt;Visitor&gt;(visit)(fieldIdentifier, std::move(typeName), std::move(name), value);</span></td>
      </tr>
      <tr>
        <td id="L13210" class="blob-num js-line-number" data-line-number="13210"></td>
        <td id="LC13210" class="blob-code blob-code-inner js-file-line"><span class="pl-s">    }</span></td>
      </tr>
      <tr>
        <td id="L13211" class="blob-num js-line-number" data-line-number="13211"></td>
        <td id="LC13211" class="blob-code blob-code-inner js-file-line"><span class="pl-s">};</span></td>
      </tr>
      <tr>
        <td id="L13212" class="blob-num js-line-number" data-line-number="13212"></td>
        <td id="LC13212" class="blob-code blob-code-inner js-file-line"><span class="pl-s"></span></td>
      </tr>
      <tr>
        <td id="L13213" class="blob-num js-line-number" data-line-number="13213"></td>
        <td id="LC13213" class="blob-code blob-code-inner js-file-line"><span class="pl-s">template&lt;&gt;</span></td>
      </tr>
      <tr>
        <td id="L13214" class="blob-num js-line-number" data-line-number="13214"></td>
        <td id="LC13214" class="blob-code blob-code-inner js-file-line"><span class="pl-s">struct tripletForwardVisitorSelector&lt;true&gt; {</span></td>
      </tr>
      <tr>
        <td id="L13215" class="blob-num js-line-number" data-line-number="13215"></td>
        <td id="LC13215" class="blob-code blob-code-inner js-file-line"><span class="pl-s">    template&lt;typename T, class PreVisitor, class Visitor, class PostVisitor&gt;</span></td>
      </tr>
      <tr>
        <td id="L13216" class="blob-num js-line-number" data-line-number="13216"></td>
        <td id="LC13216" class="blob-code blob-code-inner js-file-line"><span class="pl-s">    static void impl(uint32_t fieldIdentifier, std::string &amp;&amp;typeName, std::string &amp;&amp;name, T &amp;value, PreVisitor &amp;&amp;preVisit, Visitor &amp;&amp;visit, PostVisitor &amp;&amp;postVisit) {</span></td>
      </tr>
      <tr>
        <td id="L13217" class="blob-num js-line-number" data-line-number="13217"></td>
        <td id="LC13217" class="blob-code blob-code-inner js-file-line"><span class="pl-s">        (void)fieldIdentifier;</span></td>
      </tr>
      <tr>
        <td id="L13218" class="blob-num js-line-number" data-line-number="13218"></td>
        <td id="LC13218" class="blob-code blob-code-inner js-file-line"><span class="pl-s">        (void)typeName;</span></td>
      </tr>
      <tr>
        <td id="L13219" class="blob-num js-line-number" data-line-number="13219"></td>
        <td id="LC13219" class="blob-code blob-code-inner js-file-line"><span class="pl-s">        (void)name;</span></td>
      </tr>
      <tr>
        <td id="L13220" class="blob-num js-line-number" data-line-number="13220"></td>
        <td id="LC13220" class="blob-code blob-code-inner js-file-line"><span class="pl-s">        // Apply preVisit, visit, and postVisit on value.</span></td>
      </tr>
      <tr>
        <td id="L13221" class="blob-num js-line-number" data-line-number="13221"></td>
        <td id="LC13221" class="blob-code blob-code-inner js-file-line"><span class="pl-s">        value.accept(preVisit, visit, postVisit);</span></td>
      </tr>
      <tr>
        <td id="L13222" class="blob-num js-line-number" data-line-number="13222"></td>
        <td id="LC13222" class="blob-code blob-code-inner js-file-line"><span class="pl-s">    }</span></td>
      </tr>
      <tr>
        <td id="L13223" class="blob-num js-line-number" data-line-number="13223"></td>
        <td id="LC13223" class="blob-code blob-code-inner js-file-line"><span class="pl-s">};</span></td>
      </tr>
      <tr>
        <td id="L13224" class="blob-num js-line-number" data-line-number="13224"></td>
        <td id="LC13224" class="blob-code blob-code-inner js-file-line"><span class="pl-s"></span></td>
      </tr>
      <tr>
        <td id="L13225" class="blob-num js-line-number" data-line-number="13225"></td>
        <td id="LC13225" class="blob-code blob-code-inner js-file-line"><span class="pl-s">template&lt;typename T&gt;</span></td>
      </tr>
      <tr>
        <td id="L13226" class="blob-num js-line-number" data-line-number="13226"></td>
        <td id="LC13226" class="blob-code blob-code-inner js-file-line"><span class="pl-s">struct isTripletForwardVisitable {</span></td>
      </tr>
      <tr>
        <td id="L13227" class="blob-num js-line-number" data-line-number="13227"></td>
        <td id="LC13227" class="blob-code blob-code-inner js-file-line"><span class="pl-s">    static const bool value = false;</span></td>
      </tr>
      <tr>
        <td id="L13228" class="blob-num js-line-number" data-line-number="13228"></td>
        <td id="LC13228" class="blob-code blob-code-inner js-file-line"><span class="pl-s">};</span></td>
      </tr>
      <tr>
        <td id="L13229" class="blob-num js-line-number" data-line-number="13229"></td>
        <td id="LC13229" class="blob-code blob-code-inner js-file-line"><span class="pl-s"></span></td>
      </tr>
      <tr>
        <td id="L13230" class="blob-num js-line-number" data-line-number="13230"></td>
        <td id="LC13230" class="blob-code blob-code-inner js-file-line"><span class="pl-s">template&lt; typename T, class PreVisitor, class Visitor, class PostVisitor&gt;</span></td>
      </tr>
      <tr>
        <td id="L13231" class="blob-num js-line-number" data-line-number="13231"></td>
        <td id="LC13231" class="blob-code blob-code-inner js-file-line"><span class="pl-s">void doTripletForwardVisit(uint32_t fieldIdentifier, std::string &amp;&amp;typeName, std::string &amp;&amp;name, T &amp;value, PreVisitor &amp;&amp;preVisit, Visitor &amp;&amp;visit, PostVisitor &amp;&amp;postVisit) {</span></td>
      </tr>
      <tr>
        <td id="L13232" class="blob-num js-line-number" data-line-number="13232"></td>
        <td id="LC13232" class="blob-code blob-code-inner js-file-line"><span class="pl-s">    tripletForwardVisitorSelector&lt;isTripletForwardVisitable&lt;T&gt;::value &gt;::impl(fieldIdentifier, std::move(typeName), std::move(name), value, std::move(preVisit), std::move(visit), std::move(postVisit)); // NOLINT</span></td>
      </tr>
      <tr>
        <td id="L13233" class="blob-num js-line-number" data-line-number="13233"></td>
        <td id="LC13233" class="blob-code blob-code-inner js-file-line"><span class="pl-s">}</span></td>
      </tr>
      <tr>
        <td id="L13234" class="blob-num js-line-number" data-line-number="13234"></td>
        <td id="LC13234" class="blob-code blob-code-inner js-file-line"><span class="pl-s">#endif</span></td>
      </tr>
      <tr>
        <td id="L13235" class="blob-num js-line-number" data-line-number="13235"></td>
        <td id="LC13235" class="blob-code blob-code-inner js-file-line"><span class="pl-s"></span></td>
      </tr>
      <tr>
        <td id="L13236" class="blob-num js-line-number" data-line-number="13236"></td>
        <td id="LC13236" class="blob-code blob-code-inner js-file-line"><span class="pl-s"></span></td>
      </tr>
      <tr>
        <td id="L13237" class="blob-num js-line-number" data-line-number="13237"></td>
        <td id="LC13237" class="blob-code blob-code-inner js-file-line"><span class="pl-s">#ifndef {{%HEADER_GUARD%}}_HPP</span></td>
      </tr>
      <tr>
        <td id="L13238" class="blob-num js-line-number" data-line-number="13238"></td>
        <td id="LC13238" class="blob-code blob-code-inner js-file-line"><span class="pl-s">#define {{%HEADER_GUARD%}}_HPP</span></td>
      </tr>
      <tr>
        <td id="L13239" class="blob-num js-line-number" data-line-number="13239"></td>
        <td id="LC13239" class="blob-code blob-code-inner js-file-line"><span class="pl-s"></span></td>
      </tr>
      <tr>
        <td id="L13240" class="blob-num js-line-number" data-line-number="13240"></td>
        <td id="LC13240" class="blob-code blob-code-inner js-file-line"><span class="pl-s">#ifdef WIN32</span></td>
      </tr>
      <tr>
        <td id="L13241" class="blob-num js-line-number" data-line-number="13241"></td>
        <td id="LC13241" class="blob-code blob-code-inner js-file-line"><span class="pl-s">    // Export symbols if compile flags &quot;LIB_SHARED&quot; and &quot;LIB_EXPORTS&quot; are set on Windows.</span></td>
      </tr>
      <tr>
        <td id="L13242" class="blob-num js-line-number" data-line-number="13242"></td>
        <td id="LC13242" class="blob-code blob-code-inner js-file-line"><span class="pl-s">    #ifdef LIB_SHARED</span></td>
      </tr>
      <tr>
        <td id="L13243" class="blob-num js-line-number" data-line-number="13243"></td>
        <td id="LC13243" class="blob-code blob-code-inner js-file-line"><span class="pl-s">        #ifdef LIB_EXPORTS</span></td>
      </tr>
      <tr>
        <td id="L13244" class="blob-num js-line-number" data-line-number="13244"></td>
        <td id="LC13244" class="blob-code blob-code-inner js-file-line"><span class="pl-s">            #define LIB_API __declspec(dllexport)</span></td>
      </tr>
      <tr>
        <td id="L13245" class="blob-num js-line-number" data-line-number="13245"></td>
        <td id="LC13245" class="blob-code blob-code-inner js-file-line"><span class="pl-s">        #else</span></td>
      </tr>
      <tr>
        <td id="L13246" class="blob-num js-line-number" data-line-number="13246"></td>
        <td id="LC13246" class="blob-code blob-code-inner js-file-line"><span class="pl-s">            #define LIB_API __declspec(dllimport)</span></td>
      </tr>
      <tr>
        <td id="L13247" class="blob-num js-line-number" data-line-number="13247"></td>
        <td id="LC13247" class="blob-code blob-code-inner js-file-line"><span class="pl-s">        #endif</span></td>
      </tr>
      <tr>
        <td id="L13248" class="blob-num js-line-number" data-line-number="13248"></td>
        <td id="LC13248" class="blob-code blob-code-inner js-file-line"><span class="pl-s">    #else</span></td>
      </tr>
      <tr>
        <td id="L13249" class="blob-num js-line-number" data-line-number="13249"></td>
        <td id="LC13249" class="blob-code blob-code-inner js-file-line"><span class="pl-s">        // Disable definition if linking statically.</span></td>
      </tr>
      <tr>
        <td id="L13250" class="blob-num js-line-number" data-line-number="13250"></td>
        <td id="LC13250" class="blob-code blob-code-inner js-file-line"><span class="pl-s">        #define LIB_API</span></td>
      </tr>
      <tr>
        <td id="L13251" class="blob-num js-line-number" data-line-number="13251"></td>
        <td id="LC13251" class="blob-code blob-code-inner js-file-line"><span class="pl-s">    #endif</span></td>
      </tr>
      <tr>
        <td id="L13252" class="blob-num js-line-number" data-line-number="13252"></td>
        <td id="LC13252" class="blob-code blob-code-inner js-file-line"><span class="pl-s">#else</span></td>
      </tr>
      <tr>
        <td id="L13253" class="blob-num js-line-number" data-line-number="13253"></td>
        <td id="LC13253" class="blob-code blob-code-inner js-file-line"><span class="pl-s">    // Disable definition for non-Win32 systems.</span></td>
      </tr>
      <tr>
        <td id="L13254" class="blob-num js-line-number" data-line-number="13254"></td>
        <td id="LC13254" class="blob-code blob-code-inner js-file-line"><span class="pl-s">    #define LIB_API</span></td>
      </tr>
      <tr>
        <td id="L13255" class="blob-num js-line-number" data-line-number="13255"></td>
        <td id="LC13255" class="blob-code blob-code-inner js-file-line"><span class="pl-s">#endif</span></td>
      </tr>
      <tr>
        <td id="L13256" class="blob-num js-line-number" data-line-number="13256"></td>
        <td id="LC13256" class="blob-code blob-code-inner js-file-line"><span class="pl-s"></span></td>
      </tr>
      <tr>
        <td id="L13257" class="blob-num js-line-number" data-line-number="13257"></td>
        <td id="LC13257" class="blob-code blob-code-inner js-file-line"><span class="pl-s">#include &lt;string&gt;</span></td>
      </tr>
      <tr>
        <td id="L13258" class="blob-num js-line-number" data-line-number="13258"></td>
        <td id="LC13258" class="blob-code blob-code-inner js-file-line"><span class="pl-s">#include &lt;utility&gt;</span></td>
      </tr>
      <tr>
        <td id="L13259" class="blob-num js-line-number" data-line-number="13259"></td>
        <td id="LC13259" class="blob-code blob-code-inner js-file-line"><span class="pl-s">{{%NAMESPACE_OPENING%}}</span></td>
      </tr>
      <tr>
        <td id="L13260" class="blob-num js-line-number" data-line-number="13260"></td>
        <td id="LC13260" class="blob-code blob-code-inner js-file-line"><span class="pl-s">using namespace std::string_literals; // NOLINT</span></td>
      </tr>
      <tr>
        <td id="L13261" class="blob-num js-line-number" data-line-number="13261"></td>
        <td id="LC13261" class="blob-code blob-code-inner js-file-line"><span class="pl-s">class LIB_API {{%MESSAGE%}} {</span></td>
      </tr>
      <tr>
        <td id="L13262" class="blob-num js-line-number" data-line-number="13262"></td>
        <td id="LC13262" class="blob-code blob-code-inner js-file-line"><span class="pl-s">    public:</span></td>
      </tr>
      <tr>
        <td id="L13263" class="blob-num js-line-number" data-line-number="13263"></td>
        <td id="LC13263" class="blob-code blob-code-inner js-file-line"><span class="pl-s">        {{%MESSAGE%}}() = default;</span></td>
      </tr>
      <tr>
        <td id="L13264" class="blob-num js-line-number" data-line-number="13264"></td>
        <td id="LC13264" class="blob-code blob-code-inner js-file-line"><span class="pl-s">        {{%MESSAGE%}}(const {{%MESSAGE%}}&amp;) = default;</span></td>
      </tr>
      <tr>
        <td id="L13265" class="blob-num js-line-number" data-line-number="13265"></td>
        <td id="LC13265" class="blob-code blob-code-inner js-file-line"><span class="pl-s">        {{%MESSAGE%}}&amp; operator=(const {{%MESSAGE%}}&amp;) = default;</span></td>
      </tr>
      <tr>
        <td id="L13266" class="blob-num js-line-number" data-line-number="13266"></td>
        <td id="LC13266" class="blob-code blob-code-inner js-file-line"><span class="pl-s">        {{%MESSAGE%}}({{%MESSAGE%}}&amp;&amp;) noexcept = default; // NOLINT</span></td>
      </tr>
      <tr>
        <td id="L13267" class="blob-num js-line-number" data-line-number="13267"></td>
        <td id="LC13267" class="blob-code blob-code-inner js-file-line"><span class="pl-s">        {{%MESSAGE%}}&amp; operator=({{%MESSAGE%}}&amp;&amp;) noexcept = default; // NOLINT</span></td>
      </tr>
      <tr>
        <td id="L13268" class="blob-num js-line-number" data-line-number="13268"></td>
        <td id="LC13268" class="blob-code blob-code-inner js-file-line"><span class="pl-s">        ~{{%MESSAGE%}}() = default;</span></td>
      </tr>
      <tr>
        <td id="L13269" class="blob-num js-line-number" data-line-number="13269"></td>
        <td id="LC13269" class="blob-code blob-code-inner js-file-line"><span class="pl-s"></span></td>
      </tr>
      <tr>
        <td id="L13270" class="blob-num js-line-number" data-line-number="13270"></td>
        <td id="LC13270" class="blob-code blob-code-inner js-file-line"><span class="pl-s">    public:</span></td>
      </tr>
      <tr>
        <td id="L13271" class="blob-num js-line-number" data-line-number="13271"></td>
        <td id="LC13271" class="blob-code blob-code-inner js-file-line"><span class="pl-s">        static int32_t ID();</span></td>
      </tr>
      <tr>
        <td id="L13272" class="blob-num js-line-number" data-line-number="13272"></td>
        <td id="LC13272" class="blob-code blob-code-inner js-file-line"><span class="pl-s">        static const std::string ShortName();</span></td>
      </tr>
      <tr>
        <td id="L13273" class="blob-num js-line-number" data-line-number="13273"></td>
        <td id="LC13273" class="blob-code blob-code-inner js-file-line"><span class="pl-s">        static const std::string LongName();</span></td>
      </tr>
      <tr>
        <td id="L13274" class="blob-num js-line-number" data-line-number="13274"></td>
        <td id="LC13274" class="blob-code blob-code-inner js-file-line"><span class="pl-s">        {{#%FIELDS%}}</span></td>
      </tr>
      <tr>
        <td id="L13275" class="blob-num js-line-number" data-line-number="13275"></td>
        <td id="LC13275" class="blob-code blob-code-inner js-file-line"><span class="pl-s">        {{%MESSAGE%}}&amp; {{%NAME%}}(const {{%TYPE%}} &amp;v) noexcept;</span></td>
      </tr>
      <tr>
        <td id="L13276" class="blob-num js-line-number" data-line-number="13276"></td>
        <td id="LC13276" class="blob-code blob-code-inner js-file-line"><span class="pl-s">        {{%TYPE%}} {{%NAME%}}() const noexcept;</span></td>
      </tr>
      <tr>
        <td id="L13277" class="blob-num js-line-number" data-line-number="13277"></td>
        <td id="LC13277" class="blob-code blob-code-inner js-file-line"><span class="pl-s">        {{/%FIELDS%}}</span></td>
      </tr>
      <tr>
        <td id="L13278" class="blob-num js-line-number" data-line-number="13278"></td>
        <td id="LC13278" class="blob-code blob-code-inner js-file-line"><span class="pl-s"></span></td>
      </tr>
      <tr>
        <td id="L13279" class="blob-num js-line-number" data-line-number="13279"></td>
        <td id="LC13279" class="blob-code blob-code-inner js-file-line"><span class="pl-s">        template&lt;class Visitor&gt;</span></td>
      </tr>
      <tr>
        <td id="L13280" class="blob-num js-line-number" data-line-number="13280"></td>
        <td id="LC13280" class="blob-code blob-code-inner js-file-line"><span class="pl-s">        void accept(Visitor &amp;visitor) {</span></td>
      </tr>
      <tr>
        <td id="L13281" class="blob-num js-line-number" data-line-number="13281"></td>
        <td id="LC13281" class="blob-code blob-code-inner js-file-line"><span class="pl-s">            visitor.preVisit(ID(), ShortName(), LongName());</span></td>
      </tr>
      <tr>
        <td id="L13282" class="blob-num js-line-number" data-line-number="13282"></td>
        <td id="LC13282" class="blob-code blob-code-inner js-file-line"><span class="pl-s">            {{#%FIELDS%}}</span></td>
      </tr>
      <tr>
        <td id="L13283" class="blob-num js-line-number" data-line-number="13283"></td>
        <td id="LC13283" class="blob-code blob-code-inner js-file-line"><span class="pl-s">            doVisit({{%FIELDIDENTIFIER%}}, std::move(&quot;{{%TYPE%}}&quot;s), std::move(&quot;{{%NAME%}}&quot;s), m_{{%NAME%}}, visitor);</span></td>
      </tr>
      <tr>
        <td id="L13284" class="blob-num js-line-number" data-line-number="13284"></td>
        <td id="LC13284" class="blob-code blob-code-inner js-file-line"><span class="pl-s">            {{/%FIELDS%}}</span></td>
      </tr>
      <tr>
        <td id="L13285" class="blob-num js-line-number" data-line-number="13285"></td>
        <td id="LC13285" class="blob-code blob-code-inner js-file-line"><span class="pl-s">            visitor.postVisit();</span></td>
      </tr>
      <tr>
        <td id="L13286" class="blob-num js-line-number" data-line-number="13286"></td>
        <td id="LC13286" class="blob-code blob-code-inner js-file-line"><span class="pl-s">        }</span></td>
      </tr>
      <tr>
        <td id="L13287" class="blob-num js-line-number" data-line-number="13287"></td>
        <td id="LC13287" class="blob-code blob-code-inner js-file-line"><span class="pl-s"></span></td>
      </tr>
      <tr>
        <td id="L13288" class="blob-num js-line-number" data-line-number="13288"></td>
        <td id="LC13288" class="blob-code blob-code-inner js-file-line"><span class="pl-s">        template&lt;class PreVisitor, class Visitor, class PostVisitor&gt;</span></td>
      </tr>
      <tr>
        <td id="L13289" class="blob-num js-line-number" data-line-number="13289"></td>
        <td id="LC13289" class="blob-code blob-code-inner js-file-line"><span class="pl-s">        void accept(PreVisitor &amp;&amp;preVisit, Visitor &amp;&amp;visit, PostVisitor &amp;&amp;postVisit) {</span></td>
      </tr>
      <tr>
        <td id="L13290" class="blob-num js-line-number" data-line-number="13290"></td>
        <td id="LC13290" class="blob-code blob-code-inner js-file-line"><span class="pl-s">            std::forward&lt;PreVisitor&gt;(preVisit)(ID(), ShortName(), LongName());</span></td>
      </tr>
      <tr>
        <td id="L13291" class="blob-num js-line-number" data-line-number="13291"></td>
        <td id="LC13291" class="blob-code blob-code-inner js-file-line"><span class="pl-s">            {{#%FIELDS%}}</span></td>
      </tr>
      <tr>
        <td id="L13292" class="blob-num js-line-number" data-line-number="13292"></td>
        <td id="LC13292" class="blob-code blob-code-inner js-file-line"><span class="pl-s">            doTripletForwardVisit({{%FIELDIDENTIFIER%}}, std::move(&quot;{{%TYPE%}}&quot;s), std::move(&quot;{{%NAME%}}&quot;s), m_{{%NAME%}}, preVisit, visit, postVisit);</span></td>
      </tr>
      <tr>
        <td id="L13293" class="blob-num js-line-number" data-line-number="13293"></td>
        <td id="LC13293" class="blob-code blob-code-inner js-file-line"><span class="pl-s">            {{/%FIELDS%}}</span></td>
      </tr>
      <tr>
        <td id="L13294" class="blob-num js-line-number" data-line-number="13294"></td>
        <td id="LC13294" class="blob-code blob-code-inner js-file-line"><span class="pl-s">            std::forward&lt;PostVisitor&gt;(postVisit)();</span></td>
      </tr>
      <tr>
        <td id="L13295" class="blob-num js-line-number" data-line-number="13295"></td>
        <td id="LC13295" class="blob-code blob-code-inner js-file-line"><span class="pl-s">        }</span></td>
      </tr>
      <tr>
        <td id="L13296" class="blob-num js-line-number" data-line-number="13296"></td>
        <td id="LC13296" class="blob-code blob-code-inner js-file-line"><span class="pl-s"></span></td>
      </tr>
      <tr>
        <td id="L13297" class="blob-num js-line-number" data-line-number="13297"></td>
        <td id="LC13297" class="blob-code blob-code-inner js-file-line"><span class="pl-s">    private:</span></td>
      </tr>
      <tr>
        <td id="L13298" class="blob-num js-line-number" data-line-number="13298"></td>
        <td id="LC13298" class="blob-code blob-code-inner js-file-line"><span class="pl-s">        {{#%FIELDS%}}</span></td>
      </tr>
      <tr>
        <td id="L13299" class="blob-num js-line-number" data-line-number="13299"></td>
        <td id="LC13299" class="blob-code blob-code-inner js-file-line"><span class="pl-s">        {{%TYPE%}} m_{{%NAME%}}{ {{%FIELD_DEFAULT_INITIALIZATION_VALUE%}}{{%INITIALIZER_SUFFIX%}} }; // field identifier = {{%FIELDIDENTIFIER%}}.</span></td>
      </tr>
      <tr>
        <td id="L13300" class="blob-num js-line-number" data-line-number="13300"></td>
        <td id="LC13300" class="blob-code blob-code-inner js-file-line"><span class="pl-s">        {{/%FIELDS%}}</span></td>
      </tr>
      <tr>
        <td id="L13301" class="blob-num js-line-number" data-line-number="13301"></td>
        <td id="LC13301" class="blob-code blob-code-inner js-file-line"><span class="pl-s">};</span></td>
      </tr>
      <tr>
        <td id="L13302" class="blob-num js-line-number" data-line-number="13302"></td>
        <td id="LC13302" class="blob-code blob-code-inner js-file-line"><span class="pl-s">{{%NAMESPACE_CLOSING%}}</span></td>
      </tr>
      <tr>
        <td id="L13303" class="blob-num js-line-number" data-line-number="13303"></td>
        <td id="LC13303" class="blob-code blob-code-inner js-file-line"><span class="pl-s"></span></td>
      </tr>
      <tr>
        <td id="L13304" class="blob-num js-line-number" data-line-number="13304"></td>
        <td id="LC13304" class="blob-code blob-code-inner js-file-line"><span class="pl-s">template&lt;&gt;</span></td>
      </tr>
      <tr>
        <td id="L13305" class="blob-num js-line-number" data-line-number="13305"></td>
        <td id="LC13305" class="blob-code blob-code-inner js-file-line"><span class="pl-s">struct isVisitable&lt;{{%COMPLETEPACKAGENAME_WITH_COLON_SEPARATORS%}}{{%MESSAGE%}}&gt; {</span></td>
      </tr>
      <tr>
        <td id="L13306" class="blob-num js-line-number" data-line-number="13306"></td>
        <td id="LC13306" class="blob-code blob-code-inner js-file-line"><span class="pl-s">    static const bool value = true;</span></td>
      </tr>
      <tr>
        <td id="L13307" class="blob-num js-line-number" data-line-number="13307"></td>
        <td id="LC13307" class="blob-code blob-code-inner js-file-line"><span class="pl-s">};</span></td>
      </tr>
      <tr>
        <td id="L13308" class="blob-num js-line-number" data-line-number="13308"></td>
        <td id="LC13308" class="blob-code blob-code-inner js-file-line"><span class="pl-s">template&lt;&gt;</span></td>
      </tr>
      <tr>
        <td id="L13309" class="blob-num js-line-number" data-line-number="13309"></td>
        <td id="LC13309" class="blob-code blob-code-inner js-file-line"><span class="pl-s">struct isTripletForwardVisitable&lt;{{%COMPLETEPACKAGENAME_WITH_COLON_SEPARATORS%}}{{%MESSAGE%}}&gt; {</span></td>
      </tr>
      <tr>
        <td id="L13310" class="blob-num js-line-number" data-line-number="13310"></td>
        <td id="LC13310" class="blob-code blob-code-inner js-file-line"><span class="pl-s">    static const bool value = true;</span></td>
      </tr>
      <tr>
        <td id="L13311" class="blob-num js-line-number" data-line-number="13311"></td>
        <td id="LC13311" class="blob-code blob-code-inner js-file-line"><span class="pl-s">};</span></td>
      </tr>
      <tr>
        <td id="L13312" class="blob-num js-line-number" data-line-number="13312"></td>
        <td id="LC13312" class="blob-code blob-code-inner js-file-line"><span class="pl-s">#endif</span></td>
      </tr>
      <tr>
        <td id="L13313" class="blob-num js-line-number" data-line-number="13313"></td>
        <td id="LC13313" class="blob-code blob-code-inner js-file-line"><span class="pl-s"><span class="pl-pds">)&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L13314" class="blob-num js-line-number" data-line-number="13314"></td>
        <td id="LC13314" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13315" class="blob-num js-line-number" data-line-number="13315"></td>
        <td id="LC13315" class="blob-code blob-code-inner js-file-line"><span class="pl-k">const</span> <span class="pl-k">char</span> *sourceFileTemplate = <span class="pl-s"><span class="pl-pds">R&quot;(</span></span></td>
      </tr>
      <tr>
        <td id="L13316" class="blob-num js-line-number" data-line-number="13316"></td>
        <td id="LC13316" class="blob-code blob-code-inner js-file-line"><span class="pl-s">/*</span></td>
      </tr>
      <tr>
        <td id="L13317" class="blob-num js-line-number" data-line-number="13317"></td>
        <td id="LC13317" class="blob-code blob-code-inner js-file-line"><span class="pl-s"> * THIS IS AN AUTO-GENERATED FILE. DO NOT MODIFY AS CHANGES MIGHT BE OVERWRITTEN!</span></td>
      </tr>
      <tr>
        <td id="L13318" class="blob-num js-line-number" data-line-number="13318"></td>
        <td id="LC13318" class="blob-code blob-code-inner js-file-line"><span class="pl-s"> */</span></td>
      </tr>
      <tr>
        <td id="L13319" class="blob-num js-line-number" data-line-number="13319"></td>
        <td id="LC13319" class="blob-code blob-code-inner js-file-line"><span class="pl-s">{{%NAMESPACE_OPENING%}}</span></td>
      </tr>
      <tr>
        <td id="L13320" class="blob-num js-line-number" data-line-number="13320"></td>
        <td id="LC13320" class="blob-code blob-code-inner js-file-line"><span class="pl-s"></span></td>
      </tr>
      <tr>
        <td id="L13321" class="blob-num js-line-number" data-line-number="13321"></td>
        <td id="LC13321" class="blob-code blob-code-inner js-file-line"><span class="pl-s">int32_t {{%MESSAGE%}}::ID() {</span></td>
      </tr>
      <tr>
        <td id="L13322" class="blob-num js-line-number" data-line-number="13322"></td>
        <td id="LC13322" class="blob-code blob-code-inner js-file-line"><span class="pl-s">    return {{%IDENTIFIER%}};</span></td>
      </tr>
      <tr>
        <td id="L13323" class="blob-num js-line-number" data-line-number="13323"></td>
        <td id="LC13323" class="blob-code blob-code-inner js-file-line"><span class="pl-s">}</span></td>
      </tr>
      <tr>
        <td id="L13324" class="blob-num js-line-number" data-line-number="13324"></td>
        <td id="LC13324" class="blob-code blob-code-inner js-file-line"><span class="pl-s"></span></td>
      </tr>
      <tr>
        <td id="L13325" class="blob-num js-line-number" data-line-number="13325"></td>
        <td id="LC13325" class="blob-code blob-code-inner js-file-line"><span class="pl-s">const std::string {{%MESSAGE%}}::ShortName() {</span></td>
      </tr>
      <tr>
        <td id="L13326" class="blob-num js-line-number" data-line-number="13326"></td>
        <td id="LC13326" class="blob-code blob-code-inner js-file-line"><span class="pl-s">    return &quot;{{%MESSAGE%}}&quot;;</span></td>
      </tr>
      <tr>
        <td id="L13327" class="blob-num js-line-number" data-line-number="13327"></td>
        <td id="LC13327" class="blob-code blob-code-inner js-file-line"><span class="pl-s">}</span></td>
      </tr>
      <tr>
        <td id="L13328" class="blob-num js-line-number" data-line-number="13328"></td>
        <td id="LC13328" class="blob-code blob-code-inner js-file-line"><span class="pl-s">const std::string {{%MESSAGE%}}::LongName() {</span></td>
      </tr>
      <tr>
        <td id="L13329" class="blob-num js-line-number" data-line-number="13329"></td>
        <td id="LC13329" class="blob-code blob-code-inner js-file-line"><span class="pl-s">    return &quot;{{%COMPLETEPACKAGENAME%}}{{%MESSAGE%}}&quot;;</span></td>
      </tr>
      <tr>
        <td id="L13330" class="blob-num js-line-number" data-line-number="13330"></td>
        <td id="LC13330" class="blob-code blob-code-inner js-file-line"><span class="pl-s">}</span></td>
      </tr>
      <tr>
        <td id="L13331" class="blob-num js-line-number" data-line-number="13331"></td>
        <td id="LC13331" class="blob-code blob-code-inner js-file-line"><span class="pl-s">{{#%FIELDS%}}</span></td>
      </tr>
      <tr>
        <td id="L13332" class="blob-num js-line-number" data-line-number="13332"></td>
        <td id="LC13332" class="blob-code blob-code-inner js-file-line"><span class="pl-s">{{%MESSAGE%}}&amp; {{%MESSAGE%}}::{{%NAME%}}(const {{%TYPE%}} &amp;v) noexcept {</span></td>
      </tr>
      <tr>
        <td id="L13333" class="blob-num js-line-number" data-line-number="13333"></td>
        <td id="LC13333" class="blob-code blob-code-inner js-file-line"><span class="pl-s">    m_{{%NAME%}} = v;</span></td>
      </tr>
      <tr>
        <td id="L13334" class="blob-num js-line-number" data-line-number="13334"></td>
        <td id="LC13334" class="blob-code blob-code-inner js-file-line"><span class="pl-s">    return *this;</span></td>
      </tr>
      <tr>
        <td id="L13335" class="blob-num js-line-number" data-line-number="13335"></td>
        <td id="LC13335" class="blob-code blob-code-inner js-file-line"><span class="pl-s">}</span></td>
      </tr>
      <tr>
        <td id="L13336" class="blob-num js-line-number" data-line-number="13336"></td>
        <td id="LC13336" class="blob-code blob-code-inner js-file-line"><span class="pl-s">{{%TYPE%}} {{%MESSAGE%}}::{{%NAME%}}() const noexcept {</span></td>
      </tr>
      <tr>
        <td id="L13337" class="blob-num js-line-number" data-line-number="13337"></td>
        <td id="LC13337" class="blob-code blob-code-inner js-file-line"><span class="pl-s">    return m_{{%NAME%}};</span></td>
      </tr>
      <tr>
        <td id="L13338" class="blob-num js-line-number" data-line-number="13338"></td>
        <td id="LC13338" class="blob-code blob-code-inner js-file-line"><span class="pl-s">}</span></td>
      </tr>
      <tr>
        <td id="L13339" class="blob-num js-line-number" data-line-number="13339"></td>
        <td id="LC13339" class="blob-code blob-code-inner js-file-line"><span class="pl-s">{{/%FIELDS%}}</span></td>
      </tr>
      <tr>
        <td id="L13340" class="blob-num js-line-number" data-line-number="13340"></td>
        <td id="LC13340" class="blob-code blob-code-inner js-file-line"><span class="pl-s">{{%NAMESPACE_CLOSING%}}</span></td>
      </tr>
      <tr>
        <td id="L13341" class="blob-num js-line-number" data-line-number="13341"></td>
        <td id="LC13341" class="blob-code blob-code-inner js-file-line"><span class="pl-s"><span class="pl-pds">)&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L13342" class="blob-num js-line-number" data-line-number="13342"></td>
        <td id="LC13342" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13343" class="blob-num js-line-number" data-line-number="13343"></td>
        <td id="LC13343" class="blob-code blob-code-inner js-file-line">std::string <span class="pl-en">MetaMessageToCPPTransformator::contentHeader</span>() <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L13344" class="blob-num js-line-number" data-line-number="13344"></td>
        <td id="LC13344" class="blob-code blob-code-inner js-file-line">    m_dataToBeRendered.<span class="pl-c1">set</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>%FIELDS%<span class="pl-pds">&quot;</span></span>, m_fields);</td>
      </tr>
      <tr>
        <td id="L13345" class="blob-num js-line-number" data-line-number="13345"></td>
        <td id="LC13345" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13346" class="blob-num js-line-number" data-line-number="13346"></td>
        <td id="LC13346" class="blob-code blob-code-inner js-file-line">    kainjow::mustache::mustache tmpl{headerFileTemplate};</td>
      </tr>
      <tr>
        <td id="L13347" class="blob-num js-line-number" data-line-number="13347"></td>
        <td id="LC13347" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Reset Mustache&#39;s default string-escaper.</span></td>
      </tr>
      <tr>
        <td id="L13348" class="blob-num js-line-number" data-line-number="13348"></td>
        <td id="LC13348" class="blob-code blob-code-inner js-file-line">    tmpl.<span class="pl-c1">set_custom_escape</span>([](<span class="pl-k">const</span> std::string &amp;s) { <span class="pl-k">return</span> s; });</td>
      </tr>
      <tr>
        <td id="L13349" class="blob-num js-line-number" data-line-number="13349"></td>
        <td id="LC13349" class="blob-code blob-code-inner js-file-line">    std::stringstream sstr;</td>
      </tr>
      <tr>
        <td id="L13350" class="blob-num js-line-number" data-line-number="13350"></td>
        <td id="LC13350" class="blob-code blob-code-inner js-file-line">    sstr &lt;&lt; tmpl.<span class="pl-c1">render</span>(m_dataToBeRendered);</td>
      </tr>
      <tr>
        <td id="L13351" class="blob-num js-line-number" data-line-number="13351"></td>
        <td id="LC13351" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> std::string <span class="pl-smi">str</span>(sstr.<span class="pl-c1">str</span>());</td>
      </tr>
      <tr>
        <td id="L13352" class="blob-num js-line-number" data-line-number="13352"></td>
        <td id="LC13352" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> str;</td>
      </tr>
      <tr>
        <td id="L13353" class="blob-num js-line-number" data-line-number="13353"></td>
        <td id="LC13353" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L13354" class="blob-num js-line-number" data-line-number="13354"></td>
        <td id="LC13354" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13355" class="blob-num js-line-number" data-line-number="13355"></td>
        <td id="LC13355" class="blob-code blob-code-inner js-file-line">std::string <span class="pl-en">MetaMessageToCPPTransformator::contentSource</span>() <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L13356" class="blob-num js-line-number" data-line-number="13356"></td>
        <td id="LC13356" class="blob-code blob-code-inner js-file-line">    m_dataToBeRendered.<span class="pl-c1">set</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>%FIELDS%<span class="pl-pds">&quot;</span></span>, m_fields);</td>
      </tr>
      <tr>
        <td id="L13357" class="blob-num js-line-number" data-line-number="13357"></td>
        <td id="LC13357" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13358" class="blob-num js-line-number" data-line-number="13358"></td>
        <td id="LC13358" class="blob-code blob-code-inner js-file-line">    kainjow::mustache::mustache tmpl{sourceFileTemplate};</td>
      </tr>
      <tr>
        <td id="L13359" class="blob-num js-line-number" data-line-number="13359"></td>
        <td id="LC13359" class="blob-code blob-code-inner js-file-line">    tmpl.<span class="pl-c1">set_custom_escape</span>([](<span class="pl-k">const</span> std::string &amp;s) { <span class="pl-k">return</span> s; });</td>
      </tr>
      <tr>
        <td id="L13360" class="blob-num js-line-number" data-line-number="13360"></td>
        <td id="LC13360" class="blob-code blob-code-inner js-file-line">    std::stringstream sstr;</td>
      </tr>
      <tr>
        <td id="L13361" class="blob-num js-line-number" data-line-number="13361"></td>
        <td id="LC13361" class="blob-code blob-code-inner js-file-line">    sstr &lt;&lt; tmpl.<span class="pl-c1">render</span>(m_dataToBeRendered);</td>
      </tr>
      <tr>
        <td id="L13362" class="blob-num js-line-number" data-line-number="13362"></td>
        <td id="LC13362" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> std::string <span class="pl-smi">str</span>(sstr.<span class="pl-c1">str</span>());</td>
      </tr>
      <tr>
        <td id="L13363" class="blob-num js-line-number" data-line-number="13363"></td>
        <td id="LC13363" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> str;</td>
      </tr>
      <tr>
        <td id="L13364" class="blob-num js-line-number" data-line-number="13364"></td>
        <td id="LC13364" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L13365" class="blob-num js-line-number" data-line-number="13365"></td>
        <td id="LC13365" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13366" class="blob-num js-line-number" data-line-number="13366"></td>
        <td id="LC13366" class="blob-code blob-code-inner js-file-line"><span class="pl-k">void</span> <span class="pl-en">MetaMessageToCPPTransformator::visit</span>(<span class="pl-k">const</span> MetaMessage &amp;mm) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L13367" class="blob-num js-line-number" data-line-number="13367"></td>
        <td id="LC13367" class="blob-code blob-code-inner js-file-line">    kainjow::mustache::data dataToBeRendered;</td>
      </tr>
      <tr>
        <td id="L13368" class="blob-num js-line-number" data-line-number="13368"></td>
        <td id="LC13368" class="blob-code blob-code-inner js-file-line">    kainjow::mustache::data fields{kainjow::mustache::data::type::list};</td>
      </tr>
      <tr>
        <td id="L13369" class="blob-num js-line-number" data-line-number="13369"></td>
        <td id="LC13369" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13370" class="blob-num js-line-number" data-line-number="13370"></td>
        <td id="LC13370" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">try</span> {</td>
      </tr>
      <tr>
        <td id="L13371" class="blob-num js-line-number" data-line-number="13371"></td>
        <td id="LC13371" class="blob-code blob-code-inner js-file-line">        std::map&lt;MetaMessage::MetaField::MetaFieldDataTypes, std::string&gt; typeToTypeStringMap = {</td>
      </tr>
      <tr>
        <td id="L13372" class="blob-num js-line-number" data-line-number="13372"></td>
        <td id="LC13372" class="blob-code blob-code-inner js-file-line">            {MetaMessage::MetaField::BOOL_T, <span class="pl-s"><span class="pl-pds">&quot;</span>bool<span class="pl-pds">&quot;</span></span>},</td>
      </tr>
      <tr>
        <td id="L13373" class="blob-num js-line-number" data-line-number="13373"></td>
        <td id="LC13373" class="blob-code blob-code-inner js-file-line">            {MetaMessage::MetaField::CHAR_T, <span class="pl-s"><span class="pl-pds">&quot;</span>char<span class="pl-pds">&quot;</span></span>},</td>
      </tr>
      <tr>
        <td id="L13374" class="blob-num js-line-number" data-line-number="13374"></td>
        <td id="LC13374" class="blob-code blob-code-inner js-file-line">            {MetaMessage::MetaField::UINT8_T, <span class="pl-s"><span class="pl-pds">&quot;</span>uint8_t<span class="pl-pds">&quot;</span></span>},</td>
      </tr>
      <tr>
        <td id="L13375" class="blob-num js-line-number" data-line-number="13375"></td>
        <td id="LC13375" class="blob-code blob-code-inner js-file-line">            {MetaMessage::MetaField::INT8_T, <span class="pl-s"><span class="pl-pds">&quot;</span>int8_t<span class="pl-pds">&quot;</span></span>},</td>
      </tr>
      <tr>
        <td id="L13376" class="blob-num js-line-number" data-line-number="13376"></td>
        <td id="LC13376" class="blob-code blob-code-inner js-file-line">            {MetaMessage::MetaField::UINT16_T, <span class="pl-s"><span class="pl-pds">&quot;</span>uint16_t<span class="pl-pds">&quot;</span></span>},</td>
      </tr>
      <tr>
        <td id="L13377" class="blob-num js-line-number" data-line-number="13377"></td>
        <td id="LC13377" class="blob-code blob-code-inner js-file-line">            {MetaMessage::MetaField::INT16_T, <span class="pl-s"><span class="pl-pds">&quot;</span>int16_t<span class="pl-pds">&quot;</span></span>},</td>
      </tr>
      <tr>
        <td id="L13378" class="blob-num js-line-number" data-line-number="13378"></td>
        <td id="LC13378" class="blob-code blob-code-inner js-file-line">            {MetaMessage::MetaField::UINT32_T, <span class="pl-s"><span class="pl-pds">&quot;</span>uint32_t<span class="pl-pds">&quot;</span></span>},</td>
      </tr>
      <tr>
        <td id="L13379" class="blob-num js-line-number" data-line-number="13379"></td>
        <td id="LC13379" class="blob-code blob-code-inner js-file-line">            {MetaMessage::MetaField::INT32_T, <span class="pl-s"><span class="pl-pds">&quot;</span>int32_t<span class="pl-pds">&quot;</span></span>},</td>
      </tr>
      <tr>
        <td id="L13380" class="blob-num js-line-number" data-line-number="13380"></td>
        <td id="LC13380" class="blob-code blob-code-inner js-file-line">            {MetaMessage::MetaField::UINT64_T, <span class="pl-s"><span class="pl-pds">&quot;</span>uint64_t<span class="pl-pds">&quot;</span></span>},</td>
      </tr>
      <tr>
        <td id="L13381" class="blob-num js-line-number" data-line-number="13381"></td>
        <td id="LC13381" class="blob-code blob-code-inner js-file-line">            {MetaMessage::MetaField::INT64_T, <span class="pl-s"><span class="pl-pds">&quot;</span>int64_t<span class="pl-pds">&quot;</span></span>},</td>
      </tr>
      <tr>
        <td id="L13382" class="blob-num js-line-number" data-line-number="13382"></td>
        <td id="LC13382" class="blob-code blob-code-inner js-file-line">            {MetaMessage::MetaField::FLOAT_T, <span class="pl-s"><span class="pl-pds">&quot;</span>float<span class="pl-pds">&quot;</span></span>},</td>
      </tr>
      <tr>
        <td id="L13383" class="blob-num js-line-number" data-line-number="13383"></td>
        <td id="LC13383" class="blob-code blob-code-inner js-file-line">            {MetaMessage::MetaField::DOUBLE_T, <span class="pl-s"><span class="pl-pds">&quot;</span>double<span class="pl-pds">&quot;</span></span>},</td>
      </tr>
      <tr>
        <td id="L13384" class="blob-num js-line-number" data-line-number="13384"></td>
        <td id="LC13384" class="blob-code blob-code-inner js-file-line">            {MetaMessage::MetaField::STRING_T, <span class="pl-s"><span class="pl-pds">&quot;</span>std::string<span class="pl-pds">&quot;</span></span>},</td>
      </tr>
      <tr>
        <td id="L13385" class="blob-num js-line-number" data-line-number="13385"></td>
        <td id="LC13385" class="blob-code blob-code-inner js-file-line">            {MetaMessage::MetaField::BYTES_T, <span class="pl-s"><span class="pl-pds">&quot;</span>std::string<span class="pl-pds">&quot;</span></span>},</td>
      </tr>
      <tr>
        <td id="L13386" class="blob-num js-line-number" data-line-number="13386"></td>
        <td id="LC13386" class="blob-code blob-code-inner js-file-line">        };</td>
      </tr>
      <tr>
        <td id="L13387" class="blob-num js-line-number" data-line-number="13387"></td>
        <td id="LC13387" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13388" class="blob-num js-line-number" data-line-number="13388"></td>
        <td id="LC13388" class="blob-code blob-code-inner js-file-line">        std::map&lt;MetaMessage::MetaField::MetaFieldDataTypes, std::string&gt; typeToDefaultInitizationValueMap = {</td>
      </tr>
      <tr>
        <td id="L13389" class="blob-num js-line-number" data-line-number="13389"></td>
        <td id="LC13389" class="blob-code blob-code-inner js-file-line">            {MetaMessage::MetaField::BOOL_T, <span class="pl-s"><span class="pl-pds">&quot;</span>false<span class="pl-pds">&quot;</span></span>},</td>
      </tr>
      <tr>
        <td id="L13390" class="blob-num js-line-number" data-line-number="13390"></td>
        <td id="LC13390" class="blob-code blob-code-inner js-file-line">            {MetaMessage::MetaField::CHAR_T, <span class="pl-s"><span class="pl-pds">&quot;</span>&#39;<span class="pl-cce">\\</span>0&#39;<span class="pl-pds">&quot;</span></span>},</td>
      </tr>
      <tr>
        <td id="L13391" class="blob-num js-line-number" data-line-number="13391"></td>
        <td id="LC13391" class="blob-code blob-code-inner js-file-line">            {MetaMessage::MetaField::UINT8_T, <span class="pl-s"><span class="pl-pds">&quot;</span>0<span class="pl-pds">&quot;</span></span>},</td>
      </tr>
      <tr>
        <td id="L13392" class="blob-num js-line-number" data-line-number="13392"></td>
        <td id="LC13392" class="blob-code blob-code-inner js-file-line">            {MetaMessage::MetaField::INT8_T, <span class="pl-s"><span class="pl-pds">&quot;</span>0<span class="pl-pds">&quot;</span></span>},</td>
      </tr>
      <tr>
        <td id="L13393" class="blob-num js-line-number" data-line-number="13393"></td>
        <td id="LC13393" class="blob-code blob-code-inner js-file-line">            {MetaMessage::MetaField::UINT16_T, <span class="pl-s"><span class="pl-pds">&quot;</span>0<span class="pl-pds">&quot;</span></span>},</td>
      </tr>
      <tr>
        <td id="L13394" class="blob-num js-line-number" data-line-number="13394"></td>
        <td id="LC13394" class="blob-code blob-code-inner js-file-line">            {MetaMessage::MetaField::INT16_T, <span class="pl-s"><span class="pl-pds">&quot;</span>0<span class="pl-pds">&quot;</span></span>},</td>
      </tr>
      <tr>
        <td id="L13395" class="blob-num js-line-number" data-line-number="13395"></td>
        <td id="LC13395" class="blob-code blob-code-inner js-file-line">            {MetaMessage::MetaField::UINT32_T, <span class="pl-s"><span class="pl-pds">&quot;</span>0<span class="pl-pds">&quot;</span></span>},</td>
      </tr>
      <tr>
        <td id="L13396" class="blob-num js-line-number" data-line-number="13396"></td>
        <td id="LC13396" class="blob-code blob-code-inner js-file-line">            {MetaMessage::MetaField::INT32_T, <span class="pl-s"><span class="pl-pds">&quot;</span>0<span class="pl-pds">&quot;</span></span>},</td>
      </tr>
      <tr>
        <td id="L13397" class="blob-num js-line-number" data-line-number="13397"></td>
        <td id="LC13397" class="blob-code blob-code-inner js-file-line">            {MetaMessage::MetaField::UINT64_T, <span class="pl-s"><span class="pl-pds">&quot;</span>0<span class="pl-pds">&quot;</span></span>},</td>
      </tr>
      <tr>
        <td id="L13398" class="blob-num js-line-number" data-line-number="13398"></td>
        <td id="LC13398" class="blob-code blob-code-inner js-file-line">            {MetaMessage::MetaField::INT64_T, <span class="pl-s"><span class="pl-pds">&quot;</span>0<span class="pl-pds">&quot;</span></span>},</td>
      </tr>
      <tr>
        <td id="L13399" class="blob-num js-line-number" data-line-number="13399"></td>
        <td id="LC13399" class="blob-code blob-code-inner js-file-line">            {MetaMessage::MetaField::FLOAT_T, <span class="pl-s"><span class="pl-pds">&quot;</span>0.0<span class="pl-pds">&quot;</span></span>},</td>
      </tr>
      <tr>
        <td id="L13400" class="blob-num js-line-number" data-line-number="13400"></td>
        <td id="LC13400" class="blob-code blob-code-inner js-file-line">            {MetaMessage::MetaField::DOUBLE_T, <span class="pl-s"><span class="pl-pds">&quot;</span>0.0<span class="pl-pds">&quot;</span></span>},</td>
      </tr>
      <tr>
        <td id="L13401" class="blob-num js-line-number" data-line-number="13401"></td>
        <td id="LC13401" class="blob-code blob-code-inner js-file-line">            {MetaMessage::MetaField::STRING_T, <span class="pl-s"><span class="pl-pds">R&quot;(</span>&quot;&quot;<span class="pl-pds">)&quot;</span></span>},</td>
      </tr>
      <tr>
        <td id="L13402" class="blob-num js-line-number" data-line-number="13402"></td>
        <td id="LC13402" class="blob-code blob-code-inner js-file-line">            {MetaMessage::MetaField::BYTES_T, <span class="pl-s"><span class="pl-pds">R&quot;(</span>&quot;&quot;<span class="pl-pds">)&quot;</span></span>},</td>
      </tr>
      <tr>
        <td id="L13403" class="blob-num js-line-number" data-line-number="13403"></td>
        <td id="LC13403" class="blob-code blob-code-inner js-file-line">        };</td>
      </tr>
      <tr>
        <td id="L13404" class="blob-num js-line-number" data-line-number="13404"></td>
        <td id="LC13404" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13405" class="blob-num js-line-number" data-line-number="13405"></td>
        <td id="LC13405" class="blob-code blob-code-inner js-file-line">        std::string namespacePrefix;</td>
      </tr>
      <tr>
        <td id="L13406" class="blob-num js-line-number" data-line-number="13406"></td>
        <td id="LC13406" class="blob-code blob-code-inner js-file-line">        std::string messageName{mm.<span class="pl-c1">messageName</span>()};</td>
      </tr>
      <tr>
        <td id="L13407" class="blob-num js-line-number" data-line-number="13407"></td>
        <td id="LC13407" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> <span class="pl-k">auto</span> pos = mm.<span class="pl-c1">messageName</span>().<span class="pl-c1">find_last_of</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>.<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L13408" class="blob-num js-line-number" data-line-number="13408"></td>
        <td id="LC13408" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (std::string::npos != pos) {</td>
      </tr>
      <tr>
        <td id="L13409" class="blob-num js-line-number" data-line-number="13409"></td>
        <td id="LC13409" class="blob-code blob-code-inner js-file-line">            namespacePrefix = mm.<span class="pl-c1">messageName</span>().<span class="pl-c1">substr</span>(<span class="pl-c1">0</span>, pos);</td>
      </tr>
      <tr>
        <td id="L13410" class="blob-num js-line-number" data-line-number="13410"></td>
        <td id="LC13410" class="blob-code blob-code-inner js-file-line">            messageName     = mm.<span class="pl-c1">messageName</span>().<span class="pl-c1">substr</span>(pos + <span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L13411" class="blob-num js-line-number" data-line-number="13411"></td>
        <td id="LC13411" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L13412" class="blob-num js-line-number" data-line-number="13412"></td>
        <td id="LC13412" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13413" class="blob-num js-line-number" data-line-number="13413"></td>
        <td id="LC13413" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> std::string completePackageName = mm.<span class="pl-c1">packageName</span>() + (!mm.<span class="pl-c1">packageName</span>().<span class="pl-c1">empty</span>() &amp;&amp; !namespacePrefix.<span class="pl-c1">empty</span>() ? <span class="pl-s"><span class="pl-pds">&quot;</span>.<span class="pl-pds">&quot;</span></span> : <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>) + namespacePrefix;</td>
      </tr>
      <tr>
        <td id="L13414" class="blob-num js-line-number" data-line-number="13414"></td>
        <td id="LC13414" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> std::string completePackageNameWithColonSeparators{<span class="pl-c1">std::regex_replace</span>(completePackageName, <span class="pl-c1">std::regex</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\\</span>.<span class="pl-pds">&quot;</span></span>), <span class="pl-s"><span class="pl-pds">&quot;</span>::<span class="pl-pds">&quot;</span></span>)}; <span class="pl-c"><span class="pl-c">//</span> NOLINT</span></td>
      </tr>
      <tr>
        <td id="L13415" class="blob-num js-line-number" data-line-number="13415"></td>
        <td id="LC13415" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> std::string namespaceHeader{<span class="pl-c1">std::regex_replace</span>(completePackageName, <span class="pl-c1">std::regex</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\\</span>.<span class="pl-pds">&quot;</span></span>), <span class="pl-s"><span class="pl-pds">&quot;</span> { namespace <span class="pl-pds">&quot;</span></span>)};             <span class="pl-c"><span class="pl-c">//</span> NOLINT</span></td>
      </tr>
      <tr>
        <td id="L13416" class="blob-num js-line-number" data-line-number="13416"></td>
        <td id="LC13416" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">const</span> std::string <span class="pl-smi">namespaceFooter</span>(</td>
      </tr>
      <tr>
        <td id="L13417" class="blob-num js-line-number" data-line-number="13417"></td>
        <td id="LC13417" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint32_t</span>&gt;(<span class="pl-c1">std::count</span>(<span class="pl-c1">std::begin</span>(namespaceHeader), <span class="pl-c1">std::end</span>(namespaceHeader), <span class="pl-s"><span class="pl-pds">&#39;</span>{<span class="pl-pds">&#39;</span></span>)) + (!namespaceHeader.<span class="pl-c1">empty</span>() ? <span class="pl-c1">1</span> : <span class="pl-c1">0</span>), <span class="pl-s"><span class="pl-pds">&#39;</span>}<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L13418" class="blob-num js-line-number" data-line-number="13418"></td>
        <td id="LC13418" class="blob-code blob-code-inner js-file-line">        std::string headerGuard{<span class="pl-c1">std::regex_replace</span>(completePackageName, <span class="pl-c1">std::regex</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\\</span>.<span class="pl-pds">&quot;</span></span>), <span class="pl-s"><span class="pl-pds">&quot;</span>_<span class="pl-pds">&quot;</span></span>)}; <span class="pl-c"><span class="pl-c">//</span> NOLINT</span></td>
      </tr>
      <tr>
        <td id="L13419" class="blob-num js-line-number" data-line-number="13419"></td>
        <td id="LC13419" class="blob-code blob-code-inner js-file-line">        headerGuard += (!headerGuard.<span class="pl-c1">empty</span>() ? +<span class="pl-s"><span class="pl-pds">&quot;</span>_<span class="pl-pds">&quot;</span></span> : <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>) + messageName;</td>
      </tr>
      <tr>
        <td id="L13420" class="blob-num js-line-number" data-line-number="13420"></td>
        <td id="LC13420" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">std::transform</span>(<span class="pl-c1">std::begin</span>(headerGuard), <span class="pl-c1">std::end</span>(headerGuard), <span class="pl-c1">std::begin</span>(headerGuard), [](<span class="pl-k">unsigned</span> <span class="pl-k">char</span> c) { <span class="pl-k">return</span> ::<span class="pl-c1">toupper</span>(c); });</td>
      </tr>
      <tr>
        <td id="L13421" class="blob-num js-line-number" data-line-number="13421"></td>
        <td id="LC13421" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13422" class="blob-num js-line-number" data-line-number="13422"></td>
        <td id="LC13422" class="blob-code blob-code-inner js-file-line">        dataToBeRendered.<span class="pl-c1">set</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>%HEADER_GUARD%<span class="pl-pds">&quot;</span></span>, headerGuard);</td>
      </tr>
      <tr>
        <td id="L13423" class="blob-num js-line-number" data-line-number="13423"></td>
        <td id="LC13423" class="blob-code blob-code-inner js-file-line">        dataToBeRendered.<span class="pl-c1">set</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>%NAMESPACE_OPENING%<span class="pl-pds">&quot;</span></span>, (!namespaceHeader.<span class="pl-c1">empty</span>() ? <span class="pl-s"><span class="pl-pds">&quot;</span>namespace <span class="pl-pds">&quot;</span></span> + namespaceHeader + <span class="pl-s"><span class="pl-pds">&quot;</span> {<span class="pl-pds">&quot;</span></span> : <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>));</td>
      </tr>
      <tr>
        <td id="L13424" class="blob-num js-line-number" data-line-number="13424"></td>
        <td id="LC13424" class="blob-code blob-code-inner js-file-line">        dataToBeRendered.<span class="pl-c1">set</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>%COMPLETEPACKAGENAME%<span class="pl-pds">&quot;</span></span>, completePackageName + (!completePackageName.<span class="pl-c1">empty</span>() ? <span class="pl-s"><span class="pl-pds">&quot;</span>.<span class="pl-pds">&quot;</span></span> : <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>));</td>
      </tr>
      <tr>
        <td id="L13425" class="blob-num js-line-number" data-line-number="13425"></td>
        <td id="LC13425" class="blob-code blob-code-inner js-file-line">        dataToBeRendered.<span class="pl-c1">set</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>%COMPLETEPACKAGENAME_WITH_COLON_SEPARATORS%<span class="pl-pds">&quot;</span></span>,</td>
      </tr>
      <tr>
        <td id="L13426" class="blob-num js-line-number" data-line-number="13426"></td>
        <td id="LC13426" class="blob-code blob-code-inner js-file-line">                             completePackageNameWithColonSeparators + (!completePackageNameWithColonSeparators.<span class="pl-c1">empty</span>() ? <span class="pl-s"><span class="pl-pds">&quot;</span>::<span class="pl-pds">&quot;</span></span> : <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>));</td>
      </tr>
      <tr>
        <td id="L13427" class="blob-num js-line-number" data-line-number="13427"></td>
        <td id="LC13427" class="blob-code blob-code-inner js-file-line">        dataToBeRendered.<span class="pl-c1">set</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>%MESSAGE%<span class="pl-pds">&quot;</span></span>, messageName);</td>
      </tr>
      <tr>
        <td id="L13428" class="blob-num js-line-number" data-line-number="13428"></td>
        <td id="LC13428" class="blob-code blob-code-inner js-file-line">        dataToBeRendered.<span class="pl-c1">set</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>%NAMESPACE_CLOSING%<span class="pl-pds">&quot;</span></span>, namespaceFooter);</td>
      </tr>
      <tr>
        <td id="L13429" class="blob-num js-line-number" data-line-number="13429"></td>
        <td id="LC13429" class="blob-code blob-code-inner js-file-line">        dataToBeRendered.<span class="pl-c1">set</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>%IDENTIFIER%<span class="pl-pds">&quot;</span></span>, <span class="pl-c1">std::to_string</span>(mm.<span class="pl-c1">messageIdentifier</span>()));</td>
      </tr>
      <tr>
        <td id="L13430" class="blob-num js-line-number" data-line-number="13430"></td>
        <td id="LC13430" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13431" class="blob-num js-line-number" data-line-number="13431"></td>
        <td id="LC13431" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">for</span> (<span class="pl-k">const</span> <span class="pl-k">auto</span> &amp;e : mm.<span class="pl-c1">listOfMetaFields</span>()) {</td>
      </tr>
      <tr>
        <td id="L13432" class="blob-num js-line-number" data-line-number="13432"></td>
        <td id="LC13432" class="blob-code blob-code-inner js-file-line">            std::string fieldName{<span class="pl-c1">std::regex_replace</span>(e.<span class="pl-c1">fieldName</span>(), <span class="pl-c1">std::regex</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\\</span>.<span class="pl-pds">&quot;</span></span>), <span class="pl-s"><span class="pl-pds">&quot;</span>_<span class="pl-pds">&quot;</span></span>)}; <span class="pl-c"><span class="pl-c">//</span> NOLINT</span></td>
      </tr>
      <tr>
        <td id="L13433" class="blob-num js-line-number" data-line-number="13433"></td>
        <td id="LC13433" class="blob-code blob-code-inner js-file-line">            kainjow::mustache::data fieldEntry;</td>
      </tr>
      <tr>
        <td id="L13434" class="blob-num js-line-number" data-line-number="13434"></td>
        <td id="LC13434" class="blob-code blob-code-inner js-file-line">            fieldEntry.<span class="pl-c1">set</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>%NAME%<span class="pl-pds">&quot;</span></span>, fieldName);</td>
      </tr>
      <tr>
        <td id="L13435" class="blob-num js-line-number" data-line-number="13435"></td>
        <td id="LC13435" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (MetaMessage::MetaField::MESSAGE_T != e.<span class="pl-c1">fieldDataType</span>()) {</td>
      </tr>
      <tr>
        <td id="L13436" class="blob-num js-line-number" data-line-number="13436"></td>
        <td id="LC13436" class="blob-code blob-code-inner js-file-line">                fieldEntry.<span class="pl-c1">set</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>%TYPE%<span class="pl-pds">&quot;</span></span>, typeToTypeStringMap[e.<span class="pl-c1">fieldDataType</span>()]);</td>
      </tr>
      <tr>
        <td id="L13437" class="blob-num js-line-number" data-line-number="13437"></td>
        <td id="LC13437" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13438" class="blob-num js-line-number" data-line-number="13438"></td>
        <td id="LC13438" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">const</span> std::string defaultInitializatioValue{</td>
      </tr>
      <tr>
        <td id="L13439" class="blob-num js-line-number" data-line-number="13439"></td>
        <td id="LC13439" class="blob-code blob-code-inner js-file-line">                    (e.<span class="pl-c1">defaultInitializationValue</span>().<span class="pl-c1">empty</span>() ? typeToDefaultInitizationValueMap[e.<span class="pl-c1">fieldDataType</span>()] : e.<span class="pl-c1">defaultInitializationValue</span>())};</td>
      </tr>
      <tr>
        <td id="L13440" class="blob-num js-line-number" data-line-number="13440"></td>
        <td id="LC13440" class="blob-code blob-code-inner js-file-line">                fieldEntry.<span class="pl-c1">set</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>%FIELD_DEFAULT_INITIALIZATION_VALUE%<span class="pl-pds">&quot;</span></span>, defaultInitializatioValue);</td>
      </tr>
      <tr>
        <td id="L13441" class="blob-num js-line-number" data-line-number="13441"></td>
        <td id="LC13441" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13442" class="blob-num js-line-number" data-line-number="13442"></td>
        <td id="LC13442" class="blob-code blob-code-inner js-file-line">                std::string initializerSuffix;</td>
      </tr>
      <tr>
        <td id="L13443" class="blob-num js-line-number" data-line-number="13443"></td>
        <td id="LC13443" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">if</span> (e.<span class="pl-c1">fieldDataType</span>() == MetaMessage::MetaField::FLOAT_T) {</td>
      </tr>
      <tr>
        <td id="L13444" class="blob-num js-line-number" data-line-number="13444"></td>
        <td id="LC13444" class="blob-code blob-code-inner js-file-line">                    initializerSuffix = <span class="pl-s"><span class="pl-pds">&quot;</span>f<span class="pl-pds">&quot;</span></span>; <span class="pl-c"><span class="pl-c">//</span> suffix for float types.</span></td>
      </tr>
      <tr>
        <td id="L13445" class="blob-num js-line-number" data-line-number="13445"></td>
        <td id="LC13445" class="blob-code blob-code-inner js-file-line">                } <span class="pl-k">else</span> <span class="pl-k">if</span> (e.<span class="pl-c1">fieldDataType</span>() == MetaMessage::MetaField::STRING_T || e.<span class="pl-c1">fieldDataType</span>() == MetaMessage::MetaField::BYTES_T) {</td>
      </tr>
      <tr>
        <td id="L13446" class="blob-num js-line-number" data-line-number="13446"></td>
        <td id="LC13446" class="blob-code blob-code-inner js-file-line">                    initializerSuffix = <span class="pl-s"><span class="pl-pds">&quot;</span>s<span class="pl-pds">&quot;</span></span>; <span class="pl-c"><span class="pl-c">//</span> suffix to enforce std::string initialization.</span></td>
      </tr>
      <tr>
        <td id="L13447" class="blob-num js-line-number" data-line-number="13447"></td>
        <td id="LC13447" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L13448" class="blob-num js-line-number" data-line-number="13448"></td>
        <td id="LC13448" class="blob-code blob-code-inner js-file-line">                fieldEntry.<span class="pl-c1">set</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>%INITIALIZER_SUFFIX%<span class="pl-pds">&quot;</span></span>, initializerSuffix);</td>
      </tr>
      <tr>
        <td id="L13449" class="blob-num js-line-number" data-line-number="13449"></td>
        <td id="LC13449" class="blob-code blob-code-inner js-file-line">            } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L13450" class="blob-num js-line-number" data-line-number="13450"></td>
        <td id="LC13450" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">const</span> std::string tmp{mm.<span class="pl-c1">packageName</span>() + (!mm.<span class="pl-c1">packageName</span>().<span class="pl-c1">empty</span>() ? <span class="pl-s"><span class="pl-pds">&quot;</span>.<span class="pl-pds">&quot;</span></span> : <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>) + e.<span class="pl-c1">fieldDataTypeName</span>()};</td>
      </tr>
      <tr>
        <td id="L13451" class="blob-num js-line-number" data-line-number="13451"></td>
        <td id="LC13451" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">const</span> std::string completeDataTypeNameWithDoubleColons{<span class="pl-c1">std::regex_replace</span>(tmp, <span class="pl-c1">std::regex</span>(<span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\\</span>.<span class="pl-pds">&quot;</span></span>), <span class="pl-s"><span class="pl-pds">&quot;</span>::<span class="pl-pds">&quot;</span></span>)}; <span class="pl-c"><span class="pl-c">//</span> NOLINT</span></td>
      </tr>
      <tr>
        <td id="L13452" class="blob-num js-line-number" data-line-number="13452"></td>
        <td id="LC13452" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13453" class="blob-num js-line-number" data-line-number="13453"></td>
        <td id="LC13453" class="blob-code blob-code-inner js-file-line">                fieldEntry.<span class="pl-c1">set</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>%TYPE%<span class="pl-pds">&quot;</span></span>, completeDataTypeNameWithDoubleColons);</td>
      </tr>
      <tr>
        <td id="L13454" class="blob-num js-line-number" data-line-number="13454"></td>
        <td id="LC13454" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L13455" class="blob-num js-line-number" data-line-number="13455"></td>
        <td id="LC13455" class="blob-code blob-code-inner js-file-line">            fieldEntry.<span class="pl-c1">set</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>%FIELDIDENTIFIER%<span class="pl-pds">&quot;</span></span>, <span class="pl-c1">std::to_string</span>(e.<span class="pl-c1">fieldIdentifier</span>()));</td>
      </tr>
      <tr>
        <td id="L13456" class="blob-num js-line-number" data-line-number="13456"></td>
        <td id="LC13456" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13457" class="blob-num js-line-number" data-line-number="13457"></td>
        <td id="LC13457" class="blob-code blob-code-inner js-file-line">            fields.<span class="pl-c1">push_back</span>(fieldEntry);</td>
      </tr>
      <tr>
        <td id="L13458" class="blob-num js-line-number" data-line-number="13458"></td>
        <td id="LC13458" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L13459" class="blob-num js-line-number" data-line-number="13459"></td>
        <td id="LC13459" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">catch</span> (std::regex_error &amp;) { <span class="pl-c"><span class="pl-c">//</span> LCOV_EXCL_LINE</span></td>
      </tr>
      <tr>
        <td id="L13460" class="blob-num js-line-number" data-line-number="13460"></td>
        <td id="LC13460" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L13461" class="blob-num js-line-number" data-line-number="13461"></td>
        <td id="LC13461" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13462" class="blob-num js-line-number" data-line-number="13462"></td>
        <td id="LC13462" class="blob-code blob-code-inner js-file-line">    m_dataToBeRendered = <span class="pl-c1">std::move</span>(dataToBeRendered);</td>
      </tr>
      <tr>
        <td id="L13463" class="blob-num js-line-number" data-line-number="13463"></td>
        <td id="LC13463" class="blob-code blob-code-inner js-file-line">    m_fields           = <span class="pl-c1">std::move</span>(fields);</td>
      </tr>
      <tr>
        <td id="L13464" class="blob-num js-line-number" data-line-number="13464"></td>
        <td id="LC13464" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L13465" class="blob-num js-line-number" data-line-number="13465"></td>
        <td id="LC13465" class="blob-code blob-code-inner js-file-line">} <span class="pl-c"><span class="pl-c">//</span> namespace cluon</span></td>
      </tr>
      <tr>
        <td id="L13466" class="blob-num js-line-number" data-line-number="13466"></td>
        <td id="LC13466" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L13467" class="blob-num js-line-number" data-line-number="13467"></td>
        <td id="LC13467" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Copyright (C) 2017-2018  Christian Berger</span></td>
      </tr>
      <tr>
        <td id="L13468" class="blob-num js-line-number" data-line-number="13468"></td>
        <td id="LC13468" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L13469" class="blob-num js-line-number" data-line-number="13469"></td>
        <td id="LC13469" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is free software: you can redistribute it and/or modify</span></td>
      </tr>
      <tr>
        <td id="L13470" class="blob-num js-line-number" data-line-number="13470"></td>
        <td id="LC13470" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * it under the terms of the GNU General Public License as published by</span></td>
      </tr>
      <tr>
        <td id="L13471" class="blob-num js-line-number" data-line-number="13471"></td>
        <td id="LC13471" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * the Free Software Foundation, either version 3 of the License, or</span></td>
      </tr>
      <tr>
        <td id="L13472" class="blob-num js-line-number" data-line-number="13472"></td>
        <td id="LC13472" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * (at your option) any later version.</span></td>
      </tr>
      <tr>
        <td id="L13473" class="blob-num js-line-number" data-line-number="13473"></td>
        <td id="LC13473" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L13474" class="blob-num js-line-number" data-line-number="13474"></td>
        <td id="LC13474" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is distributed in the hope that it will be useful,</span></td>
      </tr>
      <tr>
        <td id="L13475" class="blob-num js-line-number" data-line-number="13475"></td>
        <td id="LC13475" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></td>
      </tr>
      <tr>
        <td id="L13476" class="blob-num js-line-number" data-line-number="13476"></td>
        <td id="LC13476" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></td>
      </tr>
      <tr>
        <td id="L13477" class="blob-num js-line-number" data-line-number="13477"></td>
        <td id="LC13477" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * GNU General Public License for more details.</span></td>
      </tr>
      <tr>
        <td id="L13478" class="blob-num js-line-number" data-line-number="13478"></td>
        <td id="LC13478" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L13479" class="blob-num js-line-number" data-line-number="13479"></td>
        <td id="LC13479" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * You should have received a copy of the GNU General Public License</span></td>
      </tr>
      <tr>
        <td id="L13480" class="blob-num js-line-number" data-line-number="13480"></td>
        <td id="LC13480" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></td>
      </tr>
      <tr>
        <td id="L13481" class="blob-num js-line-number" data-line-number="13481"></td>
        <td id="LC13481" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L13482" class="blob-num js-line-number" data-line-number="13482"></td>
        <td id="LC13482" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13483" class="blob-num js-line-number" data-line-number="13483"></td>
        <td id="LC13483" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/MetaMessageToProtoTransformator.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L13484" class="blob-num js-line-number" data-line-number="13484"></td>
        <td id="LC13484" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/MetaMessage.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L13485" class="blob-num js-line-number" data-line-number="13485"></td>
        <td id="LC13485" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13486" class="blob-num js-line-number" data-line-number="13486"></td>
        <td id="LC13486" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>algorithm<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L13487" class="blob-num js-line-number" data-line-number="13487"></td>
        <td id="LC13487" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>map<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L13488" class="blob-num js-line-number" data-line-number="13488"></td>
        <td id="LC13488" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>regex<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L13489" class="blob-num js-line-number" data-line-number="13489"></td>
        <td id="LC13489" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>sstream<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L13490" class="blob-num js-line-number" data-line-number="13490"></td>
        <td id="LC13490" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13491" class="blob-num js-line-number" data-line-number="13491"></td>
        <td id="LC13491" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;Mustache/mustache.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L13492" class="blob-num js-line-number" data-line-number="13492"></td>
        <td id="LC13492" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13493" class="blob-num js-line-number" data-line-number="13493"></td>
        <td id="LC13493" class="blob-code blob-code-inner js-file-line"><span class="pl-k">namespace</span> <span class="pl-en">cluon</span> {</td>
      </tr>
      <tr>
        <td id="L13494" class="blob-num js-line-number" data-line-number="13494"></td>
        <td id="LC13494" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13495" class="blob-num js-line-number" data-line-number="13495"></td>
        <td id="LC13495" class="blob-code blob-code-inner js-file-line"><span class="pl-k">const</span> <span class="pl-k">char</span> *proto2FileTemplate = <span class="pl-s"><span class="pl-pds">R&quot;(</span></span></td>
      </tr>
      <tr>
        <td id="L13496" class="blob-num js-line-number" data-line-number="13496"></td>
        <td id="LC13496" class="blob-code blob-code-inner js-file-line"><span class="pl-s">//</span></td>
      </tr>
      <tr>
        <td id="L13497" class="blob-num js-line-number" data-line-number="13497"></td>
        <td id="LC13497" class="blob-code blob-code-inner js-file-line"><span class="pl-s">// THIS IS AN AUTO-GENERATED FILE. DO NOT MODIFY AS CHANGES MIGHT BE OVERWRITTEN!</span></td>
      </tr>
      <tr>
        <td id="L13498" class="blob-num js-line-number" data-line-number="13498"></td>
        <td id="LC13498" class="blob-code blob-code-inner js-file-line"><span class="pl-s">//</span></td>
      </tr>
      <tr>
        <td id="L13499" class="blob-num js-line-number" data-line-number="13499"></td>
        <td id="LC13499" class="blob-code blob-code-inner js-file-line"><span class="pl-s"></span></td>
      </tr>
      <tr>
        <td id="L13500" class="blob-num js-line-number" data-line-number="13500"></td>
        <td id="LC13500" class="blob-code blob-code-inner js-file-line"><span class="pl-s">{{%PROTO2_HEADER%}}</span></td>
      </tr>
      <tr>
        <td id="L13501" class="blob-num js-line-number" data-line-number="13501"></td>
        <td id="LC13501" class="blob-code blob-code-inner js-file-line"><span class="pl-s"></span></td>
      </tr>
      <tr>
        <td id="L13502" class="blob-num js-line-number" data-line-number="13502"></td>
        <td id="LC13502" class="blob-code blob-code-inner js-file-line"><span class="pl-s">// Message identifier: {{%MESSAGE_IDENTIFIER%}}.</span></td>
      </tr>
      <tr>
        <td id="L13503" class="blob-num js-line-number" data-line-number="13503"></td>
        <td id="LC13503" class="blob-code blob-code-inner js-file-line"><span class="pl-s">message {{%MESSAGE%}} {</span></td>
      </tr>
      <tr>
        <td id="L13504" class="blob-num js-line-number" data-line-number="13504"></td>
        <td id="LC13504" class="blob-code blob-code-inner js-file-line"><span class="pl-s">    {{#%FIELDS%}}</span></td>
      </tr>
      <tr>
        <td id="L13505" class="blob-num js-line-number" data-line-number="13505"></td>
        <td id="LC13505" class="blob-code blob-code-inner js-file-line"><span class="pl-s">    optional {{%TYPE%}} {{%NAME%}} = {{%FIELD_IDENTIFIER%}};</span></td>
      </tr>
      <tr>
        <td id="L13506" class="blob-num js-line-number" data-line-number="13506"></td>
        <td id="LC13506" class="blob-code blob-code-inner js-file-line"><span class="pl-s">    {{/%FIELDS%}}</span></td>
      </tr>
      <tr>
        <td id="L13507" class="blob-num js-line-number" data-line-number="13507"></td>
        <td id="LC13507" class="blob-code blob-code-inner js-file-line"><span class="pl-s">}</span></td>
      </tr>
      <tr>
        <td id="L13508" class="blob-num js-line-number" data-line-number="13508"></td>
        <td id="LC13508" class="blob-code blob-code-inner js-file-line"><span class="pl-s"><span class="pl-pds">)&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L13509" class="blob-num js-line-number" data-line-number="13509"></td>
        <td id="LC13509" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13510" class="blob-num js-line-number" data-line-number="13510"></td>
        <td id="LC13510" class="blob-code blob-code-inner js-file-line">std::string <span class="pl-en">MetaMessageToProtoTransformator::content</span>(<span class="pl-k">bool</span> withProtoHeader) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L13511" class="blob-num js-line-number" data-line-number="13511"></td>
        <td id="LC13511" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (withProtoHeader) {</td>
      </tr>
      <tr>
        <td id="L13512" class="blob-num js-line-number" data-line-number="13512"></td>
        <td id="LC13512" class="blob-code blob-code-inner js-file-line">        m_dataToBeRendered.<span class="pl-c1">set</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>%PROTO2_HEADER%<span class="pl-pds">&quot;</span></span>, <span class="pl-s"><span class="pl-pds">R&quot;(</span></span></td>
      </tr>
      <tr>
        <td id="L13513" class="blob-num js-line-number" data-line-number="13513"></td>
        <td id="LC13513" class="blob-code blob-code-inner js-file-line"><span class="pl-s">// This line is only needed when using Google Protobuf 3.</span></td>
      </tr>
      <tr>
        <td id="L13514" class="blob-num js-line-number" data-line-number="13514"></td>
        <td id="LC13514" class="blob-code blob-code-inner js-file-line"><span class="pl-s">syntax = &quot;proto2&quot;;</span></td>
      </tr>
      <tr>
        <td id="L13515" class="blob-num js-line-number" data-line-number="13515"></td>
        <td id="LC13515" class="blob-code blob-code-inner js-file-line"><span class="pl-s"><span class="pl-pds">)&quot;</span></span>);</td>
      </tr>
      <tr>
        <td id="L13516" class="blob-num js-line-number" data-line-number="13516"></td>
        <td id="LC13516" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L13517" class="blob-num js-line-number" data-line-number="13517"></td>
        <td id="LC13517" class="blob-code blob-code-inner js-file-line">    m_dataToBeRendered.<span class="pl-c1">set</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>%FIELDS%<span class="pl-pds">&quot;</span></span>, m_fields);</td>
      </tr>
      <tr>
        <td id="L13518" class="blob-num js-line-number" data-line-number="13518"></td>
        <td id="LC13518" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13519" class="blob-num js-line-number" data-line-number="13519"></td>
        <td id="LC13519" class="blob-code blob-code-inner js-file-line">    kainjow::mustache::mustache tmpl{proto2FileTemplate};</td>
      </tr>
      <tr>
        <td id="L13520" class="blob-num js-line-number" data-line-number="13520"></td>
        <td id="LC13520" class="blob-code blob-code-inner js-file-line">    <span class="pl-c"><span class="pl-c">//</span> Reset Mustache&#39;s default string-escaper.</span></td>
      </tr>
      <tr>
        <td id="L13521" class="blob-num js-line-number" data-line-number="13521"></td>
        <td id="LC13521" class="blob-code blob-code-inner js-file-line">    tmpl.<span class="pl-c1">set_custom_escape</span>([](<span class="pl-k">const</span> std::string &amp;s) { <span class="pl-k">return</span> s; });</td>
      </tr>
      <tr>
        <td id="L13522" class="blob-num js-line-number" data-line-number="13522"></td>
        <td id="LC13522" class="blob-code blob-code-inner js-file-line">    std::stringstream sstr;</td>
      </tr>
      <tr>
        <td id="L13523" class="blob-num js-line-number" data-line-number="13523"></td>
        <td id="LC13523" class="blob-code blob-code-inner js-file-line">    sstr &lt;&lt; tmpl.<span class="pl-c1">render</span>(m_dataToBeRendered);</td>
      </tr>
      <tr>
        <td id="L13524" class="blob-num js-line-number" data-line-number="13524"></td>
        <td id="LC13524" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> std::string <span class="pl-smi">str</span>(sstr.<span class="pl-c1">str</span>());</td>
      </tr>
      <tr>
        <td id="L13525" class="blob-num js-line-number" data-line-number="13525"></td>
        <td id="LC13525" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> str;</td>
      </tr>
      <tr>
        <td id="L13526" class="blob-num js-line-number" data-line-number="13526"></td>
        <td id="LC13526" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L13527" class="blob-num js-line-number" data-line-number="13527"></td>
        <td id="LC13527" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13528" class="blob-num js-line-number" data-line-number="13528"></td>
        <td id="LC13528" class="blob-code blob-code-inner js-file-line"><span class="pl-k">void</span> <span class="pl-en">MetaMessageToProtoTransformator::visit</span>(<span class="pl-k">const</span> MetaMessage &amp;mm) <span class="pl-k">noexcept</span> {</td>
      </tr>
      <tr>
        <td id="L13529" class="blob-num js-line-number" data-line-number="13529"></td>
        <td id="LC13529" class="blob-code blob-code-inner js-file-line">    kainjow::mustache::data dataToBeRendered;</td>
      </tr>
      <tr>
        <td id="L13530" class="blob-num js-line-number" data-line-number="13530"></td>
        <td id="LC13530" class="blob-code blob-code-inner js-file-line">    kainjow::mustache::data fields{kainjow::mustache::data::type::list};</td>
      </tr>
      <tr>
        <td id="L13531" class="blob-num js-line-number" data-line-number="13531"></td>
        <td id="LC13531" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13532" class="blob-num js-line-number" data-line-number="13532"></td>
        <td id="LC13532" class="blob-code blob-code-inner js-file-line">    std::map&lt;MetaMessage::MetaField::MetaFieldDataTypes, std::string&gt; typeToTypeStringMap = {</td>
      </tr>
      <tr>
        <td id="L13533" class="blob-num js-line-number" data-line-number="13533"></td>
        <td id="LC13533" class="blob-code blob-code-inner js-file-line">        {MetaMessage::MetaField::BOOL_T, <span class="pl-s"><span class="pl-pds">&quot;</span>bool<span class="pl-pds">&quot;</span></span>},</td>
      </tr>
      <tr>
        <td id="L13534" class="blob-num js-line-number" data-line-number="13534"></td>
        <td id="LC13534" class="blob-code blob-code-inner js-file-line">        {MetaMessage::MetaField::CHAR_T, <span class="pl-s"><span class="pl-pds">&quot;</span>sint32<span class="pl-pds">&quot;</span></span>},</td>
      </tr>
      <tr>
        <td id="L13535" class="blob-num js-line-number" data-line-number="13535"></td>
        <td id="LC13535" class="blob-code blob-code-inner js-file-line">        {MetaMessage::MetaField::UINT8_T, <span class="pl-s"><span class="pl-pds">&quot;</span>uint32<span class="pl-pds">&quot;</span></span>},</td>
      </tr>
      <tr>
        <td id="L13536" class="blob-num js-line-number" data-line-number="13536"></td>
        <td id="LC13536" class="blob-code blob-code-inner js-file-line">        {MetaMessage::MetaField::INT8_T, <span class="pl-s"><span class="pl-pds">&quot;</span>sint32<span class="pl-pds">&quot;</span></span>},</td>
      </tr>
      <tr>
        <td id="L13537" class="blob-num js-line-number" data-line-number="13537"></td>
        <td id="LC13537" class="blob-code blob-code-inner js-file-line">        {MetaMessage::MetaField::UINT16_T, <span class="pl-s"><span class="pl-pds">&quot;</span>uint32<span class="pl-pds">&quot;</span></span>},</td>
      </tr>
      <tr>
        <td id="L13538" class="blob-num js-line-number" data-line-number="13538"></td>
        <td id="LC13538" class="blob-code blob-code-inner js-file-line">        {MetaMessage::MetaField::INT16_T, <span class="pl-s"><span class="pl-pds">&quot;</span>sint32<span class="pl-pds">&quot;</span></span>},</td>
      </tr>
      <tr>
        <td id="L13539" class="blob-num js-line-number" data-line-number="13539"></td>
        <td id="LC13539" class="blob-code blob-code-inner js-file-line">        {MetaMessage::MetaField::UINT32_T, <span class="pl-s"><span class="pl-pds">&quot;</span>uint32<span class="pl-pds">&quot;</span></span>},</td>
      </tr>
      <tr>
        <td id="L13540" class="blob-num js-line-number" data-line-number="13540"></td>
        <td id="LC13540" class="blob-code blob-code-inner js-file-line">        {MetaMessage::MetaField::INT32_T, <span class="pl-s"><span class="pl-pds">&quot;</span>sint32<span class="pl-pds">&quot;</span></span>},</td>
      </tr>
      <tr>
        <td id="L13541" class="blob-num js-line-number" data-line-number="13541"></td>
        <td id="LC13541" class="blob-code blob-code-inner js-file-line">        {MetaMessage::MetaField::UINT64_T, <span class="pl-s"><span class="pl-pds">&quot;</span>uint64<span class="pl-pds">&quot;</span></span>},</td>
      </tr>
      <tr>
        <td id="L13542" class="blob-num js-line-number" data-line-number="13542"></td>
        <td id="LC13542" class="blob-code blob-code-inner js-file-line">        {MetaMessage::MetaField::INT64_T, <span class="pl-s"><span class="pl-pds">&quot;</span>sint64<span class="pl-pds">&quot;</span></span>},</td>
      </tr>
      <tr>
        <td id="L13543" class="blob-num js-line-number" data-line-number="13543"></td>
        <td id="LC13543" class="blob-code blob-code-inner js-file-line">        {MetaMessage::MetaField::FLOAT_T, <span class="pl-s"><span class="pl-pds">&quot;</span>float<span class="pl-pds">&quot;</span></span>},</td>
      </tr>
      <tr>
        <td id="L13544" class="blob-num js-line-number" data-line-number="13544"></td>
        <td id="LC13544" class="blob-code blob-code-inner js-file-line">        {MetaMessage::MetaField::DOUBLE_T, <span class="pl-s"><span class="pl-pds">&quot;</span>double<span class="pl-pds">&quot;</span></span>},</td>
      </tr>
      <tr>
        <td id="L13545" class="blob-num js-line-number" data-line-number="13545"></td>
        <td id="LC13545" class="blob-code blob-code-inner js-file-line">        {MetaMessage::MetaField::STRING_T, <span class="pl-s"><span class="pl-pds">&quot;</span>string<span class="pl-pds">&quot;</span></span>},</td>
      </tr>
      <tr>
        <td id="L13546" class="blob-num js-line-number" data-line-number="13546"></td>
        <td id="LC13546" class="blob-code blob-code-inner js-file-line">        {MetaMessage::MetaField::BYTES_T, <span class="pl-s"><span class="pl-pds">&quot;</span>bytes<span class="pl-pds">&quot;</span></span>},</td>
      </tr>
      <tr>
        <td id="L13547" class="blob-num js-line-number" data-line-number="13547"></td>
        <td id="LC13547" class="blob-code blob-code-inner js-file-line">    };</td>
      </tr>
      <tr>
        <td id="L13548" class="blob-num js-line-number" data-line-number="13548"></td>
        <td id="LC13548" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13549" class="blob-num js-line-number" data-line-number="13549"></td>
        <td id="LC13549" class="blob-code blob-code-inner js-file-line">    std::string namespacePrefix;</td>
      </tr>
      <tr>
        <td id="L13550" class="blob-num js-line-number" data-line-number="13550"></td>
        <td id="LC13550" class="blob-code blob-code-inner js-file-line">    std::string messageName{mm.<span class="pl-c1">messageName</span>()};</td>
      </tr>
      <tr>
        <td id="L13551" class="blob-num js-line-number" data-line-number="13551"></td>
        <td id="LC13551" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> <span class="pl-k">auto</span> pos = mm.<span class="pl-c1">messageName</span>().<span class="pl-c1">find_last_of</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>.<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L13552" class="blob-num js-line-number" data-line-number="13552"></td>
        <td id="LC13552" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (std::string::npos != pos) {</td>
      </tr>
      <tr>
        <td id="L13553" class="blob-num js-line-number" data-line-number="13553"></td>
        <td id="LC13553" class="blob-code blob-code-inner js-file-line">        namespacePrefix = mm.<span class="pl-c1">messageName</span>().<span class="pl-c1">substr</span>(<span class="pl-c1">0</span>, pos);</td>
      </tr>
      <tr>
        <td id="L13554" class="blob-num js-line-number" data-line-number="13554"></td>
        <td id="LC13554" class="blob-code blob-code-inner js-file-line">        messageName     = mm.<span class="pl-c1">messageName</span>().<span class="pl-c1">substr</span>(pos + <span class="pl-c1">1</span>);</td>
      </tr>
      <tr>
        <td id="L13555" class="blob-num js-line-number" data-line-number="13555"></td>
        <td id="LC13555" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L13556" class="blob-num js-line-number" data-line-number="13556"></td>
        <td id="LC13556" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13557" class="blob-num js-line-number" data-line-number="13557"></td>
        <td id="LC13557" class="blob-code blob-code-inner js-file-line">    std::string packageNameWithUnderscores{mm.<span class="pl-c1">packageName</span>()};</td>
      </tr>
      <tr>
        <td id="L13558" class="blob-num js-line-number" data-line-number="13558"></td>
        <td id="LC13558" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">std::replace</span>(packageNameWithUnderscores.<span class="pl-c1">begin</span>(), packageNameWithUnderscores.<span class="pl-c1">end</span>(), <span class="pl-s"><span class="pl-pds">&#39;</span>.<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>_<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L13559" class="blob-num js-line-number" data-line-number="13559"></td>
        <td id="LC13559" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> std::string completePackageNameWithNamespacePrefix</td>
      </tr>
      <tr>
        <td id="L13560" class="blob-num js-line-number" data-line-number="13560"></td>
        <td id="LC13560" class="blob-code blob-code-inner js-file-line">        = packageNameWithUnderscores + (!packageNameWithUnderscores.<span class="pl-c1">empty</span>() &amp;&amp; !namespacePrefix.<span class="pl-c1">empty</span>() ? <span class="pl-s"><span class="pl-pds">&quot;</span>.<span class="pl-pds">&quot;</span></span> : <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>) + namespacePrefix;</td>
      </tr>
      <tr>
        <td id="L13561" class="blob-num js-line-number" data-line-number="13561"></td>
        <td id="LC13561" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13562" class="blob-num js-line-number" data-line-number="13562"></td>
        <td id="LC13562" class="blob-code blob-code-inner js-file-line">    std::string completePackageNameWithNamespacePrefixWithUnderscores{completePackageNameWithNamespacePrefix};</td>
      </tr>
      <tr>
        <td id="L13563" class="blob-num js-line-number" data-line-number="13563"></td>
        <td id="LC13563" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">std::replace</span>(completePackageNameWithNamespacePrefixWithUnderscores.<span class="pl-c1">begin</span>(), completePackageNameWithNamespacePrefixWithUnderscores.<span class="pl-c1">end</span>(), <span class="pl-s"><span class="pl-pds">&#39;</span>.<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>_<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L13564" class="blob-num js-line-number" data-line-number="13564"></td>
        <td id="LC13564" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> std::string completeMessageNameWithUnderscores</td>
      </tr>
      <tr>
        <td id="L13565" class="blob-num js-line-number" data-line-number="13565"></td>
        <td id="LC13565" class="blob-code blob-code-inner js-file-line">        = completePackageNameWithNamespacePrefixWithUnderscores + (!completePackageNameWithNamespacePrefixWithUnderscores.<span class="pl-c1">empty</span>() ? +<span class="pl-s"><span class="pl-pds">&quot;</span>_<span class="pl-pds">&quot;</span></span> : <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>) + messageName;</td>
      </tr>
      <tr>
        <td id="L13566" class="blob-num js-line-number" data-line-number="13566"></td>
        <td id="LC13566" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13567" class="blob-num js-line-number" data-line-number="13567"></td>
        <td id="LC13567" class="blob-code blob-code-inner js-file-line">    dataToBeRendered.<span class="pl-c1">set</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>%MESSAGE_IDENTIFIER%<span class="pl-pds">&quot;</span></span>, <span class="pl-c1">std::to_string</span>(mm.<span class="pl-c1">messageIdentifier</span>()));</td>
      </tr>
      <tr>
        <td id="L13568" class="blob-num js-line-number" data-line-number="13568"></td>
        <td id="LC13568" class="blob-code blob-code-inner js-file-line">    dataToBeRendered.<span class="pl-c1">set</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>%MESSAGE%<span class="pl-pds">&quot;</span></span>, completeMessageNameWithUnderscores);</td>
      </tr>
      <tr>
        <td id="L13569" class="blob-num js-line-number" data-line-number="13569"></td>
        <td id="LC13569" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13570" class="blob-num js-line-number" data-line-number="13570"></td>
        <td id="LC13570" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">for</span> (<span class="pl-k">const</span> <span class="pl-k">auto</span> &amp;f : mm.<span class="pl-c1">listOfMetaFields</span>()) {</td>
      </tr>
      <tr>
        <td id="L13571" class="blob-num js-line-number" data-line-number="13571"></td>
        <td id="LC13571" class="blob-code blob-code-inner js-file-line">        std::string fieldName{f.<span class="pl-c1">fieldName</span>()};</td>
      </tr>
      <tr>
        <td id="L13572" class="blob-num js-line-number" data-line-number="13572"></td>
        <td id="LC13572" class="blob-code blob-code-inner js-file-line">        <span class="pl-c1">std::replace</span>(fieldName.<span class="pl-c1">begin</span>(), fieldName.<span class="pl-c1">end</span>(), <span class="pl-s"><span class="pl-pds">&#39;</span>.<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>_<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L13573" class="blob-num js-line-number" data-line-number="13573"></td>
        <td id="LC13573" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13574" class="blob-num js-line-number" data-line-number="13574"></td>
        <td id="LC13574" class="blob-code blob-code-inner js-file-line">        kainjow::mustache::data fieldEntry;</td>
      </tr>
      <tr>
        <td id="L13575" class="blob-num js-line-number" data-line-number="13575"></td>
        <td id="LC13575" class="blob-code blob-code-inner js-file-line">        fieldEntry.<span class="pl-c1">set</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>%NAME%<span class="pl-pds">&quot;</span></span>, fieldName);</td>
      </tr>
      <tr>
        <td id="L13576" class="blob-num js-line-number" data-line-number="13576"></td>
        <td id="LC13576" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (MetaMessage::MetaField::MESSAGE_T != f.<span class="pl-c1">fieldDataType</span>()) {</td>
      </tr>
      <tr>
        <td id="L13577" class="blob-num js-line-number" data-line-number="13577"></td>
        <td id="LC13577" class="blob-code blob-code-inner js-file-line">            fieldEntry.<span class="pl-c1">set</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>%TYPE%<span class="pl-pds">&quot;</span></span>, typeToTypeStringMap[f.<span class="pl-c1">fieldDataType</span>()]);</td>
      </tr>
      <tr>
        <td id="L13578" class="blob-num js-line-number" data-line-number="13578"></td>
        <td id="LC13578" class="blob-code blob-code-inner js-file-line">        } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L13579" class="blob-num js-line-number" data-line-number="13579"></td>
        <td id="LC13579" class="blob-code blob-code-inner js-file-line">            std::string dataTypeNameWithUnderscores{f.<span class="pl-c1">fieldDataTypeName</span>()};</td>
      </tr>
      <tr>
        <td id="L13580" class="blob-num js-line-number" data-line-number="13580"></td>
        <td id="LC13580" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">std::replace</span>(dataTypeNameWithUnderscores.<span class="pl-c1">begin</span>(), dataTypeNameWithUnderscores.<span class="pl-c1">end</span>(), <span class="pl-s"><span class="pl-pds">&#39;</span>.<span class="pl-pds">&#39;</span></span>, <span class="pl-s"><span class="pl-pds">&#39;</span>_<span class="pl-pds">&#39;</span></span>);</td>
      </tr>
      <tr>
        <td id="L13581" class="blob-num js-line-number" data-line-number="13581"></td>
        <td id="LC13581" class="blob-code blob-code-inner js-file-line">            std::string tmp{packageNameWithUnderscores + (!packageNameWithUnderscores.<span class="pl-c1">empty</span>() ? <span class="pl-s"><span class="pl-pds">&quot;</span>_<span class="pl-pds">&quot;</span></span> : <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-pds">&quot;</span></span>)};</td>
      </tr>
      <tr>
        <td id="L13582" class="blob-num js-line-number" data-line-number="13582"></td>
        <td id="LC13582" class="blob-code blob-code-inner js-file-line">            tmp += dataTypeNameWithUnderscores;</td>
      </tr>
      <tr>
        <td id="L13583" class="blob-num js-line-number" data-line-number="13583"></td>
        <td id="LC13583" class="blob-code blob-code-inner js-file-line">            fieldEntry.<span class="pl-c1">set</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>%TYPE%<span class="pl-pds">&quot;</span></span>, tmp);</td>
      </tr>
      <tr>
        <td id="L13584" class="blob-num js-line-number" data-line-number="13584"></td>
        <td id="LC13584" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L13585" class="blob-num js-line-number" data-line-number="13585"></td>
        <td id="LC13585" class="blob-code blob-code-inner js-file-line">        fieldEntry.<span class="pl-c1">set</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>%FIELD_IDENTIFIER%<span class="pl-pds">&quot;</span></span>, <span class="pl-c1">std::to_string</span>(f.<span class="pl-c1">fieldIdentifier</span>()));</td>
      </tr>
      <tr>
        <td id="L13586" class="blob-num js-line-number" data-line-number="13586"></td>
        <td id="LC13586" class="blob-code blob-code-inner js-file-line">        fields.<span class="pl-c1">push_back</span>(fieldEntry);</td>
      </tr>
      <tr>
        <td id="L13587" class="blob-num js-line-number" data-line-number="13587"></td>
        <td id="LC13587" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L13588" class="blob-num js-line-number" data-line-number="13588"></td>
        <td id="LC13588" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13589" class="blob-num js-line-number" data-line-number="13589"></td>
        <td id="LC13589" class="blob-code blob-code-inner js-file-line">    m_dataToBeRendered = <span class="pl-c1">std::move</span>(dataToBeRendered);</td>
      </tr>
      <tr>
        <td id="L13590" class="blob-num js-line-number" data-line-number="13590"></td>
        <td id="LC13590" class="blob-code blob-code-inner js-file-line">    m_fields           = <span class="pl-c1">std::move</span>(fields);</td>
      </tr>
      <tr>
        <td id="L13591" class="blob-num js-line-number" data-line-number="13591"></td>
        <td id="LC13591" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L13592" class="blob-num js-line-number" data-line-number="13592"></td>
        <td id="LC13592" class="blob-code blob-code-inner js-file-line">} <span class="pl-c"><span class="pl-c">//</span> namespace cluon</span></td>
      </tr>
      <tr>
        <td id="L13593" class="blob-num js-line-number" data-line-number="13593"></td>
        <td id="LC13593" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L13594" class="blob-num js-line-number" data-line-number="13594"></td>
        <td id="LC13594" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Copyright (C) 2017-2018  Christian Berger</span></td>
      </tr>
      <tr>
        <td id="L13595" class="blob-num js-line-number" data-line-number="13595"></td>
        <td id="LC13595" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L13596" class="blob-num js-line-number" data-line-number="13596"></td>
        <td id="LC13596" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is free software: you can redistribute it and/or modify</span></td>
      </tr>
      <tr>
        <td id="L13597" class="blob-num js-line-number" data-line-number="13597"></td>
        <td id="LC13597" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * it under the terms of the GNU General Public License as published by</span></td>
      </tr>
      <tr>
        <td id="L13598" class="blob-num js-line-number" data-line-number="13598"></td>
        <td id="LC13598" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * the Free Software Foundation, either version 3 of the License, or</span></td>
      </tr>
      <tr>
        <td id="L13599" class="blob-num js-line-number" data-line-number="13599"></td>
        <td id="LC13599" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * (at your option) any later version.</span></td>
      </tr>
      <tr>
        <td id="L13600" class="blob-num js-line-number" data-line-number="13600"></td>
        <td id="LC13600" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L13601" class="blob-num js-line-number" data-line-number="13601"></td>
        <td id="LC13601" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is distributed in the hope that it will be useful,</span></td>
      </tr>
      <tr>
        <td id="L13602" class="blob-num js-line-number" data-line-number="13602"></td>
        <td id="LC13602" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></td>
      </tr>
      <tr>
        <td id="L13603" class="blob-num js-line-number" data-line-number="13603"></td>
        <td id="LC13603" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></td>
      </tr>
      <tr>
        <td id="L13604" class="blob-num js-line-number" data-line-number="13604"></td>
        <td id="LC13604" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * GNU General Public License for more details.</span></td>
      </tr>
      <tr>
        <td id="L13605" class="blob-num js-line-number" data-line-number="13605"></td>
        <td id="LC13605" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L13606" class="blob-num js-line-number" data-line-number="13606"></td>
        <td id="LC13606" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * You should have received a copy of the GNU General Public License</span></td>
      </tr>
      <tr>
        <td id="L13607" class="blob-num js-line-number" data-line-number="13607"></td>
        <td id="LC13607" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></td>
      </tr>
      <tr>
        <td id="L13608" class="blob-num js-line-number" data-line-number="13608"></td>
        <td id="LC13608" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L13609" class="blob-num js-line-number" data-line-number="13609"></td>
        <td id="LC13609" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13610" class="blob-num js-line-number" data-line-number="13610"></td>
        <td id="LC13610" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/MessageParser.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L13611" class="blob-num js-line-number" data-line-number="13611"></td>
        <td id="LC13611" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/MetaMessage.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L13612" class="blob-num js-line-number" data-line-number="13612"></td>
        <td id="LC13612" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/MetaMessageToCPPTransformator.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L13613" class="blob-num js-line-number" data-line-number="13613"></td>
        <td id="LC13613" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/MetaMessageToProtoTransformator.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L13614" class="blob-num js-line-number" data-line-number="13614"></td>
        <td id="LC13614" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13615" class="blob-num js-line-number" data-line-number="13615"></td>
        <td id="LC13615" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;argh/argh.h&quot;</span></td>
      </tr>
      <tr>
        <td id="L13616" class="blob-num js-line-number" data-line-number="13616"></td>
        <td id="LC13616" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13617" class="blob-num js-line-number" data-line-number="13617"></td>
        <td id="LC13617" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>fstream<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L13618" class="blob-num js-line-number" data-line-number="13618"></td>
        <td id="LC13618" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>iostream<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L13619" class="blob-num js-line-number" data-line-number="13619"></td>
        <td id="LC13619" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>sstream<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L13620" class="blob-num js-line-number" data-line-number="13620"></td>
        <td id="LC13620" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>string<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L13621" class="blob-num js-line-number" data-line-number="13621"></td>
        <td id="LC13621" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13622" class="blob-num js-line-number" data-line-number="13622"></td>
        <td id="LC13622" class="blob-code blob-code-inner js-file-line"><span class="pl-k">int</span> <span class="pl-en">main</span>(<span class="pl-k">int</span> argc, <span class="pl-k">char</span> **argv) {</td>
      </tr>
      <tr>
        <td id="L13623" class="blob-num js-line-number" data-line-number="13623"></td>
        <td id="LC13623" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> std::string PROGRAM{argv[<span class="pl-c1">0</span>]}; <span class="pl-c"><span class="pl-c">//</span> NOLINT</span></td>
      </tr>
      <tr>
        <td id="L13624" class="blob-num js-line-number" data-line-number="13624"></td>
        <td id="LC13624" class="blob-code blob-code-inner js-file-line">    argh::parser <span class="pl-smi">commandline</span>(argc, argv);</td>
      </tr>
      <tr>
        <td id="L13625" class="blob-num js-line-number" data-line-number="13625"></td>
        <td id="LC13625" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13626" class="blob-num js-line-number" data-line-number="13626"></td>
        <td id="LC13626" class="blob-code blob-code-inner js-file-line">    std::string inputFilename = commandline.<span class="pl-c1">pos_args</span>().<span class="pl-c1">back</span>();</td>
      </tr>
      <tr>
        <td id="L13627" class="blob-num js-line-number" data-line-number="13627"></td>
        <td id="LC13627" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (std::string::npos != inputFilename.<span class="pl-c1">find</span>(PROGRAM)) {</td>
      </tr>
      <tr>
        <td id="L13628" class="blob-num js-line-number" data-line-number="13628"></td>
        <td id="LC13628" class="blob-code blob-code-inner js-file-line">        std::cerr &lt;&lt; PROGRAM</td>
      </tr>
      <tr>
        <td id="L13629" class="blob-num js-line-number" data-line-number="13629"></td>
        <td id="LC13629" class="blob-code blob-code-inner js-file-line">                  &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span> transforms a given message specification file in .odvd format into C++.<span class="pl-pds">&quot;</span></span> &lt;&lt; std::endl;</td>
      </tr>
      <tr>
        <td id="L13630" class="blob-num js-line-number" data-line-number="13630"></td>
        <td id="LC13630" class="blob-code blob-code-inner js-file-line">        std::cerr &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>Usage:   <span class="pl-pds">&quot;</span></span> &lt;&lt; PROGRAM &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span> [--cpp-headers] [--cpp-sources] [--cpp-add-include-file=&lt;string&gt;] [--proto] [--out=&lt;file&gt;] &lt;odvd file&gt;<span class="pl-pds">&quot;</span></span> &lt;&lt; std::endl;</td>
      </tr>
      <tr>
        <td id="L13631" class="blob-num js-line-number" data-line-number="13631"></td>
        <td id="LC13631" class="blob-code blob-code-inner js-file-line">        std::cerr &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>         <span class="pl-pds">&quot;</span></span> &lt;&lt; PROGRAM &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span> --cpp-headers &lt;odvd file&gt;<span class="pl-pds">&quot;</span></span> &lt;&lt; std::endl;</td>
      </tr>
      <tr>
        <td id="L13632" class="blob-num js-line-number" data-line-number="13632"></td>
        <td id="LC13632" class="blob-code blob-code-inner js-file-line">        std::cerr &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>         <span class="pl-pds">&quot;</span></span> &lt;&lt; PROGRAM &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span> --cpp-sources &lt;odvd file&gt;<span class="pl-pds">&quot;</span></span> &lt;&lt; std::endl;</td>
      </tr>
      <tr>
        <td id="L13633" class="blob-num js-line-number" data-line-number="13633"></td>
        <td id="LC13633" class="blob-code blob-code-inner js-file-line">        std::cerr &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>         <span class="pl-pds">&quot;</span></span> &lt;&lt; PROGRAM &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span> --cpp-headers --out=&lt;target file&gt; &lt;odvd file&gt;<span class="pl-pds">&quot;</span></span> &lt;&lt; std::endl;</td>
      </tr>
      <tr>
        <td id="L13634" class="blob-num js-line-number" data-line-number="13634"></td>
        <td id="LC13634" class="blob-code blob-code-inner js-file-line">        std::cerr &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>         <span class="pl-pds">&quot;</span></span> &lt;&lt; PROGRAM &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span> --cpp-sources --cpp-add-include-file=dir/file.hpp --out=&lt;target file&gt; &lt;odvd file&gt;<span class="pl-pds">&quot;</span></span> &lt;&lt; std::endl;</td>
      </tr>
      <tr>
        <td id="L13635" class="blob-num js-line-number" data-line-number="13635"></td>
        <td id="LC13635" class="blob-code blob-code-inner js-file-line">        std::cerr &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>         <span class="pl-pds">&quot;</span></span> &lt;&lt; PROGRAM &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span> --proto &lt;odvd file&gt;<span class="pl-pds">&quot;</span></span> &lt;&lt; std::endl;</td>
      </tr>
      <tr>
        <td id="L13636" class="blob-num js-line-number" data-line-number="13636"></td>
        <td id="LC13636" class="blob-code blob-code-inner js-file-line">        std::cerr &lt;&lt; std::endl;</td>
      </tr>
      <tr>
        <td id="L13637" class="blob-num js-line-number" data-line-number="13637"></td>
        <td id="LC13637" class="blob-code blob-code-inner js-file-line">        std::cerr &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>Example: <span class="pl-pds">&quot;</span></span> &lt;&lt; PROGRAM &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span> --cpp-headers --out=/tmp/myOutput.hpp myFile.odvd<span class="pl-pds">&quot;</span></span> &lt;&lt; std::endl;</td>
      </tr>
      <tr>
        <td id="L13638" class="blob-num js-line-number" data-line-number="13638"></td>
        <td id="LC13638" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">return</span> <span class="pl-c1">1</span>;</td>
      </tr>
      <tr>
        <td id="L13639" class="blob-num js-line-number" data-line-number="13639"></td>
        <td id="LC13639" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L13640" class="blob-num js-line-number" data-line-number="13640"></td>
        <td id="LC13640" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13641" class="blob-num js-line-number" data-line-number="13641"></td>
        <td id="LC13641" class="blob-code blob-code-inner js-file-line">    std::string outputFilename;</td>
      </tr>
      <tr>
        <td id="L13642" class="blob-num js-line-number" data-line-number="13642"></td>
        <td id="LC13642" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">commandline</span>({<span class="pl-s"><span class="pl-pds">&quot;</span>--out<span class="pl-pds">&quot;</span></span>}) &gt;&gt; outputFilename;</td>
      </tr>
      <tr>
        <td id="L13643" class="blob-num js-line-number" data-line-number="13643"></td>
        <td id="LC13643" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13644" class="blob-num js-line-number" data-line-number="13644"></td>
        <td id="LC13644" class="blob-code blob-code-inner js-file-line">    std::string CPPincludeFile;</td>
      </tr>
      <tr>
        <td id="L13645" class="blob-num js-line-number" data-line-number="13645"></td>
        <td id="LC13645" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">commandline</span>({<span class="pl-s"><span class="pl-pds">&quot;</span>--cpp-add-include-file<span class="pl-pds">&quot;</span></span>}) &gt;&gt; CPPincludeFile;</td>
      </tr>
      <tr>
        <td id="L13646" class="blob-num js-line-number" data-line-number="13646"></td>
        <td id="LC13646" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13647" class="blob-num js-line-number" data-line-number="13647"></td>
        <td id="LC13647" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> <span class="pl-k">bool</span> generateCPPHeaders = commandline[{<span class="pl-s"><span class="pl-pds">&quot;</span>--cpp-headers<span class="pl-pds">&quot;</span></span>}];</td>
      </tr>
      <tr>
        <td id="L13648" class="blob-num js-line-number" data-line-number="13648"></td>
        <td id="LC13648" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> <span class="pl-k">bool</span> generateCPPSources = commandline[{<span class="pl-s"><span class="pl-pds">&quot;</span>--cpp-sources<span class="pl-pds">&quot;</span></span>}];</td>
      </tr>
      <tr>
        <td id="L13649" class="blob-num js-line-number" data-line-number="13649"></td>
        <td id="LC13649" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> <span class="pl-k">bool</span> generateProto = commandline[{<span class="pl-s"><span class="pl-pds">&quot;</span>--proto<span class="pl-pds">&quot;</span></span>}];</td>
      </tr>
      <tr>
        <td id="L13650" class="blob-num js-line-number" data-line-number="13650"></td>
        <td id="LC13650" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13651" class="blob-num js-line-number" data-line-number="13651"></td>
        <td id="LC13651" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">int</span> retVal = <span class="pl-c1">1</span>;</td>
      </tr>
      <tr>
        <td id="L13652" class="blob-num js-line-number" data-line-number="13652"></td>
        <td id="LC13652" class="blob-code blob-code-inner js-file-line">    std::ifstream <span class="pl-smi">inputFile</span>(inputFilename, std::ios::in);</td>
      </tr>
      <tr>
        <td id="L13653" class="blob-num js-line-number" data-line-number="13653"></td>
        <td id="LC13653" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (inputFile.<span class="pl-c1">good</span>()) {</td>
      </tr>
      <tr>
        <td id="L13654" class="blob-num js-line-number" data-line-number="13654"></td>
        <td id="LC13654" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">bool</span> addHeaderForFirstProtoFile = <span class="pl-c1">true</span>;</td>
      </tr>
      <tr>
        <td id="L13655" class="blob-num js-line-number" data-line-number="13655"></td>
        <td id="LC13655" class="blob-code blob-code-inner js-file-line">        std::string <span class="pl-smi">input</span>(<span class="pl-k">static_cast</span>&lt;std::stringstream <span class="pl-k">const</span>&amp;&gt;(<span class="pl-c1">std::stringstream</span>() &lt;&lt; inputFile.<span class="pl-c1">rdbuf</span>()).<span class="pl-c1">str</span>()); <span class="pl-c"><span class="pl-c">//</span> NOLINT</span></td>
      </tr>
      <tr>
        <td id="L13656" class="blob-num js-line-number" data-line-number="13656"></td>
        <td id="LC13656" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13657" class="blob-num js-line-number" data-line-number="13657"></td>
        <td id="LC13657" class="blob-code blob-code-inner js-file-line">        cluon::MessageParser mp;</td>
      </tr>
      <tr>
        <td id="L13658" class="blob-num js-line-number" data-line-number="13658"></td>
        <td id="LC13658" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">auto</span> result = mp.<span class="pl-c1">parse</span>(input);</td>
      </tr>
      <tr>
        <td id="L13659" class="blob-num js-line-number" data-line-number="13659"></td>
        <td id="LC13659" class="blob-code blob-code-inner js-file-line">        retVal = result.<span class="pl-smi">second</span>;</td>
      </tr>
      <tr>
        <td id="L13660" class="blob-num js-line-number" data-line-number="13660"></td>
        <td id="LC13660" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13661" class="blob-num js-line-number" data-line-number="13661"></td>
        <td id="LC13661" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> Delete the content of a potentially existing file.</span></td>
      </tr>
      <tr>
        <td id="L13662" class="blob-num js-line-number" data-line-number="13662"></td>
        <td id="LC13662" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (!outputFilename.<span class="pl-c1">empty</span>()) {</td>
      </tr>
      <tr>
        <td id="L13663" class="blob-num js-line-number" data-line-number="13663"></td>
        <td id="LC13663" class="blob-code blob-code-inner js-file-line">            std::ofstream <span class="pl-smi">outputFile</span>(outputFilename, std::ios::out | std::ios::<span class="pl-c1">trunc</span>);</td>
      </tr>
      <tr>
        <td id="L13664" class="blob-num js-line-number" data-line-number="13664"></td>
        <td id="LC13664" class="blob-code blob-code-inner js-file-line">            outputFile.<span class="pl-c1">close</span>();</td>
      </tr>
      <tr>
        <td id="L13665" class="blob-num js-line-number" data-line-number="13665"></td>
        <td id="LC13665" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L13666" class="blob-num js-line-number" data-line-number="13666"></td>
        <td id="LC13666" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">for</span> (<span class="pl-k">auto</span> e : result.<span class="pl-smi">first</span>) {</td>
      </tr>
      <tr>
        <td id="L13667" class="blob-num js-line-number" data-line-number="13667"></td>
        <td id="LC13667" class="blob-code blob-code-inner js-file-line">            std::string content;</td>
      </tr>
      <tr>
        <td id="L13668" class="blob-num js-line-number" data-line-number="13668"></td>
        <td id="LC13668" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (generateCPPHeaders || generateCPPSources) {</td>
      </tr>
      <tr>
        <td id="L13669" class="blob-num js-line-number" data-line-number="13669"></td>
        <td id="LC13669" class="blob-code blob-code-inner js-file-line">                cluon::MetaMessageToCPPTransformator transformation;</td>
      </tr>
      <tr>
        <td id="L13670" class="blob-num js-line-number" data-line-number="13670"></td>
        <td id="LC13670" class="blob-code blob-code-inner js-file-line">                e.<span class="pl-c1">accept</span>([&amp;trans = transformation](<span class="pl-k">const</span> cluon::MetaMessage &amp;_mm){ trans.<span class="pl-c1">visit</span>(_mm); });</td>
      </tr>
      <tr>
        <td id="L13671" class="blob-num js-line-number" data-line-number="13671"></td>
        <td id="LC13671" class="blob-code blob-code-inner js-file-line">                std::stringstream sstr;</td>
      </tr>
      <tr>
        <td id="L13672" class="blob-num js-line-number" data-line-number="13672"></td>
        <td id="LC13672" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">if</span> (!CPPincludeFile.<span class="pl-c1">empty</span>()) {</td>
      </tr>
      <tr>
        <td id="L13673" class="blob-num js-line-number" data-line-number="13673"></td>
        <td id="LC13673" class="blob-code blob-code-inner js-file-line">                    sstr &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>#include &lt;<span class="pl-pds">&quot;</span></span> &lt;&lt; CPPincludeFile &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>&gt;<span class="pl-pds">&quot;</span></span> &lt;&lt; std::endl;</td>
      </tr>
      <tr>
        <td id="L13674" class="blob-num js-line-number" data-line-number="13674"></td>
        <td id="LC13674" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L13675" class="blob-num js-line-number" data-line-number="13675"></td>
        <td id="LC13675" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">if</span> (generateCPPHeaders) {</td>
      </tr>
      <tr>
        <td id="L13676" class="blob-num js-line-number" data-line-number="13676"></td>
        <td id="LC13676" class="blob-code blob-code-inner js-file-line">                    sstr &lt;&lt; transformation.<span class="pl-c1">contentHeader</span>();</td>
      </tr>
      <tr>
        <td id="L13677" class="blob-num js-line-number" data-line-number="13677"></td>
        <td id="LC13677" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L13678" class="blob-num js-line-number" data-line-number="13678"></td>
        <td id="LC13678" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">if</span> (generateCPPSources) {</td>
      </tr>
      <tr>
        <td id="L13679" class="blob-num js-line-number" data-line-number="13679"></td>
        <td id="LC13679" class="blob-code blob-code-inner js-file-line">                    sstr &lt;&lt; transformation.<span class="pl-c1">contentSource</span>();</td>
      </tr>
      <tr>
        <td id="L13680" class="blob-num js-line-number" data-line-number="13680"></td>
        <td id="LC13680" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L13681" class="blob-num js-line-number" data-line-number="13681"></td>
        <td id="LC13681" class="blob-code blob-code-inner js-file-line">                content = sstr.<span class="pl-c1">str</span>();</td>
      </tr>
      <tr>
        <td id="L13682" class="blob-num js-line-number" data-line-number="13682"></td>
        <td id="LC13682" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L13683" class="blob-num js-line-number" data-line-number="13683"></td>
        <td id="LC13683" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (generateProto) {</td>
      </tr>
      <tr>
        <td id="L13684" class="blob-num js-line-number" data-line-number="13684"></td>
        <td id="LC13684" class="blob-code blob-code-inner js-file-line">                cluon::MetaMessageToProtoTransformator transformation;</td>
      </tr>
      <tr>
        <td id="L13685" class="blob-num js-line-number" data-line-number="13685"></td>
        <td id="LC13685" class="blob-code blob-code-inner js-file-line">                e.<span class="pl-c1">accept</span>([&amp;trans = transformation](<span class="pl-k">const</span> cluon::MetaMessage &amp;_mm){ trans.<span class="pl-c1">visit</span>(_mm); });</td>
      </tr>
      <tr>
        <td id="L13686" class="blob-num js-line-number" data-line-number="13686"></td>
        <td id="LC13686" class="blob-code blob-code-inner js-file-line">                content = transformation.<span class="pl-c1">content</span>(addHeaderForFirstProtoFile);</td>
      </tr>
      <tr>
        <td id="L13687" class="blob-num js-line-number" data-line-number="13687"></td>
        <td id="LC13687" class="blob-code blob-code-inner js-file-line">                addHeaderForFirstProtoFile = <span class="pl-c1">false</span>;</td>
      </tr>
      <tr>
        <td id="L13688" class="blob-num js-line-number" data-line-number="13688"></td>
        <td id="LC13688" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L13689" class="blob-num js-line-number" data-line-number="13689"></td>
        <td id="LC13689" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13690" class="blob-num js-line-number" data-line-number="13690"></td>
        <td id="LC13690" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (!outputFilename.<span class="pl-c1">empty</span>()) {</td>
      </tr>
      <tr>
        <td id="L13691" class="blob-num js-line-number" data-line-number="13691"></td>
        <td id="LC13691" class="blob-code blob-code-inner js-file-line">                std::ofstream <span class="pl-smi">outputFile</span>(outputFilename, std::ios::out | std::ios::app);</td>
      </tr>
      <tr>
        <td id="L13692" class="blob-num js-line-number" data-line-number="13692"></td>
        <td id="LC13692" class="blob-code blob-code-inner js-file-line">                outputFile &lt;&lt; content &lt;&lt; std::endl;</td>
      </tr>
      <tr>
        <td id="L13693" class="blob-num js-line-number" data-line-number="13693"></td>
        <td id="LC13693" class="blob-code blob-code-inner js-file-line">                outputFile.<span class="pl-c1">close</span>();</td>
      </tr>
      <tr>
        <td id="L13694" class="blob-num js-line-number" data-line-number="13694"></td>
        <td id="LC13694" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L13695" class="blob-num js-line-number" data-line-number="13695"></td>
        <td id="LC13695" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L13696" class="blob-num js-line-number" data-line-number="13696"></td>
        <td id="LC13696" class="blob-code blob-code-inner js-file-line">                std::cout &lt;&lt; content &lt;&lt; std::endl;</td>
      </tr>
      <tr>
        <td id="L13697" class="blob-num js-line-number" data-line-number="13697"></td>
        <td id="LC13697" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L13698" class="blob-num js-line-number" data-line-number="13698"></td>
        <td id="LC13698" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L13699" class="blob-num js-line-number" data-line-number="13699"></td>
        <td id="LC13699" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L13700" class="blob-num js-line-number" data-line-number="13700"></td>
        <td id="LC13700" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L13701" class="blob-num js-line-number" data-line-number="13701"></td>
        <td id="LC13701" class="blob-code blob-code-inner js-file-line">        std::cerr &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>[<span class="pl-pds">&quot;</span></span> &lt;&lt; PROGRAM &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>] Could not find &#39;<span class="pl-pds">&quot;</span></span> &lt;&lt; inputFilename &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>&#39;.<span class="pl-pds">&quot;</span></span> &lt;&lt; std::endl;</td>
      </tr>
      <tr>
        <td id="L13702" class="blob-num js-line-number" data-line-number="13702"></td>
        <td id="LC13702" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L13703" class="blob-num js-line-number" data-line-number="13703"></td>
        <td id="LC13703" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13704" class="blob-num js-line-number" data-line-number="13704"></td>
        <td id="LC13704" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> retVal;</td>
      </tr>
      <tr>
        <td id="L13705" class="blob-num js-line-number" data-line-number="13705"></td>
        <td id="LC13705" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L13706" class="blob-num js-line-number" data-line-number="13706"></td>
        <td id="LC13706" class="blob-code blob-code-inner js-file-line">#endif</td>
      </tr>
      <tr>
        <td id="L13707" class="blob-num js-line-number" data-line-number="13707"></td>
        <td id="LC13707" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifdef</span> HAVE_CLUON_REPLAY</td>
      </tr>
      <tr>
        <td id="L13708" class="blob-num js-line-number" data-line-number="13708"></td>
        <td id="LC13708" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L13709" class="blob-num js-line-number" data-line-number="13709"></td>
        <td id="LC13709" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Copyright (C) 2018  Christian Berger</span></td>
      </tr>
      <tr>
        <td id="L13710" class="blob-num js-line-number" data-line-number="13710"></td>
        <td id="LC13710" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L13711" class="blob-num js-line-number" data-line-number="13711"></td>
        <td id="LC13711" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is free software: you can redistribute it and/or modify</span></td>
      </tr>
      <tr>
        <td id="L13712" class="blob-num js-line-number" data-line-number="13712"></td>
        <td id="LC13712" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * it under the terms of the GNU General Public License as published by</span></td>
      </tr>
      <tr>
        <td id="L13713" class="blob-num js-line-number" data-line-number="13713"></td>
        <td id="LC13713" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * the Free Software Foundation, either version 3 of the License, or</span></td>
      </tr>
      <tr>
        <td id="L13714" class="blob-num js-line-number" data-line-number="13714"></td>
        <td id="LC13714" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * (at your option) any later version.</span></td>
      </tr>
      <tr>
        <td id="L13715" class="blob-num js-line-number" data-line-number="13715"></td>
        <td id="LC13715" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L13716" class="blob-num js-line-number" data-line-number="13716"></td>
        <td id="LC13716" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is distributed in the hope that it will be useful,</span></td>
      </tr>
      <tr>
        <td id="L13717" class="blob-num js-line-number" data-line-number="13717"></td>
        <td id="LC13717" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></td>
      </tr>
      <tr>
        <td id="L13718" class="blob-num js-line-number" data-line-number="13718"></td>
        <td id="LC13718" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></td>
      </tr>
      <tr>
        <td id="L13719" class="blob-num js-line-number" data-line-number="13719"></td>
        <td id="LC13719" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * GNU General Public License for more details.</span></td>
      </tr>
      <tr>
        <td id="L13720" class="blob-num js-line-number" data-line-number="13720"></td>
        <td id="LC13720" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L13721" class="blob-num js-line-number" data-line-number="13721"></td>
        <td id="LC13721" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * You should have received a copy of the GNU General Public License</span></td>
      </tr>
      <tr>
        <td id="L13722" class="blob-num js-line-number" data-line-number="13722"></td>
        <td id="LC13722" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></td>
      </tr>
      <tr>
        <td id="L13723" class="blob-num js-line-number" data-line-number="13723"></td>
        <td id="LC13723" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L13724" class="blob-num js-line-number" data-line-number="13724"></td>
        <td id="LC13724" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13725" class="blob-num js-line-number" data-line-number="13725"></td>
        <td id="LC13725" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/cluon.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L13726" class="blob-num js-line-number" data-line-number="13726"></td>
        <td id="LC13726" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/Envelope.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L13727" class="blob-num js-line-number" data-line-number="13727"></td>
        <td id="LC13727" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/OD4Session.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L13728" class="blob-num js-line-number" data-line-number="13728"></td>
        <td id="LC13728" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13729" class="blob-num js-line-number" data-line-number="13729"></td>
        <td id="LC13729" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>cstdint<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L13730" class="blob-num js-line-number" data-line-number="13730"></td>
        <td id="LC13730" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>fstream<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L13731" class="blob-num js-line-number" data-line-number="13731"></td>
        <td id="LC13731" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>iostream<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L13732" class="blob-num js-line-number" data-line-number="13732"></td>
        <td id="LC13732" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>memory<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L13733" class="blob-num js-line-number" data-line-number="13733"></td>
        <td id="LC13733" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>string<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L13734" class="blob-num js-line-number" data-line-number="13734"></td>
        <td id="LC13734" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>thread<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L13735" class="blob-num js-line-number" data-line-number="13735"></td>
        <td id="LC13735" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13736" class="blob-num js-line-number" data-line-number="13736"></td>
        <td id="LC13736" class="blob-code blob-code-inner js-file-line"><span class="pl-k">int</span> <span class="pl-en">main</span>(<span class="pl-k">int</span> argc, <span class="pl-k">char</span> **argv) {</td>
      </tr>
      <tr>
        <td id="L13737" class="blob-num js-line-number" data-line-number="13737"></td>
        <td id="LC13737" class="blob-code blob-code-inner js-file-line">    <span class="pl-c1">int32_t</span> retCode{<span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L13738" class="blob-num js-line-number" data-line-number="13738"></td>
        <td id="LC13738" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> std::string PROGRAM{argv[<span class="pl-c1">0</span>]}; <span class="pl-c"><span class="pl-c">//</span> NOLINT</span></td>
      </tr>
      <tr>
        <td id="L13739" class="blob-num js-line-number" data-line-number="13739"></td>
        <td id="LC13739" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">auto</span> commandlineArguments = <span class="pl-c1">cluon::getCommandlineArguments</span>(argc, argv);</td>
      </tr>
      <tr>
        <td id="L13740" class="blob-num js-line-number" data-line-number="13740"></td>
        <td id="LC13740" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-c1">1</span> == argc) {</td>
      </tr>
      <tr>
        <td id="L13741" class="blob-num js-line-number" data-line-number="13741"></td>
        <td id="LC13741" class="blob-code blob-code-inner js-file-line">        std::cerr &lt;&lt; PROGRAM &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span> replays a .rec file into an OpenDaVINCI session or to stdout.<span class="pl-pds">&quot;</span></span> &lt;&lt; std::endl;</td>
      </tr>
      <tr>
        <td id="L13742" class="blob-num js-line-number" data-line-number="13742"></td>
        <td id="LC13742" class="blob-code blob-code-inner js-file-line">        std::cerr &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>Usage:   <span class="pl-pds">&quot;</span></span> &lt;&lt; PROGRAM &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span> [--cid=&lt;OpenDaVINCI session&gt;] recording.rec<span class="pl-pds">&quot;</span></span> &lt;&lt; std::endl;</td>
      </tr>
      <tr>
        <td id="L13743" class="blob-num js-line-number" data-line-number="13743"></td>
        <td id="LC13743" class="blob-code blob-code-inner js-file-line">        std::cerr &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>Example: <span class="pl-pds">&quot;</span></span> &lt;&lt; PROGRAM &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span> --cid=111 file.rec<span class="pl-pds">&quot;</span></span> &lt;&lt; std::endl;</td>
      </tr>
      <tr>
        <td id="L13744" class="blob-num js-line-number" data-line-number="13744"></td>
        <td id="LC13744" class="blob-code blob-code-inner js-file-line">        retCode = <span class="pl-c1">1</span>;</td>
      </tr>
      <tr>
        <td id="L13745" class="blob-num js-line-number" data-line-number="13745"></td>
        <td id="LC13745" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L13746" class="blob-num js-line-number" data-line-number="13746"></td>
        <td id="LC13746" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L13747" class="blob-num js-line-number" data-line-number="13747"></td>
        <td id="LC13747" class="blob-code blob-code-inner js-file-line">        std::string recFile;</td>
      </tr>
      <tr>
        <td id="L13748" class="blob-num js-line-number" data-line-number="13748"></td>
        <td id="LC13748" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">for</span> (<span class="pl-k">auto</span> e : commandlineArguments) {</td>
      </tr>
      <tr>
        <td id="L13749" class="blob-num js-line-number" data-line-number="13749"></td>
        <td id="LC13749" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (recFile.<span class="pl-c1">empty</span>() &amp;&amp; e.<span class="pl-smi">second</span>.<span class="pl-c1">empty</span>() &amp;&amp; e.<span class="pl-smi">first</span> != PROGRAM) {</td>
      </tr>
      <tr>
        <td id="L13750" class="blob-num js-line-number" data-line-number="13750"></td>
        <td id="LC13750" class="blob-code blob-code-inner js-file-line">                recFile = e.<span class="pl-smi">first</span>;</td>
      </tr>
      <tr>
        <td id="L13751" class="blob-num js-line-number" data-line-number="13751"></td>
        <td id="LC13751" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">break</span>;</td>
      </tr>
      <tr>
        <td id="L13752" class="blob-num js-line-number" data-line-number="13752"></td>
        <td id="LC13752" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L13753" class="blob-num js-line-number" data-line-number="13753"></td>
        <td id="LC13753" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L13754" class="blob-num js-line-number" data-line-number="13754"></td>
        <td id="LC13754" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13755" class="blob-num js-line-number" data-line-number="13755"></td>
        <td id="LC13755" class="blob-code blob-code-inner js-file-line">        std::fstream <span class="pl-smi">fin</span>(recFile, std::ios::in|std::ios::binary);</td>
      </tr>
      <tr>
        <td id="L13756" class="blob-num js-line-number" data-line-number="13756"></td>
        <td id="LC13756" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">if</span> (fin.<span class="pl-c1">good</span>()) {</td>
      </tr>
      <tr>
        <td id="L13757" class="blob-num js-line-number" data-line-number="13757"></td>
        <td id="LC13757" class="blob-code blob-code-inner js-file-line">            std::unique_ptr&lt;cluon::OD4Session&gt; od4;</td>
      </tr>
      <tr>
        <td id="L13758" class="blob-num js-line-number" data-line-number="13758"></td>
        <td id="LC13758" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (<span class="pl-c1">0</span> != commandlineArguments.<span class="pl-c1">count</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>cid<span class="pl-pds">&quot;</span></span>)) {</td>
      </tr>
      <tr>
        <td id="L13759" class="blob-num js-line-number" data-line-number="13759"></td>
        <td id="LC13759" class="blob-code blob-code-inner js-file-line">                <span class="pl-c"><span class="pl-c">//</span> Interface to a running OpenDaVINCI session (ignoring any incoming Envelopes).</span></td>
      </tr>
      <tr>
        <td id="L13760" class="blob-num js-line-number" data-line-number="13760"></td>
        <td id="LC13760" class="blob-code blob-code-inner js-file-line">                od4 = std::make_unique&lt;cluon::OD4Session&gt;(<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint16_t</span>&gt;(<span class="pl-c1">std::stoi</span>(commandlineArguments[<span class="pl-s"><span class="pl-pds">&quot;</span>cid<span class="pl-pds">&quot;</span></span>])), [](<span class="pl-k">auto</span>){});</td>
      </tr>
      <tr>
        <td id="L13761" class="blob-num js-line-number" data-line-number="13761"></td>
        <td id="LC13761" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L13762" class="blob-num js-line-number" data-line-number="13762"></td>
        <td id="LC13762" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13763" class="blob-num js-line-number" data-line-number="13763"></td>
        <td id="LC13763" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">int32_t</span> oldTimeStampInMicroseconds{<span class="pl-c1">0</span>};</td>
      </tr>
      <tr>
        <td id="L13764" class="blob-num js-line-number" data-line-number="13764"></td>
        <td id="LC13764" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">while</span> (fin.<span class="pl-c1">good</span>()) {</td>
      </tr>
      <tr>
        <td id="L13765" class="blob-num js-line-number" data-line-number="13765"></td>
        <td id="LC13765" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">auto</span> retVal{<span class="pl-c1">cluon::extractEnvelope</span>(fin)};</td>
      </tr>
      <tr>
        <td id="L13766" class="blob-num js-line-number" data-line-number="13766"></td>
        <td id="LC13766" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">if</span> (retVal.<span class="pl-smi">first</span>) {</td>
      </tr>
      <tr>
        <td id="L13767" class="blob-num js-line-number" data-line-number="13767"></td>
        <td id="LC13767" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">if</span> (retVal.<span class="pl-smi">second</span>.<span class="pl-c1">dataType</span>() &gt; <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L13768" class="blob-num js-line-number" data-line-number="13768"></td>
        <td id="LC13768" class="blob-code blob-code-inner js-file-line">                        <span class="pl-k">const</span> <span class="pl-k">auto</span> SAMPLETIMESTAMP{retVal.<span class="pl-smi">second</span>.<span class="pl-c1">sampleTimeStamp</span>()};</td>
      </tr>
      <tr>
        <td id="L13769" class="blob-num js-line-number" data-line-number="13769"></td>
        <td id="LC13769" class="blob-code blob-code-inner js-file-line">                        <span class="pl-k">constexpr</span> <span class="pl-c1">int32_t</span> TEN_SECONDS{<span class="pl-c1">10</span>*<span class="pl-c1">1000</span>*<span class="pl-c1">1000</span>};</td>
      </tr>
      <tr>
        <td id="L13770" class="blob-num js-line-number" data-line-number="13770"></td>
        <td id="LC13770" class="blob-code blob-code-inner js-file-line">                        <span class="pl-k">const</span> <span class="pl-c1">int32_t</span> CURRENT_TIMESTAMP_IN_MICROSECONDS{(SAMPLETIMESTAMP.<span class="pl-c1">seconds</span>()*<span class="pl-c1">1000</span>*<span class="pl-c1">1000</span> + SAMPLETIMESTAMP.<span class="pl-c1">microseconds</span>())};</td>
      </tr>
      <tr>
        <td id="L13771" class="blob-num js-line-number" data-line-number="13771"></td>
        <td id="LC13771" class="blob-code blob-code-inner js-file-line">                        <span class="pl-k">const</span> <span class="pl-c1">int32_t</span> DELAY = CURRENT_TIMESTAMP_IN_MICROSECONDS - oldTimeStampInMicroseconds;</td>
      </tr>
      <tr>
        <td id="L13772" class="blob-num js-line-number" data-line-number="13772"></td>
        <td id="LC13772" class="blob-code blob-code-inner js-file-line">                        <span class="pl-k">if</span> ( (oldTimeStampInMicroseconds &gt; <span class="pl-c1">0</span>) &amp;&amp; (DELAY &lt; TEN_SECONDS) ) {</td>
      </tr>
      <tr>
        <td id="L13773" class="blob-num js-line-number" data-line-number="13773"></td>
        <td id="LC13773" class="blob-code blob-code-inner js-file-line">                            <span class="pl-c1">std::this_thread::sleep_for</span>(std::chrono::duration&lt;<span class="pl-c1">int32_t</span>, std::micro&gt;(DELAY &gt; <span class="pl-c1">0</span> ? DELAY : <span class="pl-c1">0</span>));</td>
      </tr>
      <tr>
        <td id="L13774" class="blob-num js-line-number" data-line-number="13774"></td>
        <td id="LC13774" class="blob-code blob-code-inner js-file-line">                        }</td>
      </tr>
      <tr>
        <td id="L13775" class="blob-num js-line-number" data-line-number="13775"></td>
        <td id="LC13775" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13776" class="blob-num js-line-number" data-line-number="13776"></td>
        <td id="LC13776" class="blob-code blob-code-inner js-file-line">                        <span class="pl-k">if</span> (od4) {</td>
      </tr>
      <tr>
        <td id="L13777" class="blob-num js-line-number" data-line-number="13777"></td>
        <td id="LC13777" class="blob-code blob-code-inner js-file-line">                            <span class="pl-k">if</span> (od4-&gt;<span class="pl-c1">isRunning</span>()) {</td>
      </tr>
      <tr>
        <td id="L13778" class="blob-num js-line-number" data-line-number="13778"></td>
        <td id="LC13778" class="blob-code blob-code-inner js-file-line">                                od4-&gt;<span class="pl-c1">send</span>(<span class="pl-c1">std::move</span>(retVal.<span class="pl-smi">second</span>));</td>
      </tr>
      <tr>
        <td id="L13779" class="blob-num js-line-number" data-line-number="13779"></td>
        <td id="LC13779" class="blob-code blob-code-inner js-file-line">                            }</td>
      </tr>
      <tr>
        <td id="L13780" class="blob-num js-line-number" data-line-number="13780"></td>
        <td id="LC13780" class="blob-code blob-code-inner js-file-line">                        }</td>
      </tr>
      <tr>
        <td id="L13781" class="blob-num js-line-number" data-line-number="13781"></td>
        <td id="LC13781" class="blob-code blob-code-inner js-file-line">                        <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L13782" class="blob-num js-line-number" data-line-number="13782"></td>
        <td id="LC13782" class="blob-code blob-code-inner js-file-line">                            std::cout &lt;&lt; <span class="pl-c1">cluon::serializeEnvelope</span>(<span class="pl-c1">std::move</span>(retVal.<span class="pl-smi">second</span>));</td>
      </tr>
      <tr>
        <td id="L13783" class="blob-num js-line-number" data-line-number="13783"></td>
        <td id="LC13783" class="blob-code blob-code-inner js-file-line">                            std::cout.<span class="pl-c1">flush</span>();</td>
      </tr>
      <tr>
        <td id="L13784" class="blob-num js-line-number" data-line-number="13784"></td>
        <td id="LC13784" class="blob-code blob-code-inner js-file-line">                        }</td>
      </tr>
      <tr>
        <td id="L13785" class="blob-num js-line-number" data-line-number="13785"></td>
        <td id="LC13785" class="blob-code blob-code-inner js-file-line">                        oldTimeStampInMicroseconds = CURRENT_TIMESTAMP_IN_MICROSECONDS;</td>
      </tr>
      <tr>
        <td id="L13786" class="blob-num js-line-number" data-line-number="13786"></td>
        <td id="LC13786" class="blob-code blob-code-inner js-file-line">                    }</td>
      </tr>
      <tr>
        <td id="L13787" class="blob-num js-line-number" data-line-number="13787"></td>
        <td id="LC13787" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L13788" class="blob-num js-line-number" data-line-number="13788"></td>
        <td id="LC13788" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L13789" class="blob-num js-line-number" data-line-number="13789"></td>
        <td id="LC13789" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L13790" class="blob-num js-line-number" data-line-number="13790"></td>
        <td id="LC13790" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L13791" class="blob-num js-line-number" data-line-number="13791"></td>
        <td id="LC13791" class="blob-code blob-code-inner js-file-line">            std::cerr &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>[<span class="pl-pds">&quot;</span></span> &lt;&lt; PROGRAM &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>] &#39;<span class="pl-pds">&quot;</span></span> &lt;&lt; recFile &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>&#39; could not be opened.<span class="pl-pds">&quot;</span></span> &lt;&lt; std::endl;</td>
      </tr>
      <tr>
        <td id="L13792" class="blob-num js-line-number" data-line-number="13792"></td>
        <td id="LC13792" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L13793" class="blob-num js-line-number" data-line-number="13793"></td>
        <td id="LC13793" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L13794" class="blob-num js-line-number" data-line-number="13794"></td>
        <td id="LC13794" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> retCode;</td>
      </tr>
      <tr>
        <td id="L13795" class="blob-num js-line-number" data-line-number="13795"></td>
        <td id="LC13795" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L13796" class="blob-num js-line-number" data-line-number="13796"></td>
        <td id="LC13796" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
      <tr>
        <td id="L13797" class="blob-num js-line-number" data-line-number="13797"></td>
        <td id="LC13797" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">ifdef</span> HAVE_CLUON_LIVEFEED</td>
      </tr>
      <tr>
        <td id="L13798" class="blob-num js-line-number" data-line-number="13798"></td>
        <td id="LC13798" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">/*</span></span></td>
      </tr>
      <tr>
        <td id="L13799" class="blob-num js-line-number" data-line-number="13799"></td>
        <td id="LC13799" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * Copyright (C) 2018  Christian Berger</span></td>
      </tr>
      <tr>
        <td id="L13800" class="blob-num js-line-number" data-line-number="13800"></td>
        <td id="LC13800" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L13801" class="blob-num js-line-number" data-line-number="13801"></td>
        <td id="LC13801" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is free software: you can redistribute it and/or modify</span></td>
      </tr>
      <tr>
        <td id="L13802" class="blob-num js-line-number" data-line-number="13802"></td>
        <td id="LC13802" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * it under the terms of the GNU General Public License as published by</span></td>
      </tr>
      <tr>
        <td id="L13803" class="blob-num js-line-number" data-line-number="13803"></td>
        <td id="LC13803" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * the Free Software Foundation, either version 3 of the License, or</span></td>
      </tr>
      <tr>
        <td id="L13804" class="blob-num js-line-number" data-line-number="13804"></td>
        <td id="LC13804" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * (at your option) any later version.</span></td>
      </tr>
      <tr>
        <td id="L13805" class="blob-num js-line-number" data-line-number="13805"></td>
        <td id="LC13805" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L13806" class="blob-num js-line-number" data-line-number="13806"></td>
        <td id="LC13806" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * This program is distributed in the hope that it will be useful,</span></td>
      </tr>
      <tr>
        <td id="L13807" class="blob-num js-line-number" data-line-number="13807"></td>
        <td id="LC13807" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></td>
      </tr>
      <tr>
        <td id="L13808" class="blob-num js-line-number" data-line-number="13808"></td>
        <td id="LC13808" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></td>
      </tr>
      <tr>
        <td id="L13809" class="blob-num js-line-number" data-line-number="13809"></td>
        <td id="LC13809" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * GNU General Public License for more details.</span></td>
      </tr>
      <tr>
        <td id="L13810" class="blob-num js-line-number" data-line-number="13810"></td>
        <td id="LC13810" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> *</span></td>
      </tr>
      <tr>
        <td id="L13811" class="blob-num js-line-number" data-line-number="13811"></td>
        <td id="LC13811" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * You should have received a copy of the GNU General Public License</span></td>
      </tr>
      <tr>
        <td id="L13812" class="blob-num js-line-number" data-line-number="13812"></td>
        <td id="LC13812" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></td>
      </tr>
      <tr>
        <td id="L13813" class="blob-num js-line-number" data-line-number="13813"></td>
        <td id="LC13813" class="blob-code blob-code-inner js-file-line"><span class="pl-c"> <span class="pl-c">*/</span></span></td>
      </tr>
      <tr>
        <td id="L13814" class="blob-num js-line-number" data-line-number="13814"></td>
        <td id="LC13814" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13815" class="blob-num js-line-number" data-line-number="13815"></td>
        <td id="LC13815" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/cluon.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L13816" class="blob-num js-line-number" data-line-number="13816"></td>
        <td id="LC13816" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/MetaMessage.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L13817" class="blob-num js-line-number" data-line-number="13817"></td>
        <td id="LC13817" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/MessageParser.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L13818" class="blob-num js-line-number" data-line-number="13818"></td>
        <td id="LC13818" class="blob-code blob-code-inner js-file-line"><span class="pl-c"><span class="pl-c">//</span>#include &quot;cluon/OD4Session.hpp&quot;</span></td>
      </tr>
      <tr>
        <td id="L13819" class="blob-num js-line-number" data-line-number="13819"></td>
        <td id="LC13819" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13820" class="blob-num js-line-number" data-line-number="13820"></td>
        <td id="LC13820" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>chrono<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L13821" class="blob-num js-line-number" data-line-number="13821"></td>
        <td id="LC13821" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>fstream<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L13822" class="blob-num js-line-number" data-line-number="13822"></td>
        <td id="LC13822" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>iomanip<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L13823" class="blob-num js-line-number" data-line-number="13823"></td>
        <td id="LC13823" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>iostream<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L13824" class="blob-num js-line-number" data-line-number="13824"></td>
        <td id="LC13824" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>map<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L13825" class="blob-num js-line-number" data-line-number="13825"></td>
        <td id="LC13825" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>mutex<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L13826" class="blob-num js-line-number" data-line-number="13826"></td>
        <td id="LC13826" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>sstream<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L13827" class="blob-num js-line-number" data-line-number="13827"></td>
        <td id="LC13827" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>string<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L13828" class="blob-num js-line-number" data-line-number="13828"></td>
        <td id="LC13828" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">include</span> <span class="pl-s"><span class="pl-pds">&lt;</span>thread<span class="pl-pds">&gt;</span></span></td>
      </tr>
      <tr>
        <td id="L13829" class="blob-num js-line-number" data-line-number="13829"></td>
        <td id="LC13829" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13830" class="blob-num js-line-number" data-line-number="13830"></td>
        <td id="LC13830" class="blob-code blob-code-inner js-file-line"><span class="pl-k">enum</span> Color {</td>
      </tr>
      <tr>
        <td id="L13831" class="blob-num js-line-number" data-line-number="13831"></td>
        <td id="LC13831" class="blob-code blob-code-inner js-file-line">    RED     = <span class="pl-c1">31</span>,</td>
      </tr>
      <tr>
        <td id="L13832" class="blob-num js-line-number" data-line-number="13832"></td>
        <td id="LC13832" class="blob-code blob-code-inner js-file-line">    GREEN   = <span class="pl-c1">32</span>,</td>
      </tr>
      <tr>
        <td id="L13833" class="blob-num js-line-number" data-line-number="13833"></td>
        <td id="LC13833" class="blob-code blob-code-inner js-file-line">    YELLOW  = <span class="pl-c1">33</span>,</td>
      </tr>
      <tr>
        <td id="L13834" class="blob-num js-line-number" data-line-number="13834"></td>
        <td id="LC13834" class="blob-code blob-code-inner js-file-line">    DEFAULT = <span class="pl-c1">39</span>,</td>
      </tr>
      <tr>
        <td id="L13835" class="blob-num js-line-number" data-line-number="13835"></td>
        <td id="LC13835" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="L13836" class="blob-num js-line-number" data-line-number="13836"></td>
        <td id="LC13836" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13837" class="blob-num js-line-number" data-line-number="13837"></td>
        <td id="LC13837" class="blob-code blob-code-inner js-file-line"><span class="pl-k">void</span> <span class="pl-en">clearScreen</span>();</td>
      </tr>
      <tr>
        <td id="L13838" class="blob-num js-line-number" data-line-number="13838"></td>
        <td id="LC13838" class="blob-code blob-code-inner js-file-line"><span class="pl-k">void</span> <span class="pl-en">writeText</span>(Color c, <span class="pl-c1">uint8_t</span> y, <span class="pl-c1">uint8_t</span> x, <span class="pl-k">const</span> std::string &amp;text);</td>
      </tr>
      <tr>
        <td id="L13839" class="blob-num js-line-number" data-line-number="13839"></td>
        <td id="LC13839" class="blob-code blob-code-inner js-file-line">std::string <span class="pl-en">formatTimeStamp</span>(<span class="pl-k">const</span> cluon::data::TimeStamp &amp;ts);</td>
      </tr>
      <tr>
        <td id="L13840" class="blob-num js-line-number" data-line-number="13840"></td>
        <td id="LC13840" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13841" class="blob-num js-line-number" data-line-number="13841"></td>
        <td id="LC13841" class="blob-code blob-code-inner js-file-line"><span class="pl-k">void</span> <span class="pl-en">clearScreen</span>() {</td>
      </tr>
      <tr>
        <td id="L13842" class="blob-num js-line-number" data-line-number="13842"></td>
        <td id="LC13842" class="blob-code blob-code-inner js-file-line">    std::cout &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\033</span>[2J<span class="pl-pds">&quot;</span></span> &lt;&lt; std::endl;</td>
      </tr>
      <tr>
        <td id="L13843" class="blob-num js-line-number" data-line-number="13843"></td>
        <td id="LC13843" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L13844" class="blob-num js-line-number" data-line-number="13844"></td>
        <td id="LC13844" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13845" class="blob-num js-line-number" data-line-number="13845"></td>
        <td id="LC13845" class="blob-code blob-code-inner js-file-line"><span class="pl-k">void</span> <span class="pl-en">writeText</span>(Color c, <span class="pl-c1">uint8_t</span> y, <span class="pl-c1">uint8_t</span> x, <span class="pl-k">const</span> std::string &amp;text) {</td>
      </tr>
      <tr>
        <td id="L13846" class="blob-num js-line-number" data-line-number="13846"></td>
        <td id="LC13846" class="blob-code blob-code-inner js-file-line">    std::cout &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\033</span>[<span class="pl-pds">&quot;</span></span> &lt;&lt; +y &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>;<span class="pl-pds">&quot;</span></span> &lt;&lt; +x &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>H<span class="pl-pds">&quot;</span></span> &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\033</span>[0;<span class="pl-pds">&quot;</span></span> &lt;&lt; +c &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>m<span class="pl-pds">&quot;</span></span> &lt;&lt; text &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span><span class="pl-cce">\033</span>[0m<span class="pl-pds">&quot;</span></span> &lt;&lt; std::endl;</td>
      </tr>
      <tr>
        <td id="L13847" class="blob-num js-line-number" data-line-number="13847"></td>
        <td id="LC13847" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L13848" class="blob-num js-line-number" data-line-number="13848"></td>
        <td id="LC13848" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13849" class="blob-num js-line-number" data-line-number="13849"></td>
        <td id="LC13849" class="blob-code blob-code-inner js-file-line">std::string <span class="pl-en">formatTimeStamp</span>(<span class="pl-k">const</span> cluon::data::TimeStamp &amp;ts) {</td>
      </tr>
      <tr>
        <td id="L13850" class="blob-num js-line-number" data-line-number="13850"></td>
        <td id="LC13850" class="blob-code blob-code-inner js-file-line">    std::<span class="pl-c1">time_t</span> temp = <span class="pl-k">static_cast</span>&lt;std::<span class="pl-c1">time_t</span>&gt;(ts.<span class="pl-c1">seconds</span>());</td>
      </tr>
      <tr>
        <td id="L13851" class="blob-num js-line-number" data-line-number="13851"></td>
        <td id="LC13851" class="blob-code blob-code-inner js-file-line">    std::<span class="pl-c1">tm</span>* t = <span class="pl-c1">std::gmtime</span>(&amp;temp);</td>
      </tr>
      <tr>
        <td id="L13852" class="blob-num js-line-number" data-line-number="13852"></td>
        <td id="LC13852" class="blob-code blob-code-inner js-file-line">    std::stringstream sstr;</td>
      </tr>
      <tr>
        <td id="L13853" class="blob-num js-line-number" data-line-number="13853"></td>
        <td id="LC13853" class="blob-code blob-code-inner js-file-line">    sstr &lt;&lt; <span class="pl-c1">std::put_time</span>(t, <span class="pl-s"><span class="pl-pds">&quot;</span>%H:%M:%S<span class="pl-pds">&quot;</span></span>) &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>.<span class="pl-pds">&quot;</span></span> &lt;&lt; <span class="pl-c1">std::setfill</span>(<span class="pl-s"><span class="pl-pds">&#39;</span>0<span class="pl-pds">&#39;</span></span>) &lt;&lt; <span class="pl-c1">std::setw</span>(<span class="pl-c1">6</span>) &lt;&lt; ts.<span class="pl-c1">microseconds</span>() &lt;&lt; <span class="pl-c1">std::setw</span>(<span class="pl-c1">0</span>);</td>
      </tr>
      <tr>
        <td id="L13854" class="blob-num js-line-number" data-line-number="13854"></td>
        <td id="LC13854" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> std::string str{sstr.<span class="pl-c1">str</span>()};</td>
      </tr>
      <tr>
        <td id="L13855" class="blob-num js-line-number" data-line-number="13855"></td>
        <td id="LC13855" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> str;</td>
      </tr>
      <tr>
        <td id="L13856" class="blob-num js-line-number" data-line-number="13856"></td>
        <td id="LC13856" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L13857" class="blob-num js-line-number" data-line-number="13857"></td>
        <td id="LC13857" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13858" class="blob-num js-line-number" data-line-number="13858"></td>
        <td id="LC13858" class="blob-code blob-code-inner js-file-line"><span class="pl-k">int</span> <span class="pl-en">main</span>(<span class="pl-k">int</span> argc, <span class="pl-k">char</span> **argv) {</td>
      </tr>
      <tr>
        <td id="L13859" class="blob-num js-line-number" data-line-number="13859"></td>
        <td id="LC13859" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">int</span> retVal{<span class="pl-c1">1</span>};</td>
      </tr>
      <tr>
        <td id="L13860" class="blob-num js-line-number" data-line-number="13860"></td>
        <td id="LC13860" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">const</span> std::string PROGRAM{argv[<span class="pl-c1">0</span>]}; <span class="pl-c"><span class="pl-c">//</span> NOLINT</span></td>
      </tr>
      <tr>
        <td id="L13861" class="blob-num js-line-number" data-line-number="13861"></td>
        <td id="LC13861" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">auto</span> commandlineArguments = <span class="pl-c1">cluon::getCommandlineArguments</span>(argc, argv);</td>
      </tr>
      <tr>
        <td id="L13862" class="blob-num js-line-number" data-line-number="13862"></td>
        <td id="LC13862" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">if</span> (<span class="pl-c1">0</span> == commandlineArguments.<span class="pl-c1">count</span>(<span class="pl-s"><span class="pl-pds">&quot;</span>cid<span class="pl-pds">&quot;</span></span>)) {</td>
      </tr>
      <tr>
        <td id="L13863" class="blob-num js-line-number" data-line-number="13863"></td>
        <td id="LC13863" class="blob-code blob-code-inner js-file-line">        std::cerr &lt;&lt; PROGRAM</td>
      </tr>
      <tr>
        <td id="L13864" class="blob-num js-line-number" data-line-number="13864"></td>
        <td id="LC13864" class="blob-code blob-code-inner js-file-line">                  &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span> displays any Envelopes received from an OpenDaVINCI v4 session to stdout with optional data type resolving using a .odvd message specification.<span class="pl-pds">&quot;</span></span> &lt;&lt; std::endl;</td>
      </tr>
      <tr>
        <td id="L13865" class="blob-num js-line-number" data-line-number="13865"></td>
        <td id="LC13865" class="blob-code blob-code-inner js-file-line">        std::cerr &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>Usage:    <span class="pl-pds">&quot;</span></span> &lt;&lt; PROGRAM &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span> [--odvd=&lt;ODVD message specification file&gt;] --cid=&lt;OpenDaVINCI session&gt;<span class="pl-pds">&quot;</span></span> &lt;&lt; std::endl;</td>
      </tr>
      <tr>
        <td id="L13866" class="blob-num js-line-number" data-line-number="13866"></td>
        <td id="LC13866" class="blob-code blob-code-inner js-file-line">        std::cerr &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>Examples: <span class="pl-pds">&quot;</span></span> &lt;&lt; PROGRAM &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span> --cid=111<span class="pl-pds">&quot;</span></span> &lt;&lt; std::endl;</td>
      </tr>
      <tr>
        <td id="L13867" class="blob-num js-line-number" data-line-number="13867"></td>
        <td id="LC13867" class="blob-code blob-code-inner js-file-line">        std::cerr &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>          <span class="pl-pds">&quot;</span></span> &lt;&lt; PROGRAM &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span> --odvd=MyMessages.odvd --cid=111<span class="pl-pds">&quot;</span></span> &lt;&lt; std::endl;</td>
      </tr>
      <tr>
        <td id="L13868" class="blob-num js-line-number" data-line-number="13868"></td>
        <td id="LC13868" class="blob-code blob-code-inner js-file-line">    } <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L13869" class="blob-num js-line-number" data-line-number="13869"></td>
        <td id="LC13869" class="blob-code blob-code-inner js-file-line">        std::map&lt;<span class="pl-c1">int32_t</span>, cluon::MetaMessage&gt; scopeOfMetaMessages{};</td>
      </tr>
      <tr>
        <td id="L13870" class="blob-num js-line-number" data-line-number="13870"></td>
        <td id="LC13870" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13871" class="blob-num js-line-number" data-line-number="13871"></td>
        <td id="LC13871" class="blob-code blob-code-inner js-file-line">        <span class="pl-c"><span class="pl-c">//</span> Try parsing a supplied .odvd file to resolve numerical data types to human readable message names.</span></td>
      </tr>
      <tr>
        <td id="L13872" class="blob-num js-line-number" data-line-number="13872"></td>
        <td id="LC13872" class="blob-code blob-code-inner js-file-line">        {</td>
      </tr>
      <tr>
        <td id="L13873" class="blob-num js-line-number" data-line-number="13873"></td>
        <td id="LC13873" class="blob-code blob-code-inner js-file-line">            std::string odvdFile{commandlineArguments[<span class="pl-s"><span class="pl-pds">&quot;</span>odvd<span class="pl-pds">&quot;</span></span>]};</td>
      </tr>
      <tr>
        <td id="L13874" class="blob-num js-line-number" data-line-number="13874"></td>
        <td id="LC13874" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">if</span> (!odvdFile.<span class="pl-c1">empty</span>()) {</td>
      </tr>
      <tr>
        <td id="L13875" class="blob-num js-line-number" data-line-number="13875"></td>
        <td id="LC13875" class="blob-code blob-code-inner js-file-line">                std::fstream fin{odvdFile, std::ios::in};</td>
      </tr>
      <tr>
        <td id="L13876" class="blob-num js-line-number" data-line-number="13876"></td>
        <td id="LC13876" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">if</span> (fin.<span class="pl-c1">good</span>()) {</td>
      </tr>
      <tr>
        <td id="L13877" class="blob-num js-line-number" data-line-number="13877"></td>
        <td id="LC13877" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">const</span> std::string s{<span class="pl-k">static_cast</span>&lt;std::stringstream <span class="pl-k">const</span>&amp;&gt;(<span class="pl-c1">std::stringstream</span>() &lt;&lt; fin.<span class="pl-c1">rdbuf</span>()).<span class="pl-c1">str</span>()}; <span class="pl-c"><span class="pl-c">//</span> NOLINT</span></td>
      </tr>
      <tr>
        <td id="L13878" class="blob-num js-line-number" data-line-number="13878"></td>
        <td id="LC13878" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13879" class="blob-num js-line-number" data-line-number="13879"></td>
        <td id="LC13879" class="blob-code blob-code-inner js-file-line">                    cluon::MessageParser mp;</td>
      </tr>
      <tr>
        <td id="L13880" class="blob-num js-line-number" data-line-number="13880"></td>
        <td id="LC13880" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">auto</span> parsingResult = mp.<span class="pl-c1">parse</span>(s);</td>
      </tr>
      <tr>
        <td id="L13881" class="blob-num js-line-number" data-line-number="13881"></td>
        <td id="LC13881" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">if</span> (!parsingResult.<span class="pl-smi">first</span>.<span class="pl-c1">empty</span>()) {</td>
      </tr>
      <tr>
        <td id="L13882" class="blob-num js-line-number" data-line-number="13882"></td>
        <td id="LC13882" class="blob-code blob-code-inner js-file-line">                        <span class="pl-k">for</span> (<span class="pl-k">const</span> <span class="pl-k">auto</span> &amp;mm : parsingResult.<span class="pl-smi">first</span>) { scopeOfMetaMessages[mm.<span class="pl-c1">messageIdentifier</span>()] = mm; }</td>
      </tr>
      <tr>
        <td id="L13883" class="blob-num js-line-number" data-line-number="13883"></td>
        <td id="LC13883" class="blob-code blob-code-inner js-file-line">                        std::clog &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>Parsed <span class="pl-pds">&quot;</span></span> &lt;&lt; parsingResult.<span class="pl-smi">first</span>.<span class="pl-c1">size</span>() &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span> message(s).<span class="pl-pds">&quot;</span></span> &lt;&lt; std::endl;</td>
      </tr>
      <tr>
        <td id="L13884" class="blob-num js-line-number" data-line-number="13884"></td>
        <td id="LC13884" class="blob-code blob-code-inner js-file-line">                    }</td>
      </tr>
      <tr>
        <td id="L13885" class="blob-num js-line-number" data-line-number="13885"></td>
        <td id="LC13885" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L13886" class="blob-num js-line-number" data-line-number="13886"></td>
        <td id="LC13886" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L13887" class="blob-num js-line-number" data-line-number="13887"></td>
        <td id="LC13887" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L13888" class="blob-num js-line-number" data-line-number="13888"></td>
        <td id="LC13888" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13889" class="blob-num js-line-number" data-line-number="13889"></td>
        <td id="LC13889" class="blob-code blob-code-inner js-file-line">        std::mutex mapOfLastEnvelopesMutex;</td>
      </tr>
      <tr>
        <td id="L13890" class="blob-num js-line-number" data-line-number="13890"></td>
        <td id="LC13890" class="blob-code blob-code-inner js-file-line">        std::map&lt;<span class="pl-c1">int32_t</span>, std::map&lt;<span class="pl-c1">uint32_t</span>, cluon::data::Envelope&gt; &gt; mapOfLastEnvelopes;</td>
      </tr>
      <tr>
        <td id="L13891" class="blob-num js-line-number" data-line-number="13891"></td>
        <td id="LC13891" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13892" class="blob-num js-line-number" data-line-number="13892"></td>
        <td id="LC13892" class="blob-code blob-code-inner js-file-line">        cluon::OD4Session <span class="pl-smi">od4Session</span>(<span class="pl-k">static_cast</span>&lt;<span class="pl-c1">uint16_t</span>&gt;(<span class="pl-c1">std::stoi</span>(commandlineArguments[<span class="pl-s"><span class="pl-pds">&quot;</span>cid<span class="pl-pds">&quot;</span></span>])),</td>
      </tr>
      <tr>
        <td id="L13893" class="blob-num js-line-number" data-line-number="13893"></td>
        <td id="LC13893" class="blob-code blob-code-inner js-file-line">            [&amp;](cluon::data::Envelope &amp;&amp;envelope) noexcept {</td>
      </tr>
      <tr>
        <td id="L13894" class="blob-num js-line-number" data-line-number="13894"></td>
        <td id="LC13894" class="blob-code blob-code-inner js-file-line">            std::lock_guard&lt;std::mutex&gt; <span class="pl-c1">lck</span>(mapOfLastEnvelopesMutex);</td>
      </tr>
      <tr>
        <td id="L13895" class="blob-num js-line-number" data-line-number="13895"></td>
        <td id="LC13895" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13896" class="blob-num js-line-number" data-line-number="13896"></td>
        <td id="LC13896" class="blob-code blob-code-inner js-file-line">            <span class="pl-c"><span class="pl-c">//</span> Update mapping for tupel (dataType, senderStamp) --&gt; Envelope.</span></td>
      </tr>
      <tr>
        <td id="L13897" class="blob-num js-line-number" data-line-number="13897"></td>
        <td id="LC13897" class="blob-code blob-code-inner js-file-line">            std::map&lt;<span class="pl-c1">uint32_t</span>, cluon::data::Envelope&gt; entry = mapOfLastEnvelopes[envelope.<span class="pl-c1">dataType</span>()];</td>
      </tr>
      <tr>
        <td id="L13898" class="blob-num js-line-number" data-line-number="13898"></td>
        <td id="LC13898" class="blob-code blob-code-inner js-file-line">            entry[envelope.<span class="pl-c1">senderStamp</span>()] = envelope;</td>
      </tr>
      <tr>
        <td id="L13899" class="blob-num js-line-number" data-line-number="13899"></td>
        <td id="LC13899" class="blob-code blob-code-inner js-file-line">            mapOfLastEnvelopes[envelope.<span class="pl-c1">dataType</span>()] = entry;</td>
      </tr>
      <tr>
        <td id="L13900" class="blob-num js-line-number" data-line-number="13900"></td>
        <td id="LC13900" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13901" class="blob-num js-line-number" data-line-number="13901"></td>
        <td id="LC13901" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">clearScreen</span>();</td>
      </tr>
      <tr>
        <td id="L13902" class="blob-num js-line-number" data-line-number="13902"></td>
        <td id="LC13902" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13903" class="blob-num js-line-number" data-line-number="13903"></td>
        <td id="LC13903" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">const</span> <span class="pl-k">auto</span> LAST_TIME_POINT{envelope.<span class="pl-c1">received</span>().<span class="pl-c1">seconds</span>() * <span class="pl-c1">1000</span> * <span class="pl-c1">1000</span> + envelope.<span class="pl-c1">received</span>().<span class="pl-c1">microseconds</span>()};</td>
      </tr>
      <tr>
        <td id="L13904" class="blob-num js-line-number" data-line-number="13904"></td>
        <td id="LC13904" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13905" class="blob-num js-line-number" data-line-number="13905"></td>
        <td id="LC13905" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">uint8_t</span> y = <span class="pl-c1">1</span>;</td>
      </tr>
      <tr>
        <td id="L13906" class="blob-num js-line-number" data-line-number="13906"></td>
        <td id="LC13906" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">const</span> <span class="pl-c1">uint8_t</span> x = <span class="pl-c1">1</span>;</td>
      </tr>
      <tr>
        <td id="L13907" class="blob-num js-line-number" data-line-number="13907"></td>
        <td id="LC13907" class="blob-code blob-code-inner js-file-line">            <span class="pl-k">for</span> (<span class="pl-k">auto</span> e : mapOfLastEnvelopes) {</td>
      </tr>
      <tr>
        <td id="L13908" class="blob-num js-line-number" data-line-number="13908"></td>
        <td id="LC13908" class="blob-code blob-code-inner js-file-line">                <span class="pl-k">for</span> (<span class="pl-k">auto</span> ee : e.<span class="pl-smi">second</span>) {</td>
      </tr>
      <tr>
        <td id="L13909" class="blob-num js-line-number" data-line-number="13909"></td>
        <td id="LC13909" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">auto</span> env = ee.<span class="pl-smi">second</span>;</td>
      </tr>
      <tr>
        <td id="L13910" class="blob-num js-line-number" data-line-number="13910"></td>
        <td id="LC13910" class="blob-code blob-code-inner js-file-line">                    std::stringstream sstr;</td>
      </tr>
      <tr>
        <td id="L13911" class="blob-num js-line-number" data-line-number="13911"></td>
        <td id="LC13911" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13912" class="blob-num js-line-number" data-line-number="13912"></td>
        <td id="LC13912" class="blob-code blob-code-inner js-file-line">                    sstr &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>Envelope: <span class="pl-pds">&quot;</span></span> &lt;&lt; <span class="pl-c1">std::setfill</span>(<span class="pl-s"><span class="pl-pds">&#39;</span> <span class="pl-pds">&#39;</span></span>) &lt;&lt; <span class="pl-c1">std::setw</span>(<span class="pl-c1">5</span>) &lt;&lt; env.<span class="pl-c1">dataType</span>() &lt;&lt; <span class="pl-c1">std::setw</span>(<span class="pl-c1">0</span>) &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>/<span class="pl-pds">&quot;</span></span> &lt;&lt; env.<span class="pl-c1">senderStamp</span>() &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>; <span class="pl-pds">&quot;</span></span> &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>sent: <span class="pl-pds">&quot;</span></span> &lt;&lt; <span class="pl-c1">formatTimeStamp</span>(env.<span class="pl-c1">sent</span>()) &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>; sample: <span class="pl-pds">&quot;</span></span> &lt;&lt; <span class="pl-c1">formatTimeStamp</span>(env.<span class="pl-c1">sampleTimeStamp</span>());</td>
      </tr>
      <tr>
        <td id="L13913" class="blob-num js-line-number" data-line-number="13913"></td>
        <td id="LC13913" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">if</span> (scopeOfMetaMessages.<span class="pl-c1">count</span>(env.<span class="pl-c1">dataType</span>()) &gt; <span class="pl-c1">0</span>) {</td>
      </tr>
      <tr>
        <td id="L13914" class="blob-num js-line-number" data-line-number="13914"></td>
        <td id="LC13914" class="blob-code blob-code-inner js-file-line">                        sstr &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>; <span class="pl-pds">&quot;</span></span> &lt;&lt; scopeOfMetaMessages[env.<span class="pl-c1">dataType</span>()].<span class="pl-c1">messageName</span>();</td>
      </tr>
      <tr>
        <td id="L13915" class="blob-num js-line-number" data-line-number="13915"></td>
        <td id="LC13915" class="blob-code blob-code-inner js-file-line">                    }</td>
      </tr>
      <tr>
        <td id="L13916" class="blob-num js-line-number" data-line-number="13916"></td>
        <td id="LC13916" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">else</span> {</td>
      </tr>
      <tr>
        <td id="L13917" class="blob-num js-line-number" data-line-number="13917"></td>
        <td id="LC13917" class="blob-code blob-code-inner js-file-line">                        sstr &lt;&lt; <span class="pl-s"><span class="pl-pds">&quot;</span>; unknown data type<span class="pl-pds">&quot;</span></span>;</td>
      </tr>
      <tr>
        <td id="L13918" class="blob-num js-line-number" data-line-number="13918"></td>
        <td id="LC13918" class="blob-code blob-code-inner js-file-line">                    }</td>
      </tr>
      <tr>
        <td id="L13919" class="blob-num js-line-number" data-line-number="13919"></td>
        <td id="LC13919" class="blob-code blob-code-inner js-file-line">                    sstr &lt;&lt; std::endl;</td>
      </tr>
      <tr>
        <td id="L13920" class="blob-num js-line-number" data-line-number="13920"></td>
        <td id="LC13920" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13921" class="blob-num js-line-number" data-line-number="13921"></td>
        <td id="LC13921" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">const</span> <span class="pl-k">auto</span> AGE{LAST_TIME_POINT - (env.<span class="pl-c1">received</span>().<span class="pl-c1">seconds</span>() * <span class="pl-c1">1000</span> * <span class="pl-c1">1000</span> + env.<span class="pl-c1">received</span>().<span class="pl-c1">microseconds</span>())};</td>
      </tr>
      <tr>
        <td id="L13922" class="blob-num js-line-number" data-line-number="13922"></td>
        <td id="LC13922" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13923" class="blob-num js-line-number" data-line-number="13923"></td>
        <td id="LC13923" class="blob-code blob-code-inner js-file-line">                    Color c = Color::DEFAULT;</td>
      </tr>
      <tr>
        <td id="L13924" class="blob-num js-line-number" data-line-number="13924"></td>
        <td id="LC13924" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">if</span> (AGE &lt;= <span class="pl-c1">2</span> * <span class="pl-c1">1000</span> * <span class="pl-c1">1000</span>) { c = Color::GREEN; }</td>
      </tr>
      <tr>
        <td id="L13925" class="blob-num js-line-number" data-line-number="13925"></td>
        <td id="LC13925" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">if</span> (AGE &gt; <span class="pl-c1">2</span> * <span class="pl-c1">1000</span> * <span class="pl-c1">1000</span> &amp;&amp; AGE &lt;= <span class="pl-c1">5</span> * <span class="pl-c1">1000</span> * <span class="pl-c1">1000</span>) { c = Color::YELLOW; }</td>
      </tr>
      <tr>
        <td id="L13926" class="blob-num js-line-number" data-line-number="13926"></td>
        <td id="LC13926" class="blob-code blob-code-inner js-file-line">                    <span class="pl-k">if</span> (AGE &gt; <span class="pl-c1">5</span> * <span class="pl-c1">1000</span> * <span class="pl-c1">1000</span>) { c = Color::RED; }</td>
      </tr>
      <tr>
        <td id="L13927" class="blob-num js-line-number" data-line-number="13927"></td>
        <td id="LC13927" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13928" class="blob-num js-line-number" data-line-number="13928"></td>
        <td id="LC13928" class="blob-code blob-code-inner js-file-line">                    <span class="pl-c1">writeText</span>(c, y++, x, sstr.<span class="pl-c1">str</span>());</td>
      </tr>
      <tr>
        <td id="L13929" class="blob-num js-line-number" data-line-number="13929"></td>
        <td id="LC13929" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="L13930" class="blob-num js-line-number" data-line-number="13930"></td>
        <td id="LC13930" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="L13931" class="blob-num js-line-number" data-line-number="13931"></td>
        <td id="LC13931" class="blob-code blob-code-inner js-file-line">        });</td>
      </tr>
      <tr>
        <td id="L13932" class="blob-num js-line-number" data-line-number="13932"></td>
        <td id="LC13932" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13933" class="blob-num js-line-number" data-line-number="13933"></td>
        <td id="LC13933" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">using</span> <span class="pl-k">namespace</span> <span class="pl-en">std</span>::literals::chrono_literals<span class="pl-k">;</span> <span class="pl-c"><span class="pl-c">//</span> NOLINT</span></td>
      </tr>
      <tr>
        <td id="L13934" class="blob-num js-line-number" data-line-number="13934"></td>
        <td id="LC13934" class="blob-code blob-code-inner js-file-line">        <span class="pl-k">while</span> (od4Session.<span class="pl-c1">isRunning</span>()) {</td>
      </tr>
      <tr>
        <td id="L13935" class="blob-num js-line-number" data-line-number="13935"></td>
        <td id="LC13935" class="blob-code blob-code-inner js-file-line">            <span class="pl-c1">std::this_thread::sleep_for</span>(1s);</td>
      </tr>
      <tr>
        <td id="L13936" class="blob-num js-line-number" data-line-number="13936"></td>
        <td id="LC13936" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="L13937" class="blob-num js-line-number" data-line-number="13937"></td>
        <td id="LC13937" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="L13938" class="blob-num js-line-number" data-line-number="13938"></td>
        <td id="LC13938" class="blob-code blob-code-inner js-file-line">        retVal = <span class="pl-c1">0</span>;</td>
      </tr>
      <tr>
        <td id="L13939" class="blob-num js-line-number" data-line-number="13939"></td>
        <td id="LC13939" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="L13940" class="blob-num js-line-number" data-line-number="13940"></td>
        <td id="LC13940" class="blob-code blob-code-inner js-file-line">    <span class="pl-k">return</span> retVal;</td>
      </tr>
      <tr>
        <td id="L13941" class="blob-num js-line-number" data-line-number="13941"></td>
        <td id="LC13941" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="L13942" class="blob-num js-line-number" data-line-number="13942"></td>
        <td id="LC13942" class="blob-code blob-code-inner js-file-line">#<span class="pl-k">endif</span></td>
      </tr>
</table>

  <div class="BlobToolbar position-absolute js-file-line-actions dropdown js-menu-container js-select-menu d-none" aria-hidden="true">
    <button class="btn-octicon ml-0 px-2 p-0 bg-white border border-gray-dark rounded-1 dropdown-toggle js-menu-target" id="js-file-line-action-button" type="button" aria-expanded="false" aria-haspopup="true" aria-label="Inline file action toolbar" aria-controls="inline-file-actions">
      <svg class="octicon octicon-kebab-horizontal" viewBox="0 0 13 16" version="1.1" width="13" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M1.5 9a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm5 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm5 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3z"/></svg>
    </button>
    <div class="dropdown-menu-content js-menu-content" id="inline-file-actions">
      <ul class="BlobToolbar-dropdown dropdown-menu dropdown-menu-se mt-2">
        <li><clipboard-copy class="dropdown-item" style="cursor:pointer;" id="js-copy-lines" data-original-text="Copy lines">Copy lines</clipboard-copy></li>
        <li><clipboard-copy class="dropdown-item" id="js-copy-permalink" style="cursor:pointer;" data-original-text="Copy permalink">Copy permalink</clipboard-copy></li>
        <li><a class="dropdown-item js-update-url-with-hash" id="js-view-git-blame" href="/chrberger/libcluon/blame/c84d2d1792cd5c22499bd76abd5b68c061bd14a8/headeronly/cluon-complete-v0.0.63.hpp">View git blame</a></li>
          <li><a class="dropdown-item" id="js-new-issue" href="/chrberger/libcluon/issues/new">Open new issue</a></li>
      </ul>
    </div>
  </div>

  </div>

  </div>

  <button type="button" data-facebox="#jump-to-line" data-facebox-class="linejump" data-hotkey="l" class="d-none">Jump to Line</button>
  <div id="jump-to-line" style="display:none">
    <!-- '"` --><!-- </textarea></xmp> --></option></form><form class="js-jump-to-line-form" action="" accept-charset="UTF-8" method="get"><input name="utf8" type="hidden" value="&#x2713;" />
      <input class="form-control linejump-input js-jump-to-line-field" type="text" placeholder="Jump to line&hellip;" aria-label="Jump to line" autofocus>
      <button type="submit" class="btn">Go</button>
</form>  </div>


  </div>
  <div class="modal-backdrop js-touch-events"></div>
</div>

    </div>
  </div>

  </div>

      
<div class="footer container-lg px-3" role="contentinfo">
  <div class="position-relative d-flex flex-justify-between pt-6 pb-2 mt-6 f6 text-gray border-top border-gray-light ">
    <ul class="list-style-none d-flex flex-wrap ">
      <li class="mr-3">&copy; 2018 <span title="0.51644s from unicorn-210931060-tvfst">GitHub</span>, Inc.</li>
        <li class="mr-3"><a data-ga-click="Footer, go to terms, text:terms" href="https://github.com/site/terms">Terms</a></li>
        <li class="mr-3"><a data-ga-click="Footer, go to privacy, text:privacy" href="https://github.com/site/privacy">Privacy</a></li>
        <li class="mr-3"><a href="https://help.github.com/articles/github-security/" data-ga-click="Footer, go to security, text:security">Security</a></li>
        <li class="mr-3"><a href="https://status.github.com/" data-ga-click="Footer, go to status, text:status">Status</a></li>
        <li><a data-ga-click="Footer, go to help, text:help" href="https://help.github.com">Help</a></li>
    </ul>

    <a aria-label="Homepage" title="GitHub" class="footer-octicon" href="https://github.com">
      <svg height="24" class="octicon octicon-mark-github" viewBox="0 0 16 16" version="1.1" width="24" aria-hidden="true"><path fill-rule="evenodd" d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0 0 16 8c0-4.42-3.58-8-8-8z"/></svg>
</a>
   <ul class="list-style-none d-flex flex-wrap ">
        <li class="mr-3"><a data-ga-click="Footer, go to contact, text:contact" href="https://github.com/contact">Contact GitHub</a></li>
      <li class="mr-3"><a href="https://developer.github.com" data-ga-click="Footer, go to api, text:api">API</a></li>
      <li class="mr-3"><a href="https://training.github.com" data-ga-click="Footer, go to training, text:training">Training</a></li>
      <li class="mr-3"><a href="https://shop.github.com" data-ga-click="Footer, go to shop, text:shop">Shop</a></li>
        <li class="mr-3"><a data-ga-click="Footer, go to blog, text:blog" href="https://github.com/blog">Blog</a></li>
        <li><a data-ga-click="Footer, go to about, text:about" href="https://github.com/about">About</a></li>

    </ul>
  </div>
  <div class="d-flex flex-justify-center pb-6">
    <span class="f6 text-gray-light"></span>
  </div>
</div>



  <div id="ajax-error-message" class="ajax-error-message flash flash-error">
    <svg class="octicon octicon-alert" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M8.865 1.52c-.18-.31-.51-.5-.87-.5s-.69.19-.87.5L.275 13.5c-.18.31-.18.69 0 1 .19.31.52.5.87.5h13.7c.36 0 .69-.19.86-.5.17-.31.18-.69.01-1L8.865 1.52zM8.995 13h-2v-2h2v2zm0-3h-2V6h2v4z"/></svg>
    <button type="button" class="flash-close js-ajax-error-dismiss" aria-label="Dismiss error">
      <svg class="octicon octicon-x" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.48 8l3.75 3.75-1.48 1.48L6 9.48l-3.75 3.75-1.48-1.48L4.52 8 .77 4.25l1.48-1.48L6 6.52l3.75-3.75 1.48 1.48z"/></svg>
    </button>
    You can't perform that action at this time.
  </div>


    <script crossorigin="anonymous" type="application/javascript" src="https://assets-cdn.github.com/assets/compat-432e5bb0f7cc942dbf63a7c74de5da3c.js"></script>
    <script crossorigin="anonymous" type="application/javascript" src="https://assets-cdn.github.com/assets/frameworks-ce858f170674242460aa85a78297b46a.js"></script>
    
    <script crossorigin="anonymous" async="async" type="application/javascript" src="https://assets-cdn.github.com/assets/github-40b229dbdf1a74f3a0041573d3b0ef72.js"></script>
    
    
    
    
  <div class="js-stale-session-flash stale-session-flash flash flash-warn flash-banner d-none">
    <svg class="octicon octicon-alert" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M8.865 1.52c-.18-.31-.51-.5-.87-.5s-.69.19-.87.5L.275 13.5c-.18.31-.18.69 0 1 .19.31.52.5.87.5h13.7c.36 0 .69-.19.86-.5.17-.31.18-.69.01-1L8.865 1.52zM8.995 13h-2v-2h2v2zm0-3h-2V6h2v4z"/></svg>
    <span class="signed-in-tab-flash">You signed in with another tab or window. <a href="">Reload</a> to refresh your session.</span>
    <span class="signed-out-tab-flash">You signed out in another tab or window. <a href="">Reload</a> to refresh your session.</span>
  </div>
  <div class="facebox" id="facebox" style="display:none;">
  <div class="facebox-popup">
    <div class="facebox-content" role="dialog" aria-labelledby="facebox-header" aria-describedby="facebox-description">
    </div>
    <button type="button" class="facebox-close js-facebox-close" aria-label="Close modal">
      <svg class="octicon octicon-x" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.48 8l3.75 3.75-1.48 1.48L6 9.48l-3.75 3.75-1.48-1.48L4.52 8 .77 4.25l1.48-1.48L6 6.52l3.75-3.75 1.48 1.48z"/></svg>
    </button>
  </div>
</div>

  <div class="Popover js-hovercard-content position-absolute" style="display: none; outline: none;" tabindex="0">
  <div class="Popover-message Popover-message--bottom-left Popover-message--large Box box-shadow-large" style="width:360px;">
  </div>
</div>

<div id="hovercard-aria-description" class="sr-only">
  Press h to open a hovercard with more details.
</div>


  </body>
</html>

